'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactRouterDom = require('react-router-dom');
var PropTypes = require('prop-types');
var nextId = require('react-id-generator');
var intl = require('react-intl-universal');
var Select = require('react-select');
var HeatMap = require('react-heatmap-grid');
var recharts = require('recharts');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var nextId__default = /*#__PURE__*/_interopDefaultLegacy(nextId);
var intl__default = /*#__PURE__*/_interopDefaultLegacy(intl);
var Select__default = /*#__PURE__*/_interopDefaultLegacy(Select);
var HeatMap__default = /*#__PURE__*/_interopDefaultLegacy(HeatMap);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$3d() {
  _extends$3d = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$3d.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var BTN_SIZE_DEFAULT = "SIZE_DEFAULT";
var BTN_SIZE_BIG = "SIZE_BIG";
var BTN_SIZE_JUMBO = "SIZE_JUMBO";
var BTN_TYPE_DEFAULT = "TYPE_DEFAULT";
var BTN_TYPE_LINK = "TYPE_LINK";
var BTN_TYPE_SOFT = "TYPE_SOFT";
var BTN_TYPE_OUTLINE = "TYPE_OUTLINE";
var BTN_TYPE_GHOST = "TYPE_GHOST";
var BTN_TINT_PRIMARY = "TINT_PRIMARY";
var BTN_TINT_SECONDARY = "TINT_SECONDARY";
var BTN_TINT_SUCCESS = "TINT_SUCCESS";
var BTN_TINT_WARNING = "TINT_WARNING";
var BTN_TINT_DANGER = "TINT_DANGER";
var BTN_TINT_INFO = "TINT_INFO";
var BTN_TINT_DARK = "TINT_DARK";
var BTN_TINT_LIGHT = "TINT_LIGHT";
var BTN_TINT_INDIGO = "TINT_INDIGO";
var BTN_TINT_NAVY = "TINT_NAVY";
/**
 * Standard button for primary actions.
 */

var ActionButton = /*#__PURE__*/function (_Component) {
  _inherits(ActionButton, _Component);

  var _super = _createSuper(ActionButton);

  function ActionButton() {
    _classCallCheck(this, ActionButton);

    return _super.apply(this, arguments);
  }

  _createClass(ActionButton, [{
    key: "sizeToClass",
    value: function sizeToClass(size) {
      if (!size) return "btn-xs";

      switch (size) {
        case BTN_SIZE_DEFAULT:
          return "btn-xs";

        case BTN_SIZE_BIG:
          return "btn-sm";

        case BTN_SIZE_JUMBO:
          return "btn-md";

        default:
          return "btn-xs";
      }
    }
  }, {
    key: "typeToClass",
    value: function typeToClass(type, tint) {
      if (type === BTN_TYPE_LINK) return "btn-link";
      var prefix = "";

      switch (type) {
        case BTN_TYPE_SOFT:
          prefix = "btn-soft-";
          break;

        case BTN_TYPE_OUTLINE:
          prefix = "btn-outline-";
          break;

        case BTN_TYPE_GHOST:
          prefix = "btn-ghost-";
          break;

        default:
          prefix = "btn-";
      }

      if (!tint) return prefix + "primary";

      switch (tint) {
        case BTN_TINT_PRIMARY:
          return prefix + "primary";

        case BTN_TINT_SECONDARY:
          return prefix + "secondary";

        case BTN_TINT_SUCCESS:
          return prefix + "success";

        case BTN_TINT_WARNING:
          return prefix + "warning";

        case BTN_TINT_DANGER:
          return prefix + "danger";

        case BTN_TINT_INFO:
          return prefix + "info";

        case BTN_TINT_DARK:
          return prefix + "dark";

        case BTN_TINT_LIGHT:
          return prefix + "light";

        case BTN_TINT_INDIGO:
          return prefix + "indigo";

        case BTN_TINT_NAVY:
          return prefix + "navy";

        default:
          return prefix + "primary";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          icon = _this$props.icon,
          chevron = _this$props.chevron,
          running = _this$props.running,
          disabled = _this$props.disabled,
          rounded = _this$props.rounded;
      var _this$props2 = this.props,
          className = _this$props2.className,
          type = _this$props2.type,
          size = _this$props2.size,
          tint = _this$props2.tint;
      var iconUI = this.renderIcon(icon);
      var titleUI = this.renderTitle(icon, title);
      var chevronUI = this.renderChevron(chevron);
      var outerClass = className || '';
      var typeClass = this.typeToClass(type, tint);
      var sizeClass = this.sizeToClass(size);
      var roundedClass = rounded === true ? "btn-pill" : "";
      var computedClass = "btn ".concat(typeClass, " ").concat(sizeClass, " ").concat(roundedClass, " ").concat(outerClass);

      if (running && running === true) {
        return /*#__PURE__*/React__default["default"].createElement("button", {
          type: "button",
          className: computedClass,
          disabled: true
        }, this.renderRunning(), titleUI, chevronUI);
      } else if (disabled && disabled === true) {
        return /*#__PURE__*/React__default["default"].createElement("button", {
          type: "button",
          className: computedClass,
          disabled: true
        }, iconUI, titleUI, chevronUI);
      } else {
        return this.renderButton(computedClass, iconUI, titleUI, chevronUI);
      }
    }
  }, {
    key: "renderButton",
    value: function renderButton(computedClass, iconUI, titleUI, chevronUI) {
      var _this$props3 = this.props,
          route = _this$props3.route,
          url = _this$props3.url,
          action = _this$props3.action;

      if (route) {
        return /*#__PURE__*/React__default["default"].createElement(reactRouterDom.Link, {
          to: route,
          className: computedClass
        }, iconUI, titleUI, chevronUI);
      } else if (url) {
        return /*#__PURE__*/React__default["default"].createElement("a", {
          href: url,
          className: computedClass
        }, iconUI, titleUI, chevronUI);
      } else {
        return /*#__PURE__*/React__default["default"].createElement("button", {
          type: "button",
          onClick: action,
          className: computedClass
        }, iconUI, titleUI, chevronUI);
      }
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(icon, title) {
      var titleClass = this.props.titleClass;
      var titleText = title || '';
      var margin = icon ? "ml-1" : "";

      if (titleClass || margin) {
        return /*#__PURE__*/React__default["default"].createElement("span", {
          className: "".concat(titleClass, " ").concat(margin)
        }, titleText);
      }

      return titleText;
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon) {
      if (!icon) return ''; // If user specifies the category (fas, far, fab), use the full text

      if (icon.startsWith("fab") || icon.startsWith("far") || icon.startsWith("fas")) return /*#__PURE__*/React__default["default"].createElement("i", {
        className: "".concat(icon)
      }); // Otherwise assume the standard category (fas)

      return /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fas ".concat(icon)
      });
    }
  }, {
    key: "renderChevron",
    value: function renderChevron(chevron) {
      return chevron ? /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fas ".concat(chevron, " ml-1")
      }) : '';
    }
  }, {
    key: "renderRunning",
    value: function renderRunning() {
      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "spinner-border spinner-border-xs mr-1",
        role: "status",
        "aria-hidden": "true"
      });
    }
  }]);

  return ActionButton;
}(React.Component);
ActionButton.propTypes = {
  title: PropTypes__default["default"].any,
  icon: PropTypes__default["default"].string,
  chevron: PropTypes__default["default"].string,
  running: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  rounded: PropTypes__default["default"].bool,
  type: PropTypes__default["default"].oneOf([BTN_TYPE_DEFAULT, BTN_TYPE_SOFT, BTN_TYPE_GHOST, BTN_TYPE_OUTLINE, BTN_TYPE_LINK]),
  size: PropTypes__default["default"].oneOf([BTN_SIZE_DEFAULT, BTN_SIZE_BIG, BTN_SIZE_JUMBO]),
  tint: PropTypes__default["default"].oneOf([BTN_TINT_PRIMARY, BTN_TINT_SECONDARY, BTN_TINT_SUCCESS, BTN_TINT_WARNING, BTN_TINT_INFO, BTN_TINT_DANGER, BTN_TINT_DARK, BTN_TINT_LIGHT, BTN_TINT_NAVY, BTN_TINT_INDIGO]),
  className: PropTypes__default["default"].string,
  route: PropTypes__default["default"].string,
  url: PropTypes__default["default"].string,
  action: PropTypes__default["default"].func
};

var DropdownButton = /*#__PURE__*/function (_ActionButton) {
  _inherits(DropdownButton, _ActionButton);

  var _super = _createSuper(DropdownButton);

  /*sizeToClass(size) {
      if (!size) return "btn-xs";
      switch (size) {
          case BTN_SIZE_DEFAULT: return "btn-xs";
          case BTN_SIZE_BIG: return "btn-sm";
          case BTN_SIZE_JUMBO: return "btn-md";
          default: return "btn-xs";
      }
  }
   typeToClass(type, tint) {
      if (type === BTN_TYPE_LINK)
          return "btn-link";
       let prefix= "";
      switch (type) {
          case BTN_TYPE_SOFT: prefix = "btn-soft-"; break;
          case BTN_TYPE_OUTLINE: prefix = "btn-outline-"; break;
          case BTN_TYPE_GHOST: prefix = "btn-ghost-"; break;
          default: prefix = "btn-";
      }
       if (!tint) return prefix + "primary";
      switch (tint) {
          case BTN_TINT_PRIMARY: return prefix + "primary";
          case BTN_TINT_SECONDARY: return prefix + "secondary";
          case BTN_TINT_SUCCESS: return prefix + "success";
          case BTN_TINT_WARNING: return prefix + "warning";
          case BTN_TINT_DANGER: return prefix + "danger";
          case BTN_TINT_INFO: return prefix + "info";
          case BTN_TINT_DARK: return prefix + "dark";
          case BTN_TINT_LIGHT: return prefix + "light";
          case BTN_TINT_INDIGO: return prefix + "indigo";
          case BTN_TINT_NAVY: return prefix + "navy";
          default: return prefix + "primary";
      }
  }
   render() {
      const {title, icon, disabled, className, id, type, tint, size, rounded } = this.props;
      const cName = className || '';
      const iconUI = this.renderIcon(icon);
      const titleUI = this.renderTitle(icon, title);
      const outerClass = className || '';
      const typeClass = this.typeToClass(type, tint);
      const sizeClass = this.sizeToClass(size);
       const roundedClass = rounded === true ? "btn-pill" : "";
       const computedClass = `btn dropdown-toggle ${typeClass} ${sizeClass} ${roundedClass} ${outerClass}`;
      return (
          <div className={cName}>
              <button id={id}
                  disabled={disabled}
                  className={computedClass}
                  role="button"
                  data-toggle="dropdown"
                  aria-haspopup="true"
                  aria-expanded="false">
                  {iconUI}{titleUI}
              </button>
               <div className="dropdown-menu" aria-labelledby={id}>
                  {React.Children
                      .toArray(this.props.children)
                      .map((child,idx) => this.renderMenuItem(child, idx))}
              </div>
          </div>
      );
  }
  renderTitle(icon, title) {
      const {titleClass} = this.props;
      const titleText = title || '';
       const margin = icon ? "ml-1" : "";
      if (titleClass || margin) {
          return <span className={`${titleClass} ${margin}`}>{titleText}</span>
      }
      return titleText;
  }
   renderIcon(icon) {
      if (!icon) return '';
       // If user specifies the category (fas, far, fab), use the full text
      if (icon.startsWith("fab") || icon.startsWith("far") || icon.startsWith("fas"))
          return <i className={`${icon}`}/>;
       // Otherwise assume the standard category (fas)
      return <i className={`fas ${icon}`}/>;
  }
   renderChevron(chevron) {
      return chevron ? <i className={`fas ${chevron} ml-1`}/> : '';
  }
   renderMenuItem(child, idx) {
      const {onItemSelected} = this.props;
      return (
          <button className="dropdown-item"
              onClick={() => {
                          if (onItemSelected)
                              onItemSelected(idx)
                      }}>
              {child}
          </button>
      );
  }*/
  function DropdownButton(props, context) {
    var _this;

    _classCallCheck(this, DropdownButton);

    _this = _super.call(this, props, context);
    var nid = nextId__default["default"]();
    _this.invokerId = "dropdown_invoker_" + nid;
    _this.targetId = "dropdown_target_" + nid;
    return _this;
  } // Always show the chevron as chevron down


  _createClass(DropdownButton, [{
    key: "renderChevron",
    value: function renderChevron(chevron) {
      return /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-chevron-down ml-1"
      });
    }
  }, {
    key: "renderButton",
    value: function renderButton(computedClass, iconUI, titleUI, chevronUI) {
      var _this2 = this;

      var disabled = this.props.disabled;
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("button", {
        id: this.invokerId,
        disabled: disabled,
        className: computedClass,
        role: "button",
        "data-toggle": "dropdown",
        "aria-haspopup": "true",
        "aria-expanded": "false"
      }, iconUI, titleUI, chevronUI), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "dropdown-menu",
        "aria-labelledby": this.invokerId
      }, React__default["default"].Children.toArray(this.props.children).map(function (child, idx) {
        return _this2.renderMenuItem(child, idx);
      })));
    }
  }, {
    key: "renderMenuItem",
    value: function renderMenuItem(child, idx) {
      var onItemSelected = this.props.onItemSelected;
      return /*#__PURE__*/React__default["default"].createElement("button", {
        className: "dropdown-item",
        onClick: function onClick(event) {
          event.preventDefault();
          if (onItemSelected) onItemSelected(idx);
        }
      }, child);
    }
  }]);

  return DropdownButton;
}(ActionButton);

var _path$1u;

function _extends$3c() { _extends$3c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3c.apply(this, arguments); }

function SvgShieldCheck24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3c({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1u || (_path$1u = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.19 1.36l-7 3.11C3.47 4.79 3 5.51 3 6.3V11c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V6.3c0-.79-.47-1.51-1.19-1.83l-7-3.11c-.51-.23-1.11-.23-1.62 0zm-1.9 14.93L6.7 13.7a.996.996 0 111.41-1.41L10 14.17l5.88-5.88a.996.996 0 111.41 1.41l-6.59 6.59a.996.996 0 01-1.41 0z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1t;

function _extends$3b() { _extends$3b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3b.apply(this, arguments); }

function SvgShieldWarn24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3b({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1t || (_path$1t = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.19 1.36c.51-.23 1.11-.23 1.62 0h0l7 3.11C20.53 4.79 21 5.51 21 6.3h0V11c0 5.55-3.84 10.74-9 12-5.16-1.26-9-6.45-9-12h0V6.3c0-.79.47-1.51 1.19-1.83h0zM13 15h-2v2h2v-2zm-1-8c-.55 0-1 .45-1 1h0v4c0 .55.45 1 1 1s1-.45 1-1h0V8c0-.55-.45-1-1-1z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1s;

function _extends$3a() { _extends$3a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3a.apply(this, arguments); }

function SvgShieldError24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3a({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1s || (_path$1s = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.19 1.36c.51-.23 1.11-.23 1.62 0h0l7 3.11C20.53 4.79 21 5.51 21 6.3h0V11c0 5.55-3.84 10.74-9 12-5.16-1.26-9-6.45-9-12h0V6.3c0-.79.47-1.51 1.19-1.83h0zM9.11 7.7A.996.996 0 107.7 9.11h0L10.59 12 7.7 14.89a.996.996 0 101.41 1.41h0L12 13.41l2.89 2.89c.39.39 1.02.39 1.41 0 .38-.39.38-1.03 0-1.41h0L13.41 12l2.89-2.89a.996.996 0 10-1.41-1.41h0L12 10.59z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1r;

function _extends$39() { _extends$39 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$39.apply(this, arguments); }

function SvgShieldSync24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$39({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1r || (_path$1r = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.19 1.36c.51-.23 1.11-.23 1.62 0h0l7 3.11C20.53 4.79 21 5.51 21 6.3h0V11c0 5.55-3.84 10.74-9 12-5.16-1.26-9-6.45-9-12h0V6.3c0-.79.47-1.51 1.19-1.83h0zM6.435 9.502A6.415 6.415 0 006 11.842c0 3.503 2.733 6.341 6.107 6.341v1.42c0 .356.412.53.649.277l2.13-2.212a.403.403 0 000-.563l-2.13-2.212c-.237-.245-.65-.071-.65.286v1.419c-2.526 0-4.58-2.133-4.58-4.757 0-.626.115-1.237.337-1.784a.783.783 0 00-.176-.824c-.39-.404-1.046-.262-1.252.27zM11.25 4.12L9.114 6.332a.403.403 0 000 .563l2.128 2.212c.244.245.656.071.656-.286V7.402c2.525 0 4.577 2.133 4.577 4.757 0 .626-.115 1.237-.336 1.784a.783.783 0 00.175.824c.39.404 1.045.262 1.251-.27A6.42 6.42 0 0018 12.16c0-3.504-2.73-6.342-6.102-6.342v-1.42c0-.356-.412-.53-.648-.277z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1q;

function _extends$38() { _extends$38 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$38.apply(this, arguments); }

function SvgCircleCheck24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$38({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1q || (_path$1q = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zm-2.71-5.71L6.7 13.7a.996.996 0 111.41-1.41L10 14.17l5.88-5.88a.996.996 0 111.41 1.41l-6.59 6.59a.996.996 0 01-1.41 0z",
    stroke: "current",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$1p;

function _extends$37() { _extends$37 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$37.apply(this, arguments); }

function SvgCircleWarn24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$37({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1p || (_path$1p = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm1 13h-2v2h2v-2zm-1-8c-.55 0-1 .45-1 1h0v4c0 .55.45 1 1 1s1-.45 1-1h0V8c0-.55-.45-1-1-1z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1o;

function _extends$36() { _extends$36 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$36.apply(this, arguments); }

function SvgCircleError24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$36({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1o || (_path$1o = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zM9.11 7.7A.996.996 0 107.7 9.11h0L10.59 12 7.7 14.89a.996.996 0 101.41 1.41h0L12 13.41l2.89 2.89c.39.39 1.02.39 1.41 0 .38-.39.38-1.03 0-1.41h0L13.41 12l2.89-2.89a.996.996 0 10-1.41-1.41h0L12 10.59z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1n;

function _extends$35() { _extends$35 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$35.apply(this, arguments); }

function SvgCircleSync24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$35({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1n || (_path$1n = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zM6.435 9.502A6.415 6.415 0 006 11.842c0 3.503 2.733 6.341 6.107 6.341v1.42c0 .356.412.53.649.277l2.13-2.212a.403.403 0 000-.563l-2.13-2.212c-.237-.245-.65-.071-.65.286v1.419c-2.526 0-4.58-2.133-4.58-4.757 0-.626.115-1.237.337-1.784a.783.783 0 00-.176-.824c-.39-.404-1.046-.262-1.252.27zM11.25 4.12L9.114 6.332a.403.403 0 000 .563l2.128 2.212c.244.245.656.071.656-.286V7.402c2.525 0 4.577 2.133 4.577 4.757 0 .626-.115 1.237-.336 1.784a.783.783 0 00.175.824c.39.404 1.045.262 1.251-.27A6.42 6.42 0 0018 12.16c0-3.504-2.73-6.342-6.102-6.342v-1.42c0-.356-.412-.53-.648-.277z",
    fillRule: "nonzero",
    stroke: "current",
    fill: "current"
  })));
}

var _path$1m;

function _extends$34() { _extends$34 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$34.apply(this, arguments); }

function SvgInfoBlack24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$34({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1m || (_path$1m = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.988 1.998c-5.514 0-9.99 4.476-9.99 9.99s4.476 9.99 9.99 9.99 9.99-4.476 9.99-9.99-4.476-9.99-9.99-9.99zm.999 14.985h-1.998v-5.994h1.998v5.994zm0-7.992h-1.998V6.993h1.998v1.998z",
    fill: "current"
  })));
}

var _path$1l, _path2$6;

function _extends$33() { _extends$33 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$33.apply(this, arguments); }

function SvgAddShieldBlack24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$33({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1l || (_path$1l = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16.704 9.504a8.44 8.44 0 013.624.821V5.131a2.416 2.416 0 00-1.57-2.259L11.51.154a2.398 2.398 0 00-1.692 0L2.57 2.872A2.432 2.432 0 001 5.143v5.678C1 16.92 5.12 22.61 10.664 24c.036-.012.06-.024.097-.024a8.45 8.45 0 01-2.513-6.016 8.45 8.45 0 018.456-8.456z"
  })), _path2$6 || (_path2$6 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16.704 11.92a6.042 6.042 0 00-6.04 6.04 6.042 6.042 0 006.04 6.04 6.042 6.042 0 006.04-6.04 6.042 6.042 0 00-6.04-6.04zm3.02 6.644h-2.416v2.416a.598.598 0 01-.604.604.598.598 0 01-.604-.604v-2.416h-2.416a.598.598 0 01-.604-.604c0-.338.266-.604.604-.604H16.1V14.94c0-.338.266-.604.604-.604.338 0 .604.266.604.604v2.416h2.416c.338 0 .604.266.604.604a.598.598 0 01-.604.604z"
  })));
}

var SI_SHAPE_CIRCLE = "circle";
var SI_SHAPE_SHIELD = "shield";
var SI_SHAPE_INFO = "info";
var SI_SHAPE_PLUS = "plus";
var SI_STATUS_SUCCESS = "success";
var SI_STATUS_WARNING = "warning";
var SI_STATUS_ERROR = "error";
var SI_STATUS_SYNC = "sync";
var SI_STATUS_DANGER = "danger";
var defaultIconSize$9 = "24px";

var StatusIcon = /*#__PURE__*/function (_Component) {
  _inherits(StatusIcon, _Component);

  var _super = _createSuper(StatusIcon);

  function StatusIcon() {
    _classCallCheck(this, StatusIcon);

    return _super.apply(this, arguments);
  }

  _createClass(StatusIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          shape = _this$props.shape,
          status = _this$props.status,
          size = _this$props.size,
          pulse = _this$props.pulse;
      if (shape !== SI_SHAPE_CIRCLE && shape !== SI_SHAPE_SHIELD && shape !== SI_SHAPE_INFO && shape !== SI_SHAPE_PLUS) return "";
      if (status !== SI_STATUS_SUCCESS && status !== SI_STATUS_WARNING && status !== SI_STATUS_DANGER && status !== SI_STATUS_ERROR && status !== SI_STATUS_SYNC) return "";
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$9;

      if (shape === SI_SHAPE_CIRCLE) {
        return /*#__PURE__*/React__default["default"].createElement("figure", {
          className: "svg-icon ".concat(className)
        }, this.renderCircle(status, iconSize, pulse));
      } else if (shape === SI_SHAPE_SHIELD) {
        return /*#__PURE__*/React__default["default"].createElement("figure", {
          className: "svg-icon ".concat(className)
        }, this.renderShield(status, iconSize, pulse));
      } else if (shape === SI_SHAPE_INFO) {
        return /*#__PURE__*/React__default["default"].createElement("figure", {
          className: "svg-icon ".concat(className)
        }, this.renderInfo(status, iconSize, pulse));
      } else if (shape === SI_SHAPE_PLUS) {
        return /*#__PURE__*/React__default["default"].createElement("figure", {
          className: "svg-icon ".concat(className)
        }, this.renderPlus(status, iconSize, pulse));
      } else {
        return "";
      }
    }
  }, {
    key: "renderCircle",
    value: function renderCircle(status, iconSize, pulse) {
      if (!status) return "";

      switch (status) {
        case SI_STATUS_SUCCESS:
          return /*#__PURE__*/React__default["default"].createElement(SvgCircleCheck24, {
            className: "fill-success ".concat(pulse ? "btn-pulse-success bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_WARNING:
          return /*#__PURE__*/React__default["default"].createElement(SvgCircleWarn24, {
            className: "fill-warning ".concat(pulse ? "btn-pulse-warning bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_ERROR:
        case SI_STATUS_DANGER:
          return /*#__PURE__*/React__default["default"].createElement(SvgCircleError24, {
            className: "fill-danger ".concat(pulse ? "btn-pulse-danger bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_SYNC:
          return /*#__PURE__*/React__default["default"].createElement(SvgCircleSync24, {
            className: "fill-primary ".concat(pulse ? "btn-pulse-primary bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }, {
    key: "renderShield",
    value: function renderShield(status, iconSize, pulse) {
      if (!status) return "";

      switch (status) {
        case SI_STATUS_SUCCESS:
          return /*#__PURE__*/React__default["default"].createElement(SvgShieldCheck24, {
            className: "fill-success ".concat(pulse ? "btn-pulse-success bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_WARNING:
          return /*#__PURE__*/React__default["default"].createElement(SvgShieldWarn24, {
            className: "fill-warning ".concat(pulse ? "btn-pulse-warning bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_ERROR:
        case SI_STATUS_DANGER:
          return /*#__PURE__*/React__default["default"].createElement(SvgShieldError24, {
            className: "fill-danger ".concat(pulse ? "btn-pulse-danger bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_SYNC:
          return /*#__PURE__*/React__default["default"].createElement(SvgShieldSync24, {
            className: "fill-primary ".concat(pulse ? "btn-pulse-primary bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }, {
    key: "renderInfo",
    value: function renderInfo(status, iconSize, pulse) {
      if (!status) return "";

      switch (status) {
        case SI_STATUS_SUCCESS:
          return /*#__PURE__*/React__default["default"].createElement(SvgInfoBlack24, {
            className: "fill-success ".concat(pulse ? "btn-pulse-success bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_WARNING:
          return /*#__PURE__*/React__default["default"].createElement(SvgInfoBlack24, {
            className: "fill-warning ".concat(pulse ? "btn-pulse-warning bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_ERROR:
        case SI_STATUS_DANGER:
          return /*#__PURE__*/React__default["default"].createElement(SvgInfoBlack24, {
            className: "fill-danger ".concat(pulse ? "btn-pulse-danger bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_SYNC:
          return /*#__PURE__*/React__default["default"].createElement(SvgInfoBlack24, {
            className: "fill-primary ".concat(pulse ? "btn-pulse-primary bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }, {
    key: "renderPlus",
    value: function renderPlus(status, iconSize, pulse) {
      if (!status) return "";

      switch (status) {
        case SI_STATUS_SUCCESS:
          return /*#__PURE__*/React__default["default"].createElement(SvgAddShieldBlack24, {
            className: "fill-success ".concat(pulse ? "btn-pulse-success bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_WARNING:
          return /*#__PURE__*/React__default["default"].createElement(SvgAddShieldBlack24, {
            className: "fill-warning ".concat(pulse ? "btn-pulse-warning bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_ERROR:
        case SI_STATUS_DANGER:
          return /*#__PURE__*/React__default["default"].createElement(SvgAddShieldBlack24, {
            className: "fill-danger ".concat(pulse ? "btn-pulse-danger bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        case SI_STATUS_SYNC:
          return /*#__PURE__*/React__default["default"].createElement(SvgAddShieldBlack24, {
            className: "fill-primary ".concat(pulse ? "btn-pulse-primary bg-transparent" : ""),
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return StatusIcon;
}(React.Component);
StatusIcon.propTypes = {
  shape: PropTypes__default["default"].oneOf([SI_SHAPE_CIRCLE, SI_SHAPE_SHIELD, SI_SHAPE_INFO, SI_SHAPE_PLUS]),
  status: PropTypes__default["default"].oneOf([SI_STATUS_SUCCESS, SI_STATUS_DANGER, SI_STATUS_WARNING, SI_STATUS_ERROR, SI_STATUS_SYNC]),
  size: PropTypes__default["default"].string,
  pulse: PropTypes__default["default"].bool
};

var _path$1k;

function _extends$32() { _extends$32 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$32.apply(this, arguments); }

function SvgBoltEmpty(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$32({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1k || (_path$1k = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.73 0c.86 0 1.461.82 1.234 1.623l-.038.114-3.204 8.558h2.908c.95 0 1.556.981 1.164 1.822l-.057.109-6.68 11.453c-.316.537-1.107.357-1.19-.221l-.006-.1v-9.202H7.287A1.291 1.291 0 016.007 13L6 12.87V1.286C6 .623 6.509.073 7.156.007L7.286 0h8.443zm0 1.2H7.286a.091.091 0 00-.08.054l-.007.033v11.582c0 .034.024.066.054.08l.033.007h3.774l-.001 8.335 5.64-9.669c.028-.049.01-.1-.034-.12l-.036-.007h-4.64l3.816-10.188a.078.078 0 00-.045-.1L15.73 1.2z"
  })));
}

var _path$1j;

function _extends$31() { _extends$31 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$31.apply(this, arguments); }

function SvgBolt$1(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$31({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1j || (_path$1j = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6 1.287v11.582c0 .708.58 1.287 1.287 1.287H9.86v9.202c0 .656.862.888 1.197.321l6.679-11.453a1.28 1.28 0 00-1.107-1.93h-2.908l3.204-8.559A1.28 1.28 0 0015.729 0H7.287A1.29 1.29 0 006 1.287z"
  })));
}

var _path$1i;

function _extends$30() { _extends$30 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$30.apply(this, arguments); }

function SvgBoltHalf(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$30({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1i || (_path$1i = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.73 0c.86 0 1.461.82 1.234 1.623l-.038.114-3.204 8.558h2.908c.95 0 1.556.981 1.164 1.822l-.057.109-6.68 11.453c-.316.537-1.107.357-1.19-.221l-.006-.1v-9.202H7.287A1.291 1.291 0 016.007 13L6 12.87V1.286C6 .623 6.509.073 7.156.007L7.286 0h8.443zm-4.67 12.956v8.335l5.64-9.669c.028-.049.01-.1-.034-.12l-.036-.007-4.672.008-.897 1.453z"
  })));
}

var _path$1h;

function _extends$2$() { _extends$2$ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2$.apply(this, arguments); }

function SvgDotEmpty(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2$({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1h || (_path$1h = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 3c4.965 0 9 4.035 9 9s-4.035 9-9 9-9-4.035-9-9 4.035-9 9-9zm0-3C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0z"
  })));
}

var _path$1g;

function _extends$2_() { _extends$2_ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2_.apply(this, arguments); }

function SvgDot(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2_({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1g || (_path$1g = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12s5.373 12 12 12z"
  })));
}

var _path$1f;

function _extends$2Z() { _extends$2Z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2Z.apply(this, arguments); }

function SvgDotHalf(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2Z({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1f || (_path$1f = /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12.052 3v18C16.993 20.972 21 16.948 21 12s-4.007-8.972-8.948-9zM0 12C0 5.37 5.37 0 12 0s12 5.37 12 12-5.37 12-12 12S0 18.63 0 12z"
  })));
}

var _g$1J, _defs$7;

function _extends$2Y() { _extends$2Y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2Y.apply(this, arguments); }

function SvgHeartEmpty(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2Y({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1J || (_g$1J = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#heart_empty_svg__clip0)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.189 2.188C18.022.03 14.11 1.037 12 3.508 9.89 1.037 5.98.018 2.812 2.188 1.132 3.34.077 5.283.005 7.334-.163 11.99 3.963 15.72 10.26 21.441l.12.108a2.394 2.394 0 003.227-.012l.132-.12c6.297-5.71 10.412-9.44 10.256-14.095-.072-2.039-1.128-3.982-2.807-5.134zM12.12 19.654l-.12.12-.12-.12c-5.71-5.17-9.476-8.59-9.476-12.056 0-2.399 1.8-4.198 4.198-4.198 1.848 0 3.647 1.187 4.283 2.83h2.243c.624-1.643 2.423-2.83 4.27-2.83 2.4 0 4.199 1.8 4.199 4.198 0 3.467-3.767 6.886-9.477 12.056z"
  }))), _defs$7 || (_defs$7 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "heart_empty_svg__clip0"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _g$1I, _defs$6;

function _extends$2X() { _extends$2X = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2X.apply(this, arguments); }

function SvgHeart(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2X({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1I || (_g$1I = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#heart_svg__clip0)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13.619 21.549a2.394 2.394 0 01-3.227-.012l-.132-.12C3.963 15.719-.152 11.989.004 7.334.076 5.295 1.12 3.34 2.811 2.188 5.978.03 9.888 1.037 12 3.508c2.11-2.471 6.021-3.49 9.188-1.32 1.692 1.152 2.735 3.107 2.807 5.146.168 4.655-3.958 8.385-10.256 14.107l-.12.108z"
  }))), _defs$6 || (_defs$6 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "heart_svg__clip0"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _path$1e;

function _extends$2W() { _extends$2W = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2W.apply(this, arguments); }

function SvgHeartHalf(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2W({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1e || (_path$1e = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.812 2.188C5.979.018 9.889 1.037 12 3.508c2.111-2.471 6.022-3.479 9.189-1.32 1.68 1.152 2.735 3.095 2.807 5.134.156 4.655-3.959 8.385-10.256 14.095l-.132.12c-.912.84-2.315.84-3.227.012l-.12-.108C3.963 15.719-.163 11.989.005 7.334c.072-2.05 1.128-3.994 2.807-5.146zM17.398 3.4c-1.847 0-3.646 1.187-4.27 2.83H12v13.544l.12-.12c5.71-5.17 9.477-8.59 9.477-12.056 0-2.399-1.8-4.198-4.199-4.198zm-5.61-.936L12 23.124z"
  })));
}

var _path$1d;

function _extends$2V() { _extends$2V = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2V.apply(this, arguments); }

function SvgStarEmpty(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2V({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1d || (_path$1d = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.724 8.68l-6.786-.589-2.65-6.24c-.477-1.135-2.103-1.135-2.58 0l-2.65 6.254-6.772.575c-1.234.098-1.739 1.64-.8 2.454l5.146 4.459L4.09 22.21c-.28 1.206 1.024 2.159 2.09 1.514l5.818-3.505 5.819 3.519c1.065.645 2.37-.309 2.089-1.514l-1.542-6.632 5.145-4.46c.94-.812.45-2.355-.785-2.453zm-10.726 8.918L6.726 20.78l1.402-6.002-4.655-4.038 6.141-.532 2.384-5.651 2.398 5.665 6.14.532-4.654 4.038 1.402 6.002-5.286-3.197z"
  })));
}

var _path$1c;

function _extends$2U() { _extends$2U = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2U.apply(this, arguments); }

function SvgStar$1(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2U({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1c || (_path$1c = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.997 19.734l6.685 4.035c.492.297 1.1-.142.97-.698l-1.771-7.604 5.896-5.108a.65.65 0 00-.375-1.138l-7.772-.66-3.039-7.163a.644.644 0 00-1.19 0L8.364 8.562l-7.772.66a.647.647 0 00-.362 1.137l5.897 5.108-1.772 7.604c-.13.556.479.995.97.698l6.673-4.035z"
  })));
}

var _path$1b;

function _extends$2T() { _extends$2T = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2T.apply(this, arguments); }

function SvgStarHalf(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2T({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1b || (_path$1b = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.724 8.68l-6.786-.589-2.65-6.24c-.477-1.135-2.103-1.135-2.58 0l-2.65 6.254-6.772.575c-1.234.098-1.739 1.64-.8 2.454l5.146 4.459L4.09 22.21c-.28 1.206 1.024 2.159 2.09 1.514l5.818-3.505 5.819 3.519c1.065.645 2.37-.309 2.089-1.514l-1.542-6.632 5.145-4.46c.94-.812.45-2.355-.785-2.453zm-10.726 8.918V4.558l2.398 5.665 6.14.532-4.654 4.038 1.402 6.002-5.286-3.197z"
  })));
}

/*
 * Copyright (c) Fing. All rights reserved.
 */
// WEBSITES
var FACEBOOK = "https://www.facebook.com/";
var TWITTER = "https://www.twitter.com/";
var TIKTOK = "https://www.tiktok.com/";
var LINKEDIN = "https://www.linkedin.com/";
var YOUTUBE = "https://www.youtube.com/";
var INSTAGRAM = "https://www.instagram.com/";
var PINTEREST = "https://www.pinterest.com/"; // CDN

var DEFAULT_CDN = "https://cdn.fing.io/images"; // Tint

var TINT_PRIMARY = "primary";
var TINT_SECONDARY = "secondary";
var TINT_SUCCESS = "success";
var TINT_WARNING = "warning";
var TINT_DANGER = "danger";
var TINT_NAVY = "navy";
var TINT_WHITE = "white";
var TINT_DARK = "dark";
var TINT_PURPLE = "purple";
var TINT_INDIGO = "indigo";
var TINT_PINK = "pink";
var TINT_LIGHT = "light"; // Network Types

var NT_WIFI = "WIFI";
var NT_ETHERNET = "ETHERNET";
var NT_ETH_USB = "USB_ETHERNET";
var NT_ETH_WIFI = "ETH_WIFI";
var NT_FINGBOX_V1 = "FINGBOX_V1";
var NT_FINGBOX_V2 = "FINGBOX_V2";
var NT_IP = "IP";
var NT_ALL_TYPES = [NT_WIFI, NT_ETHERNET, NT_ETH_USB, NT_ETH_WIFI, NT_FINGBOX_V1, NT_FINGBOX_V2, NT_IP]; // Tool

var TOOL_PING = "TOOL_PING";
var TOOL_BLOCK = "TOOL_BLOCK";
var TOOL_WAKE_ON_LAN = "TOOL_WAKE_ON_LAN";
var TOOL_TRACEROUTE = "TOOL_TRACEROUTE";
var TOOL_WIFI_SCANNER = "TOOL_WIFI_SCANNER";
var TOOL_DNS_LOOKUP = "TOOL_DNS_LOOKUP";
var TOOL_MAC_LOOKUP = "TOOL_MAC_LOOKUP";
var TOOL_DHCP_DISCOVERY = "TOOL_DHCP_DISCOVERY";
var TOOL_DNS_BENCHMARK = "TOOL_DNS_BENCHMARK";
var TOOL_FIND_OPEN_PORTS = "TOOL_FIND_OPEN_PORTS";
var TOOL_ROUTER_VULNERABILITY_CHECK = "TOOL_ROUTER_VULNERABILITY_CHECK";
var TOOL_FIND_HIDDEN_CAMERAS = "TOOL_FIND_HIDDEN_CAMERAS";
var TOOL_SPEED_TEST = "TOOL_SPEED_TEST";
var TOOL_OUTAGE_DETECTOR = "TOOL_OUTAGE_DETECTOR";
var TOOL_ISP_COMPARISON = "TOOL_ISP_COMPARISON";
var TOOL_PAUSE = "TOOL_PAUSE";
var TOOL_CONFIRMED = "TOOL_CONFIRMED";
var TOOL_EXPORT = "TOOL_EXPORT";
var TOOL_ALL_TYPES = [TOOL_EXPORT, TOOL_CONFIRMED, TOOL_BLOCK, TOOL_PAUSE, TOOL_PING, TOOL_WAKE_ON_LAN, TOOL_TRACEROUTE, TOOL_WIFI_SCANNER, TOOL_DNS_LOOKUP, TOOL_MAC_LOOKUP, TOOL_DHCP_DISCOVERY, TOOL_DNS_BENCHMARK, TOOL_FIND_OPEN_PORTS, TOOL_ROUTER_VULNERABILITY_CHECK, TOOL_FIND_HIDDEN_CAMERAS, TOOL_SPEED_TEST, TOOL_OUTAGE_DETECTOR, TOOL_ISP_COMPARISON]; // Network Contexts

var NC_HOME = "HOME";
var NC_OFFICE = "OFFICE";
var NC_RENTAL = "RENTAL";
var NC_PUBLIC = "PUBLIC";
var NC_ALL_TYPES = [NC_HOME, NC_OFFICE, NC_RENTAL, NC_PUBLIC]; // AchievementIcon

var AI_VIDEO = "VIDEO";
var AI_GAME = "GAME";
var AI_WORK = "WORK";
var AI_SOCIAL = "SOCIAL";
var AI_CALL = "CALL";
var AI_ALL_TYPES = [AI_GAME, AI_WORK, AI_SOCIAL, AI_VIDEO, AI_CALL]; // SupportIcon

var SI_TWITTER = "TWITTER";
var SI_PHONE = "PHONE";
var SI_FACEBOOK = "FACEBOOK";
var SI_WEBSITE = "WEBSITE";
var SI_ALL_TYPES = [SI_PHONE, SI_FACEBOOK, SI_TWITTER, SI_WEBSITE]; // TrendIcon

var TI_UP = 'TREND_UP';
var TI_UP_FAST = 'TREND_UP_FAST';
var TI_DOWN = 'TREND_DOWN';
var TI_DOWN_FAST = 'TREND_DOWN_FAST';
var TI_ALL_TYPES = [TI_UP, TI_DOWN, TI_UP_FAST, TI_DOWN_FAST]; // Generic

var GEN_QUESTION = "QUESTION";
var GEN_LOCATION = "LOCATION";
var GEN_UP = "UP";
var GEN_DOWN = "DOWN";
var GEN_QUESTION_CIRCLE = "QUESTION_CIRCLE";
var GEN_INFO = "INFO";
var GEN_TREND_UP = "TREND_UP";
var GEN_TREND_DOWN = "TREND_DOWN";
var GEN_TREND_FLAT = "TREND_FLAT";
var GEN_BADGE = "BADGE";
var GEN_FLAG = "FLAG";
var GEN_FLAG_OUT = "FLAG_OUT";
var GEN_ALL_TYPES = [GEN_FLAG_OUT, GEN_FLAG, GEN_BADGE, GEN_TREND_UP, GEN_TREND_DOWN, GEN_TREND_FLAT, GEN_QUESTION_CIRCLE, GEN_QUESTION, GEN_UP, GEN_DOWN, GEN_LOCATION, GEN_INFO]; // Contact Types

var CT_FAMILY = "FAMILY";
var CT_FAMILY_HIM = "HIM";
var CT_FAMILY_HER = "HER";
var CT_FAMILY_KID = "KID";
var CT_FAMILY_RELATIVE = "RELATIVE";
var CT_FAMILY_PET = "PET";
var CT_FAMILY_PET_DOG = "DOG";
var CT_FAMILY_PET_CAT = "CAT";
var CT_COLLEAGUE = "COLLEAGUE";
var CT_COLLEAGUE_STAFF = "STAFF";
var CT_COLLEAGUE_CONTRACTOR = "CONTRACTOR";
var CT_COLLEAGUE_VISITOR = "VISITOR";
var CT_HELP = "HELP";
var CT_HELP_CLEANING = "CLEANING";
var CT_HELP_MEDICAL = "MEDICAL";
var CT_HELP_MAINTENANCE = "MAINTENANCE";
var CT_HELP_DELIVERY = "DELIVERY";
var CT_FRIEND = "FRIEND";
var CT_GUEST = "GUEST";
var CT_OTHERS = "OTHERS";
var CT_ALL_TYPES = [CT_FAMILY, CT_FAMILY_HIM, CT_FAMILY_HER, CT_FAMILY_KID, CT_FAMILY_RELATIVE, CT_FAMILY_PET, CT_FAMILY_PET_DOG, CT_FAMILY_PET_CAT, CT_COLLEAGUE, CT_COLLEAGUE_STAFF, CT_COLLEAGUE_CONTRACTOR, CT_COLLEAGUE_VISITOR, CT_HELP, CT_HELP_CLEANING, CT_HELP_MEDICAL, CT_HELP_MAINTENANCE, CT_HELP_DELIVERY, CT_FRIEND, CT_GUEST, CT_OTHERS];
var GND_MALE = "MALE";
var GND_FEMALE = "FEMALE";
var CT_STRUCTURE = [{
  type: CT_FAMILY,
  parent: null,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_HIM,
  parent: CT_FAMILY,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_HER,
  parent: CT_FAMILY,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_KID,
  parent: CT_FAMILY,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_RELATIVE,
  parent: CT_FAMILY,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_PET,
  parent: CT_FAMILY,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_PET_CAT,
  parent: CT_FAMILY_PET,
  contexts: [NC_HOME]
}, {
  type: CT_FAMILY_PET_DOG,
  parent: CT_FAMILY_PET,
  contexts: [NC_HOME]
}, {
  type: CT_COLLEAGUE,
  parent: null,
  contexts: [NC_OFFICE, NC_PUBLIC]
}, {
  type: CT_COLLEAGUE_STAFF,
  parent: CT_COLLEAGUE,
  contexts: [NC_OFFICE, NC_PUBLIC]
}, {
  type: CT_COLLEAGUE_CONTRACTOR,
  parent: CT_COLLEAGUE,
  contexts: [NC_OFFICE, NC_PUBLIC]
}, {
  type: CT_COLLEAGUE_VISITOR,
  parent: CT_COLLEAGUE,
  contexts: [NC_OFFICE, NC_PUBLIC]
}, {
  type: CT_HELP,
  parent: null,
  contexts: null
}, {
  type: CT_HELP_CLEANING,
  parent: CT_HELP,
  contexts: null
}, {
  type: CT_HELP_MEDICAL,
  parent: CT_HELP,
  contexts: null
}, {
  type: CT_HELP_MAINTENANCE,
  parent: CT_HELP,
  contexts: null
}, {
  type: CT_HELP_DELIVERY,
  parent: CT_HELP,
  contexts: null
}, {
  type: CT_FRIEND,
  parent: null,
  contexts: [NC_HOME]
}, {
  type: CT_GUEST,
  parent: null,
  contexts: [NC_OFFICE, NC_RENTAL, NC_PUBLIC]
}, {
  type: CT_OTHERS,
  parent: null,
  contexts: null
}]; // Both parameters can be null

function contactTypesMatching(parentType, networkContext) {
  return CT_STRUCTURE.filter(function (value) {
    return (parentType === null || value.parent === parentType) && (value.contexts === null || networkContext === null || value.contexts.includes(networkContext));
  }).map(function (value) {
    return value.type;
  });
}
function contactTypeParent(contactType) {
  return contactType ? CT_STRUCTURE.find(function (value) {
    return value.type === contactType;
  }).map(function (value) {
    return value.parent;
  }) : null;
} // Engine states

var ES_STARTING = "starting";
var ES_INIT = "initializing";
var ES_DISCOVERY = "discovery";
var ES_COMPLETED = "completed";
var ES_FAILED = "failed";
var ES_STOPPING = "stopping";
var ES_UNAUTHORIZED = "unauthorized";
var ES_IDLE = "idle"; // Device Types

var DT_GENERIC = "GENERIC";
var DT_MOBILE = "MOBILE";
var DT_TABLET = "TABLET";
var DT_IPOD = "IPOD";
var DT_EREADER = "EREADER";
var DT_WATCH = "WATCH";
var DT_WEARABLE = "WEARABLE";
var DT_CAR = "CAR";
var DT_MEDIA_PLAYER = "MEDIA_PLAYER";
var DT_TELEVISION = "TELEVISION";
var DT_GAME_CONSOLE = "GAME_CONSOLE";
var DT_STREAMING_DONGLE = "STREAMING_DONGLE";
var DT_LOUDSPEAKER = "LOUDSPEAKER";
var DT_SOUND_SYSTEM = "SOUND_SYSTEM";
var DT_STB = "STB";
var DT_DISC_PLAYER = "DISC_PLAYER";
var DT_SATELLITE = "SATELLITE";
var DT_MUSIC = "MUSIC";
var DT_REMOTE_CONTROL = "REMOTE_CONTROL";
var DT_RADIO = "RADIO";
var DT_PHOTO_CAMERA = "PHOTO_CAMERA";
var DT_PHOTOS = "PHOTOS";
var DT_MICROPHONE = "MICROPHONE";
var DT_PROJECTOR = "PROJECTOR";
var DT_AUTOMATIC = "AUTOMATIC";
var DT_COMPUTER = "COMPUTER";
var DT_LAPTOP = "LAPTOP";
var DT_DESKTOP = "DESKTOP";
var DT_PRINTER = "PRINTER";
var DT_PHONE = "PHONE";
var DT_VOIP = "VOIP";
var DT_CONFERENCING = "CONFERENCING";
var DT_SCANNER = "SCANNER";
var DT_POS = "POS";
var DT_CLOCK = "CLOCK";
var DT_BARCODE = "BARCODE";
var DT_SURVEILLANCE_CAMERA = "SURVEILLANCE_CAMERA";
var DT_SMART_HOME = "SMART_HOME";
var DT_SMART_PLUG = "SMART_PLUG";
var DT_LIGHT = "LIGHT";
var DT_VOICE_CONTROL = "VOICE_CONTROL";
var DT_THERMOSTAT = "THERMOSTAT";
var DT_POWER_SYSTEM = "POWER_SYSTEM";
var DT_SOLAR_PANEL = "SOLAR_PANEL";
var DT_SMART_METER = "SMART_METER";
var DT_HEATING = "HEATING";
var DT_APPLIANCE = "APPLIANCE";
var DT_WASHER = "WASHER";
var DT_FRIDGE = "FRIDGE";
var DT_CLEANER = "CLEANER";
var DT_SLEEP = "SLEEP";
var DT_FITNESS = "FITNESS";
var DT_GARAGE = "GARAGE";
var DT_POOL = "POOL";
var DT_SPRINKLER = "SPRINKLER";
var DT_BELL = "BELL";
var DT_KEY_LOCK = "KEY_LOCK";
var DT_CONTROL_PANEL = "CONTROL_PANEL";
var DT_SMART_CONTROLLER = "SMART_CONTROLLER";
var DT_SCALE = "SCALE";
var DT_TOY = "TOY";
var DT_ROBOT = "ROBOT";
var DT_WEATHER = "WEATHER";
var DT_HEALTH_MONITOR = "HEALTH_MONITOR";
var DT_BABY_MONITOR = "BABY_MONITOR";
var DT_PET_MONITOR = "PET_MONITOR";
var DT_ALARM = "ALARM";
var DT_MOTION_DETECTOR = "MOTION_DETECTOR";
var DT_SECURITY_SYSTEM = "SECURITY_SYSTEM";
var DT_SMOKE = "SMOKE";
var DT_HUMIDITY = "HUMIDITY";
var DT_SENSOR = "SENSOR";
var DT_FINGBOX = "FINGBOX";
var DT_DOMOTZ_BOX = "DOMOTZ_BOX";
var DT_ROUTER = "ROUTER";
var DT_WIFI = "WIFI";
var DT_WIFI_EXTENDER = "WIFI_EXTENDER";
var DT_NAS_STORAGE = "NAS_STORAGE";
var DT_MODEM = "MODEM";
var DT_SWITCH = "SWITCH";
var DT_GATEWAY = "GATEWAY";
var DT_FIREWALL = "FIREWALL";
var DT_VPN = "VPN";
var DT_POE_PLUG = "POE_PLUG";
var DT_USB = "USB";
var DT_SMALL_CELL = "SMALL_CELL";
var DT_CLOUD = "CLOUD";
var DT_BATTERY = "BATTERY";
var DT_NETWORK_APPLIANCE = "NETWORK_APPLIANCE";
var DT_VIRTUAL_MACHINE = "VIRTUAL_MACHINE";
var DT_SERVER = "SERVER";
var DT_TERMINAL = "TERMINAL";
var DT_MAIL_SERVER = "MAIL_SERVER";
var DT_FILE_SERVER = "FILE_SERVER";
var DT_PROXY_SERVER = "PROXY_SERVER";
var DT_WEB_SERVER = "WEB_SERVER";
var DT_DOMAIN_SERVER = "DOMAIN_SERVER";
var DT_COMMUNICATION = "COMMUNICATION";
var DT_DATABASE = "DATABASE";
var DT_RASPBERRY = "RASPBERRY";
var DT_ARDUINO = "ARDUINO";
var DT_PROCESSOR = "PROCESSOR";
var DT_CIRCUIT_CARD = "CIRCUIT_CARD";
var DT_RFID = "RFID";
var DT_INDUSTRIAL = "INDUSTRIAL";
var DT_MEDICAL = "MEDICAL";
var DT_AUTOMOTIVE = "AUTOMOTIVE";
var DT_ENERGY = "ENERGY";
var DT_ALL_TYPES = [DT_AUTOMATIC, DT_GENERIC, DT_MOBILE, DT_TABLET, DT_IPOD, DT_EREADER, DT_WATCH, DT_WEARABLE, DT_CAR, DT_MEDIA_PLAYER, DT_TELEVISION, DT_GAME_CONSOLE, DT_STREAMING_DONGLE, DT_LOUDSPEAKER, DT_SOUND_SYSTEM, DT_STB, DT_DISC_PLAYER, DT_SATELLITE, DT_MUSIC, DT_REMOTE_CONTROL, DT_RADIO, DT_PHOTO_CAMERA, DT_PHOTOS, DT_MICROPHONE, DT_PROJECTOR, DT_COMPUTER, DT_LAPTOP, DT_DESKTOP, DT_PRINTER, DT_PHONE, DT_VOIP, DT_CONFERENCING, DT_SCANNER, DT_POS, DT_CLOCK, DT_BARCODE, DT_SURVEILLANCE_CAMERA, DT_SMART_HOME, DT_SMART_PLUG, DT_LIGHT, DT_VOICE_CONTROL, DT_THERMOSTAT, DT_POWER_SYSTEM, DT_SOLAR_PANEL, DT_SMART_METER, DT_HEATING, DT_APPLIANCE, DT_WASHER, DT_FRIDGE, DT_CLEANER, DT_SLEEP, DT_FITNESS, DT_GARAGE, DT_POOL, DT_SPRINKLER, DT_BELL, DT_KEY_LOCK, DT_CONTROL_PANEL, DT_SMART_CONTROLLER, DT_SCALE, DT_TOY, DT_ROBOT, DT_WEATHER, DT_HEALTH_MONITOR, DT_BABY_MONITOR, DT_PET_MONITOR, DT_ALARM, DT_MOTION_DETECTOR, DT_SECURITY_SYSTEM, DT_SMOKE, DT_HUMIDITY, DT_SENSOR, DT_FINGBOX, DT_DOMOTZ_BOX, DT_ROUTER, DT_WIFI, DT_WIFI_EXTENDER, DT_NAS_STORAGE, DT_MODEM, DT_SWITCH, DT_GATEWAY, DT_FIREWALL, DT_VPN, DT_POE_PLUG, DT_USB, DT_SMALL_CELL, DT_CLOUD, DT_BATTERY, DT_NETWORK_APPLIANCE, DT_VIRTUAL_MACHINE, DT_SERVER, DT_TERMINAL, DT_MAIL_SERVER, DT_FILE_SERVER, DT_PROXY_SERVER, DT_WEB_SERVER, DT_DOMAIN_SERVER, DT_COMMUNICATION, DT_DATABASE, DT_RASPBERRY, DT_ARDUINO, DT_PROCESSOR, DT_CIRCUIT_CARD, DT_RFID, DT_INDUSTRIAL, DT_MEDICAL, DT_AUTOMOTIVE, DT_ENERGY];
var DT_PRESENCE_TYPES = [DT_MOBILE, DT_WATCH];
var DT_PRESENCE_DISCARD_TYPES = [DT_ALARM, DT_BELL, DT_CLEANER, DT_DOMOTZ_BOX, DT_FINGBOX, DT_FRIDGE, DT_GARAGE, DT_HEATING, DT_HUMIDITY, DT_KEY_LOCK, DT_LIGHT, DT_MODEM, DT_MOTION_DETECTOR, DT_POWER_SYSTEM, DT_SENSOR, DT_SMART_HOME, DT_SMART_METER, DT_SMART_PLUG, DT_SMOKE, DT_SOLAR_PANEL, DT_SPRINKLER, DT_SURVEILLANCE_CAMERA, DT_THERMOSTAT];
var DT_USER_OS_RECOG_ENABLED_TYPES = [DT_MOBILE, DT_TABLET, DT_IPOD, DT_WATCH, DT_COMPUTER, DT_LAPTOP, DT_DESKTOP, DT_RASPBERRY, DT_PROCESSOR, DT_VIRTUAL_MACHINE, DT_SERVER, DT_DOMAIN_SERVER, DT_WEB_SERVER, DT_PROXY_SERVER, DT_FILE_SERVER, DT_TELEVISION, DT_STB];
var DT_KICK_OUT_PROTECTED_TYPES = [DT_ROUTER, DT_WIFI, DT_WIFI_EXTENDER, DT_MODEM, DT_SWITCH, DT_GATEWAY, DT_FIREWALL, DT_VPN];
var NS_UP = "UP";
var NS_DOWN = "DOWN";
var NS_NEW = "NEW";
var NS_IN_RANGE = "INRANGE";
var NS_NEW_BLOCKED = "NEW_BLOCKED";
var NS_ALL_TYPES = [NS_UP, NS_DOWN, NS_IN_RANGE, NS_NEW_BLOCKED];
var NKT_HWADDRESS = "HWADDRESS";
var NKT_IPADDRESS = "IPADDRESS";
var NKT_ALL_TYPES = [NKT_HWADDRESS, NKT_IPADDRESS];
var EVT_DEVICE_CHANGE = "NetworkDeviceChangeEvent";
var EVT_WIFI_RADIO_MONITOR = "WiFiRadioMonitorEvent";
var EVT_INTERNET_OUTAGE = "NetworkInternetOutageEvent";
var EVT_WIFI_SWEET_SPOT = "WifiSweetSpotEvent";
var EVT_BANDWIDTH_HOG = "IdentifyBandwidthHogEvent";
var EVT_INTERNET_SPEED_TEST = "InternetSpeedTestEvent";
var EVT_INTERNET_TROUBLESHOOTING = "InternetTroubleshootingEvent";
var EVT_HACKER_THREAT_CHECK = "HackerThreatCheckEvent";
var EVT_DEVICE_BLOCK = "DeviceBlockEventEntry";
var EVT_WIFI_DEAUTH_ATTACK = "WiFiSecurityDeauthAttackEvent";
var EVT_WIFI_EVIL_TWIN = "WiFiSecurityEvilTwinApEvent";
var EVT_WIFI_NEW_BSSID = "WiFiSecurityNewBssidEvent";
var EVT_GATEWAY_CHANGED = "NetworkGatewayChangeEvent";
var EVT_INTERNET_CHANGED = "NetworkInternetChangeEvent";
var EVT_IF_CONFIG_CHANGED = "NetworkInterfaceConfigChangeEvent";
var EVT_AGENT_CHANGED = "AgentEvent";
var EVT_DHCP_OUTAGE = "NetworkDhcpOutageEvent";
var EVT_HEARTBEAT = "NetworkHeartbeatEvent";
var POPULAR_TARGET_WEBSITES = [{
  displayName: "google.com",
  value: "google.com",
  local: false
}, {
  displayName: "amazon.com",
  value: "amazon.com",
  local: false
}, {
  displayName: "facebook.com",
  value: "facebook.com",
  local: false
}, {
  displayName: "bing.com",
  value: "bing.com",
  local: false
}];
var I6S_NONE = "I6S_NONE";
var I6S_LOCAL = "I6S_LOCAL";
var I6S_INTERNET = "I6S_INTERNET";
var I6S_ALL_IPV6_SETUPS = [I6S_NONE, I6S_LOCAL, I6S_INTERNET];
var SCRD_STATUS_OK = "OK";
var SCRD_STATUS_WARN = "WARN";
var SCRD_STATUS_FAIL = "FAIL";
var SCRD_STATUS_INACTIVE = "INACTIVE";

var defaultIconSize$8 = "24px";
var RTI_EMPTY = "empty";
var RTI_FULL = "full";
var RTI_HALF = "half";
var RATING_ALL_VARIANTS = [RTI_FULL, RTI_EMPTY, RTI_HALF];
var RTI_BOLT = "bolt";
var RTI_STAR = "star";
var RTI_DOT = "dot";
var RTI_HEART = "heart";
var RATING_ALL_TYPES = [RTI_STAR, RTI_BOLT, RTI_DOT, RTI_HEART];

var RatingTypeIcon = /*#__PURE__*/function (_Component) {
  _inherits(RatingTypeIcon, _Component);

  var _super = _createSuper(RatingTypeIcon);

  function RatingTypeIcon(props, context) {
    var _this;

    _classCallCheck(this, RatingTypeIcon);

    _this = _super.call(this, props, context);
    _this.onClickListener = _this.onClickListener.bind(_assertThisInitialized(_this));
    _this.onMouseEnterListener = _this.onMouseEnterListener.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RatingTypeIcon, [{
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-primary";

      switch (tint) {
        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SECONDARY:
          return "fill-secondary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_NAVY:
          return "fill-navy";

        case TINT_DARK:
          return "fill-dark";

        default:
          return "fill-primary";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          variant = _this$props.variant,
          tint = _this$props.tint; // onClick, onMouseEnter

      if (!RATING_ALL_TYPES.includes(type)) return "";
      if (!RATING_ALL_VARIANTS.includes(variant)) return "";
      var className = this.props.className || '';
      var currentTint = this.tintToClass(tint);
      var iconSize = size || defaultIconSize$8;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        onClick: this.onClickListener,
        onMouseEnter: this.onMouseEnterListener,
        className: "svg-icon ".concat(currentTint, " ").concat(className)
      }, this.renderIcon(type, iconSize, variant));
    }
  }, {
    key: "onClickListener",
    value: function onClickListener() {
      if (this.props.onClick) {
        this.props.onClick();
      }
    }
  }, {
    key: "onMouseEnterListener",
    value: function onMouseEnterListener() {
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter();
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize, variantIcon) {
      if (!type || !variantIcon) return "";

      switch (type + "|" + variantIcon) {
        case RTI_STAR + "|" + RTI_EMPTY:
          return /*#__PURE__*/React__default["default"].createElement(SvgStarEmpty, {
            width: iconSize,
            height: iconSize
          });

        case RTI_STAR + "|" + RTI_FULL:
          return /*#__PURE__*/React__default["default"].createElement(SvgStar$1, {
            width: iconSize,
            height: iconSize
          });

        case RTI_STAR + "|" + RTI_HALF:
          return /*#__PURE__*/React__default["default"].createElement(SvgStarHalf, {
            width: iconSize,
            height: iconSize
          });

        case RTI_DOT + "|" + RTI_EMPTY:
          return /*#__PURE__*/React__default["default"].createElement(SvgDotEmpty, {
            width: iconSize,
            height: iconSize
          });

        case RTI_DOT + "|" + RTI_FULL:
          return /*#__PURE__*/React__default["default"].createElement(SvgDot, {
            width: iconSize,
            height: iconSize
          });

        case RTI_DOT + "|" + RTI_HALF:
          return /*#__PURE__*/React__default["default"].createElement(SvgDotHalf, {
            width: iconSize,
            height: iconSize
          });

        case RTI_BOLT + "|" + RTI_EMPTY:
          return /*#__PURE__*/React__default["default"].createElement(SvgBoltEmpty, {
            width: iconSize,
            height: iconSize
          });

        case RTI_BOLT + "|" + RTI_FULL:
          return /*#__PURE__*/React__default["default"].createElement(SvgBolt$1, {
            width: iconSize,
            height: iconSize
          });

        case RTI_BOLT + "|" + RTI_HALF:
          return /*#__PURE__*/React__default["default"].createElement(SvgBoltHalf, {
            width: iconSize,
            height: iconSize
          });

        case RTI_HEART + "|" + RTI_EMPTY:
          return /*#__PURE__*/React__default["default"].createElement(SvgHeartEmpty, {
            width: iconSize,
            height: iconSize
          });

        case RTI_HEART + "|" + RTI_FULL:
          return /*#__PURE__*/React__default["default"].createElement(SvgHeart, {
            width: iconSize,
            height: iconSize
          });

        case RTI_HEART + "|" + RTI_HALF:
          return /*#__PURE__*/React__default["default"].createElement(SvgHeartHalf, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return RatingTypeIcon;
}(React.Component);
RatingTypeIcon.propTypes = {
  size: PropTypes__default["default"].number,
  variant: PropTypes__default["default"].oneOf([RTI_EMPTY, RTI_FULL, RTI_HALF]),
  type: PropTypes__default["default"].oneOf([RTI_DOT, RTI_HEART, RTI_STAR, RTI_BOLT]),
  tint: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_SECONDARY, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING])
};

var _path$1a;

function _extends$2S() { _extends$2S = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2S.apply(this, arguments); }

function SvgContacttypeFamily24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2S({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1a || (_path$1a = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.3 5.076a6.582 6.582 0 00-10.446-1.71L12 4.147l-.827-.753a6.522 6.522 0 00-5.688-1.806A6.472 6.472 0 00.7 5.075a6.4 6.4 0 001.21 7.469l9.373 9.656a1 1 0 001.434 0l9.36-9.638A6.414 6.414 0 0023.3 5.076z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1H;

function _extends$2R() { _extends$2R = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2R.apply(this, arguments); }

function SvgContacttypeHim24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2R({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1H || (_g$1H = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M8.5 13.25a.5.5 0 00-.5-.5H6.5a.75.75 0 010-1.5H8a.5.5 0 00.5-.5V8.739a.5.5 0 00-.252-.434L3.475 5.578a1.5 1.5 0 00-1.351.205C.653 6.836 0 9.665 0 12c0 2.335.66 5.168 2.122 6.216.247.18.545.275.85.273.202-.001.402-.037.592-.107L8.249 15.7a.5.5 0 00.251-.434V13.25zM10 8h4v8h-4zM21.878 5.784a1.523 1.523 0 00-1.442-.166L15.751 8.3a.5.5 0 00-.251.434v2.016a.5.5 0 00.5.5h1.5a.75.75 0 110 1.5H16a.5.5 0 00-.5.5v2.011a.5.5 0 00.252.434l4.773 2.727c.457.154.96.077 1.351-.205C23.34 17.168 24 14.339 24 12c0-2.339-.653-5.164-2.122-6.216z"
  }))));
}

var _g$1G;

function _extends$2Q() { _extends$2Q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2Q.apply(this, arguments); }

function SvgContacttypeHer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2Q({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1G || (_g$1G = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.5 13.686v-3.022c0-.713-.045-.779-.103-1.24a1.443 1.443 0 01-.63-.356l-.267-.271v.382c0 .835-.672 1.51-1.5 1.51s-1.5-.675-1.5-1.51v-.382l-.268.271a1.493 1.493 0 01-2.121 0 1.52 1.52 0 010-2.138l.268-.27h-.38c-.827 0-1.5-.676-1.5-1.51 0-.835.673-1.512 1.5-1.512h.38l-.268-.27a1.476 1.476 0 01-.36-.658c-.083-.01-.166-.025-.25-.035-.068-.01-.136-.022-.206-.03a8.352 8.352 0 00-.795-.04c-3.81 0-7.117 2.74-7.85 6.514-.001.007-.005.012-.007.02-.032.163-.05.329-.07.494-.011.079-.025.154-.033.233-.025.266-.04.532-.04.798v3.022h16zM4.5 15.7h16v-1.007h-16zM23.825 18.85l-2.474-2.136H3.648l-2.473 2.137a.505.505 0 00.152.855c3.711 1.377 7.474 2.076 11.183 2.076 3.708 0 7.464-.698 11.164-2.077a.504.504 0 00.151-.854"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22 4.652h-2.794l1.976-1.99a.507.507 0 000-.713.498.498 0 00-.707 0L18.5 3.939V1.126a.502.502 0 00-.5-.504c-.276 0-.5.226-.5.504v2.813l-1.975-1.99a.498.498 0 00-.707 0 .507.507 0 000 .712l1.976 1.99H14c-.276 0-.5.226-.5.504s.224.504.5.504h2.793l-1.975 1.99a.505.505 0 000 .712.5.5 0 00.707 0l1.975-1.99v2.814c0 .278.224.504.5.504s.5-.226.5-.504V6.37l1.975 1.991a.496.496 0 00.707 0 .505.505 0 000-.711l-1.975-1.99H22c.276 0 .5-.227.5-.505a.502.502 0 00-.5-.503"
  }))));
}

var _g$1F;

function _extends$2P() { _extends$2P = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2P.apply(this, arguments); }

function SvgContacttypeKid24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2P({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1F || (_g$1F = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.712 6.265h5.774a.523.523 0 00.523-.523V.525a.522.522 0 00-.871-.39 2302.168 2302.168 0 00-5.78 5.223.522.522 0 00.354.907zM16.244 6.265h5.773a.522.522 0 00.354-.907c-1.5-1.367-4.347-3.931-5.779-5.222a.522.522 0 00-.871.39v5.216c0 .289.234.523.523.523zM13.039 18.649a.522.522 0 00.97-.27V8.5a.523.523 0 00-.523-.523H7.619a.522.522 0 00-.45.788c1.177 1.982 4.28 7.209 5.87 9.884zM22.112 7.977h-5.868a.523.523 0 00-.523.523v9.879a.522.522 0 00.969.271c1.591-2.676 4.7-7.9 5.872-9.885a.522.522 0 00-.45-.788z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.216 19.063a1 1 0 00-1.288.585 1.535 1.535 0 01-.8.986c-1.005.454-2.843-.253-4.32-.821A9.138 9.138 0 005.865 19c-3.184 0-4.4 3.533-4.449 3.683a1.001 1.001 0 101.9.633C3.321 23.292 4.134 21 5.865 21a8.919 8.919 0 012.222.68c1.918.737 4.092 1.573 5.857.778a3.545 3.545 0 001.856-2.107 1 1 0 00-.584-1.288z"
  }))));
}

var _g$1E;

function _extends$2O() { _extends$2O = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2O.apply(this, arguments); }

function SvgContacttypeRelative24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2O({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1E || (_g$1E = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23 24a1 1 0 01-1-1V6.5a1 1 0 012 0V23a1 1 0 01-1 1zM17.914 21.5a1 1 0 00-1.05-.583 2.277 2.277 0 01-2.6-2.253 3.094 3.094 0 00-1.955-3.015 3.469 3.469 0 00-3.049.28.5.5 0 01-.529 0 3.468 3.468 0 00-3.05-.279 3.093 3.093 0 00-1.954 3.015 2.277 2.277 0 01-2.594 2.253 1 1 0 00-.783 1.754A5.681 5.681 0 004.061 24c.32 0 .638-.024.954-.071a6.592 6.592 0 003.635-1.774.5.5 0 01.7 0 6.592 6.592 0 003.635 1.774 5.794 5.794 0 004.659-1.257 1 1 0 00.27-1.172zM21.999 3.5a1 1 0 102 0 1 1 0 00-2 0zM14.5 12a6 6 0 110-12 6 6 0 010 12zm0-10a4 4 0 100 8 4 4 0 000-8z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.226 6.75a.75.75 0 01-.75-.75A3.026 3.026 0 0114.5 2.977a.75.75 0 110 1.5c-.841 0-1.523.682-1.524 1.523a.75.75 0 01-.75.75z"
  }))));
}

var _g$1D;

function _extends$2N() { _extends$2N = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2N.apply(this, arguments); }

function SvgContacttypePet24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2N({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1D || (_g$1D = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16.971 15.198a4.262 4.262 0 00-4.114-3.055h-1.714a4.262 4.262 0 00-4.106 3.055l-1.176 3.92a2.571 2.571 0 002.464 3.31h7.35a2.571 2.571 0 002.464-3.31l-1.168-3.92zM0 14.714c0 1.894 1.151 3.429 2.571 3.429 1.42 0 2.572-1.535 2.572-3.429 0-1.893-1.151-3.428-2.572-3.428C1.151 11.286 0 12.82 0 14.714zM5.143 7c0 1.894 1.151 3.429 2.571 3.429 1.42 0 2.572-1.535 2.572-3.429S9.134 3.571 7.714 3.571c-1.42 0-2.571 1.535-2.571 3.429zM13.714 7c0 1.894 1.152 3.429 2.572 3.429 1.42 0 2.571-1.535 2.571-3.429s-1.151-3.429-2.571-3.429c-1.42 0-2.572 1.535-2.572 3.429zM18.857 14.714c0 1.225.49 2.357 1.286 2.97.795.612 1.776.612 2.571 0C23.51 17.07 24 15.939 24 14.714s-.49-2.356-1.286-2.969c-.795-.612-1.776-.612-2.571 0-.796.613-1.286 1.744-1.286 2.97z"
  }))));
}

var _path$19;

function _extends$2M() { _extends$2M = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2M.apply(this, arguments); }

function SvgContacttypeDog24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2M({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$19 || (_path$19 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.478 5a3.577 3.577 0 00-2.489-1.019A3.47 3.47 0 0014.066 1.5a3.608 3.608 0 00.205 5.107l-7.688 7.686a3.558 3.558 0 00-2.568-1.145 3.3 3.3 0 00-2.486.989 3.473 3.473 0 00-1.03 2.435c-.01.916.351 1.797 1.001 2.442a3.583 3.583 0 002.47 1 3.443 3.443 0 001.007 2.476 3.501 3.501 0 002.46 1.026 3.454 3.454 0 002.539-5.834L17.665 10a3.393 3.393 0 002.362.951A3.481 3.481 0 0022.478 5z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1C;

function _extends$2L() { _extends$2L = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2L.apply(this, arguments); }

function SvgContacttypeCat24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2L({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1C || (_g$1C = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.457 14.901l.097.001 11 1a.6.6 0 01-.01 1.197l-.098-.001-11-1a.6.6 0 01.01-1.197z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.367 15.415l-11 2.5a.6.6 0 00.17 1.184l.096-.014 11-2.5a.6.6 0 00-.17-1.184l-.096.014z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.046 14.902l-11 1a.6.6 0 00.01 1.197l.098-.001 11-1a.6.6 0 00-.01-1.197l-.098.001z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.633 15.415l11 2.5a.6.6 0 01-.17 1.184l-.096-.014-11-2.5a.6.6 0 01.17-1.184l.096.014z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 6c5.523 0 10 3.806 10 8.5S17.523 23 12 23 2 19.194 2 14.5 6.477 6 12 6zm-3.5 5c-.828 0-1.5.895-1.5 2s.672 2 1.5 2 1.5-.895 1.5-2-.672-2-1.5-2zm7 0c-.828 0-1.5.895-1.5 2s.672 2 1.5 2 1.5-.895 1.5-2-.672-2-1.5-2z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.494 9.983C3.603 4.77 3.744 1.36 4.619 1.212c.583-.099 2.461 1.889 5.635 5.962a31.455 31.455 0 01-4.76 2.81zM18.76 9.983c1.891-5.214 1.75-8.623.875-8.771C19.051 1.113 17.173 3.1 14 7.174a31.455 31.455 0 004.76 2.81z"
  }))));
}

var _g$1B;

function _extends$2K() { _extends$2K = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2K.apply(this, arguments); }

function SvgContacttypeColleague24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2K({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1B || (_g$1B = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16 5H8v-.5C8 3.122 9.121 2 10.5 2h3C14.878 2 16 3.122 16 4.5V5zm5.5 0H17v-.5C17 2.57 15.43 1 13.5 1h-3C8.57 1 7 2.57 7 4.5V5H2.5A2.503 2.503 0 000 7.5v7a.5.5 0 00.5.5H9v-1.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5V15h8.5a.5.5 0 00.5-.5v-7C24 6.122 22.878 5 21.5 5zM22.5 16H15v.5a.5.5 0 01-.5.5h-5a.5.5 0 01-.5-.5V16H1.5a.5.5 0 00-.5.5v5a.5.5 0 00.5.5h21a.5.5 0 00.5-.5v-5a.5.5 0 00-.5-.5"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M10 16h4v-2h-4z"
  }))));
}

var _g$1A;

function _extends$2J() { _extends$2J = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2J.apply(this, arguments); }

function SvgContacttypeStaff24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2J({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1A || (_g$1A = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 6.25a2 2 0 00-2-2h-6a.5.5 0 00-.5.5v1.5a.5.5 0 11-1 0v-2.5a3 3 0 00-6 0v2.5a.5.5 0 01-1 0v-1.5a.5.5 0 00-.5-.5H2a2 2 0 00-2 2v15a2 2 0 002 2h20a2 2 0 002-2v-15zM10.5 3.5a1 1 0 112 0 1 1 0 01-2 0zm-8 17.75a.5.5 0 01-.5-.5v-10.5a.5.5 0 01.5-.5h19a.5.5 0 01.5.5v10.5a.5.5 0 01-.5.5h-19z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.25 13.5H14.5a.75.75 0 100 1.5h4.75a.75.75 0 100-1.5zM18 16.5h-3.5a.75.75 0 100 1.5H18a.75.75 0 100-1.5zM9.457 16.62a.894.894 0 01-.026-.391c.62-.783.929-1.769.864-2.766a2.3 2.3 0 10-4.59 0c-.067.98.23 1.949.833 2.723.043.089.053.355.076.382-1.543.58-2.39 1-2.738 1.709a4.247 4.247 0 00-.368 1.155.5.5 0 00.492.586h8a.5.5 0 00.492-.586c-.067-.4-.19-.79-.368-1.155-.348-.705-1.195-1.129-2.667-1.657z"
  })))));
}

var _g$1z;

function _extends$2I() { _extends$2I = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2I.apply(this, arguments); }

function SvgContacttypeContractor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2I({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1z || (_g$1z = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M10.25 8c2.206 0 4-1.794 4-4 0-2.205-1.794-4-4-4s-4 1.795-4 4c0 2.206 1.794 4 4 4M16.25 9h-5.04l.558 6.689-1.518 1.518-1.518-1.518L9.29 9H4.25v.5c0 3.554 1.271 6.369 3.5 7.783V24h5v-6.717c2.228-1.414 3.5-4.23 3.5-7.783V9zM18.25 16v-1h-1v1h-1.5v8h4v-8z"
  }))));
}

var _path$18;

function _extends$2H() { _extends$2H = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2H.apply(this, arguments); }

function SvgContacttypeVisitor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2H({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$18 || (_path$18 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 6h-2V3c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v3H7c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2 0 .55.45 1 1 1s1-.45 1-1h6c0 .55.45 1 1 1s1-.45 1-1c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM8.75 18c-.41 0-.75-.34-.75-.75v-7.5c0-.41.34-.75.75-.75s.75.34.75.75v7.5c0 .41-.34.75-.75.75zM12 18c-.41 0-.75-.34-.75-.75v-7.5c0-.41.34-.75.75-.75s.75.34.75.75v7.5c0 .41-.34.75-.75.75zm1.5-12h-3V3.5h3V6zm1.75 12c-.41 0-.75-.34-.75-.75v-7.5c0-.41.34-.75.75-.75s.75.34.75.75v7.5c0 .41-.34.75-.75.75z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1y;

function _extends$2G() { _extends$2G = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2G.apply(this, arguments); }

function SvgContacttypeHelp24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2G({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1y || (_g$1y = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.75 1.074C11.994.448 11.013.096 9.96.096 7.494.096 5 1.985 5 5.621c.12 4.877 7.024 8.332 7.316 8.478a.986.986 0 00.868 0c.292-.146 7.196-3.6 7.316-8.502 0-3.612-2.495-5.5-4.96-5.5-1.053 0-2.034.351-2.79.977zM.5 22.26h3c.276.005.5-.22.5-.499V14.71a.502.502 0 00-.5-.504h-3c-.276 0-.5.226-.5.504v7.051c0 .279.224.504.5.498M18.813 20.874c1.28-.687 2.876-1.54 4.91-2.566a.505.505 0 00.13-.807c-1.174-1.182-2.186-1.508-3.51-1.13l-3.516 1.176c.11.298.174.108.174.43 0 .572-.17 1.62-.478 2.028-.365.483-.906.24-1.523.24H9.5a.502.502 0 01-.5-.504c0-.278.224-.504.5-.504H15c.79 0 1-.792 1-1.26 0-.467-.21-1.259-1-1.259h-2.797c-.744-.705-2.43-1.505-4.703-1.505H5v5.863c.84.288 1.59.548 2.256.782 5.825 2.037 5.933 2.03 11.557-.984"
  }))));
}

var _g$1x;

function _extends$2F() { _extends$2F = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2F.apply(this, arguments); }

function SvgContacttypeCleaning24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2F({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1x || (_g$1x = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M45.89 2.113a7.218 7.218 0 00-10.2 0l-9.57 9.574A7.2 7.2 0 0031.21 24a7.156 7.156 0 005.095-2.105l9.581-9.581a7.231 7.231 0 000-10.2l.004-.001zM44.476 10.9l-3.726 3.722a.5.5 0 01-.707 0l-6.661-6.661a.5.5 0 010-.707l3.726-3.727a5.2 5.2 0 018.885 3.692 5.16 5.16 0 01-1.517 3.681zM20.412 20.041h-1.237a.5.5 0 01-.5-.5V4.948a4.95 4.95 0 00-9.9 0v6.433a4.376 4.376 0 01-.8 2.509.494.494 0 01-.406.213H2.6a2.476 2.476 0 00-2.476 2.474v.975a.494.494 0 00.72.44 3.844 3.844 0 011.756-.425 3.963 3.963 0 013.959 3.959c0 .61-.146 1.211-.425 1.754a.494.494 0 00.441.72H12.5a2.476 2.476 0 002.474-2.474 7.429 7.429 0 00-4.759-6.921.249.249 0 01-.133-.342c.452-.893.687-1.88.686-2.882V4.948a2.969 2.969 0 015.938 0v17.567c0 .818.662 1.482 1.48 1.485h5.2a.494.494 0 00.5-.5 3.468 3.468 0 00-3.474-3.459z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.124 21.526a2.474 2.474 0 104.948 0 2.474 2.474 0 00-4.948 0z"
  }))));
}

var _g$1w;

function _extends$2E() { _extends$2E = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2E.apply(this, arguments); }

function SvgContacttypeMedical24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2E({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1w || (_g$1w = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.89 2.113a7.218 7.218 0 00-10.2 0l-9.57 9.574A7.2 7.2 0 007.21 24a7.156 7.156 0 005.095-2.105l9.581-9.581a7.231 7.231 0 000-10.2l.004-.001zM20.476 10.9l-3.726 3.722a.5.5 0 01-.707 0L9.382 7.961a.5.5 0 010-.707l3.726-3.727a5.2 5.2 0 018.885 3.692 5.16 5.16 0 01-1.517 3.681z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16.634 3.159a4.091 4.091 0 00-2.91 1.205.75.75 0 001.06 1.061 2.678 2.678 0 013.7 0 .75.75 0 001.061-1.061 4.09 4.09 0 00-2.911-1.205z"
  }))));
}

var _path$17;

function _extends$2D() { _extends$2D = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2D.apply(this, arguments); }

function SvgContacttypeMaintenance24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2D({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$17 || (_path$17 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.873 4.209a1.286 1.286 0 00-.25-1.466L21.257.379a1.284 1.284 0 00-1.464-.252L15.302 2.27a1.284 1.284 0 00-.719.979l-.428 3c-.032.232 0 .47.094.685.07.162.034.35-.09.475l-4.34 4.348a.429.429 0 01-.606 0l-.261-.261a1.697 1.697 0 00-2.4 0l-5.321 5.326a4.206 4.206 0 005.947 5.949l5.326-5.328a1.695 1.695 0 000-2.4l-.26-.26a.429.429 0 010-.608l4.34-4.335a.432.432 0 01.475-.09 1.277 1.277 0 00.696.097l3-.429a1.29 1.29 0 00.979-.72l2.14-4.49zm-4.068 2.554A.429.429 0 0119.48 7l-1.242.172a.427.427 0 01-.364-.122l-.93-.931a.432.432 0 01-.122-.363l.171-1.243a.429.429 0 01.24-.326l2.571-1.226a.429.429 0 01.487.084l.653.653a.429.429 0 01.084.489l-1.222 2.575z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$16;

function _extends$2C() { _extends$2C = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2C.apply(this, arguments); }

function SvgContacttypeDelivery24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2C({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$16 || (_path$16 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.5 8H17V6c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2 0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h1c.55 0 1-.45 1-1v-3.67c0-.22-.07-.43-.2-.6L20.3 8.4c-.19-.25-.49-.4-.8-.4zM6 18c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 0c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-5v-3h2l2.25 3H17z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$15;

function _extends$2B() { _extends$2B = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2B.apply(this, arguments); }

function SvgContacttypeFriend24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2B({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$15 || (_path$15 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7 3c-.55 0-1 .45-1 1v5c0 2.97 2.16 5.43 5 5.91V19H9c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1h-2v-4.09c2.84-.48 5-2.94 5-5.91V4c0-.55-.45-1-1-1H7zm9 5H8V5h8v3z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$14;

function _extends$2A() { _extends$2A = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2A.apply(this, arguments); }

function SvgContacttypeGuest24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2A({
    width: 24,
    height: 24,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$14 || (_path$14 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.51 17.997l9.299-4.87 9.3 4.87h-18.6zm20.37-1.32c-.09-.06-9.586-5.03-9.681-5.08 1.193-.687 2.11-2.17 2.11-3.1 0-1.93-1.571-3.5-3.5-3.5-1.93 0-3.5 1.57-3.5 3.5a1 1 0 102 0c0-.827.673-1.5 1.5-1.5s1.5.673 1.503 1.456c-.044.266-.586 1.21-1.228 1.481-.604.256-.997.824-1.171 1.404L.845 16.611c-.64.336-1.032 1.185-.753 2.073.246.786.935 1.313 1.717 1.313h20c.78 0 1.469-.527 1.717-1.313.243-.777-.01-1.566-.646-2.007z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$13;

function _extends$2z() { _extends$2z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2z.apply(this, arguments); }

function SvgContacttypeOther24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2z({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$13 || (_path$13 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 12.75c1.63 0 3.07.39 4.24.9 1.08.48 1.76 1.56 1.76 2.73V17c0 .55-.45 1-1 1H7c-.55 0-1-.45-1-1v-.61c0-1.18.68-2.26 1.76-2.73 1.17-.52 2.61-.91 4.24-.91zM4 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm1.13 1.1c-.37-.06-.74-.1-1.13-.1-.99 0-1.93.21-2.78.58A2.01 2.01 0 000 16.43V17c0 .55.45 1 1 1h3.5v-1.61c0-.83.23-1.61.63-2.29zM20 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4 3.43c0-.81-.48-1.53-1.22-1.85A6.95 6.95 0 0020 14c-.39 0-.76.04-1.13.1.4.68.63 1.46.63 2.29V18H23c.55 0 1-.45 1-1v-.57zM12 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var defaultIconSize$7 = "24px";
/**
 */

var ContactTypeIcon = /*#__PURE__*/function (_Component) {
  _inherits(ContactTypeIcon, _Component);

  var _super = _createSuper(ContactTypeIcon);

  function ContactTypeIcon() {
    _classCallCheck(this, ContactTypeIcon);

    return _super.apply(this, arguments);
  }

  _createClass(ContactTypeIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size;
      if (!CT_ALL_TYPES.includes(type)) return "";
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$7;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case CT_FAMILY:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeFamily24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_HIM:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeHim24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_HER:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeHer24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_KID:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeKid24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_RELATIVE:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeRelative24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_PET:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypePet24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_PET_DOG:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeDog24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FAMILY_PET_CAT:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeCat24, {
            width: iconSize,
            height: iconSize
          });

        case CT_COLLEAGUE:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeColleague24, {
            width: iconSize,
            height: iconSize
          });

        case CT_COLLEAGUE_STAFF:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeStaff24, {
            width: iconSize,
            height: iconSize
          });

        case CT_COLLEAGUE_CONTRACTOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeContractor24, {
            width: iconSize,
            height: iconSize
          });

        case CT_COLLEAGUE_VISITOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeVisitor24, {
            width: iconSize,
            height: iconSize
          });

        case CT_HELP:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeHelp24, {
            width: iconSize,
            height: iconSize
          });

        case CT_HELP_CLEANING:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeCleaning24, {
            width: iconSize,
            height: iconSize
          });

        case CT_HELP_MEDICAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeMedical24, {
            width: iconSize,
            height: iconSize
          });

        case CT_HELP_MAINTENANCE:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeMaintenance24, {
            width: iconSize,
            height: iconSize
          });

        case CT_HELP_DELIVERY:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeDelivery24, {
            width: iconSize,
            height: iconSize
          });

        case CT_FRIEND:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeFriend24, {
            width: iconSize,
            height: iconSize
          });

        case CT_GUEST:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeGuest24, {
            width: iconSize,
            height: iconSize
          });

        case CT_OTHERS:
          return /*#__PURE__*/React__default["default"].createElement(SvgContacttypeOther24, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return ContactTypeIcon;
}(React.Component);

var _g$1v;

function _extends$2y() { _extends$2y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2y.apply(this, arguments); }

function SvgGeneric24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2y({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1v || (_g$1v = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 8c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 0c-1.484 0-2.933.271-4.292.793a1 1 0 00.717 1.867A9.948 9.948 0 0112 2a1 1 0 000-2zM3.988 3.073c-1.09.979-1.995 2.15-2.666 3.453a1 1 0 101.779.915 10.065 10.065 0 012.223-2.88 1 1 0 00-1.336-1.488zM.069 10.708a12.078 12.078 0 00.328 4.358 1 1 0 101.933-.511 10.025 10.025 0 01-.272-3.633 1 1 0 00-1.989-.214zm2.194 8.3a12.088 12.088 0 003.148 3.018 1 1 0 101.101-1.67 10.088 10.088 0 01-2.627-2.518 1 1 0 00-1.622 1.17zm7.17 4.715a12.003 12.003 0 004.38.14 1 1 0 10-.3-1.977 9.996 9.996 0 01-3.653-.116 1 1 0 10-.428 1.953zm8.542-1.318a12.079 12.079 0 003.323-2.825 1 1 0 10-1.55-1.265 10.079 10.079 0 01-2.772 2.357 1 1 0 00.999 1.733zm5.405-6.594a11.958 11.958 0 00.608-4.357 1 1 0 00-1.998.09l.006.156.004.34a9.953 9.953 0 01-.516 3.135 1 1 0 101.896.636zm-.385-8.618a12.04 12.04 0 00-2.448-3.61 1 1 0 00-1.425 1.403 10.04 10.04 0 012.042 3.01 1 1 0 101.831-.803zm-6.089-6.144a11.922 11.922 0 00-4.242-1.03 1 1 0 00-.11 1.996 9.923 9.923 0 013.532.858 1 1 0 00.82-1.824z",
    fillRule: "nonzero"
  }))));
}

var _path$12;

function _extends$2x() { _extends$2x = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2x.apply(this, arguments); }

function SvgMobile24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2x({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$12 || (_path$12 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 .034H7a3 3 0 00-3 3v17.932a3 3 0 003 3h10a3 3 0 003-3V3.034a3 3 0 00-3-3zm-5 22.432a1 1 0 110-2 1 1 0 010 2zm6-4.5a1 1 0 01-1 1H7a1 1 0 01-1-1V3.534a1 1 0 011-1h10a1 1 0 011 1v14.432z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1u;

function _extends$2w() { _extends$2w = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2w.apply(this, arguments); }

function SvgTablet24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2w({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1u || (_g$1u = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19 0H5a2.5 2.5 0 00-2.5 2.5v19A2.5 2.5 0 005 24h14a2.5 2.5 0 002.5-2.5v-19A2.5 2.5 0 0019 0zM5 4.5a1 1 0 011-1h12a1 1 0 011 1v14a1 1 0 01-1 1H6a1 1 0 01-1-1v-14z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.5 6.251h1a.75.75 0 01.75.75v1a.75.75 0 01-.75.75h-1a.75.75 0 01-.75-.75v-1a.75.75 0 01.75-.75zM11.5 6.251h1a.75.75 0 01.75.75v1a.75.75 0 01-.75.75h-1a.75.75 0 01-.75-.75v-1a.75.75 0 01.75-.75zM15.5 6.251h1a.75.75 0 01.75.75v1a.75.75 0 01-.75.75h-1a.75.75 0 01-.75-.75v-1a.75.75 0 01.75-.75z"
  }), /*#__PURE__*/React__namespace.createElement("rect", {
    x: 6.75,
    y: 10.251,
    width: 2.5,
    height: 2.5,
    rx: 0.75
  }), /*#__PURE__*/React__namespace.createElement("rect", {
    x: 10.75,
    y: 10.251,
    width: 2.5,
    height: 2.5,
    rx: 0.75
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.5 14.251h1a.75.75 0 01.75.75v1a.75.75 0 01-.75.75h-1a.75.75 0 01-.75-.75v-1a.75.75 0 01.75-.75zM11.5 14.251h1a.75.75 0 01.75.75v1a.75.75 0 01-.75.75h-1a.75.75 0 01-.75-.75v-1a.75.75 0 01.75-.75z"
  }), /*#__PURE__*/React__namespace.createElement("rect", {
    x: 14.75,
    y: 10.251,
    width: 2.5,
    height: 2.5,
    rx: 0.75
  }))));
}

var _g$1t;

function _extends$2v() { _extends$2v = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2v.apply(this, arguments); }

function SvgIpod24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2v({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1t || (_g$1t = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M8.75 17a3.25 3.25 0 106.5 0 3.25 3.25 0 00-6.5 0zm4.75 0a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.5 0h-11A2.5 2.5 0 004 2.5v19A2.5 2.5 0 006.5 24h11a2.5 2.5 0 002.5-2.5v-19A2.5 2.5 0 0017.5 0zm.5 9.531a.986.986 0 01-1 .969H7a.986.986 0 01-1-.969V2.969A.986.986 0 017 2h10a.986.986 0 011 .969v6.562zM16.75 17a4.75 4.75 0 11-9.5 0 4.75 4.75 0 019.5 0z"
  }))));
}

var _g$1s;

function _extends$2u() { _extends$2u = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2u.apply(this, arguments); }

function SvgEreader24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2u({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1s || (_g$1s = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.5 0h-15A1.5 1.5 0 003 1.5v21A1.5 1.5 0 004.5 24h15a1.5 1.5 0 001.5-1.5v-21A1.5 1.5 0 0019.5 0zM6 20a1 1 0 01-1-1V3a1 1 0 011-1h12a1 1 0 011 1v16a1 1 0 01-1 1H6z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M8.5 6.251h7a.75.75 0 100-1.5h-7a.75.75 0 000 1.5zM8.5 9.751h7a.75.75 0 100-1.5h-7a.75.75 0 000 1.5zM8.5 13.251h7a.75.75 0 100-1.5h-7a.75.75 0 100 1.5zM8.5 16.751H14a.75.75 0 100-1.5H8.5a.75.75 0 100 1.5z"
  }))));
}

var _path$11;

function _extends$2t() { _extends$2t = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2t.apply(this, arguments); }

function SvgWatch24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2t({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$11 || (_path$11 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21 6a3 3 0 00-3-3h-1.078a.249.249 0 01-.24-.182L15.98.365A.5.5 0 0015.5 0h-7a.5.5 0 00-.481.363l-.7 2.455A.248.248 0 017.077 3H6a3 3 0 00-3 3v12a3 3 0 003 3h1.077c.112 0 .21.074.24.181l.7 2.456A.5.5 0 008.5 24h7a.5.5 0 00.48-.363l.7-2.456a.25.25 0 01.24-.181H18a3 3 0 003-3V6zm-2 12a1 1 0 01-1 1H6a1 1 0 01-1-1V6a1 1 0 011-1h12a1 1 0 011 1v12z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1r;

function _extends$2s() { _extends$2s = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2s.apply(this, arguments); }

function SvgWearable24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2s({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1r || (_g$1r = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.971 17.58l-.816-5.18A3.977 3.977 0 0019.2 9h-3.73c-1.044 0-2.07.272-2.977.79L10.376 11H9.349a.25.25 0 01-.236-.167.5.5 0 00-.472-.333h-4a.5.5 0 00-.471.333.25.25 0 01-.236.167H1a1 1 0 000 2h2.06a.249.249 0 01.225.357c-.095.2-.145.42-.144.643v4c0 .222.05.442.145.642a.25.25 0 01-.225.358H1a1 1 0 000 2h2.934c.106 0 .2.067.236.167a.5.5 0 00.471.333h4a.5.5 0 00.472-.333.25.25 0 01.236-.167h.824l.7.841A5.982 5.982 0 0015.483 24h1.8a3 3 0 002.991-2.769c.01-.13.119-.23.249-.231H21a3 3 0 002.97-3.418l.001-.002zm-18.33.387a.751.751 0 01-.75-.75v-2.5a.752.752 0 01.75-.75h2c.414 0 .75.336.75.75v2.5a.75.75 0 01-.75.75h-2zM21 19h-4.717a1 1 0 000 2h1.706a.25.25 0 01.236.334c-.05.14-.13.268-.236.373a.987.987 0 01-.706.293h-1.8a3.99 3.99 0 01-3.072-1.439l-1-1.2a1 1 0 00-.769-.36h-.419a.251.251 0 01-.223-.36c.094-.2.142-.42.141-.641v-4a1.5 1.5 0 00-.141-.645.249.249 0 01.222-.355h.419c.175 0 .348-.045.5-.132l2.347-1.341A4 4 0 0115.47 11h3.73a1.992 1.992 0 011.98 1.711l.813 5.159A1 1 0 0121 19zM5.108 7.277a1 1 0 101.385 1.442.751.751 0 011.016 0 1 1 0 101.384-1.442 2.759 2.759 0 00-3.785 0z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.321 6.384a1 1 0 00-.028-1.414 6.255 6.255 0 00-8.584 0 1 1 0 101.385 1.443 4.236 4.236 0 015.814 0 1 1 0 001.413-.029z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M1.694 4.107a7.73 7.73 0 0110.613 0 1 1 0 101.387-1.442 9.753 9.753 0 00-13.387 0 1 1 0 001.387 1.442z"
  }))));
}

var _path$10;

function _extends$2r() { _extends$2r = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2r.apply(this, arguments); }

function SvgCar24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2r({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$10 || (_path$10 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22 10.375a1 1 0 001-1v-1a1 1 0 00-1-1h-2.1a.25.25 0 01-.237-.171l-1.1-3.3a1.5 1.5 0 00-1.423-1.029H6.86A1.5 1.5 0 005.437 3.9l-1.1 3.3a.25.25 0 01-.237.171H2a1 1 0 00-1 1v1a1 1 0 001 1h.689a.25.25 0 01.177.427l-1.573 1.577a1.008 1.008 0 00-.293.707v3.293a.979.979 0 00.6.9c.091.04.15.13.15.229v2.374A1.251 1.251 0 003 21.125h2c.69 0 1.25-.56 1.25-1.25v-2.25a.25.25 0 01.25-.25h11a.25.25 0 01.25.25v2.25c0 .69.56 1.25 1.25 1.25h2c.69 0 1.25-.56 1.25-1.25V17.5c0-.1.059-.19.15-.229a.979.979 0 00.6-.9v-3.289c0-.265-.106-.519-.293-.707L21.134 10.8a.25.25 0 01.177-.427l.689.002zm-5.4-5.5a.25.25 0 01.237.171L18 8.546a.251.251 0 01-.238.329H6.235A.251.251 0 016 8.546l1.167-3.5a.25.25 0 01.233-.171h9.2zm-10.6 10H3a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5h3a.5.5 0 01.5.5v1a.5.5 0 01-.5.5zm11.5-1.5a.5.5 0 01.5-.5h3a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-1z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$$;

function _extends$2q() { _extends$2q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2q.apply(this, arguments); }

function SvgMediaPlayer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2q({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$$ || (_path$$ = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.496 4.714c-.104-.628-.59-1.113-1.2-1.195a67.446 67.446 0 00-18.596 0 1.426 1.426 0 00-1.2 1.194 39.796 39.796 0 000 13.573 1.427 1.427 0 001.2 1.195 67.474 67.474 0 0018.598 0c.61-.082 1.096-.567 1.2-1.195a39.814 39.814 0 00-.002-13.572zm-14.188 9.68V8.605c.016-.342.2-.651.488-.819a.93.93 0 01.928-.007l5.466 2.893a.92.92 0 01.502.827.92.92 0 01-.502.827L9.724 15.22a.93.93 0 01-.928-.008 1.002 1.002 0 01-.488-.819z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$_;

function _extends$2p() { _extends$2p = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2p.apply(this, arguments); }

function SvgTelevision24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2p({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$_ || (_path$_ = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 4.87a2.253 2.253 0 00-2.25-2.25H2.25A2.253 2.253 0 000 4.87v11a2.253 2.253 0 002.25 2.25h.306a.25.25 0 01.214.379l-.593.987a1.251 1.251 0 002.145 1.287l1.446-2.41a.5.5 0 01.432-.243h11.6a.5.5 0 01.429.243l1.446 2.41a1.251 1.251 0 002.145-1.287l-.593-.987a.25.25 0 01.215-.379h.306A2.253 2.253 0 0024 15.87v-11zm-2.5 10.25a.5.5 0 01-.5.5H3a.5.5 0 01-.5-.5v-9.5a.5.5 0 01.5-.5h18a.5.5 0 01.5.5v9.5z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1q;

function _extends$2o() { _extends$2o = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2o.apply(this, arguments); }

function SvgGameConsole24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2o({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1q || (_g$1q = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.76 3.75h2.88c1.06 0 1.92.895 1.92 2v4.5c0 .552.43 1 .96 1s.96-.448.96-1v-4.5c0-2.21-1.72-4-3.84-4H5.76c-.53 0-.96.448-.96 1s.43 1 .96 1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.76 11.25a5.15 5.15 0 00-3.492 1.375.47.47 0 01-.317.125H9.089a.47.47 0 01-.317-.125c-2.122-1.95-5.344-1.81-7.303.318-1.959 2.128-1.959 5.486 0 7.614 1.96 2.128 5.18 2.268 7.303.318a.47.47 0 01.318-.125h4.862a.47.47 0 01.316.125c1.762 1.618 4.338 1.83 6.322.519 1.983-1.311 2.897-3.83 2.241-6.179-.655-2.35-2.722-3.965-5.071-3.965zm-10.8 6h-.72a.49.49 0 00-.48.5v.75c0 .414-.322.75-.72.75-.398 0-.72-.336-.72-.75v-.75a.49.49 0 00-.48-.5h-.72c-.398 0-.72-.336-.72-.75s.322-.75.72-.75h.72a.49.49 0 00.48-.5v-.75c0-.414.322-.75.72-.75.398 0 .72.336.72.75v.75c0 .276.215.5.48.5h.72c.398 0 .72.336.72.75s-.322.75-.72.75zm8.4.5c-.53 0-.96-.448-.96-1s.43-1 .96-1 .96.448.96 1-.43 1-.96 1zm2.4 2.5c-.53 0-.96-.448-.96-1s.43-1 .96-1 .96.448.96 1-.43 1-.96 1zm0-5c-.53 0-.96-.448-.96-1s.43-1 .96-1 .96.448.96 1-.43 1-.96 1zm2.4 2.5c-.53 0-.96-.448-.96-1s.43-1 .96-1 .96.448.96 1-.43 1-.96 1z"
  }))));
}

var _path$Z;

function _extends$2n() { _extends$2n = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2n.apply(this, arguments); }

function SvgStreamingDongle24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2n({
    width: 22,
    height: 24,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$Z || (_path$Z = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20 3H2C.9 3 0 3.9 0 5v2c0 .55.45 1 1 1s1-.45 1-1V6c0-.55.45-1 1-1h16c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1h-5c-.55 0-1 .45-1 1s.45 1 1 1h6c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM1.14 14.09c-.6-.1-1.14.39-1.14 1 0 .49.36.9.85.98 2.08.36 3.72 2 4.08 4.08.08.49.49.85.98.85.61 0 1.09-.54 1-1.14a6.997 6.997 0 00-5.77-5.77zM0 18v3h3c0-1.66-1.34-3-3-3zm1.1-7.95c-.59-.05-1.1.41-1.1 1 0 .51.38.94.88.99 4.27.41 7.67 3.81 8.08 8.08.05.5.48.87.99.87.6 0 1.06-.52 1-1.11-.53-5.19-4.66-9.31-9.85-9.83z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1p;

function _extends$2m() { _extends$2m = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2m.apply(this, arguments); }

function SvgLoudspeaker24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2m({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1p || (_g$1p = /*#__PURE__*/React__namespace.createElement("g", {
    transform: "translate(1)",
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.688.91L4.313.936c-.794 0-1.438.62-1.438 1.385v19.384c0 .765.644 1.385 1.438 1.385l14.375-.026c.793 0 1.437-.62 1.437-1.385V2.295c0-.765-.644-1.385-1.438-1.385zM11.49 9.673c2.33 0 4.43 1.352 5.322 3.425.891 2.073.398 4.46-1.25 6.046-1.647 1.586-4.124 2.06-6.276 1.202-2.153-.86-3.556-2.882-3.555-5.126 0-3.064 2.579-5.547 5.76-5.547zM9.104 5.538c0-1.269 1.069-2.298 2.386-2.298 1.318 0 2.387 1.03 2.387 2.298 0 1.27-1.069 2.299-2.387 2.299-1.317 0-2.386-1.03-2.386-2.299z"
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 11.5,
    cy: 15.222,
    rx: 1.917,
    ry: 1.846
  }))));
}

var _g$1o;

function _extends$2l() { _extends$2l = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2l.apply(this, arguments); }

function SvgSoundSystem24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2l({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1o || (_g$1o = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.5 8h-7A1.5 1.5 0 007 9.5v12A1.5 1.5 0 008.5 23h7a1.5 1.5 0 001.5-1.5v-12A1.5 1.5 0 0015.5 8zM12 14.5a3 3 0 110 6 3 3 0 010-6zM10 11a1 1 0 011-1h2a1 1 0 010 2h-2a1 1 0 01-1-1zM4.5 1h-3A1.5 1.5 0 000 2.5v19A1.5 1.5 0 001.5 23h3A1.5 1.5 0 006 21.5v-19A1.5 1.5 0 004.5 1zM3 3.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM4.5 10a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM3 13.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM22.5 1h-3A1.5 1.5 0 0018 2.5v19a1.5 1.5 0 001.5 1.5h3a1.5 1.5 0 001.5-1.5v-19A1.5 1.5 0 0022.5 1zM21 3.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm1.5 6.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM21 13.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3z"
  }))));
}

var _g$1n;

function _extends$2k() { _extends$2k = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2k.apply(this, arguments); }

function SvgStb24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2k({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1n || (_g$1n = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.565.5H2.435A2.447 2.447 0 000 2.953v12.594A2.447 2.447 0 002.435 18H8a1 1 0 100-2H2.435A.45.45 0 012 15.547V2.953a.45.45 0 01.435-.453h19.13a.45.45 0 01.435.453v12.594a.45.45 0 01-.435.453H21a1 1 0 000 2h.565A2.447 2.447 0 0024 15.547V2.953A2.447 2.447 0 0021.565.5z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.5 12.5h-6a1 1 0 00-1 1v9a1 1 0 001 1h6a1 1 0 001-1v-9a1 1 0 00-1-1zM16 17a1 1 0 110-2 1 1 0 010 2zm1 2.5a1 1 0 11-2 0 1 1 0 012 0zM13 17a1 1 0 110-2 1 1 0 010 2zm1 2.5a1 1 0 11-2 0 1 1 0 012 0zM18.328 7.5A1 1 0 0018 6.123a6.739 6.739 0 00-6.789-.146 1 1 0 10.973 1.748 4.735 4.735 0 014.771.1 1 1 0 001.373-.325zM16.664 9.31a4.175 4.175 0 00-4.21-.085 1 1 0 10.971 1.748 2.175 2.175 0 012.192.041 1 1 0 101.047-1.7V9.31z"
  }))));
}

var _g$1m;

function _extends$2j() { _extends$2j = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2j.apply(this, arguments); }

function SvgDiscPlayer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2j({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1m || (_g$1m = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11 8.5a2 2 0 011.988 2.222.249.249 0 00.249.278H19a.5.5 0 00.5-.5 8.5 8.5 0 00-17 0 .5.5 0 00.5.5h5.763a.249.249 0 00.249-.278A2 2 0 0111 8.5zM24 14.5a2.5 2.5 0 00-2.5-2.5h-19A2.5 2.5 0 000 14.5v2a2.5 2.5 0 001.818 2.405c.108.03.182.13.182.241v.1a.75.75 0 101.5 0A.25.25 0 013.75 19h16.5a.25.25 0 01.25.25.75.75 0 101.5 0v-.1c0-.112.074-.21.182-.241A2.5 2.5 0 0024 16.5v-2zm-3 1a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zm-19 0a1 1 0 011-1h12a1 1 0 010 2H3a1 1 0 01-1-1z"
  }))));
}

var _g$1l;

function _extends$2i() { _extends$2i = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2i.apply(this, arguments); }

function SvgSatellite24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2i({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1l || (_g$1l = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.407 6.909a1 1 0 001.414 0L19.3 4.432A2.5 2.5 0 0019.3.9a2.56 2.56 0 00-3.54 0l-2.476 2.475a1 1 0 000 1.413l2.123 2.121zM4.8 13.273a1.025 1.025 0 00-1.414 0L.911 15.747a2.5 2.5 0 003.535 3.536l2.475-2.476a1 1 0 000-1.414L4.8 13.273zM6.446 13.505a.5.5 0 00.707 0l6.364-6.364a.5.5 0 000-.707 5 5 0 00-7.071 7.071zM9.893 12.313a.251.251 0 00.025.377 2.055 2.055 0 002.667-.117 2.093 2.093 0 00.142-2.69.251.251 0 00-.377-.027l-2.457 2.457zM9.639 19.574a9 9 0 009.947-9.945 1 1 0 10-1.988.221 7 7 0 01-7.738 7.736 1 1 0 00-.221 1.988z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.633 9.713a1 1 0 10-1.969.347 10.007 10.007 0 01-11.5 11.608 1 1 0 10-.331 1.972c.673.113 1.354.17 2.037.17a12.013 12.013 0 0011.768-14.1l-.005.003z"
  }))));
}

var _path$Y;

function _extends$2h() { _extends$2h = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2h.apply(this, arguments); }

function SvgMusic24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2h({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$Y || (_path$Y = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.5 2.25A2.25 2.25 0 0017.4.168l-9 3.682A2.241 2.241 0 007 5.932v9.818a.25.25 0 01-.25.25H5.5a4 4 0 100 8 4.1 4.1 0 004-4v-9.242c0-.101.06-.193.155-.231l8-3.273a.25.25 0 01.345.231v4.27a.25.25 0 01-.25.25H16.5a4 4 0 100 8 4.1 4.1 0 004-4V2.25zM9.845 7.75a.25.25 0 01-.345-.231V6.436a.5.5 0 01.311-.463l7.5-3.069a.5.5 0 01.689.463v.876a.249.249 0 01-.155.231l-8 3.276z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1k;

function _extends$2g() { _extends$2g = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2g.apply(this, arguments); }

function SvgRemoteControl24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2g({
    width: 18,
    height: 23,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1k || (_g$1k = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.638 2.792a5.773 5.773 0 016.1 0c.46.294 1.08.176 1.388-.265a.937.937 0 00-.276-1.332 7.879 7.879 0 00-8.322 0 .95.95 0 00-.463.866.96.96 0 00.562.81c.327.151.714.121 1.011-.08zM2.636 4.48a.95.95 0 00-.467.866c.02.35.237.66.565.812.328.151.716.12 1.013-.083a3.677 3.677 0 013.881 0c.297.193.679.218 1 .066a.96.96 0 00.558-.8.948.948 0 00-.447-.863 5.775 5.775 0 00-6.103.001zM17.523 22.914a.703.703 0 00.238-.991l-2.31-3.542a.466.466 0 01-.076-.255v-4.032c0-1.542-1.319-2.455-2.717-3.422-.449-.31-.911-.63-1.365-.99a.475.475 0 01-.18-.324c-.125-1.23-1.201-2.168-2.488-2.168h-6c-1.38 0-2.5 1.075-2.5 2.4v9.6c0 1.326 1.12 2.4 2.5 2.4h6c.18 0 .361-.018.538-.055.19-.041.389.029.507.178.334.424.65.796.88 1.056a.766.766 0 001.296-.204.698.698 0 00-.146-.72 12.797 12.797 0 01-2.325-3.368v-.96a.703.703 0 00-.178-.465l-1.753-1.989a.682.682 0 01.056-.976.753.753 0 011.019.026l2.581 2.476a.772.772 0 001.051-.01.7.7 0 00.009-1.009l-.884-.848a.47.47 0 01-.146-.34v-2.527a.24.24 0 01.138-.215.259.259 0 01.262.023l.259.181c1.3.899 2.094 1.488 2.094 2.254v4.372c0 .136.04.27.114.384l2.5 3.835a.769.769 0 001.026.225zm-8.9-12.364c0 .53-.448.96-1 .96s-1-.43-1-.96.448-.96 1-.96c.266 0 .52.1.708.28.188.181.294.425.294.68h-.002zm-5 4.8c-.552 0-1-.43-1-.96s.448-.96 1-.96 1 .43 1 .96-.446.96-.998.96h-.002zm1 2.88c0 .53-.448.96-1 .96s-1-.43-1-.96.448-.96 1-.96c.266 0 .52.1.708.28.188.181.294.425.294.68h-.002zm-1-6.72c-.552 0-1-.43-1-.96s.448-.96 1-.96 1 .43 1 .96-.446.96-.998.96h-.002z"
  }))));
}

var _path$X;

function _extends$2f() { _extends$2f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2f.apply(this, arguments); }

function SvgRadio24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2f({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$X || (_path$X = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 10.56c0-.637-.263-1.247-.732-1.697A2.554 2.554 0 0021.5 8.16H8.154a.248.248 0 01-.243-.188.237.237 0 01.137-.269l10.878-4.919a.968.968 0 00.651-.794.947.947 0 00-.45-.914 1.036 1.036 0 00-1.053-.02L2.366 8.148a.262.262 0 01-.085.022C.991 8.279 0 9.316 0 10.56v9.6c0 1.325 1.12 2.4 2.5 2.4h.75c.138 0 .25.107.25.24v.24c0 .53.448.96 1 .96s1-.43 1-.96v-.24c0-.133.112-.24.25-.24h12.5c.138 0 .25.107.25.24v.24c0 .53.448.96 1 .96s1-.43 1-.96v-.24c0-.133.112-.24.25-.24h.75c.663 0 1.299-.253 1.768-.703.469-.45.732-1.06.732-1.697v-9.6zm-4.5 10.56c-.828 0-1.5-.645-1.5-1.44 0-.795.672-1.44 1.5-1.44s1.5.645 1.5 1.44c0 .795-.672 1.44-1.5 1.44zm.5-4.32H4c-1.105 0-2-.86-2-1.92v-.48c0-.133.112-.24.25-.24h19.5c.138 0 .25.107.25.24v.48c0 1.06-.895 1.92-2 1.92zM4.5 21.12c-.828 0-1.5-.645-1.5-1.44 0-.795.672-1.44 1.5-1.44s1.5.645 1.5 1.44c0 .795-.672 1.44-1.5 1.44zM22 12.48c0 .133-.112.24-.25.24H2.25a.245.245 0 01-.25-.24V12c0-1.06.895-1.92 2-1.92h16c1.105 0 2 .86 2 1.92v.48z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1j;

function _extends$2e() { _extends$2e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2e.apply(this, arguments); }

function SvgPhotoCamera24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2e({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1j || (_g$1j = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 14.538,
    cy: 12.578,
    rx: 3.462,
    ry: 3.594
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.718 5.87h-1.215a.495.495 0 01-.444-.332c-.57-1.25-1.16-2.543-2.444-2.543H12c-.989 0-1.51.745-2.454 2.1-.355.505-.471.775-.78.775H3.228C1.324 5.87.923 7.028.923 8v9.955a2.204 2.204 0 00.655 1.728c.458.444 1.084.65 1.704.562h17.436a2.032 2.032 0 001.704-.562 2.204 2.204 0 00.655-1.728V8c0-.972-.409-2.13-2.36-2.13zm-.872 6.708c0 3.043-2.376 5.51-5.308 5.51-2.93 0-5.307-2.467-5.307-5.51 0-3.043 2.376-5.51 5.307-5.51 2.93.003 5.305 2.468 5.308 5.51zM5.538 9.464c0 .661-.516 1.197-1.153 1.197-.638 0-1.154-.536-1.154-1.197 0-.662.516-1.198 1.154-1.198.637 0 1.153.536 1.153 1.198z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3.23 4.896L6 4.911a.47.47 0 00.462-.479v-.24c0-.793-.62-1.437-1.385-1.437h-.923c-.765 0-1.385.644-1.385 1.438v.224c0 .265.207.48.462.48z"
  }))));
}

var _g$1i;

function _extends$2d() { _extends$2d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2d.apply(this, arguments); }

function SvgPhotos24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2d({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1i || (_g$1i = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.051 21.282L19.216 1.917C18.994.803 18.05.004 16.956 0H2.308C1.893 0 1.5.193 1.237.525c-.263.333-.37.771-.288 1.193L3.195 13.06a.254.254 0 010 .115L.982 21.088a.985.985 0 00.221.931.902.902 0 00.887.267.94.94 0 00.666-.664l.989-3.546a.232.232 0 01.23-.173.233.233 0 01.218.191l.591 2.99c.222 1.113 1.165 1.912 2.26 1.916h14.648c.415 0 .808-.193 1.071-.525.263-.333.37-.771.288-1.193zM4.354 3.824a.387.387 0 01.07-.332.356.356 0 01.3-.138h11.328a.6.6 0 01.554.47l3.039 15.352a.387.387 0 01-.07.332.356.356 0 01-.3.138H7.949a.6.6 0 01-.554-.47L4.354 3.824z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.23 16.286l7.385.006a.458.458 0 00.388-.22.495.495 0 00.032-.458l-2.307-5.27a.462.462 0 00-.4-.282.458.458 0 00-.422.242l-1.477 2.683a.23.23 0 01-.332.082l-.768-.532a.451.451 0 00-.64.133l-1.846 2.868a.495.495 0 00-.024.496.46.46 0 00.412.252zM10.154 10.063c.765 0 1.384-.644 1.384-1.438 0-.794-.62-1.438-1.384-1.438-.765 0-1.385.644-1.385 1.438 0 .794.62 1.438 1.385 1.438z"
  }))));
}

var _g$1h;

function _extends$2c() { _extends$2c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2c.apply(this, arguments); }

function SvgMicrophone24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2c({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1h || (_g$1h = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18 6.25a6 6 0 10-12 0V11a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V6.25zM12 18a6 6 0 005.77-4.364.5.5 0 00-.481-.636H6.711a.5.5 0 00-.481.636A6 6 0 0012 18z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21 8.25a1 1 0 00-1 1v2.25a7.915 7.915 0 01-8 8 7.915 7.915 0 01-8-8V9.25a1 1 0 10-2 0v2.25a9.878 9.878 0 008.779 9.929.25.25 0 01.221.248v1.073a1 1 0 002 0v-1.073c0-.127.095-.233.221-.248A9.878 9.878 0 0022 11.5V9.25a1 1 0 00-1-1z"
  }))));
}

var _g$1g;

function _extends$2b() { _extends$2b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2b.apply(this, arguments); }

function SvgProjector24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2b({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1g || (_g$1g = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 16.5v-7A1.5 1.5 0 0022.5 8h-.254a.249.249 0 00-.25.258V8.5a7 7 0 11-14 0v-.242A.249.249 0 007.754 8H1.5A1.5 1.5 0 000 9.5v7A1.5 1.5 0 001.5 18h21a1.5 1.5 0 001.5-1.5zM3.5 13.75a.75.75 0 11-1.5 0v-2.5a.75.75 0 111.5 0v2.5zm3 0a.75.75 0 11-1.5 0v-2.5a.75.75 0 111.5 0v2.5zM1.5 20a1 1 0 002 0v-.75a.249.249 0 00-.25-.25h-1.5a.249.249 0 00-.25.25V20zM20.5 20a1 1 0 002 0v-.75a.249.249 0 00-.25-.25h-1.5a.249.249 0 00-.25.25V20z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15 14a5.5 5.5 0 10-5.5-5.5A5.507 5.507 0 0015 14zm0-9a3.5 3.5 0 110 7 3.5 3.5 0 010-7z"
  }))));
}

var _g$1f;

function _extends$2a() { _extends$2a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2a.apply(this, arguments); }

function SvgComputer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2a({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1f || (_g$1f = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22 .251H2a2 2 0 00-2 2v13.5a2 2 0 002 2h7.65a.248.248 0 01.248.281l-.2 1.594a.251.251 0 00.287.279A13 13 0 0112 19.751c.674 0 1.348.05 2.014.153a.252.252 0 00.287-.278l-.2-1.594a.25.25 0 01.248-.281H22a2 2 0 002-2v-13.5a2 2 0 00-2-2zm-19.5 15.5a.5.5 0 01-.5-.5v-12.5a.5.5 0 01.5-.5h19a.5.5 0 01.5.5v12.5a.5.5 0 01-.5.5h-19zM12 20.751c-2.667 0-5.5.876-5.5 2.5a.5.5 0 00.5.5h10a.5.5 0 00.5-.5c0-1.624-2.833-2.5-5.5-2.5z"
  }))));
}

var _g$1e;

function _extends$29() { _extends$29 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$29.apply(this, arguments); }

function SvgLaptop24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$29({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1e || (_g$1e = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3.5 14.734a1 1 0 001-1V5.418c0-.368.299-.667.667-.667h13.666c.368 0 .667.299.667.667v8.316a1 1 0 002 0V5.418a2.669 2.669 0 00-2.667-2.667H5.167A2.669 2.669 0 002.5 5.418v8.316a1 1 0 001 1zM23.894 16.443a.5.5 0 00-.394-.192h-8a.5.5 0 00-.5.5c0 .71-1.232 1.5-3 1.5s-3-.79-3-1.5a.5.5 0 00-.5-.5h-8a.5.5 0 00-.485.621 5.773 5.773 0 005.608 4.379h12.754a5.773 5.773 0 005.608-4.379.5.5 0 00-.091-.429z"
  }))));
}

var _g$1d;

function _extends$28() { _extends$28 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$28.apply(this, arguments); }

function SvgDesktop24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$28({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1d || (_g$1d = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.359 19.014a.169.169 0 01.141-.263 1 1 0 000-2h-10a.5.5 0 01-.5-.5v-11.5a.5.5 0 01.5-.5H19a.5.5 0 01.5.5v.5a1 1 0 002 0v-1a2 2 0 00-2-2H2a2 2 0 00-2 2v12.5a2 2 0 002 2h6.349a.25.25 0 01.208.388l-1.223 1.834a.5.5 0 00.416.778h5.5a.5.5 0 00.416-.778l-1.307-1.959z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23 7.751h-7a1 1 0 00-1 1v12a1 1 0 001 1h7a1 1 0 001-1v-12a1 1 0 00-1-1zM22 11h-2a.75.75 0 110-1.5h2a.75.75 0 110 1.5zm.25 7.75a.75.75 0 01-.75.75h-4a.75.75 0 110-1.5h4a.75.75 0 01.75.751v-.001z"
  }))));
}

var _g$1c;

function _extends$27() { _extends$27 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$27.apply(this, arguments); }

function SvgPrinter24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$27({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1c || (_g$1c = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.75 6a1 1 0 001-1V2h8.836l2.164 2.163V5a1 1 0 002 0V3.749a1 1 0 00-.293-.707L17 .587A2.01 2.01 0 0015.586 0H6.75a2 2 0 00-2 2v3a1 1 0 001 1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.5 7h-19A2.5 2.5 0 000 9.5V14a2.5 2.5 0 002.5 2.5H5v6.25c0 .69.56 1.25 1.25 1.25h12c.69 0 1.25-.56 1.25-1.25V16.5h2A2.5 2.5 0 0024 14V9.5A2.5 2.5 0 0021.5 7zm-18 4.5a1 1 0 110-2 1 1 0 010 2zm14 10a.5.5 0 01-.5.5H7.5a.5.5 0 01-.5-.5v-9.043a.5.5 0 01.5-.5H17a.5.5 0 01.5.5V21.5z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15 14.749H9.5a.75.75 0 100 1.5H15a.75.75 0 100-1.5zM13.25 18.249H9.5a.75.75 0 100 1.5h3.75a.75.75 0 100-1.5z"
  }))));
}

var _path$W;

function _extends$26() { _extends$26 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$26.apply(this, arguments); }

function SvgPhone24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$26({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$W || (_path$W = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.673 17.009l-2.452-2.453a2.811 2.811 0 00-3.979 0l-.5.5A54.366 54.366 0 018.94 8.245l.5-.5a2.817 2.817 0 000-3.978l-2.457-2.45a2.883 2.883 0 00-3.983 0L1.66 2.663a3.981 3.981 0 00-.5 4.994 54.174 54.174 0 0015.173 15.176 4.015 4.015 0 005-.5l1.345-1.346a2.809 2.809 0 000-3.977l-.005-.001z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$1b;

function _extends$25() { _extends$25 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$25.apply(this, arguments); }

function SvgVoip24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$25({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1b || (_g$1b = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.25 6.25H12a.249.249 0 00-.25.25V22a.249.249 0 00.25.25h10.25a1.5 1.5 0 001.5-1.5v-13a1.5 1.5 0 00-1.5-1.5zM18 16a1 1 0 110-2 1 1 0 010 2zm1 2.75a1 1 0 11-2 0 1 1 0 012 0zm-4.25-7a.522.522 0 01-.542-.5v-2a.522.522 0 01.542-.5h5.959c.287-.01.53.213.542.5v2a.523.523 0 01-.542.5H14.75zm0 4.25a1 1 0 110-2 1 1 0 010 2zm1 2.75a1 1 0 11-2 0 1 1 0 012 0zm5.5-2.75a1 1 0 110-2 1 1 0 010 2zm1 2.75a1 1 0 11-2 0 1 1 0 012 0zM2.5 6.25h-.75a1.5 1.5 0 00-1.5 1.5v13a1.5 1.5 0 001.5 1.5h.75a.25.25 0 00.25-.25V6.5a.25.25 0 00-.25-.25zM8.25 3.75h-1v-2.5a1 1 0 10-2 0v2.778a1.99 1.99 0 00-1 1.722v16a2 2 0 002 2h2a2 2 0 002-2v-16a2 2 0 00-2-2z"
  }))));
}

var _g$1a;

function _extends$24() { _extends$24 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$24.apply(this, arguments); }

function SvgConferencing24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$24({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1a || (_g$1a = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6.765 12.588h11.47A2.768 2.768 0 0021 9.823V2.764A2.768 2.768 0 0018.235 0H6.765A2.768 2.768 0 004 2.764v7.059a2.768 2.768 0 002.765 2.765zM6 2.764A.766.766 0 016.765 2h11.47c.422 0 .764.342.765.764v7.059a.766.766 0 01-.765.765h-1.757a.248.248 0 01-.176-.073 5.142 5.142 0 00-2.161-1.29.249.249 0 01-.058-.453 2.85 2.85 0 10-2.929.015.25.25 0 01-.053.454 5.14 5.14 0 00-2.111 1.274.251.251 0 01-.176.073H6.765A.766.766 0 016 9.823V2.764zM23.39 23.185a5.154 5.154 0 00-2.54-1.7.25.25 0 01-.058-.454 2.849 2.849 0 10-2.931.016.25.25 0 01-.053.454 5.108 5.108 0 00-1.908 1.077.251.251 0 01-.334 0 5.117 5.117 0 00-1.962-1.1.251.251 0 01-.058-.454 2.85 2.85 0 10-2.93.016.25.25 0 01-.053.454 5.123 5.123 0 00-2.012 1.178.249.249 0 01-.344 0 5.136 5.136 0 00-2.037-1.186.25.25 0 01-.055-.454 2.85 2.85 0 10-2.93 0 .25.25 0 01-.056.454 5.149 5.149 0 00-2.515 1.7A.5.5 0 001 24h22a.5.5 0 00.39-.814v-.001z"
  }))));
}

var _g$19;

function _extends$23() { _extends$23 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$23.apply(this, arguments); }

function SvgScanner24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$23({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$19 || (_g$19 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.334 20a.249.249 0 00-.247.29C.458 22.593 2.448 24 5.5 24h13c3.052 0 5.042-1.408 5.413-3.71a.249.249 0 00-.247-.29H.334zM19.5 21a.75.75 0 110 1.5.75.75 0 010-1.5zm-3 0a.75.75 0 110 1.5.75.75 0 010-1.5zM4.031 9.751a.25.25 0 00-.232.157L.3 18.658A.25.25 0 00.531 19h22.938a.25.25 0 00.232-.343l-3.5-8.75a.25.25 0 00-.232-.157l-15.938.001zm15.883 7.53a.5.5 0 01-.414.22h-15a.5.5 0 01-.464-.686l2-5A.5.5 0 016.5 11.5h11a.5.5 0 01.464.314l2 5a.5.5 0 01-.05.467zM20.09 8.251c.118 0 .22-.084.244-.2L21.988.609A.5.5 0 0021.5 0h-19a.5.5 0 00-.488.608l1.654 7.447c.024.116.126.2.244.2l16.18-.004z"
  }))));
}

var _g$18;

function _extends$22() { _extends$22 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$22.apply(this, arguments); }

function SvgPos24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$22({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$18 || (_g$18 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.269 8.869a3.3 3.3 0 00-2.027-.7 2.993 2.993 0 00-.6.064.251.251 0 00-.126.422l3.9 3.9c.461.442.777 1.013.907 1.638a3 3 0 01-.823 2.687l-.383.384a.251.251 0 00.027.377l.185.139a.75.75 0 01-.9 1.2l-3.276-2.457-.011-.008-.2-.135a1.563 1.563 0 00-.413-.182 1.552 1.552 0 00-1.548 2.575l.194.193a.251.251 0 010 .354l-.7.7a.249.249 0 01-.353 0l-8.596-8.584a.25.25 0 010-.353L10.612 6a.249.249 0 01.354 0l8.586 8.586a.25.25 0 010 .353l-.6.594a.736.736 0 00.028 1.07.737.737 0 001-.011l.629-.592.006-.007a1.748 1.748 0 000-2.471l-8.589-8.586a1.75 1.75 0 00-2.474 0l-5.086 5.086a1.749 1.749 0 000 2.475l8.586 8.586c.684.681 1.79.681 2.474 0l.7-.7a.25.25 0 01.354.001l.37.369c.116.116.241.221.367.326.53.447 1.142.79 1.8 1.011l4.432 1.477a.251.251 0 00.329-.237V11.8a.253.253 0 00-.1-.2l-3.509-2.731zM7.875 1.923a.75.75 0 000-1.5 7.759 7.759 0 00-7.75 7.75.75.75 0 001.5 0 6.257 6.257 0 016.25-6.25z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4.822 7.9a.736.736 0 00.032-.1A3.036 3.036 0 017.5 5.153a.627.627 0 00.1-.035.736.736 0 00.546-.801.747.747 0 00-.836-.652A4.531 4.531 0 003.366 7.61a.75.75 0 00.745.843.725.725 0 00.189-.036.736.736 0 00.522-.517zM8.685 9.691a.738.738 0 00.185.709l.364.365a.25.25 0 01.037.307 1.641 1.641 0 001.921 2.417l2.03-.676a.149.149 0 01.152.246l-1.421 1.42a.75.75 0 001.061 1.061l.321-.321a.249.249 0 01.353 0l.321.321a.75.75 0 101.06-1.061l-.363-.364a.25.25 0 01-.037-.307 1.642 1.642 0 00-1.922-2.418l-2.029.676a.149.149 0 01-.153-.035.15.15 0 010-.21l1.421-1.421a.75.75 0 00-1.06-1.06l-.321.321a.252.252 0 01-.354 0l-.32-.321a.741.741 0 00-.709-.185.67.67 0 00-.537.536z"
  }))));
}

var _g$17;

function _extends$21() { _extends$21 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$21.apply(this, arguments); }

function SvgClock24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$21({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$17 || (_g$17 = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21 0H3C1.346 0 0 1.346 0 3v18c0 1.655 1.346 3 3 3h18c1.654 0 3-1.345 3-3V3c0-1.654-1.346-3-3-3zm-9 20c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.5 6a1 1 0 00-1 1v6a.5.5 0 00.5.5h4a1 1 0 001-1l-.007-.117A1 1 0 0015 11.5h-2.5V7a1 1 0 00-1-1z",
    fillRule: "nonzero"
  }))));
}

var _g$16;

function _extends$20() { _extends$20 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$20.apply(this, arguments); }

function SvgBarcode24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$20({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$16 || (_g$16 = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4 2H.8c-.442 0-.8.355-.8.792v3.166c0 .437.358.792.8.792.442 0 .8-.355.8-.792V3.583H4c.442 0 .8-.354.8-.791A.796.796 0 004 2zM23.2 16.25c-.442 0-.8.355-.8.792v2.375H20c-.442 0-.8.354-.8.791 0 .437.358.792.8.792h3.2c.442 0 .8-.355.8-.792v-3.166a.796.796 0 00-.8-.792zM23.2 2H20c-.442 0-.8.355-.8.792 0 .437.358.791.8.791h2.4v2.375c0 .437.358.792.8.792.442 0 .8-.355.8-.792V2.792A.796.796 0 0023.2 2zM4 19.417H1.6v-2.375a.796.796 0 00-.8-.792c-.442 0-.8.355-.8.792v3.166c0 .437.358.792.8.792H4c.442 0 .8-.355.8-.792a.796.796 0 00-.8-.791zM3.2 5.167h1.6v12.667H3.2zM6.4 5.167H8v9.5H6.4zM9.6 5.167h1.6v9.5H9.6zM12.8 5.167h1.6v12.667h-1.6zM16 5.167h1.6v9.5H16zM19.2 5.167h1.6v12.667h-1.6zM6.4 16.25H8v1.583H6.4zM9.6 16.25h1.6v1.583H9.6zM16 16.25h1.6v1.583H16z"
  }))));
}

var _g$15;

function _extends$1$() { _extends$1$ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1$.apply(this, arguments); }

function SvgSurveillanceCamera24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1$({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$15 || (_g$15 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.37 5.53l-1.53.412a.5.5 0 00-.365.412A2.5 2.5 0 0115 8.5H5.5A.5.5 0 005 9v.5A2.5 2.5 0 007.5 12h1.25a.5.5 0 01.5.5v4.288a.5.5 0 01-.421.494l-5.75.918a.5.5 0 01-.579-.493v-.957a1.25 1.25 0 00-2.5 0v6a1.25 1.25 0 002.5 0v-1.5a.5.5 0 01.421-.494l7.01-1.117h.021a2.255 2.255 0 001.8-2.2V12.5a.5.5 0 01.5-.5H19a1 1 0 001-1V6.013a.5.5 0 00-.63-.483z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.788.385A.991.991 0 0023 0H7a3 3 0 00-3 3v3a1 1 0 001 1h10a1 1 0 001-1v-.733a.5.5 0 01.37-.483l6.413-1.724a.953.953 0 00.674-.641l.513-1.176a.994.994 0 00-.182-.858zM22 6a1 1 0 00-1 1v2a1 1 0 002 0V7a1 1 0 00-1-1z"
  }))));
}

var _g$14;

function _extends$1_() { _extends$1_ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1_.apply(this, arguments); }

function SvgSmartHome24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1_({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$14 || (_g$14 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.792 17.771a.986.986 0 00-.206-1.379L17.6 11.958a.986.986 0 00-1.183.008L10.579 16.4a.985.985 0 001.192 1.568l.16-.121a.251.251 0 01.4.2V23.1a.739.739 0 00.739.74h1.971a.739.739 0 00.739-.74v-3.453a1.232 1.232 0 012.463 0V23.1a.739.739 0 00.739.74h1.971a.739.739 0 00.739-.74v-5.161a.251.251 0 01.4-.2l.322.238a.984.984 0 001.378-.2v-.006zM3.378 10.533A3.746 3.746 0 01.9 9.565 3.093 3.093 0 01.015 7.3c0-1.58 1.141-2.93 2.7-3.192a.249.249 0 00.2-.178 5.175 5.175 0 019.307-1.43c.04.06.102.099.173.109.816.12 1.573.494 2.165 1.068a4 4 0 01-2.336 6.848 1.083 1.083 0 01-.127.008H3.378zm-.13-4.5a1.268 1.268 0 10.145 2.528h8.626a2.019 2.019 0 00-.294-4.024.927.927 0 01-.927-.563A3.206 3.206 0 004.7 5.154a.985.985 0 01-1.186.907 1.3 1.3 0 00-.266-.027v-.001zM10.361 20.88a.986.986 0 00-.985-.986H7.405a.987.987 0 01-.986-.985V16.2a.25.25 0 01.25-.25h.736a.986.986 0 00.7-1.683L6.131 12.3a.986.986 0 00-1.394 0l-1.97 1.97a.986.986 0 00.7 1.683H4.2a.25.25 0 01.25.25v2.707a2.959 2.959 0 002.956 2.956h1.97a.985.985 0 00.985-.986z"
  }))));
}

var _g$13;

function _extends$1Z() { _extends$1Z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1Z.apply(this, arguments); }

function SvgSmartPlug24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1Z({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$13 || (_g$13 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20 6h-2.25a.25.25 0 01-.25-.25V1.5a1.5 1.5 0 00-3 0v4.25a.25.25 0 01-.25.25h-4.5a.25.25 0 01-.25-.25V1.5a1.5 1.5 0 00-3 0v4.25a.25.25 0 01-.25.25H4a1.5 1.5 0 000 3h16a1.5 1.5 0 000-3zM18 10.5H6a.5.5 0 00-.5.5v2.5a4.488 4.488 0 003.789 4.42.25.25 0 01.211.247V19.5a1.5 1.5 0 001.286 1.484.25.25 0 01.214.248V23a1 1 0 002 0v-1.767c0-.124.091-.23.214-.248A1.5 1.5 0 0014.5 19.5v-1.332a.25.25 0 01.211-.247A4.488 4.488 0 0018.5 13.5V11a.5.5 0 00-.5-.5z"
  }))));
}

var _g$12;

function _extends$1Y() { _extends$1Y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1Y.apply(this, arguments); }

function SvgLight24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1Y({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$12 || (_g$12 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 0a8.994 8.994 0 00-4.338 16.876c.148.081.314.124.483.124h7.71c.169 0 .335-.043.483-.124A8.994 8.994 0 0012 0zm3.713 14.924a.5.5 0 01-.265.076H13.5a.5.5 0 01-.5-.5v-2.479a.251.251 0 01.292-.247c.069.012.138.018.208.018a1.5 1.5 0 001.061-.438l1.146-1.147a1 1 0 00-1.414-1.414l-.616.616a.25.25 0 01-.354 0l-.616-.616a1 1 0 00-1.414 0l-.616.616a.25.25 0 01-.354 0l-.616-.616a1 1 0 00-1.414 1.414l1.146 1.147c.335.333.808.486 1.274.413a.25.25 0 01.287.247V14.5a.5.5 0 01-.5.5H8.552a.5.5 0 01-.265-.076 7 7 0 117.426 0zM15 19a.5.5 0 00-.5-.5h-5a.5.5 0 00-.5.5v1.5a1.5 1.5 0 001.5 1.5.5.5 0 01.5.5v.5a1 1 0 002 0v-.5a.5.5 0 01.5-.5 1.5 1.5 0 001.5-1.5V19z"
  }))));
}

var _g$11;

function _extends$1X() { _extends$1X = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1X.apply(this, arguments); }

function SvgVoiceControl24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1X({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$11 || (_g$11 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4 9v6a1 1 0 002 0V9a1 1 0 10-2 0zM8.5 6.5a1 1 0 00-1 1v9a1 1 0 002 0v-9a1 1 0 00-1-1zM20 15V9a1 1 0 00-2 0v6a1 1 0 002 0zM16.5 7.5a1 1 0 00-2 0v9a1 1 0 002 0v-9zM12 3.5a1 1 0 00-1 1v15a1 1 0 002 0v-15a1 1 0 00-1-1zM6.5 22H2.25a.25.25 0 01-.25-.25V17.5a1 1 0 00-2 0V22a2 2 0 002 2h4.5a1 1 0 000-2zM1 7.5a1 1 0 001-1V2.25A.25.25 0 012.25 2H6.5a1 1 0 100-2H2a2 2 0 00-2 2v4.5a1 1 0 001 1zM23 16.5a1 1 0 00-1 1v4.25a.25.25 0 01-.25.25H17.5a1 1 0 000 2H22a2 2 0 002-2v-4.5a1 1 0 00-1-1zM22 0h-4.5a1 1 0 000 2h4.25a.25.25 0 01.25.25V6.5a1 1 0 002 0V2a2 2 0 00-2-2z"
  }))));
}

var _g$10;

function _extends$1W() { _extends$1W = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1W.apply(this, arguments); }

function SvgThermostat24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1W({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$10 || (_g$10 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13.524 15.767a.94.94 0 01-.274-.66V2.88c0-1.59-1.343-2.88-3-2.88s-3 1.29-3 2.88v12.227a.94.94 0 01-.274.66A4.187 4.187 0 005.75 18.72c-.005 1.94 1.339 3.647 3.286 4.17 1.946.524 4.018-.263 5.064-1.923 1.047-1.661.811-3.788-.576-5.2zM10.25 20.64c-.906 0-1.7-.583-1.934-1.423-.234-.84.15-1.727.934-2.16a.477.477 0 00.25-.416V11.52c0-.398.336-.72.75-.72s.75.322.75.72v5.122c0 .171.095.33.25.415.784.435 1.166 1.32.932 2.16-.235.84-1.027 1.423-1.932 1.423zM20.25 11.52c0 .53-.448.96-1 .96h-3.5c-.552 0-1-.43-1-.96s.448-.96 1-.96h3.5c.552 0 1 .43 1 .96zM16.75 3.84h-1c-.552 0-1-.43-1-.96s.448-.96 1-.96h1c.552 0 1 .43 1 .96s-.448.96-1 .96zM16.75 8.16h-1c-.552 0-1-.43-1-.96s.448-.96 1-.96h1c.552 0 1 .43 1 .96s-.448.96-1 .96z"
  }))));
}

var _g$$;

function _extends$1V() { _extends$1V = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1V.apply(this, arguments); }

function SvgPowerSystem24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1V({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$$ || (_g$$ = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M14.5 6.048a.5.5 0 01-.5-.5 1.5 1.5 0 00-1.5-1.5h-1a1.5 1.5 0 00-1.5 1.5.5.5 0 01-.5.5 2.5 2.5 0 00-2.5 2.5v9a2.5 2.5 0 002.5 2.5h5a2.5 2.5 0 002.5-2.5v-9a2.5 2.5 0 00-2.5-2.5zm.576 6.832l-3.167 4.048a.445.445 0 01-.795-.275v-2.212a.5.5 0 00-.5-.5H9.335a.445.445 0 01-.35-.719l3.113-4a.445.445 0 01.8.274v2.169a.5.5 0 00.5.5h1.333a.444.444 0 01.35.718l-.005-.003zM3.423 17.194a9.9 9.9 0 01-.78-1.609 1 1 0 00-1.872.7c.253.672.567 1.32.938 1.934a1 1 0 101.714-1.03v.005zM6.5 20.4a10.09 10.09 0 01-1.4-1.116 1 1 0 00-1.38 1.447c.519.497 1.081.946 1.68 1.342A1.001 1.001 0 106.5 20.4zM10.664 21.96a9.987 9.987 0 01-1.746-.395 1 1 0 10-.616 1.9 11.9 11.9 0 002.1.474 1 1 0 00.265-1.982l-.003.003zM15.092 21.561a10 10 0 01-1.745.4 1 1 0 10.267 1.982 12.087 12.087 0 002.095-.477 1 1 0 10-.617-1.9v-.005zM22.649 14.991a1 1 0 00-1.288.583 10.085 10.085 0 01-.779 1.611 1.001 1.001 0 101.718 1.029c.37-.616.683-1.263.937-1.935a1 1 0 00-.588-1.288zM18.906 19.281c-.433.413-.901.787-1.4 1.117a1 1 0 101.1 1.668c.599-.396 1.16-.844 1.68-1.339a1 1 0 10-1.382-1.446h.002z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 .048C5.376.055.007 5.424 0 12.048c0 .368.017.731.049 1.089a1 1 0 001.992-.179c-.027-.3-.041-.603-.041-.91 0-5.523 4.477-10 10-10s10 4.477 10 10c0 .307-.014.61-.041.91a1 1 0 001.992.179c.032-.358.049-.721.049-1.089-.007-6.624-5.376-11.993-12-12z"
  }))));
}

var _g$_;

function _extends$1U() { _extends$1U = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1U.apply(this, arguments); }

function SvgSolarPanel24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1U({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$_ || (_g$_ = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("rect", {
    x: 11.225,
    y: 20.25,
    width: 4,
    height: 3.75,
    rx: 0.5
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13.725 13.25v1.5a.5.5 0 00.5.5h7.7a.25.25 0 00.218-.371l-1.039-1.872a.5.5 0 00-.438-.257h-6.441a.5.5 0 00-.5.5zM12.225 12.75H5.781a.5.5 0 00-.437.257L4.3 14.879a.25.25 0 00.219.371h7.7a.5.5 0 00.5-.5v-1.5a.5.5 0 00-.494-.5zM13.725 9.75v1.5a.5.5 0 00.5.5h5.758a.25.25 0 00.219-.371l-.9-1.615a1 1 0 00-.874-.514h-4.203a.5.5 0 00-.5.5zM12.725 9.75a.5.5 0 00-.5-.5H8.019a1 1 0 00-.874.515l-.9 1.614a.25.25 0 00.218.371h5.758a.5.5 0 00.5-.5l.004-1.5zM23.749 17.765l-.7-1.258a.5.5 0 00-.437-.257h-8.387a.5.5 0 00-.5.5v2a.5.5 0 00.5.5h8.65a1 1 0 00.874-1.485zM12.725 18.75v-2a.5.5 0 00-.5-.5H3.836a.5.5 0 00-.437.257l-.7 1.258a1 1 0 00.875 1.485h8.65a.5.5 0 00.501-.5zM4.581 9.75a.75.75 0 101.117-1 2.25 2.25 0 113.927-1.5.75.75 0 001.5 0 3.75 3.75 0 10-6.544 2.5zM7.375 2.5a.75.75 0 00.75-.75v-1a.75.75 0 00-1.5 0v1c0 .414.336.75.75.75zM11.8 3.891l.707-.707a.75.75 0 10-1.061-1.06l-.707.707a.75.75 0 001.061 1.06zM12.125 7.25c0 .414.336.75.75.75h1a.75.75 0 100-1.5h-1a.75.75 0 00-.75.75zM2.956 3.891a.75.75 0 001.06-1.06l-.707-.707a.75.75 0 10-1.06 1.06l.707.707zM3.309 12.376l.707-.707a.75.75 0 10-1.06-1.06l-.707.707a.75.75 0 101.06 1.06zM2.625 7.25a.75.75 0 00-.75-.75h-1a.75.75 0 000 1.5h1a.75.75 0 00.75-.75z"
  }))));
}

var _path$V;

function _extends$1T() { _extends$1T = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1T.apply(this, arguments); }

function SvgSmartMeter24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1T({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$V || (_path$V = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 2.5C24 1.12 22.508 0 20.667 0H3.333C1.493 0 0 1.12 0 2.5v19c0 .663.351 1.299.976 1.768.625.469 1.473.732 2.357.732h17.334c.884 0 1.732-.263 2.357-.732.625-.47.976-1.105.976-1.768v-19zm-3.333 12.429a.673.673 0 01-.667.678h-2.667a.335.335 0 01-.314-.23c-.683-2.028-2.48-3.453-4.579-3.632a.339.339 0 01-.267-.188L9.2 5.5a1.323 1.323 0 00-1.79-.607 1.37 1.37 0 00-.597 1.82l2.618 5.328c.078.16.02.355-.134.443a5.4 5.4 0 00-2.316 2.894.335.335 0 01-.314.23H4a.673.673 0 01-.667-.68V4.072c0-.374.299-.678.667-.678h16c.368 0 .667.304.667.678V14.93z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$Z;

function _extends$1S() { _extends$1S = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1S.apply(this, arguments); }

function SvgHeating24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1S({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$Z || (_g$Z = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 9.12a.49.49 0 00-.5-.48H.5a.49.49 0 00-.5.48v2.4c0 .53.448.96 1 .96h1.2c.19 0 .362.103.447.265l.823 1.578c.251.49.771.799 1.34.797h14.38a1.495 1.495 0 001.34-.797l.822-1.578a.503.503 0 01.448-.265H23c.552 0 1-.43 1-.96v-2.4zm-4.982 3.815a.503.503 0 01-.447.265H5.429a.503.503 0 01-.447-.265l-.5-.96a.463.463 0 01.022-.467.505.505 0 01.425-.228h14.142c.173 0 .334.086.425.228.092.141.1.318.022.467l-.5.96zM12.64 16.542a1.03 1.03 0 00-1.409.124.934.934 0 00.129 1.352c.189.151.276.22-.253 1.268-.447.887-1.2 2.373.253 3.532a1.03 1.03 0 001.409-.124.934.934 0 00-.129-1.352c-.165-.132-.248-.198.267-1.22.452-.897 1.21-2.398-.267-3.58zM6.379 16.542a1.033 1.033 0 00-.986-.163.971.971 0 00-.64.738.94.94 0 00.347.901c.189.151.276.22-.253 1.268-.448.887-1.2 2.373.253 3.532.275.22.65.282.986.163.335-.118.58-.4.64-.738a.94.94 0 00-.346-.901c-.165-.132-.248-.198.267-1.22.453-.897 1.209-2.398-.268-3.58zM18.883 16.542a1.033 1.033 0 00-.986-.163.971.971 0 00-.64.738.94.94 0 00.346.901c.189.151.275.22-.253 1.268-.448.887-1.2 2.373.253 3.532a1.03 1.03 0 001.409-.124.934.934 0 00-.129-1.352c-.165-.132-.248-.198.267-1.22.45-.897 1.21-2.398-.267-3.58zM21.5 0h-19C1.12 0 0 1.075 0 2.4v4.32c0 .265.224.48.5.48h23a.49.49 0 00.5-.48V2.4c0-.637-.263-1.247-.732-1.697A2.554 2.554 0 0021.5 0zM17 5.28c-.552 0-1-.43-1-.96s.448-.96 1-.96 1 .43 1 .96-.448.96-1 .96zm3.5 0c-.552 0-1-.43-1-.96s.448-.96 1-.96 1 .43 1 .96-.448.96-1 .96z"
  }))));
}

var _g$Y;

function _extends$1R() { _extends$1R = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1R.apply(this, arguments); }

function SvgAppliance24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1R({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$Y || (_g$Y = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.5 4.5h-21A.5.5 0 001 5v17.5A1.5 1.5 0 002.5 24h19a1.5 1.5 0 001.5-1.5V5a.5.5 0 00-.5-.5zm-7 2.5a1 1 0 110 2 1 1 0 010-2zm-12 .5A.5.5 0 014 7h8a.5.5 0 01.5.5v1a.5.5 0 01-.5.5H4a.5.5 0 01-.5-.5v-1zm17 13.5a.5.5 0 01-.5.5H4a.5.5 0 01-.5-.5v-9a.5.5 0 01.5-.5h16a.5.5 0 01.5.5v9zm-1-12a1 1 0 110-2 1 1 0 010 2zM22.5 0h-21A1.5 1.5 0 000 1.5V2a.99.99 0 001 1h22a.989.989 0 001-1v-.5A1.5 1.5 0 0022.5 0z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.5 15.5h-11a1 1 0 010-2h11a1 1 0 010 2z"
  }))));
}

var _g$X;

function _extends$1Q() { _extends$1Q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1Q.apply(this, arguments); }

function SvgWasher24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1Q({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$X || (_g$X = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.5 0h-21A1.5 1.5 0 000 1.5v3.75a.5.5 0 00.5.5h4.884a.225.225 0 00.125-.042 11.74 11.74 0 0112.983 0c.036.026.08.04.124.042H23.5a.5.5 0 00.5-.5V1.5A1.5 1.5 0 0022.5 0zm-4.75 3.75a.75.75 0 110-1.5.75.75 0 010 1.5zm3 0a.75.75 0 110-1.5.75.75 0 010 1.5z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.5 7.25h-4.884a1.716 1.716 0 01-.957-.295 10.408 10.408 0 00-11.317 0 1.721 1.721 0 01-.958.295H.5a.5.5 0 00-.5.5V22.5A1.5 1.5 0 001.5 24h21a1.5 1.5 0 001.5-1.5V7.75a.5.5 0 00-.5-.5zM12 21a6.5 6.5 0 110-13 6.5 6.5 0 010 13z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 10a4.5 4.5 0 100 9 4.5 4.5 0 000-9zm0 7a2.5 2.5 0 110-5 2.5 2.5 0 010 5z"
  }))));
}

var _g$W;

function _extends$1P() { _extends$1P = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1P.apply(this, arguments); }

function SvgFridge24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1P({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$W || (_g$W = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3.5 10a.5.5 0 00-.5.5v11A2.5 2.5 0 005.5 24h13a2.5 2.5 0 002.5-2.5v-11a.5.5 0 00-.5-.5h-17zm3.75 7.5a.75.75 0 11-1.5 0v-5a.75.75 0 111.5 0v5zM20.5 8.5A.5.5 0 0021 8V2.5A2.5 2.5 0 0018.5 0h-13A2.5 2.5 0 003 2.5V8a.5.5 0 00.5.5h17zM5.75 3a.75.75 0 011.5 0v3a.75.75 0 01-1.5 0V3z"
  }))));
}

var _g$V;

function _extends$1O() { _extends$1O = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1O.apply(this, arguments); }

function SvgCleaner24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1O({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$V || (_g$V = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.492 21.5a4 4 0 014-4c.145 0 .29.01.435.029a.5.5 0 00.565-.5V14.5a.5.5 0 00-.5-.5H.738a.5.5 0 00-.489.4 15.082 15.082 0 00.608 7.559A1.5 1.5 0 002.285 23h3.149a.25.25 0 00.238-.323 3.9 3.9 0 01-.18-1.177z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.992 24a1 1 0 00.948-1.316l-.666-2a1 1 0 00-.949-.684h-1.833a.5.5 0 01-.5-.5v-13a6.5 6.5 0 10-13 0 .5.5 0 01-.5.5 1 1 0 00-1 1v.556a.5.5 0 01-.434.5 5.128 5.128 0 00-3.483 2.16 5.5 5.5 0 00-.348.542.5.5 0 00.434.747h8.331a.5.5 0 00.5-.5V8a1 1 0 00-1-1 .5.5 0 01-.5-.5 4.5 4.5 0 019 0v13a.5.5 0 01-.5.5h-1.833a1 1 0 00-.949.683l-.667 2A1 1 0 0014.992 24h8z"
  }), /*#__PURE__*/React__namespace.createElement("circle", {
    cx: 9.492,
    cy: 21.5,
    r: 2.5
  }))));
}

var _g$U;

function _extends$1N() { _extends$1N = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1N.apply(this, arguments); }

function SvgSleep24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1N({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$U || (_g$U = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.225 15.5a.5.5 0 00.492-.592l-1.489-8a.5.5 0 00-.491-.408H2.263a.5.5 0 00-.491.408l-1.489 8a.5.5 0 00.492.592h22.45zM.5 16.5a.5.5 0 00-.5.5v3.25a2.253 2.253 0 002.25 2.25.25.25 0 01.25.25v.5a.75.75 0 101.5 0V23a.5.5 0 01.5-.5h15a.5.5 0 01.5.5v.25a.75.75 0 101.5 0v-.5a.25.25 0 01.25-.25A2.253 2.253 0 0024 20.25V17a.5.5 0 00-.5-.5H.5zM22 2.25A2.253 2.253 0 0019.75 0H4.25A2.253 2.253 0 002 2.25V5a.5.5 0 00.5.5h1.576a.5.5 0 00.494-.418l.36-2.165a.5.5 0 01.494-.417H10a.5.5 0 01.5.5v2a.5.5 0 00.5.5h2a.5.5 0 00.5-.5V3a.5.5 0 01.5-.5h4.576a.5.5 0 01.494.417l.36 2.165a.5.5 0 00.494.418H21.5A.5.5 0 0022 5V2.25z"
  }))));
}

var _path$U;

function _extends$1M() { _extends$1M = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1M.apply(this, arguments); }

function SvgFitness24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1M({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$U || (_path$U = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.63 20.45a.246.246 0 01-.057-.2.251.251 0 01.11-.174A3.977 3.977 0 0022.5 16.75a4.027 4.027 0 00-2.92-3.85l-1.06-.223a.249.249 0 01-.158-.38 11.113 11.113 0 001.352-8.748.5.5 0 01.131-.478l1.362-1.362A1 1 0 0019.793.293l-4 4a1 1 0 101.414 1.414l.4-.4a.249.249 0 01.425.152 8.861 8.861 0 01-1.85 6.44.5.5 0 01-.5.182L7.717 10.4a.5.5 0 01-.378-.352l-.423-1.48a.251.251 0 01.241-.318H8a1 1 0 00.242-1.97l-6-1.5a1 1 0 00-1.074 1.525l.7 1.054a2 2 0 001.664.89h.833a.5.5 0 01.481.364l.433 1.517a.248.248 0 01-.177.31 5.492 5.492 0 00-2.49 9.2c.372.365.795.675 1.256.919a.249.249 0 01.072.383l-1.2 1.4a1 1 0 101.52 1.3l1.907-2.226a.5.5 0 01.36-.174l11.5-.48a.5.5 0 01.4.175l2.318 2.7a1 1 0 101.518-1.3L20.63 20.45zm-7.567-4.927a.5.5 0 01-.364.606l-2.917.73a3.013 3.013 0 11-.35-2.841.25.25 0 01-.144.387l-2.47.617A.75.75 0 007 16.5l5.457-1.341a.5.5 0 01.607.364z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$T;

function _extends$1L() { _extends$1L = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1L.apply(this, arguments); }

function SvgGarage24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1L({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$T || (_g$T = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.7 5.917l-11.5-5a.492.492 0 00-.4 0l-11.5 5a.5.5 0 00-.3.458v1.5a.5.5 0 00.5.5h23a.5.5 0 00.5-.5v-1.5a.5.5 0 00-.3-.458zM17.25 14.375h-10a.75.75 0 100 1.5h10a.75.75 0 100-1.5zM17.25 17.875h-10a.75.75 0 100 1.5h10a.75.75 0 100-1.5z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 22.125a1 1 0 00-1-1h-.5a.5.5 0 01-.5-.5v-10.25a.5.5 0 00-.5-.5h-19a.5.5 0 00-.5.5v10.25a.5.5 0 01-.5.5H1a1 1 0 000 2h22a1 1 0 001-1zm-19-8.75a1 1 0 011-1h12.5a1 1 0 011 1v7.25a.5.5 0 01-.5.5H5.5a.5.5 0 01-.5-.5v-7.25z"
  }))));
}

var _g$S;

function _extends$1K() { _extends$1K = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1K.apply(this, arguments); }

function SvgPool24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1K({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$S || (_g$S = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.931 17.81c-1.582.141-2.669-1.556-2.677-1.57a1.047 1.047 0 00-1.715.023 3.375 3.375 0 01-2.753 1.557 2.8 2.8 0 01-2.4-1.481 1.043 1.043 0 00-1.717-.156 4.308 4.308 0 01-3.1 1.637A3.555 3.555 0 015.8 16.24a1.042 1.042 0 00-1.638-.091c-.014.018-1.464 1.811-3.11 1.7A.99.99 0 000 18.8c-.01.189.043 1.057 1.168 1.057A5.833 5.833 0 004.9 18.248a5.24 5.24 0 003.66 1.572 5.855 5.855 0 003.81-1.5 4.578 4.578 0 003.416 1.5 5.155 5.155 0 003.622-1.5 4.806 4.806 0 003.661 1.483 1.002 1.002 0 00-.138-2v.007zM8.56 14.4a5.855 5.855 0 003.81-1.5 4.578 4.578 0 003.416 1.5 5.155 5.155 0 003.622-1.5 4.784 4.784 0 003.661 1.483 1.002 1.002 0 00-.138-2c-1.582.128-2.669-1.556-2.677-1.57a1.047 1.047 0 00-1.715.023 3.375 3.375 0 01-2.753 1.564 2.8 2.8 0 01-2.4-1.481 1.042 1.042 0 00-1.717-.156A4.308 4.308 0 018.56 12.4a3.555 3.555 0 01-2.76-1.58 1.042 1.042 0 00-1.638-.091c-.015.019-1.467 1.83-3.11 1.7A1 1 0 000 13.381c-.01.189.043 1.057 1.168 1.057A5.833 5.833 0 004.9 12.831 5.24 5.24 0 008.56 14.4zM8.56 9.026a5.855 5.855 0 003.81-1.5 4.578 4.578 0 003.416 1.5 5.155 5.155 0 003.622-1.5 4.784 4.784 0 003.661 1.483 1.002 1.002 0 00-.138-2c-1.582.128-2.669-1.556-2.677-1.57a1.047 1.047 0 00-1.715.023 3.375 3.375 0 01-2.753 1.564 2.8 2.8 0 01-2.4-1.481 1.042 1.042 0 00-1.717-.156A4.308 4.308 0 018.56 7.026a3.555 3.555 0 01-2.76-1.58 1.042 1.042 0 00-1.638-.091c-.015.019-1.467 1.83-3.11 1.7A1 1 0 000 8.007c-.01.189.043 1.057 1.168 1.057A5.833 5.833 0 004.9 7.457a5.24 5.24 0 003.66 1.569z"
  }))));
}

var _g$R;

function _extends$1J() { _extends$1J = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1J.apply(this, arguments); }

function SvgSprinkler24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1J({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$R || (_g$R = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M10.5 10.56h-4a.49.49 0 00-.5.48v7.44c.001.656.464 1.228 1.125 1.392.22.055.375.246.375.465v2.703c0 .53.448.96 1 .96s1-.43 1-.96v-2.7c0-.22.154-.41.375-.465.663-.164 1.125-.738 1.125-1.395v-7.44a.49.49 0 00-.5-.48z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15 .96a3.841 3.841 0 00-2.891 1.215c-.141.154-.33.26-.54.303L4.895 3.85a.485.485 0 00-.395.469v4.8c0 .265.224.48.5.48h6.043c.323 0 .627.149.815.401.72.975 1.897 1.544 3.142 1.519a.49.49 0 00.5-.48v-9.6a.49.49 0 00-.5-.48zM18 .96h-1a.49.49 0 00-.5.48v9.6c0 .265.224.48.5.48h1c.828 0 1.5-.645 1.5-1.44V2.4c0-.795-.672-1.44-1.5-1.44zM21.5 7.2h1.484c.552 0 1-.43 1-.96s-.448-.96-1-.96H21.5c-.552 0-1 .43-1 .96s.448.96 1 .96zM22.055 4.159l1.5-.96a.948.948 0 00.443-.861.96.96 0 00-.555-.799c-.32-.152-.7-.128-.998.062l-1.5.96a.937.937 0 00-.277 1.332c.307.44.927.56 1.387.266zM23.555 9.281l-1.5-.96a1.026 1.026 0 00-1.387.266.937.937 0 00.277 1.332l1.5.96c.46.294 1.08.175 1.387-.266a.937.937 0 00-.277-1.332zM3 4.32c-1.657 0-3 1.29-3 2.88v10.08c0 .265.224.48.5.48 1.657 0 3-1.29 3-2.88V4.8a.49.49 0 00-.5-.48z"
  }))));
}

var _g$Q;

function _extends$1I() { _extends$1I = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1I.apply(this, arguments); }

function SvgBell24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1I({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$Q || (_g$Q = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.129 17H14.5a.25.25 0 01-.25-.25v-6.377a2.375 2.375 0 10-4.75 0V18.9a.25.25 0 01-.454.145l-.885-1.242a2.075 2.075 0 00-3.672 1.932l2.1 3.991a.5.5 0 00.443.274H21.25a.5.5 0 00.5-.5v-1.655A4.8 4.8 0 0017.129 17zM11.75 5a1 1 0 001-1V1a1 1 0 00-2 0v3a1 1 0 001 1zM16.346 6.316l2.122-2.122a1 1 0 00-1.415-1.414L14.932 4.9a1 1 0 101.414 1.414v.002zM16.25 9.5a1 1 0 001 1h3a1 1 0 000-2h-3a1 1 0 00-1 1zM7.154 6.316A1 1 0 008.568 4.9L6.447 2.78a1 1 0 00-1.414 1.414l2.121 2.122zM7.25 9.5a1 1 0 00-1-1h-3a1 1 0 100 2h3a1 1 0 001-1z"
  }))));
}

var _g$P;

function _extends$1H() { _extends$1H = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1H.apply(this, arguments); }

function SvgKeyLock24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1H({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$P || (_g$P = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.04.5H10.56c-.53 0-.96.448-.96 1V4c0 .552.43 1 .96 1s.96-.448.96-1V3c0-.276.215-.5.48-.5h9.6a.49.49 0 01.48.5v18a.49.49 0 01-.48.5H12a.49.49 0 01-.48-.5v-1c0-.552-.43-1-.96-1s-.96.448-.96 1v2.5c0 .552.43 1 .96 1h12.48c.53 0 .96-.448.96-1v-21c0-.552-.43-1-.96-1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.146 14h.615l.82.854a.47.47 0 00.679 0l.819-.854h.562l.82.854a.47.47 0 00.339.147.47.47 0 00.34-.147l.819-.854H19.2a.47.47 0 00.34-.146l1.44-1.5a.515.515 0 000-.707l-1.44-1.5A.47.47 0 0019.2 10h-7.054c-.935-2.755-3.64-4.408-6.405-3.914C2.976 6.581.955 9.078.955 12c0 2.922 2.021 5.42 4.786 5.914 2.765.494 5.47-1.159 6.405-3.914zM6.24 12c0 .828-.645 1.5-1.44 1.5-.795 0-1.44-.672-1.44-1.5s.645-1.5 1.44-1.5c.795 0 1.44.672 1.44 1.5z"
  }))));
}

var _g$O;

function _extends$1G() { _extends$1G = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1G.apply(this, arguments); }

function SvgControlPanel24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1G({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$O || (_g$O = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22 0H2a2 2 0 00-2 2v9a2 2 0 002 2h1a1 1 0 000-2h-.5a.5.5 0 01-.5-.5v-8a.5.5 0 01.5-.5h19a.5.5 0 01.5.5v8a.5.5 0 01-.5.5H13a1 1 0 000 2h9a2 2 0 002-2V2a2 2 0 00-2-2z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16 9.5h.033a1 1 0 00.72-.341l3.5-4a1 1 0 00-1.506-1.317l-2.8 3.2-1.24-1.248a1 1 0 10-1.414 1.414l2 2A1 1 0 0016 9.5zM13.389 17H10.5v-6.5a2.5 2.5 0 00-5 0v8.835l-1.089-1.527a2.136 2.136 0 00-2.8-.87 2.1 2.1 0 00-.87 2.8l2.1 3.993a.5.5 0 00.441.269H17.5a.5.5 0 00.5-.5v-1.652A4.8 4.8 0 0013.389 17z"
  }))));
}

var _path$T;

function _extends$1F() { _extends$1F = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1F.apply(this, arguments); }

function SvgSmartController24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1F({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$T || (_path$T = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 18.938A6.945 6.945 0 015.062 12 6.946 6.946 0 0112 5.062 6.946 6.946 0 0118.938 12 6.945 6.945 0 0112 18.938m0-2.47A4.474 4.474 0 017.531 12 4.474 4.474 0 0112 7.531 4.474 4.474 0 0116.469 12 4.474 4.474 0 0112 16.469M19.5 0h-15A4.505 4.505 0 000 4.5v15C0 21.981 2.019 24 4.5 24h15c2.481 0 4.5-2.019 4.5-4.5v-15C24 2.019 21.981 0 19.5 0",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$S;

function _extends$1E() { _extends$1E = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1E.apply(this, arguments); }

function SvgScale24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1E({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$S || (_path$S = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.441 5.842a1.407 1.407 0 00-.553-1.275C19.798 2.199 15.953.925 12 .96 8.047.925 4.202 2.2 1.113 4.567c-.4.306-.609.787-.554 1.275l1.85 16.868c.08.733.723 1.29 1.491 1.29h16.2c.767 0 1.41-.557 1.491-1.29l1.85-16.868zM20.5 9.12a.49.49 0 01-.5.48h-6.279a.499.499 0 01-.475-.328l-.772-2.224A.522.522 0 0012 6.754a.522.522 0 00-.474.294l-.772 2.224a.499.499 0 01-.474.328H4a.49.49 0 01-.5-.48V6.112c0-.162.085-.313.226-.402.66-.412 1.353-.772 2.074-1.075a.52.52 0 01.4-.002.488.488 0 01.274.281l.737 1.998c.086.247.304.43.57.478a.768.768 0 00.714-.242.698.698 0 00.13-.716L7.85 4.331a.364.364 0 01.023-.303.39.39 0 01.247-.188 15.24 15.24 0 012.589-.423.513.513 0 01.38.126c.103.09.161.22.161.354V4.8c0 .398.336.72.75.72s.75-.322.75-.72v-.905c0-.135.058-.264.161-.355a.513.513 0 01.381-.125c.874.067 1.74.21 2.588.425a.39.39 0 01.247.188c.051.094.06.203.023.303l-.775 2.101a.698.698 0 00.13.716.768.768 0 00.714.242.741.741 0 00.57-.478l.737-2.002a.488.488 0 01.273-.28.52.52 0 01.401.001c.72.303 1.415.663 2.074 1.075.141.089.226.24.226.402V9.12z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$N;

function _extends$1D() { _extends$1D = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1D.apply(this, arguments); }

function SvgToy24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1D({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$N || (_g$N = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("circle", {
    cx: 12.48,
    cy: 7.2,
    r: 1
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.76 9.574a2.159 2.159 0 00-2.92-.928l-3.69 1.994a.239.239 0 01-.304-.066.384.384 0 01.024-.49A5.98 5.98 0 0018.48 6.15a.48.48 0 01.369-.457 2.64 2.64 0 10-2.304-4.594.48.48 0 01-.587.022 5.976 5.976 0 00-6.959 0 .48.48 0 01-.586-.022 2.64 2.64 0 10-2.304 4.594.48.48 0 01.368.457 5.978 5.978 0 001.61 3.936.378.378 0 01.024.488.24.24 0 01-.305.066L4.108 8.64a2.159 2.159 0 00-2.908.934 2.159 2.159 0 00.923 2.906l4.144 2.23a.48.48 0 01.25.47l-.023.277a.48.48 0 01-.395.442 3.6 3.6 0 103.15 6.105.48.48 0 01.555-.086 5.867 5.867 0 005.353 0 .48.48 0 01.555.085 3.599 3.599 0 103.151-6.105.48.48 0 01-.395-.442 8.518 8.518 0 00-.024-.277.48.48 0 01.25-.472l4.13-2.227a2.158 2.158 0 00.936-2.908v.002zM14.88 3.12a.72.72 0 110 1.44.72.72 0 010-1.44zm-4.8 0a.72.72 0 110 1.44.72.72 0 010-1.44zm2.4 1.92a3.12 3.12 0 110 6.24 3.12 3.12 0 010-6.24zm2.169 14.647a.48.48 0 01-.249.454 3.936 3.936 0 01-3.84 0 .48.48 0 01-.247-.453 3.587 3.587 0 00-1.065-2.806.48.48 0 01-.068-.601 3.72 3.72 0 013.3-1.881 3.732 3.732 0 013.301 1.874.48.48 0 01-.066.603 3.588 3.588 0 00-1.066 2.81z"
  }))));
}

var _g$M;

function _extends$1C() { _extends$1C = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1C.apply(this, arguments); }

function SvgRobot24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1C({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$M || (_g$M = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6 10.542h12c1.02 0 1.846-.858 1.846-1.917V1.917C19.846.858 19.02 0 18 0H6C4.98 0 4.154.858 4.154 1.917v6.708c0 1.059.826 1.917 1.846 1.917zm9.692-6.709c.765 0 1.385.644 1.385 1.438 0 .794-.62 1.437-1.385 1.437-.764 0-1.384-.643-1.384-1.437s.62-1.438 1.384-1.438zm-7.384 0c.764 0 1.384.644 1.384 1.438 0 .794-.62 1.437-1.384 1.437-.765 0-1.385-.643-1.385-1.437s.62-1.438 1.385-1.438zM10.615 11.98c-.51 0-.923.428-.923.957 0 .53.414.959.923.959h2.77c.51 0 .923-.43.923-.959 0-.529-.414-.958-.923-.958h-2.77z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.43 9.456a.9.9 0 00-1.292-.192.983.983 0 00-.184 1.342 1.474 1.474 0 01-.277 2.012 1.351 1.351 0 01-1.939-.287.9.9 0 00-1.292-.192.983.983 0 00-.184 1.342 3.155 3.155 0 002.365 1.33.23.23 0 01.17.096c.04.056.054.128.039.196a2.91 2.91 0 01-.999 1.634l-.357.288a.284.284 0 01-.405-.05 4.2 4.2 0 00-3.325-1.642h-5.5a4.2 4.2 0 00-3.323 1.65c-.1.129-.28.15-.405.05l-.357-.288a2.91 2.91 0 01-1-1.63.248.248 0 01.04-.195.23.23 0 01.17-.097c.939-.061 1.804-.55 2.363-1.336a.983.983 0 00-.184-1.342.9.9 0 00-1.292.192 1.351 1.351 0 01-1.939.287 1.474 1.474 0 01-.277-2.012.989.989 0 00.11-.952.928.928 0 00-.738-.575.908.908 0 00-.849.377c-.992 1.372-.827 3.3.383 4.47.18.173.286.415.294.67a4.895 4.895 0 001.779 3.657l.599.48c.237.192.37.492.354.804-.018.39.013.782.092 1.165.009.036.018.073.03.109l.402 1.212c.192.581.718.971 1.31.971h10.377c.59 0 1.116-.39 1.309-.97l.401-1.212c.012-.037.021-.073.03-.11.08-.382.11-.773.092-1.164a.974.974 0 01.354-.805l.6-.479a4.895 4.895 0 001.778-3.657.975.975 0 01.294-.67c1.214-1.17 1.38-3.103.384-4.477z"
  }))));
}

var _g$L;

function _extends$1B() { _extends$1B = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1B.apply(this, arguments); }

function SvgWeather24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1B({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$L || (_g$L = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.25 3a1 1 0 001-1V1a1 1 0 10-2 0v1a1 1 0 001 1zM3.416 4.83A1 1 0 104.83 3.416l-.707-.707a1 1 0 00-1.414 1.414l.707.707zM3 9.25a1 1 0 00-1-1H1a1 1 0 100 2h1a1 1 0 001-1zM14.377 5.123a1 1 0 00.707-.293l.707-.707a1 1 0 00-1.414-1.414l-.707.707a1 1 0 00.707 1.707z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.916 11.994a.249.249 0 00.109-.38 4 4 0 016.343-4.867c.063.078.167.11.264.084a8.548 8.548 0 011.568-.294.25.25 0 00.191-.378 6 6 0 10-10.112 6.447.25.25 0 00.346.068c.405-.271.838-.5 1.291-.68zM22.094 15.074a.252.252 0 01-.1-.193A7 7 0 008.338 12.84a.249.249 0 01-.22.173A5.5 5.5 0 008.5 24H19a5 5 0 003.094-8.926zM22 19a3 3 0 01-3 3H8.5a3.5 3.5 0 11.448-6.971.994.994 0 001.116-.833 5 5 0 019.916 1.237 1 1 0 00.5.959A3.007 3.007 0 0122 19z"
  }))));
}

var _g$K;

function _extends$1A() { _extends$1A = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1A.apply(this, arguments); }

function SvgHealthMonitor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1A({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$K || (_g$K = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3.758 12.392a.5.5 0 00.423-.234l1.009-1.607c.296-.51.851-.814 1.441-.789.58.026 1.104.355 1.378.867l.916 1.641a.25.25 0 00.449-.025l1.6-3.829c.27-.69.963-1.117 1.7-1.05.716.1 1.294.635 1.447 1.342l1.329 5.558a.25.25 0 00.474.039l.357-.854a1.673 1.673 0 011.525-1.059H21.6a.5.5 0 00.464-.311c.59-1.369.907-2.839.936-4.329C23 3.138 20.324.868 17.672.665a5.632 5.632 0 00-5.446 3.417.251.251 0 01-.452 0A5.618 5.618 0 006.328.665C3.676.868 1 3.138 1 7.752c.029 1.49.347 2.96.936 4.329a.5.5 0 00.463.311h1.359z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.39 14.392a.5.5 0 00-.461.307l-.862 2.058a1.669 1.669 0 01-1.523 1.06 1.75 1.75 0 01-.177-.01 1.721 1.721 0 01-1.446-1.342l-1.329-5.558a.25.25 0 00-.474-.038l-1.372 3.277c-.232.59-.778.998-1.41 1.054a1.622 1.622 0 01-1.548-.865L6.764 12.5a.25.25 0 00-.43-.012l-.7 1.112a1.639 1.639 0 01-1.386.79h-.279a.5.5 0 00-.42.771 28.806 28.806 0 007.905 8.043c.34.19.753.19 1.093 0a28.8 28.8 0 007.9-8.042.5.5 0 00-.42-.771l-1.637.001z"
  }))));
}

var _path$R;

function _extends$1z() { _extends$1z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1z.apply(this, arguments); }

function SvgBabyMonitor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1z({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$R || (_path$R = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 4.5a1 1 0 00-1-1h-9.5A.5.5 0 0113 3V1a1 1 0 00-2 0v2a.5.5 0 01-.5.5H1a1 1 0 100 2h2.5A.5.5 0 014 6v3.141a.5.5 0 01-.312.463 3.5 3.5 0 102.624 0A.5.5 0 016 9.141V6a.5.5 0 01.5-.5h4a.5.5 0 01.5.5v8.233a.5.5 0 01-.242.428 4.645 4.645 0 00-2.237 4.2c0 3.005 2.021 4.925 5.408 5.137h.049a.743.743 0 00.509-1.284 5.426 5.426 0 01-1.361-3.91 5.22 5.22 0 011.374-3.741.743.743 0 00.182-.842.729.729 0 00-.726-.45c-.137.008-.272.018-.405.031A.5.5 0 0113 13.3V6a.5.5 0 01.5-.5h4a.5.5 0 01.5.5v5.909c0 .164-.04.326-.118.471l-2.414 4.514a1 1 0 00.882 1.47h5.3a1 1 0 00.882-1.47l-2.414-4.514a1.006 1.006 0 01-.118-.471V6a.5.5 0 01.5-.5H23a1 1 0 001-1z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$J;

function _extends$1y() { _extends$1y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1y.apply(this, arguments); }

function SvgPetMonitor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1y({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$J || (_g$J = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.439 8.774a.236.236 0 00.236-.204.893.893 0 01.096-.312.908.908 0 00-.432-1.238.976.976 0 00-1.285.415c-.233.452-.34.954-.311 1.458a.232.232 0 00.116.185c.068.039.152.043.224.01a3.446 3.446 0 011.356-.314zM8.146 2.778a.236.236 0 00.253-.204.91.91 0 01.096-.316.896.896 0 00-.06-.924.973.973 0 00-.861-.41.962.962 0 00-.8.511 2.78 2.78 0 00-.31 1.348c.001.075.04.146.106.187.065.042.147.051.22.024a3.385 3.385 0 011.356-.216zM22.32 7.435a.976.976 0 00-1.286-.415.908.908 0 00-.43 1.238c.054.11.087.228.095.349.01.109.096.197.209.21.473.058.93.207 1.342.439.07.039.155.041.228.006a.231.231 0 00.13-.18 2.817 2.817 0 00-.288-1.647zM16.596 1.434a.96.96 0 00-.799-.509.97.97 0 00-.858.412.894.894 0 00-.058.922c.052.1.084.207.096.318a.235.235 0 00.22.206c.473.036.934.164 1.354.377.07.037.156.037.227 0a.232.232 0 00.122-.185 2.802 2.802 0 00-.304-1.54zM17.19 16.688c-.532-.303-.992-.566-1.102-.886-.697-2.022-1.488-4.314-4.588-4.314s-3.89 2.292-4.588 4.315c-.11.32-.57.582-1.103.885-.997.57-2.365 1.35-2.365 3.26-.071.847.246 1.681.868 2.283a3.08 3.08 0 002.367.846 4.398 4.398 0 002.698-1.094 3.47 3.47 0 012.123-.906 3.47 3.47 0 012.123.906 4.398 4.398 0 002.698 1.094 3.08 3.08 0 002.367-.846c.622-.602.94-1.436.868-2.282 0-1.911-1.368-2.687-2.365-3.26z"
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 8.056,
    cy: 7.282,
    rx: 2.545,
    ry: 3.128
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 2.545,
    cy: 13.282,
    rx: 2.545,
    ry: 3.128
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 14.944,
    cy: 7.282,
    rx: 2.545,
    ry: 3.128
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 20.455,
    cy: 13.282,
    rx: 2.545,
    ry: 3.128
  }))));
}

var _g$I;

function _extends$1x() { _extends$1x = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1x.apply(this, arguments); }

function SvgAlarm24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1x({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$I || (_g$I = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6.341 4.119A9.477 9.477 0 003.57 6.355a1.002 1.002 0 101.524 1.3 7.524 7.524 0 012.189-1.773 1 1 0 10-.942-1.763zM6.66 2.438a1 1 0 00-.7-1.875A12.5 12.5 0 00.4 4.676 1 1 0 101.981 5.9 10.5 10.5 0 016.66 2.438zM13.341 5.882a7.515 7.515 0 012.19 1.768 1 1 0 001.524-1.295 9.468 9.468 0 00-2.772-2.236 1 1 0 10-.942 1.763zM13.965 2.438c1.855.69 3.476 1.89 4.679 3.462a1.002 1.002 0 101.586-1.224A12.5 12.5 0 0014.66.563a1 1 0 10-.7 1.875h.005z"
  }), /*#__PURE__*/React__namespace.createElement("circle", {
    cx: 21.812,
    cy: 11.501,
    r: 2
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.5 14.159a2.6 2.6 0 01-1.371 0 .251.251 0 00-.315.242v3.573a3.5 3.5 0 01-3.5 3.5h-1.285a.249.249 0 01-.185-.419 7.492 7.492 0 10-5.532 2.445l7-.027a5.506 5.506 0 005.5-5.5V14.4a.25.25 0 00-.314-.242l.002.001zM10.312 18a2 2 0 110-4 2 2 0 010 4z"
  }))));
}

var _g$H;

function _extends$1w() { _extends$1w = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1w.apply(this, arguments); }

function SvgMotionDetector24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1w({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$H || (_g$H = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.394 4.042a1.98 1.98 0 00-2.375 1.476 1.98 1.98 0 103.853.903 1.98 1.98 0 00-1.478-2.38zM20.288 14.316a1.187 1.187 0 00-.99-1.386l-2.296-.348a.792.792 0 01-.644-.681l-.024-.19a5.468 5.468 0 00-.396-1.51A5.713 5.713 0 008.637 7.1l-2.352.904c-.563.203-.9.78-.797 1.37a1.192 1.192 0 001.59.871l2.411-.928a3.291 3.291 0 012.432.023.196.196 0 01.12.142.2.2 0 01-.051.178L3.024 19a1.188 1.188 0 101.714 1.646l5.072-5.283a.199.199 0 01.275-.011l1.463 1.306a.197.197 0 01-.05.328l-2.402 1.091a1.188 1.188 0 10.984 2.162l3.235-1.471a1.98 1.98 0 00.485-3.291l-2.059-1.83a.199.199 0 01-.01-.285l2.042-2.128c.1.248.168.508.205.773l.024.19a3.153 3.153 0 002.576 2.72l2.364.36a1.187 1.187 0 001.346-.961z"
  }), /*#__PURE__*/React__namespace.createElement("g", null, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6.5 22H2.25a.25.25 0 01-.25-.25V17.5a1 1 0 00-2 0V22a2 2 0 002 2h4.5a1 1 0 000-2zM1 7.5a1 1 0 001-1V2.25A.25.25 0 012.25 2H6.5a1 1 0 100-2H2a2 2 0 00-2 2v4.5a1 1 0 001 1zM23 16.5a1 1 0 00-1 1v4.25a.25.25 0 01-.25.25H17.5a1 1 0 000 2H22a2 2 0 002-2v-4.5a1 1 0 00-1-1zM22 0h-4.5a1 1 0 000 2h4.25a.25.25 0 01.25.25V6.5a1 1 0 002 0V2a2 2 0 00-2-2z"
  })))));
}

var _g$G;

function _extends$1v() { _extends$1v = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1v.apply(this, arguments); }

function SvgSecuritySystem24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1v({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$G || (_g$G = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.5 16.848v-3.392c0-1.212.718-2.308 1.829-2.791A17.386 17.386 0 0117.478 9.5c2.16.012 4.298.426 6.306 1.219a.052.052 0 00.06-.083L13.029.408a1.5 1.5 0 00-2.059 0L.156 10.636A.5.5 0 00.5 11.5H3V22a1 1 0 001 1h7.2a.5.5 0 00.381-.824A8.321 8.321 0 019.5 16.848z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.072 12.04A16.383 16.383 0 0017.478 11a15.963 15.963 0 00-5.55 1.04A1.544 1.544 0 0011 13.456v3.391c0 2.6 1.679 5.466 5.743 7.017a2.06 2.06 0 001.471 0C22.289 22.309 24 19.439 24 16.847v-3.391c0-.615-.364-1.17-.928-1.416zM20.5 17.25h-1.75a.5.5 0 00-.5.5v1.75a.75.75 0 11-1.5 0v-1.75a.5.5 0 00-.5-.5H14.5a.75.75 0 110-1.5h1.75a.5.5 0 00.5-.5V13.5a.75.75 0 111.5 0v1.75a.5.5 0 00.5.5h1.75a.75.75 0 110 1.5z"
  }))));
}

var _g$F;

function _extends$1u() { _extends$1u = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1u.apply(this, arguments); }

function SvgSmoke24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1u({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$F || (_g$F = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5 10.5a1 1 0 001-1A3.5 3.5 0 019.5 6a1 1 0 000-2A5.506 5.506 0 004 9.5a1 1 0 001 1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.5 2a1 1 0 000-2A9.511 9.511 0 000 9.5a1 1 0 002 0A7.508 7.508 0 019.5 2zM14.5 4a1 1 0 000 2A3.5 3.5 0 0118 9.5a1 1 0 002 0A5.506 5.506 0 0014.5 4z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M14.5 0a1 1 0 000 2A7.508 7.508 0 0122 9.5a1 1 0 002 0A9.511 9.511 0 0014.5 0zM11.75 9a7.5 7.5 0 107.5 7.5 7.508 7.508 0 00-7.5-7.5zm0 12a3.116 3.116 0 01-3.115-3.115 4.179 4.179 0 01.633-1.78.5.5 0 01.837-.047l.094.127a.5.5 0 00.88-.151 5.689 5.689 0 00-.072-3.006.5.5 0 01.74-.552 6.515 6.515 0 013.118 5.409A3.115 3.115 0 0111.75 21z"
  }))));
}

var _g$E;

function _extends$1t() { _extends$1t = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1t.apply(this, arguments); }

function SvgHumidity24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1t({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$E || (_g$E = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4.416 17.725A13.038 13.038 0 0012 19.914a13.038 13.038 0 007.584-2.189 1 1 0 10-1.168-1.625A11.056 11.056 0 0112 17.914 11.056 11.056 0 015.584 16.1a1 1 0 10-1.168 1.622v.003z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.771 18.528a1 1 0 00-1.407-.136A16.5 16.5 0 0112 21.664a16.5 16.5 0 01-10.364-3.272 1 1 0 00-1.272 1.544A18.516 18.516 0 0012 23.664c4.189.11 8.29-1.205 11.636-3.728a1 1 0 00.135-1.408zM12 15.914a5.506 5.506 0 005.5-5.5c0-2.367-3.264-7.543-4.667-9.658a1.037 1.037 0 00-1.666 0C9.763 2.871 6.5 8.046 6.5 10.414a5.506 5.506 0 005.5 5.5zm-2.75-6a.5.5 0 01.5.5 2.252 2.252 0 002.25 2.25.5.5 0 110 1 3.254 3.254 0 01-3.25-3.25.5.5 0 01.5-.5z"
  }))));
}

var _g$D;

function _extends$1s() { _extends$1s = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1s.apply(this, arguments); }

function SvgSensor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1s({
    width: 24,
    height: 25,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$D || (_g$D = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("rect", {
    x: 3,
    width: 5,
    height: 25,
    rx: 2.5
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13.581 20.085a13.038 13.038 0 002.19-7.584 13.038 13.038 0 00-2.19-7.584 1 1 0 00-1.625 1.168A11.056 11.056 0 0113.77 12.5a11.056 11.056 0 01-1.814 6.416 1 1 0 101.622 1.168h.003z",
    fillRule: "nonzero"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.111.729a1 1 0 00-.136 1.407A16.5 16.5 0 0118.247 12.5a16.5 16.5 0 01-3.272 10.364 1 1 0 001.544 1.272A18.516 18.516 0 0020.247 12.5 18.516 18.516 0 0016.519.864a1 1 0 00-1.408-.135z",
    fillRule: "nonzero"
  }))));
}

var _g$C;

function _extends$1r() { _extends$1r = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1r.apply(this, arguments); }

function SvgFingbox24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1r({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$C || (_g$C = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.55 4.728c7.975 0 9.776 3.123 9.776 3.123.938 1.065.686 2.21.686 2.21l-.436 3.953a5.224 5.224 0 01-.495 1.652c-1.33 2.655-4.781 3.904-9.657 3.75-3.496-.11-6.59-1.042-8.41-2.628-1.026-.895-1.64-2.047-1.731-3.392l-.223-3.99-.012-.15c-.021-.231-.012-1.236.697-1.96 0 0 1.83-2.568 9.805-2.568zM11.5 6c-1.175 0-2.295.087-3.32.237l-.55.089c-.54.094-1.05.206-1.523.333l-.461.13C3.703 7.377 2.48 8.204 2.48 8.972c0 .59.723 1.217 1.942 1.741l.38.154c1.644.628 4.026 1.076 6.699 1.076s5.055-.448 6.699-1.076l.38-.154c1.218-.524 1.942-1.15 1.942-1.74 0-.769-1.223-1.596-3.166-2.182l-.461-.131a17.862 17.862 0 00-1.523-.333l-.55-.089A22.962 22.962 0 0011.501 6z"
  }))));
}

var _path$Q;

function _extends$1q() { _extends$1q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1q.apply(this, arguments); }

function SvgDomotzBox24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1q({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$Q || (_path$Q = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.01 5A3.997 3.997 0 0124 9v7c0 2.21-1.784 4-3.99 4H3.99A3.997 3.997 0 010 16V9c0-2.21 1.784-4 3.99-4h16.02zm-5.345 1a.722.722 0 00-.721.721v5.933c.012.388.029 1.504-.03 1.987-.13 1.07-1.328 1.939-2.669 1.939a2.81 2.81 0 01.012-5.621c.18 0 .354.044.576.098l.079.02a.72.72 0 10.347-1.4l-.075-.018c-.267-.067-.569-.143-.925-.143A4.26 4.26 0 007 13.769a4.256 4.256 0 004.247 4.255c2.08 0 3.88-1.408 4.1-3.206.083-.68.045-2.053.04-2.186v-5.91A.722.722 0 0014.664 6z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _g$B;

function _extends$1p() { _extends$1p = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1p.apply(this, arguments); }

function SvgRouter24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1p({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$B || (_g$B = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.375 6.749A1.25 1.25 0 001.625 8H6.4A3.41 3.41 0 019 9.658a1.25 1.25 0 002.04-1.445A5.76 5.76 0 006.4 5.5H1.625c-.69 0-1.25.559-1.25 1.249z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.457 7.3a1 1 0 000-1.11l-1.909-2.859a1 1 0 00-1.832.555v1.363a.25.25 0 01-.25.25h-1.614c-3.072 0-4.958 2.963-6.782 5.829C9.609 13.624 8.1 16 6.4 16H1.625a1.25 1.25 0 000 2.5H6.4c3.072 0 4.958-2.963 6.782-5.829C14.641 10.374 16.152 8 17.852 8h1.614a.25.25 0 01.25.25v1.362a1 1 0 001.832.555L23.457 7.3z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.426 21.069a1 1 0 001.122-.402l1.909-2.867a1 1 0 000-1.11l-1.909-2.863a1 1 0 00-1.832.555v1.363a.25.25 0 01-.25.25h-1.614a4.581 4.581 0 01-3.121-1.578 1.251 1.251 0 00-1.8 1.738 6.984 6.984 0 004.917 2.34h1.614a.25.25 0 01.25.25v1.363a1 1 0 00.714.961z"
  }))));
}

var _g$A;

function _extends$1o() { _extends$1o = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1o.apply(this, arguments); }

function SvgWifi24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1o({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$A || (_g$A = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.125 13.728h-3.594a.235.235 0 01-.24-.23v-3.462c0-.765-.643-1.385-1.437-1.385s-1.437.62-1.437 1.385v3.461c0 .128-.108.231-.24.231H2.875c-1.588 0-2.875 1.24-2.875 2.77v1.845c0 1.447 1.156 2.65 2.654 2.761.124.01.22.11.221.23v.47c0 .766.644 1.386 1.438 1.386.793 0 1.437-.62 1.437-1.385v-.462c0-.127.107-.23.24-.23h11.02c.133 0 .24.103.24.23v.462c0 .765.644 1.385 1.438 1.385.793 0 1.437-.62 1.437-1.385v-.47c0-.12.096-.221.221-.23C21.844 20.994 23 19.79 23 18.343v-1.846c0-1.53-1.287-2.769-2.875-2.769zm-12.38 2.61c.595 0 1.077.465 1.077 1.039 0 .573-.482 1.038-1.078 1.038-.595 0-1.078-.465-1.078-1.038 0-.574.483-1.039 1.078-1.039zM4.03 18.49a1.152 1.152 0 01-.688-.242 1.081 1.081 0 01-.468-.867 1.105 1.105 0 01.568-.991 1.194 1.194 0 011.175 0c.362.206.58.585.568.99-.006.236-.091.462-.242.647-.21.287-.549.46-.913.466v-.003zM10.788 6.12a.9.9 0 00-.261.898c.087.322.349.574.684.659a.983.983 0 00.932-.252c1.518-1.393 3.904-1.393 5.422 0 .24.24.597.336.932.252a.941.941 0 00.685-.66.9.9 0 00-.262-.897 5.863 5.863 0 00-4.066-1.623 5.863 5.863 0 00-4.066 1.623z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.433 4.814c2.996-2.88 7.846-2.88 10.842 0 .375.36.982.36 1.356 0a.9.9 0 000-1.306c-3.746-3.598-9.808-3.598-13.553 0a.9.9 0 00-.249.891.942.942 0 00.678.653.984.984 0 00.926-.238z"
  }))));
}

var _g$z;

function _extends$1n() { _extends$1n = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1n.apply(this, arguments); }

function SvgWifiExtender24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1n({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$z || (_g$z = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("circle", {
    cx: 12,
    cy: 11.998,
    r: 1.5
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.536 8.462a1 1 0 00-1.414 1.414 3.005 3.005 0 010 4.243 1 1 0 001.414 1.415 5.008 5.008 0 000-7.072zM9.878 8.462a1 1 0 00-1.414 0 5.008 5.008 0 000 7.072 1 1 0 001.414-1.415 3.005 3.005 0 010-4.243 1 1 0 000-1.414z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.01 5.988A1 1 0 0016.6 7.4a6.5 6.5 0 010 9.192 1 1 0 101.414 1.414 8.5 8.5 0 000-12.02l-.004.002zM5.5 12a6.455 6.455 0 011.9-4.6 1 1 0 00-1.41-1.412 8.5 8.5 0 000 12.02 1 1 0 101.41-1.414A6.455 6.455 0 015.5 12z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.485 3.513a1 1 0 10-1.414 1.414c3.9 3.908 3.9 10.234 0 14.142a1 1 0 101.414 1.414c4.679-4.69 4.679-12.28 0-16.97zM4.929 4.927a1 1 0 10-1.414-1.414c-4.679 4.69-4.679 12.28 0 16.97a1 1 0 101.414-1.414c-3.9-3.908-3.9-10.234 0-14.142z"
  }))));
}

var _g$y;

function _extends$1m() { _extends$1m = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1m.apply(this, arguments); }

function SvgNasStorage24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1m({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$y || (_g$y = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.5 15.251v4a2.007 2.007 0 002 2h19a2.006 2.006 0 002-2v-4a2.005 2.005 0 00-2-2h-19a2.006 2.006 0 00-2 2zm19.5-1a1 1 0 110 2 1 1 0 010-2zM3.5 17.5h17a.75.75 0 110 1.5h-17a.75.75 0 110-1.5zM2.5 11.751h19a3.4 3.4 0 011.34.276.249.249 0 00.34-.291l-1.69-6.673a3.213 3.213 0 00-2.99-2.312h-13a3.213 3.213 0 00-2.989 2.312L.82 11.736a.249.249 0 00.34.291 3.4 3.4 0 011.34-.276z"
  }))));
}

var _g$x;

function _extends$1l() { _extends$1l = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1l.apply(this, arguments); }

function SvgModem24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1l({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$x || (_g$x = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23 11.751H1a1 1 0 00-1 1v3a2.493 2.493 0 001.591 2.316.25.25 0 01.159.233v1.2a.75.75 0 101.5 0v-1a.25.25 0 01.25-.25h17a.25.25 0 01.25.25v1a.75.75 0 101.5 0v-1.2a.25.25 0 01.159-.233A2.493 2.493 0 0024 15.751v-3a1 1 0 00-1-1zm-3 4a1 1 0 110-2 1 1 0 010 2zm-2-1a1 1 0 11-2 0 1 1 0 012 0zm-3 0a1 1 0 11-2 0 1 1 0 012 0zM1.084 10.751h21.832a.994.994 0 00.928-.629.983.983 0 00-.219-1.075L19.061 4.19A1.494 1.494 0 0018 3.751H6a1.5 1.5 0 00-1.072.45L.394 9.027a1 1 0 00.69 1.724z"
  }))));
}

var _path$P;

function _extends$1k() { _extends$1k = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1k.apply(this, arguments); }

function SvgSwitch24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1k({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$P || (_path$P = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.335 10.123a1 1 0 001.122-.4l1.889-2.834a1 1 0 000-1.11l-1.889-2.835a1 1 0 00-1.832.555v1.333a.25.25 0 01-.25.25h-1.584c-3.03 0-4.283 1.88-5.29 3.391-1 1.5-1.593 2.276-3.21 2.276H1.736a1.25 1.25 0 000 2.5h7.555c1.617 0 2.213.78 3.21 2.276 1.007 1.511 2.26 3.391 5.29 3.391h1.584a.25.25 0 01.25.25V20.5a1 1 0 001.832.555l1.889-2.833a1 1 0 000-1.11l-1.889-2.834a1 1 0 00-1.832.555v1.334a.25.25 0 01-.25.25h-1.584c-1.616 0-2.212-.78-3.21-2.276A10.1 10.1 0 0012.827 12c.68-.63 1.27-1.35 1.754-2.141 1-1.5 1.594-2.276 3.21-2.276h1.584a.25.25 0 01.25.25v1.333a1 1 0 00.71.957z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$O;

function _extends$1j() { _extends$1j = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1j.apply(this, arguments); }

function SvgGateway24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1j({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$O || (_path$O = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M8.532 2a4.755 4.755 0 00-4.75 4.75V16a.25.25 0 01-.25.25H1.511a1 1 0 00-.706 1.709l3.521 3.5a1 1 0 001.411 0l3.52-3.5a1 1 0 00-.7-1.709H6.532a.249.249 0 01-.25-.25V6.749a2.25 2.25 0 114.5 0v10.5a4.75 4.75 0 109.5 0L20.246 8a.249.249 0 01.25-.251h1.994a1 1 0 00.711-1.7l-3.458-3.5a1 1 0 00-1.41-.013l-3.583 3.5a1 1 0 00.7 1.716h2.05a.249.249 0 01.25.249l.036 9.251a2.25 2.25 0 11-4.5 0V6.749A4.756 4.756 0 008.532 2z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$w;

function _extends$1i() { _extends$1i = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1i.apply(this, arguments); }

function SvgFirewall24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1i({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$w || (_g$w = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("rect", {
    x: 5.25,
    y: 19.214,
    width: 10.5,
    height: 4.25,
    rx: 0.25
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M.75 19.214a.25.25 0 00-.25.25v3a1 1 0 001 1h2a.25.25 0 00.25-.25v-3.75a.25.25 0 00-.25-.25H.75zM23.25 17.714a.25.25 0 00.25-.25v-3a1 1 0 00-1-1H12a.25.25 0 00-.25.25v3.75c0 .138.112.25.25.25h11.25zM17.25 23.214c0 .138.112.25.25.25h5a1 1 0 001-1v-3a.25.25 0 00-.25-.25H17.5a.25.25 0 00-.25.25v3.75zM10 17.714a.25.25 0 00.25-.25v-3.75a.25.25 0 00-.25-.25H1.5a1 1 0 00-1 1v3c0 .138.112.25.25.25H10zM17.628 4.73h-.261L15.794 6.7a.25.25 0 01-.437-.091 9.491 9.491 0 01.124-5.414.5.5 0 00-.545-.65 9.518 9.518 0 00-6.915 4.6.253.253 0 01-.39.055l-1.1-1.067a.5.5 0 00-.73.035 7.475 7.475 0 00-1.414 7.122c.033.103.13.173.238.173h3.329a.25.25 0 00.246-.205 5.315 5.315 0 012.657-3.732.5.5 0 01.729.582 3.943 3.943 0 00.258 2.9c.041.08.122.132.212.136a1.29 1.29 0 001.083-.663.5.5 0 01.763-.109c.282.264.507.583.66.938.04.09.13.149.229.149h3.579c.108 0 .204-.07.238-.173a7.482 7.482 0 00-.98-6.561v.005z"
  }))));
}

var _g$v;

function _extends$1h() { _extends$1h = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1h.apply(this, arguments); }

function SvgVpn24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1h({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$v || (_g$v = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.083 12.116c0-1.274-1.072-2.307-2.395-2.307h-.24a.47.47 0 01-.48-.462V7.04c0-3.44-2.895-6.23-6.468-6.23s-6.469 2.79-6.469 6.23v2.308a.47.47 0 01-.479.462h-.24c-1.323 0-2.395 1.033-2.395 2.307v1.385c0 1.274 1.072 2.308 2.396 2.308h14.375c1.323 0 2.395-1.034 2.395-2.308v-1.385zM6.271 13.501c-.53 0-.958-.413-.958-.923s.429-.923.958-.923c.53 0 .958.413.958.923s-.43.922-.958.922zm3.833 0c-.53 0-.958-.413-.958-.923s.429-.923.958-.923c.53 0 .959.413.959.923-.001.51-.43.922-.959.922zm6.469-4.154a.47.47 0 01-.48.462H8.907a.47.47 0 01-.479-.462V7.04c0-2.166 1.824-3.923 4.073-3.923 2.25 0 4.073 1.757 4.073 3.923v2.308zM19.688 17.192H5.313c-1.324 0-2.396 1.033-2.396 2.308v1.385c0 1.274 1.072 2.307 2.396 2.307h14.375c1.323 0 2.395-1.033 2.395-2.307V19.5c0-1.275-1.072-2.308-2.395-2.308zM6.27 20.885c-.53 0-.958-.414-.958-.923 0-.51.429-.924.958-.924.53 0 .958.414.958.924s-.429.923-.958.923zm3.833 0c-.53 0-.958-.414-.958-.923 0-.51.429-.924.958-.924.53 0 .959.414.959.924s-.43.923-.959.923z"
  }))));
}

var _g$u;

function _extends$1g() { _extends$1g = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1g.apply(this, arguments); }

function SvgPoePlug24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1g({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$u || (_g$u = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.707 9.293l-5-5a1 1 0 00-1.414 1.414l4.116 4.116a.25.25 0 010 .354l-4.116 4.116a1 1 0 101.414 1.414l5-5a1 1 0 000-1.414zM2.591 10.177a.25.25 0 010-.354l4.116-4.116a1 1 0 00-1.414-1.414l-5 5a1 1 0 000 1.414l5 5a1 1 0 101.414-1.414l-4.116-4.116zM16.5 9.5A1.5 1.5 0 0015 8V5a1 1 0 00-2 0v2.746a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25V5a1 1 0 00-2 0v3a1.5 1.5 0 00-1.5 1.5v3A3.5 3.5 0 0011 16v3a1 1 0 002 0v-3a3.5 3.5 0 003.5-3.5v-3z"
  }))));
}

var _g$t;

function _extends$1f() { _extends$1f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1f.apply(this, arguments); }

function SvgUsb24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1f({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$t || (_g$t = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.167 10.029A.25.25 0 0118 9.793V2a2 2 0 00-2-2H8a2 2 0 00-2 2v7.793a.25.25 0 01-.167.236.5.5 0 00-.333.471v8A2.5 2.5 0 008 21h2.25a.25.25 0 01.25.25v1.25a1.5 1.5 0 003 0v-1.25a.25.25 0 01.25-.25H16a2.5 2.5 0 002.5-2.5v-8a.5.5 0 00-.333-.471zM8 2.251A.25.25 0 018.25 2h7.5a.25.25 0 01.25.25v7a.25.25 0 01-.25.25h-7.5A.25.25 0 018 9.251v-7z"
  }), /*#__PURE__*/React__namespace.createElement("rect", {
    x: 9,
    y: 3.501,
    width: 2,
    height: 2,
    rx: 0.5
  }), /*#__PURE__*/React__namespace.createElement("rect", {
    x: 13,
    y: 3.501,
    width: 2,
    height: 2,
    rx: 0.5
  }))));
}

var _g$s;

function _extends$1e() { _extends$1e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1e.apply(this, arguments); }

function SvgSmallCell24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1e({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$s || (_g$s = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 3.585a4.785 4.785 0 00-4.78 4.78 1 1 0 102 0 2.78 2.78 0 115.559 0 1 1 0 002 0A4.784 4.784 0 0012 3.585z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4.433 9.567a1 1 0 001-1 6.567 6.567 0 0113.134 0 1 1 0 002 0 8.567 8.567 0 10-17.134 0 1 1 0 001 1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.5 11.866c-.127-.323-.417-.316-.868-.4a1 1 0 00-1.156.809l-.3 1.693a.25.25 0 01-.287.2l-3.195-.533a.247.247 0 01-.207-.22 1.494 1.494 0 00-1.269-1.355.249.249 0 01-.218-.24V8.567a1 1 0 00-2 0v3.253a.25.25 0 01-.213.247 1.493 1.493 0 00-1.269 1.355.248.248 0 01-.207.22l-3.195.533a.25.25 0 01-.287-.2l-.3-1.693a1 1 0 00-1.156-.809c-.431.077-.739.069-.868.4a6.637 6.637 0 001.223 6.887c.241.273.558.142.95.073a1 1 0 00.808-1.156l-.219-1.236a.251.251 0 01.205-.291l2.747-.458a.251.251 0 01.291.247v1.987a1.5 1.5 0 001.28 1.483.249.249 0 01.213.247V23.5a.5.5 0 00.5.5h1a.5.5 0 00.5-.5v-3.851a.25.25 0 01.213-.247 1.5 1.5 0 001.28-1.483v-1.987a.251.251 0 01.291-.247l2.747.458a.251.251 0 01.205.291l-.219 1.236a1 1 0 00.808 1.156c.4.07.711.2.95-.073a6.637 6.637 0 001.222-6.887z"
  }))));
}

var _path$N;

function _extends$1d() { _extends$1d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1d.apply(this, arguments); }

function SvgCloud24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1d({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$N || (_path$N = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.75 13.869a5.707 5.707 0 00-1.739-4.088 5.6 5.6 0 00-3.369-1.554.25.25 0 01-.19-.12 7.532 7.532 0 00-13.806 2.242.25.25 0 01-.226.2 4.507 4.507 0 00-4.17 4.489 4.252 4.252 0 001.214 3.154 5.267 5.267 0 003.493 1.351h13.586a.925.925 0 00.129-.009 5.7 5.7 0 005.078-5.665zm-5.281 3.674H4.974a3.3 3.3 0 01-2.106-.777 2.3 2.3 0 01-.618-1.728 2.507 2.507 0 013.022-2.452 1 1 0 001.2-.92A5.533 5.533 0 0117 9.632a.96.96 0 00.941.57 3.666 3.666 0 013.805 3.667 3.706 3.706 0 01-3.277 3.674z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$r;

function _extends$1c() { _extends$1c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1c.apply(this, arguments); }

function SvgBattery24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1c({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$r || (_g$r = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 7a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H2a2 2 0 00-2 2v9a2 2 0 002 2h2.25a.25.25 0 00.25-.25v-1.5a.25.25 0 00-.25-.25H2.5a.5.5 0 01-.5-.5v-8a.5.5 0 01.5-.5h16a.5.5 0 01.5.5V6a1 1 0 001 1h1.75a.25.25 0 01.25.25v2.5a.25.25 0 01-.25.25H20a1 1 0 00-1 1v1.5a.5.5 0 01-.5.5h-1.75a.25.25 0 00-.25.25v1.5c0 .138.112.25.25.25H19a2 2 0 002-2v-1h1a2 2 0 002-2V7z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15 11.5a1.5 1.5 0 00-1.5-1.5V7a1 1 0 00-2 0v2.746a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25V7a1 1 0 10-2 0v3A1.5 1.5 0 006 11.5v3A3.5 3.5 0 009.5 18v3a1 1 0 002 0v-3a3.5 3.5 0 003.5-3.5v-3z"
  }))));
}

var _g$q;

function _extends$1b() { _extends$1b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1b.apply(this, arguments); }

function SvgNetworkAppliance24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1b({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$q || (_g$q = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.5 2.25h-21A1.5 1.5 0 000 3.75v2.5a1.5 1.5 0 001.5 1.5h21a1.5 1.5 0 001.5-1.5v-2.5a1.5 1.5 0 00-1.5-1.5zM3.25 5a1.25 1.25 0 112.5 0 1.25 1.25 0 01-2.5 0zM8.5 6.25a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zm-7.458-2.7l-.005.014.005-.014zM22.5 9.25h-21a1.5 1.5 0 00-1.5 1.5v2.5a1.5 1.5 0 001.5 1.5h9.25A.25.25 0 0111 15v4.5a.25.25 0 01-.25.25H5.5a1 1 0 000 2h13a1 1 0 000-2h-5.25a.25.25 0 01-.25-.25V15a.25.25 0 01.25-.25h9.25a1.5 1.5 0 001.5-1.5v-2.5a1.5 1.5 0 00-1.5-1.5zM3.25 12a1.25 1.25 0 112.5 0 1.25 1.25 0 01-2.5 0zm5.25 1.25a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zM23 21.75a1 1 0 000-2h-1a1 1 0 000 2h1zM1 21.75h1a1 1 0 000-2H1a1 1 0 000 2z"
  }))));
}

var _g$p;

function _extends$1a() { _extends$1a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1a.apply(this, arguments); }

function SvgVirtualMachine24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1a({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$p || (_g$p = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3 11h5.5a2.753 2.753 0 002.75-2.75v-4.5A2.752 2.752 0 008.5 1H3A2.752 2.752 0 00.25 3.751v4.5A2.753 2.753 0 003 11zM1.75 4.751A.25.25 0 012 4.5h7.5a.25.25 0 01.25.25v3.5A1.252 1.252 0 018.5 9.5H3a1.252 1.252 0 01-1.25-1.25V4.751zM12.75 8.251A2.753 2.753 0 0015.5 11H21a2.753 2.753 0 002.75-2.75v-4.5A2.752 2.752 0 0021 1h-5.5a2.752 2.752 0 00-2.75 2.75v4.501zm1.5-3.5a.25.25 0 01.25-.25H22a.25.25 0 01.25.25v3.5A1.252 1.252 0 0121 9.5h-5.5a1.252 1.252 0 01-1.25-1.25V4.751zM3 23h5.5a2.753 2.753 0 002.75-2.75v-4.5A2.752 2.752 0 008.5 13H3a2.752 2.752 0 00-2.75 2.75v4.5A2.753 2.753 0 003 23zm-1.25-6.25A.25.25 0 012 16.5h7.5a.25.25 0 01.25.25v3.5A1.252 1.252 0 018.5 21.5H3a1.252 1.252 0 01-1.25-1.25v-3.5zM12.75 20.251A2.753 2.753 0 0015.5 23H21a2.753 2.753 0 002.75-2.75v-4.5A2.752 2.752 0 0021 13h-5.5a2.752 2.752 0 00-2.75 2.75v4.501zm1.5-3.5a.25.25 0 01.25-.25H22a.25.25 0 01.25.25v3.5A1.252 1.252 0 0121 21.5h-5.5a1.252 1.252 0 01-1.25-1.25v-3.499z"
  }))));
}

var _g$o;

function _extends$19() { _extends$19 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$19.apply(this, arguments); }

function SvgServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$19({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$o || (_g$o = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.5 1.5h-21A1.5 1.5 0 000 3v3a1.5 1.5 0 001.5 1.5h21A1.5 1.5 0 0024 6V3a1.5 1.5 0 00-1.5-1.5zm-19.25 3a1.25 1.25 0 112.5 0 1.25 1.25 0 01-2.5 0zM8.5 5.75a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zM22.5 9h-21A1.5 1.5 0 000 10.5v3A1.5 1.5 0 001.5 15h21a1.5 1.5 0 001.5-1.5v-3A1.5 1.5 0 0022.5 9zM3.25 12a1.25 1.25 0 112.5 0 1.25 1.25 0 01-2.5 0zm5.25 1.25a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5zM22.5 16.5h-21A1.5 1.5 0 000 18v3a1.5 1.5 0 001.5 1.5h21A1.5 1.5 0 0024 21v-3a1.5 1.5 0 00-1.5-1.5zm-19.25 3a1.25 1.25 0 112.5 0 1.25 1.25 0 01-2.5 0zm5.25 1.25a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5z"
  }))));
}

var _g$n;

function _extends$18() { _extends$18 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$18.apply(this, arguments); }

function SvgTerminal24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$18({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$n || (_g$n = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.019 15.47a.75.75 0 101.061 1.06l2.5-2.5a.749.749 0 000-1.06l-2.5-2.5a.75.75 0 00-1.061 1.06l1.793 1.793a.25.25 0 010 .354L7.019 15.47zM12.55 15.75h4a.75.75 0 100-1.5h-4a.75.75 0 100 1.5z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 4.75a3 3 0 00-3-3H3a3 3 0 00-3 3v14.5a3 3 0 003 3h18a3 3 0 003-3V4.75zm-14.346-1a.966.966 0 011.692 0c.096.15.15.322.154.5a.969.969 0 01-.154.5.966.966 0 01-1.692 0 .969.969 0 01-.154-.5.969.969 0 01.154-.5zm-3.5 0a.966.966 0 011.692 0c.096.15.15.322.154.5a.969.969 0 01-.154.5.966.966 0 01-1.692 0A.969.969 0 016 4.25a.969.969 0 01.154-.5zm-3.562.092A1 1 0 013.5 3.25c.35.004.673.195.846.5.096.15.15.322.154.5a.969.969 0 01-.154.5.966.966 0 01-1.692 0 .969.969 0 01-.154-.5c0-.141.032-.28.092-.408zM22 19.25a1 1 0 01-1 1H3a1 1 0 01-1-1V7a.25.25 0 01.25-.25h19.5A.25.25 0 0122 7v12.25z"
  }))));
}

var _g$m;

function _extends$17() { _extends$17 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$17.apply(this, arguments); }

function SvgMailServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$17({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$m || (_g$m = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12C23.993 5.376 18.624.007 12 0zm0 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10c-.006 5.52-4.48 9.994-10 10z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.375 10.542a.249.249 0 00-.254.007L13.2 13.627a2.261 2.261 0 01-2.385 0l-4.929-3.078a.249.249 0 00-.383.212V15.5A1.5 1.5 0 007 17h10a1.5 1.5 0 001.5-1.5v-4.739a.251.251 0 00-.125-.219z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 7H7a1.5 1.5 0 00-1.5 1.5c0 .026.014.05.036.063l6.067 3.792a.754.754 0 00.8 0l6.068-3.792A.077.077 0 0018.5 8.5 1.5 1.5 0 0017 7z"
  }))));
}

var _g$l;

function _extends$16() { _extends$16 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$16.apply(this, arguments); }

function SvgFileServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$16({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$l || (_g$l = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 22h-3.75a.25.25 0 01-.25-.25v-3.5a.25.25 0 01.25-.25H21a1.5 1.5 0 001.5-1.5v-12A1.5 1.5 0 0021 3h-9.882a.5.5 0 01-.447-.276L9.724.83A1.5 1.5 0 008.38 0H3a1.5 1.5 0 00-1.5 1.5v15A1.5 1.5 0 003 18h7.75a.25.25 0 01.25.25v3.5a.25.25 0 01-.25.25H7a1 1 0 000 2h10a1 1 0 100-2zM4 22H2a1 1 0 000 2h2a1 1 0 000-2zM22 22h-2a1 1 0 000 2h2a1 1 0 000-2z"
  }))));
}

var _g$k;

function _extends$15() { _extends$15 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$15.apply(this, arguments); }

function SvgProxyServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$15({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$k || (_g$k = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.542 10.527H8.9a.25.25 0 01-.25-.25V9.089a.959.959 0 00-1.452-.821L2.4 11.143a.957.957 0 000 1.643l4.791 2.875a.959.959 0 001.452-.822v-1.187a.25.25 0 01.25-.25h13.649a1.438 1.438 0 000-2.875zM.021 4.333a1.437 1.437 0 001.437 1.438H15.1a.25.25 0 01.25.25v1.187a.958.958 0 001.452.822L21.6 5.155a.957.957 0 000-1.643L16.806.637a.958.958 0 00-1.452.821v1.188a.25.25 0 01-.25.25H1.458c-.794 0-1.437.643-1.437 1.437zM21.6 18.845l-4.794-2.875a.959.959 0 00-1.452.822v1.187a.25.25 0 01-.25.25H1.458a1.438 1.438 0 000 2.875H15.1a.25.25 0 01.25.25v1.188a.958.958 0 001.452.821l4.798-2.875a.957.957 0 000-1.643z"
  }))));
}

var _g$j;

function _extends$14() { _extends$14 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$14.apply(this, arguments); }

function SvgWebServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$14({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$j || (_g$j = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4.952 12A7.048 7.048 0 1012 4.952 7.056 7.056 0 004.952 12zM12 17.168a5.169 5.169 0 010-10.337c.128 0 .254 0 .38.015a.25.25 0 01.222.18c.045.167.075.338.089.51a.249.249 0 01-.249.273c-.192 0-.4-.014-.522-.022-.3-.018-.338-.016-.5-.016a2.467 2.467 0 00-.334 4.911.25.25 0 01.216.248v.85c0 1.306.706 2.22 1.706 2.22 2 0 2.225-1.738 2.225-2.738 0-.877.012-1.409.011-1.762a4.259 4.259 0 00-.02-.5 4.5 4.5 0 00-.3-.988.25.25 0 01.076-.285l.868-.734a.251.251 0 01.366.048A5.159 5.159 0 0112 17.168z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M3.236 19.438a.25.25 0 010 .323l-.449.533a.7.7 0 00.439 1.152l2.87.409a.915.915 0 00.342.074c.032 0 .063-.008.1-.011l.205.029a.7.7 0 00.77-.914L6.42 17.657a.7.7 0 00-1.21-.238l-.413.49A.255.255 0 014.6 18a.252.252 0 01-.193-.1 9.618 9.618 0 017.6-15.534 9.8 9.8 0 012.037.215.939.939 0 10.391-1.836A11.522 11.522 0 00.493 12a11.425 11.425 0 002.743 7.438zM20.764 4.561a.25.25 0 010-.323l.449-.533a.7.7 0 00-.439-1.151l-2.915-.416a.917.917 0 00-.346-.05l-.251-.035a.7.7 0 00-.77.914l1.088 3.376a.707.707 0 001.21.238l.413-.49a.249.249 0 01.388.008A9.616 9.616 0 0112 21.632a9.732 9.732 0 01-2.037-.215.94.94 0 10-.393 1.838A11.522 11.522 0 0023.507 12a11.426 11.426 0 00-2.743-7.439z"
  }))));
}

var _path$M;

function _extends$13() { _extends$13 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$13.apply(this, arguments); }

function SvgDomainServer24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$13({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$M || (_path$M = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.864 21.142h-9.619a.245.245 0 01-.25-.24v-.782c0-.122.095-.224.22-.238 5.453-.628 9.456-5.222 9.137-10.486-.32-5.264-4.85-9.38-10.343-9.396-.152 0-.3 0-.448.01C6.018.103 1.583 4.457 1.61 9.779c-.042 5.113 3.901 9.451 9.184 10.105.126.014.22.116.221.238v.78c0 .133-.112.24-.25.24H1.136c-.547 0-.99.426-.99.95 0 .525.443.95.99.95h21.728c.547 0 .99-.425.99-.95 0-.524-.443-.95-.99-.95zm-7.687-3.695a.257.257 0 01-.283-.062.233.233 0 01-.031-.277c.38-.651.72-1.325 1.015-2.016a.25.25 0 01.232-.15h1.969a.25.25 0 01.228.142.233.233 0 01-.041.258 8.48 8.48 0 01-3.089 2.105zm-5.525-4.408a.249.249 0 01-.24-.175 12.189 12.189 0 01-.371-1.664.237.237 0 01.058-.192.256.256 0 01.19-.082h5.441c.073 0 .142.03.189.082.048.053.07.123.059.192a12.34 12.34 0 01-.371 1.664.25.25 0 01-.241.175H9.652zm10.189-.154a.25.25 0 01-.233.154h-2.695a.252.252 0 01-.2-.096.234.234 0 01-.048-.205c.131-.53.232-1.065.3-1.606a.246.246 0 01.248-.211h2.847c.073 0 .143.03.19.084a.232.232 0 01.057.193 7.776 7.776 0 01-.466 1.687zm.482-4.137a.24.24 0 01-.058.192.257.257 0 01-.19.084h-2.783a.246.246 0 01-.25-.227 12.25 12.25 0 00-.421-2.586.233.233 0 01.044-.207.255.255 0 01.198-.094h2.268c.09 0 .174.047.218.123.493.84.823 1.761.974 2.715zm-3.188-5.17c.084.064.118.171.083.269a.25.25 0 01-.236.163h-1.061a.25.25 0 01-.225-.135c-.152-.3-.313-.598-.487-.89a.233.233 0 01.033-.282c.073-.077.19-.1.289-.055a8.49 8.49 0 011.604.93zm-5.323-1.393a.264.264 0 01.2-.09c.077 0 .15.033.2.09.401.461.769.948 1.1 1.458.048.074.05.167.006.243a.252.252 0 01-.218.124h-2.176a.252.252 0 01-.218-.124.232.232 0 01.006-.243c.331-.51.699-.997 1.1-1.458zm2.461 3.726c.107 0 .203.065.237.163.306.871.495 1.776.562 2.694a.232.232 0 01-.066.18.256.256 0 01-.183.077H9.2a.255.255 0 01-.183-.077.234.234 0 01-.066-.18c.067-.918.256-1.823.562-2.694a.248.248 0 01.237-.163h4.523zm-5.73-3.343a.257.257 0 01.286.061c.071.078.083.19.029.28-.193.318-.37.64-.535.966a.251.251 0 01-.225.135H6.9a.25.25 0 01-.237-.163.234.234 0 01.084-.267 8.305 8.305 0 011.796-1.012zM4.564 6.036a.253.253 0 01.22-.125h2.372c.078 0 .15.034.198.093a.232.232 0 01.044.208 12.239 12.239 0 00-.421 2.586.246.246 0 01-.249.227H3.907a.255.255 0 01-.188-.082.234.234 0 01-.06-.189 7.558 7.558 0 01.905-2.718zm-.125 7.003a.249.249 0 01-.232-.153 8.071 8.071 0 01-.482-1.68.233.233 0 01.056-.196.254.254 0 01.191-.084H6.8c.126 0 .233.09.248.211.069.54.169 1.076.3 1.606a.233.233 0 01-.047.204.254.254 0 01-.196.092H4.439zm1.338 2.299a.233.233 0 01-.04-.257.252.252 0 01.227-.142h1.945a.25.25 0 01.231.15c.296.694.636 1.37 1.018 2.025.052.09.04.2-.031.277a.257.257 0 01-.283.062 8.427 8.427 0 01-3.067-2.115zm4.6-.055a.232.232 0 01.013-.232.253.253 0 01.212-.112h2.806c.086 0 .166.042.212.112.046.07.05.158.013.232a18.477 18.477 0 01-1.448 2.37.222.222 0 01-.18.09.222.222 0 01-.181-.09 18.464 18.464 0 01-1.443-2.37h-.004z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$i;

function _extends$12() { _extends$12 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$12.apply(this, arguments); }

function SvgCommunication24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$12({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$i || (_g$i = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.189 13.121a8.137 8.137 0 01-.638-.164 1 1 0 00-.662.028l-2.12.849.49-.859a1 1 0 00-.243-1.275A5.217 5.217 0 012 7.633C2 4.527 5.2 2 9.13 2c3.93 0 7.131 2.526 7.131 5.632a1 1 0 002 0C18.261 3.424 14.165 0 9.13 0S0 3.424 0 7.633a7.144 7.144 0 002.123 5.05L.61 15.331a1 1 0 001.24 1.424l4.466-1.787c.151.04.3.076.457.109a1 1 0 10.416-1.956z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.687 19.9A5.643 5.643 0 0024 16.251c0-3.653-3.524-6.74-7.7-6.74s-7.7 3.087-7.7 6.74a6.738 6.738 0 003.186 5.6 7.651 7.651 0 006.919.734l3.373 1.336a.961.961 0 001.019-.163.879.879 0 00.311-1.259l-.721-2.599zm-1.817-.971a1 1 0 00-.257.97L21 21.307l-1.952-.732a.993.993 0 00-.757.023 5.669 5.669 0 01-5.406-.424 4.749 4.749 0 01-2.276-3.923c0-2.525 2.662-4.74 5.7-4.74 3.038 0 5.7 2.215 5.7 4.74a3.68 3.68 0 01-1.139 2.675v.003z"
  }))));
}

var _g$h;

function _extends$11() { _extends$11 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$11.apply(this, arguments); }

function SvgDatabase24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$11({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$h || (_g$h = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.5 17.034a.25.25 0 00-.408-.194C19.155 18.417 15.5 19.25 12 19.25c-3.5 0-7.156-.833-9.093-2.41a.249.249 0 00-.407.194v1.716c0 2.21 4.254 4 9.5 4s9.5-1.79 9.5-4v-1.716z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.5 14.25c0 2.21 4.254 4 9.5 4s9.5-1.79 9.5-4v-1.716a.25.25 0 00-.408-.194C19.155 13.917 15.5 14.75 12 14.75c-3.5 0-7.156-.833-9.093-2.41a.249.249 0 00-.407.194v1.716z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 10.25c-3.5 0-7.156-.833-9.093-2.411a.249.249 0 00-.407.194V9.75c0 2.21 4.254 4 9.5 4s9.5-1.79 9.5-4V8.034a.25.25 0 00-.408-.193C19.154 9.418 15.5 10.25 12 10.25z"
  }), /*#__PURE__*/React__namespace.createElement("ellipse", {
    cx: 12,
    cy: 5.25,
    rx: 9.5,
    ry: 4
  }))));
}

var _path$L;

function _extends$10() { _extends$10 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$10.apply(this, arguments); }

function SvgRaspberry24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$10({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$L || (_path$L = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.418 10.748l-.222-.473c0-2.213-1.067-2.705-2.19-3.347v-.005c.195-.084.45-.182.543-.646.621-.183.71-.46.802-.736.177-.094.622-.37.622-.924.269-.187.45-.464.357-.83.27-.37.357-.646.27-.923.356-.464.175-.74.087-1.017.27-.553 0-1.106-.714-1.013-.265-.464-.979-.37-1.072-.37-.088-.187-.264-.277-.714-.187-.445-.277-.802-.277-1.16-.09-.445-.37-.71-.093-.978 0-.539-.187-.627.09-.891.183-.538-.093-.714.188-.983.464 0 0-.144-.037-.27 0-.867.235-1.22 1.158-1.405 1.641-.186-.483-.538-1.406-1.406-1.645-.125-.033-.269 0-.269 0C9.556.553 9.38.277 8.842.37 8.578.277 8.49.005 7.952.188c-.27-.094-.534-.37-.98 0-.357-.183-.714-.183-1.159.089-.45-.09-.626 0-.714.187-.093 0-.803-.094-1.072.37-.714-.093-.983.46-.714 1.013-.093.276-.27.553.088 1.017-.088.277 0 .553.269.924-.093.37.088.646.357.83 0 .552.445.829.622.923.092.276.18.553.802.736.093.464.353.557.543.646v.005c-1.123.647-2.19 1.135-2.19 3.347l-.222.478c-1.401.83-2.45 3.825-.469 5.85.186.642.255.717.446 1.275.417 2.649 2.375 3.605 2.843 3.699.659.553 1.1.853 2.13 1.223.936.923 1.938 1.2 2.968 1.2s2.032-.277 2.969-1.2c1.03-.37 1.47-.67 2.129-1.223.468-.094 2.426-1.05 2.843-3.704.19-.553.26-.628.446-1.275 1.98-2.025.932-5.015-.469-5.85zm-1.294-.15c-.093.9-4.472-2.967-3.739-3.06 2.097-.357 3.832.81 3.739 3.06zm-4.411-2.067c0 .647-.9 1.135-2.213 1.14-1.313-.005-2.213-.493-2.213-1.14 0-.544.682-1.087 1.434-1.331h.037c.246-.084.5-.136.742-.136.241 0 .496.052.742.136h.037c.756.244 1.434.787 1.434 1.331zm-6.178-.773c.575.086-2.86 3.645-2.932 2.817C4.53 8.505 5.89 7.43 7.535 7.758zm-3.663 8.218c-1.05-.793-1.397-3.015.523-3.967 1.221-.237.435 4.363-.523 3.967zm3.93 3.82c-.397.357-1.53.357-2.398-.931-.6-.857-.4-2.22-.066-2.72.466-.427 1.267.143 1.934 1.005.663.784.996 2.215.53 2.646zm-.4-6.004c-.864-.537-1.006-1.738-.36-2.737.648-1.002 1.943-1.336 2.803-.803.865.537 1.082 1.802.363 2.736-.647.935-1.942 1.27-2.806.804zM11.39 23c-1.106-.013-2-1.095-2-1.404 0-.465.983-.596 1.94-.596.018 0 .039.004.06.004.021 0 .038-.004.06-.004.957 0 1.94.131 1.94.596 0 .309-.894 1.391-2 1.404zm.198-4c-.023 0-.046-.004-.069-.004-.023 0-.046.004-.069.004-1.339 0-2.431-.89-2.431-2.002 0-1.109 1.083-1.994 2.5-1.998 1.417.004 2.5.89 2.5 1.998 0 1.113-1.092 2.002-2.431 2.002zm.863-6.01c-.719-.936-.502-2.205.363-2.738.86-.533 2.155-.199 2.802.8.647 1.002.505 2.204-.359 2.737-.864.47-2.159.135-2.806-.8zm5.183 5.875c-.867 1.288-2.001 1.288-2.397.931-.467-.43-.134-1.861.533-2.649.667-.857 1.464-1.431 1.93-1 .334.5.534 1.861-.066 2.718zm1.01-6.858c1.919.714 1.572 2.38.522 2.975-.958.297-1.744-3.153-.523-2.975zM16.283 2c-.061.123-.246.183-.184.306.184-.06.434-.123.68-.183-.124.123-.246.183-.124.246.25-.063.496-.186.806-.063l-.188.186h.745c-.127.183-.25.306-.31.555h.31c-.127.37-.372.429-.434.552.062.063.185.063.373 0-.127.246-.311.372-.496.555.062.06.123.06.308 0-.185.183-.373.31-.557.492.061.063.184.063.307.063-.184.183-.495.306-.74.429.06.123.187.063.245.063a2.584 2.584 0 01-.74.306c.06.063.122.123.249.123-.311.186-.745.063-.868.186 0 .06.123.123.184.183H15.564c-.589-.003-1.534-.082-1.741-.914.231-.306.91-.966 1.547-1.346-.78.211-1.49.675-1.865.928-.99-.492-.25-1.683.307-2.175 0 .123.061.183.061.246.185-.183.308-.369.496-.555 0 .123-.062.186.061.309.123-.186.246-.31.495-.432-.123.186 0 .246.062.309.184-.123.31-.246.618-.369-.062.123-.185.183-.062.306.188-.123.311-.183.741-.306zM7.433 2c.307.123.433.246.618.369.061-.064.188-.123.061-.31.25.124.372.246.495.433.127-.123.065-.187.065-.31.184.187.307.373.492.555 0-.06.065-.123.065-.245.556.491 1.293 1.681.303 2.173-.376-.253-1.084-.716-1.864-.927.636.38 1.315 1.04 1.546 1.348-.21.828-1.153.909-1.74.914h-.202l-.085-.001c.061-.063.184-.123.184-.186-.123-.123-.556 0-.867-.183.127 0 .188-.063.25-.123a2.764 2.764 0 01-.745-.309c.062 0 .188.06.25-.06-.25-.126-.557-.248-.745-.431.127 0 .25 0 .31-.063-.183-.183-.371-.31-.556-.492.185.063.246.063.307 0-.184-.182-.368-.309-.495-.555.188.064.311.064.373 0-.062-.122-.308-.182-.434-.55h.31c-.06-.25-.184-.373-.31-.555h.744l-.188-.187c.311-.122.56 0 .806.064.123-.064 0-.123-.123-.25.246.064.495.127.68.186.061-.122-.123-.182-.185-.305.434.123.557.183.741.305.123-.122 0-.182-.061-.305z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$g;

function _extends$$() { _extends$$ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$$.apply(this, arguments); }

function SvgArduino24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$$({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$g || (_g$g = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.739 6.959c-2.725 0-4.701 2.21-5.739 3.727-1.038-1.516-3.014-3.727-5.739-3.727a5.063 5.063 0 00-3.829 1.566A5.471 5.471 0 00.923 12.5a5.472 5.472 0 001.51 3.975 5.064 5.064 0 003.828 1.567c2.725 0 4.701-2.21 5.739-3.728 1.038 1.517 3.014 3.728 5.739 3.728a5.064 5.064 0 003.829-1.567 5.472 5.472 0 001.509-3.975 5.471 5.471 0 00-1.51-3.975A5.063 5.063 0 0017.74 6.96zM6.26 16.126a3.276 3.276 0 01-2.517-1.012 3.543 3.543 0 01-.975-2.614 3.542 3.542 0 01.976-2.612A3.276 3.276 0 016.26 8.876c2.333 0 4.07 2.578 4.678 3.623-.612 1.04-2.365 3.627-4.678 3.627zm11.478 0c-2.333 0-4.07-2.578-4.678-3.623.612-1.04 2.365-3.627 4.678-3.627a3.276 3.276 0 012.516 1.012 3.542 3.542 0 01.976 2.612 3.543 3.543 0 01-.975 2.614 3.276 3.276 0 01-2.517 1.012z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.846 11.511h-2.77a.706.706 0 00-.691.719c0 .397.31.718.692.718h2.77a.706.706 0 00.691-.718.706.706 0 00-.692-.719zM18.923 11.511h-.461a.235.235 0 01-.231-.24v-.479a.706.706 0 00-.693-.719.706.706 0 00-.692.72v.478c0 .133-.103.24-.23.24h-.462a.706.706 0 00-.692.719c0 .397.31.718.692.718h.461c.128 0 .231.108.231.24v.48c0 .396.31.718.692.718a.706.706 0 00.693-.719v-.479c0-.132.103-.24.23-.24h.462a.706.706 0 00.692-.718.706.706 0 00-.692-.719z"
  }))));
}

var _g$f;

function _extends$_() { _extends$_ = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$_.apply(this, arguments); }

function SvgProcessor24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$_({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$f || (_g$f = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M2.435 11H1a1 1 0 000 2h1.435a1 1 0 000-2zM2.435 16H1a1 1 0 000 2h1.435a1 1 0 000-2zM2.435 6.5H1a1 1 0 100 2h1.435a1 1 0 100-2zM23 11h-1.435a1 1 0 000 2H23a1 1 0 000-2zM21.565 8.5H23a1 1 0 000-2h-1.435a1 1 0 000 2zM23 16h-1.435a1 1 0 000 2H23a1 1 0 000-2zM12 3.435a1 1 0 001-1V1a1 1 0 00-2 0v1.435a1 1 0 001 1zM7.5 3.435a1 1 0 001-1V1a1 1 0 10-2 0v1.435a1 1 0 001 1zM16.5 3.435a1 1 0 001-1V1a1 1 0 00-2 0v1.435a1 1 0 001 1zM12 20.566a1 1 0 00-1 1V23a1 1 0 002 0v-1.434a1 1 0 00-1-1zM16.5 20.566a1 1 0 00-1 1V23a1 1 0 002 0v-1.434a1 1 0 00-1-1zM7.5 20.566a1 1 0 00-1 1V23a1 1 0 002 0v-1.434a1 1 0 00-1-1zM18.067 4.5H5.933A1.435 1.435 0 004.5 5.934v12.133c.002.79.642 1.431 1.433 1.433h12.134a1.436 1.436 0 001.433-1.433V5.934c0-.791-.642-1.433-1.433-1.434zm-1.567 11a1 1 0 01-1 1H13a1 1 0 010-2h2.5a1 1 0 011 1z"
  }))));
}

var _g$e;

function _extends$Z() { _extends$Z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$Z.apply(this, arguments); }

function SvgCircuitCard24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$Z({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$e || (_g$e = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("rect", {
    x: 9,
    y: 4.501,
    width: 6,
    height: 15,
    rx: 0.25
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21 9.5a1 1 0 000-2h-1.75a.25.25 0 01-.25-.25v-1a.25.25 0 01.25-.25H21a1 1 0 000-2h-1.75a.25.25 0 01-.25-.25V1.5A1.5 1.5 0 0017.5 0h-11A1.5 1.5 0 005 1.5v2.25a.25.25 0 01-.25.25H3a1 1 0 100 2h1.75a.25.25 0 01.25.25v1a.25.25 0 01-.25.25H3a1 1 0 100 2h1.75a.25.25 0 01.25.25v1a.25.25 0 01-.25.25H3a1 1 0 000 2h1.75a.25.25 0 01.25.25v1a.25.25 0 01-.25.25H3a1 1 0 000 2h1.75a.25.25 0 01.25.25v1a.25.25 0 01-.25.25H3a1 1 0 000 2h1.75a.25.25 0 01.25.25v2.25A1.5 1.5 0 006.5 24h11a1.5 1.5 0 001.5-1.5v-2.25a.25.25 0 01.25-.25H21a1 1 0 000-2h-1.75a.25.25 0 01-.25-.25v-1a.25.25 0 01.25-.25H21a1 1 0 000-2h-1.75a.25.25 0 01-.25-.25v-1a.25.25 0 01.25-.25H21a1 1 0 000-2h-1.75a.25.25 0 01-.25-.25v-1a.25.25 0 01.25-.25H21zm-4.5-6v17a.5.5 0 01-.5.5H8a.5.5 0 01-.5-.5v-17A.5.5 0 018 3h8a.5.5 0 01.5.5z"
  }))));
}

var _g$d;

function _extends$Y() { _extends$Y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$Y.apply(this, arguments); }

function SvgRfid24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$Y({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$d || (_g$d = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.995 0C23.102 0 24 .896 24 1.999V15.05L16.02 24H1.997A2 2 0 010 21.995V2.005C0 .898.897 0 2.005 0h19.99zM22 14.288V1.998l-19.999.003L2 22 15.123 22 22 14.288z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.496 3C20.326 3 21 3.672 21 4.499v9.789L15.015 21H4.497A1.5 1.5 0 013 19.496V4.504C3 3.674 3.673 3 4.504 3h14.992zM19 5H5v14h9.118L19 13.525V5z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13.002 9A2 2 0 0115 10.998v2.004A2 2 0 0113.002 15h-2.004A2 2 0 019 13.002v-2.004A2 2 0 0110.998 9h2.004zm0 1.5h-2.004a.501.501 0 00-.49.409l-.008.089v2.004c0 .243.178.447.409.49l.089.008h2.004a.501.501 0 00.49-.409l.008-.089v-2.004a.501.501 0 00-.409-.49l-.089-.008z"
  }))));
}

var _g$c;

function _extends$X() { _extends$X = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$X.apply(this, arguments); }

function SvgIndustrial24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$X({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$c || (_g$c = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16.308 9.75a.25.25 0 00-.249.233l-.851 12.736a.965.965 0 00.968 1.031h3a.966.966 0 00.968-1.032l-.851-12.735a.25.25 0 00-.249-.233h-2.736zM13 4a.25.25 0 00-.25-.25H.676a.5.5 0 00-.447.724L1 6.026a1.4 1.4 0 001.171.724h.25a.25.25 0 01.25.25v2.783a.25.25 0 01-.143.226A3.018 3.018 0 00.864 12.75a3.179 3.179 0 003.187 3 2.908 2.908 0 002.875-3 1 1 0 00-2 0 .909.909 0 01-.875 1 1.181 1.181 0 01-1.187-1 .934.934 0 01.812-1 1 1 0 001-1V7a.25.25 0 01.25-.25h7.824A.25.25 0 0013 6.5V4zM12 17.75h-2a.25.25 0 00-.25.25v5.5c0 .138.112.25.25.25h2a1 1 0 001-1v-4a1 1 0 00-1-1zM4.75 17.75h3.5v6h-3.5zM3.25 18a.25.25 0 00-.25-.25H1a1 1 0 00-1 1v4a1 1 0 001 1h2a.25.25 0 00.25-.25V18zM23.889 4.118a.814.814 0 00-.713-.368H20.75a.25.25 0 01-.25-.25V.622a.34.34 0 00-.475-.347l-5.051 1.712a.755.755 0 00-.474.67v5.084a.506.506 0 00.5.509h5a.506.506 0 00.5-.509V7a.25.25 0 01.25-.25h1.426a1.4 1.4 0 001.171-.724l.553-1.1a.816.816 0 00-.011-.808z"
  }))));
}

var _path$K;

function _extends$W() { _extends$W = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$W.apply(this, arguments); }

function SvgMedical24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$W({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$K || (_path$K = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20 2a2 2 0 012 2v16a2 2 0 01-2 2H4a2 2 0 01-2-2V4a2 2 0 012-2h16zm-6.889 5H10.89a.556.556 0 00-.556.556v2.222a.556.556 0 01-.555.555H7.556A.556.556 0 007 10.89v2.222c0 .307.249.556.556.556h2.222c.307 0 .555.248.555.555v2.222c0 .307.25.556.556.556h2.222a.556.556 0 00.556-.556v-2.222c0-.307.248-.555.555-.555h2.222A.556.556 0 0017 13.11V10.89a.556.556 0 00-.556-.556h-2.222a.556.556 0 01-.555-.555V7.556A.556.556 0 0013.11 7z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$b;

function _extends$V() { _extends$V = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$V.apply(this, arguments); }

function SvgAutomotive24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$V({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$b || (_g$b = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15.9 19.885l-.409-.235a.25.25 0 01-.121-.262 3.529 3.529 0 00-.008-1.296.218.218 0 01.106-.231l.423-.245a.5.5 0 00.183-.683l-.5-.859a.5.5 0 00-.69-.179l-.365.219a.252.252 0 01-.292-.025 3.582 3.582 0 00-1.071-.636.251.251 0 01-.156-.234v-.469a.5.5 0 00-.5-.5h-1a.5.5 0 00-.5.5v.469a.249.249 0 01-.165.234 3.942 3.942 0 00-1.144.642.249.249 0 01-.283.026l-.429-.243a.5.5 0 00-.679.183l-.508.872a.5.5 0 00-.051.38.5.5 0 00.233.3l.419.243c.08.048.12.141.1.232a3.4 3.4 0 00-.007 1.296.248.248 0 01-.12.262l-.406.234a.5.5 0 00-.183.683l.5.872a.5.5 0 00.677.187l.445-.248c.09-.05.203-.04.283.026.343.278.73.495 1.145.644a.248.248 0 01.165.234v.468a.5.5 0 00.5.5h1a.5.5 0 00.5-.5v-.468c0-.104.064-.198.162-.235a3.574 3.574 0 001.073-.637.25.25 0 01.29-.026l.382.225a.5.5 0 00.688-.182l.492-.86a.5.5 0 00-.179-.678zm-3.9.365a1.5 1.5 0 110-3 1.5 1.5 0 010 3z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23 22h-.25a.25.25 0 01-.25-.25V5a1 1 0 00-2 0v5.75a.25.25 0 01-.25.25h-2a.25.25 0 01-.25-.25V9.729c0-.122.088-.226.208-.246A1.253 1.253 0 0019.25 8.25V6.707a1.284 1.284 0 00-.406-.921l-1.226-1.061a.5.5 0 01-.156-.248l-.9-3.352A1.5 1.5 0 0015.109 0H8.891a1.494 1.494 0 00-1.452 1.12l-.9 3.358a.5.5 0 01-.156.248l-1.266 1.1a1.258 1.258 0 00-.366.884v1.54c0 .61.44 1.13 1.041 1.233.12.02.208.124.208.246v1.021a.25.25 0 01-.25.25h-2a.25.25 0 01-.25-.25V5a1 1 0 10-2 0v16.75a.25.25 0 01-.25.25H1a1 1 0 000 2h3a1 1 0 000-2h-.25a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h16.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25H20a1 1 0 000 2h3a1 1 0 000-2zm-8-11.25a.25.25 0 01-.25.25h-5.5a.25.25 0 01-.25-.25v-1a.25.25 0 01.25-.25h5.5a.25.25 0 01.25.25v1zm.068-7.1a.248.248 0 01-.2.1H9.13a.25.25 0 01-.242-.315l.336-1.25A.251.251 0 019.466 2h5.068c.113 0 .212.076.242.185l.335 1.25a.252.252 0 01-.043.217V3.65z"
  }))));
}

var _path$J;

function _extends$U() { _extends$U = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$U.apply(this, arguments); }

function SvgElectric24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$U({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$J || (_path$J = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.722 7h-3.605a.253.253 0 01-.218-.379L18.412.805a.489.489 0 00-.43-.8h-4a1.174 1.174 0 00-.958.563L7.752 9.692a.518.518 0 00.48.808h2.673a.25.25 0 01.221.366L7.468 17.84a.25.25 0 01-.328.11l-1.635-.774a.5.5 0 00-.751.537l.671 6.064a.249.249 0 00.35.2l6.381-2.822a.479.479 0 00.025-.912l-2.2-.971a.248.248 0 01-.091-.388L19.113 7.8a.467.467 0 00-.391-.8z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$I;

function _extends$T() { _extends$T = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$T.apply(this, arguments); }

function SvgAutomatic(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$T({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$I || (_path$I = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.09 0H6.183C4.982 0 4 .982 4 2.182v19.636C4 23.018 4.982 24 6.182 24H17.09c1.2 0 2.182-.982 2.182-2.182V2.182C19.273.982 18.29 0 17.09 0zm0 19.636H6.183V4.364H17.09v15.272zm-6.544-3.272h2.181v2.181h-2.181v-2.181zM8.93 10.025h.142c.36 0 .643-.25.763-.589.262-.752.993-1.32 1.811-1.32 1.015 0 1.91.895 1.91 1.91 0 1.44-1.626 1.69-2.433 3.076h-.011a3.358 3.358 0 00-.218.49c-.011.022-.022.034-.022.055-.011.022-.011.044-.011.055-.11.338-.175.72-.175 1.178h1.92c0-.273.044-.513.131-.73.59-1.604 3.022-2.03 2.706-4.56-.208-1.692-1.56-3.1-3.251-3.317-1.931-.251-3.59.85-4.157 2.509-.218.61.251 1.243.895 1.243z",
    fill: "current"
  })));
}

var defaultIconSize$6 = "24px";
/**
 */

var DeviceTypeIcon = /*#__PURE__*/function (_Component) {
  _inherits(DeviceTypeIcon, _Component);

  var _super = _createSuper(DeviceTypeIcon);

  function DeviceTypeIcon() {
    _classCallCheck(this, DeviceTypeIcon);

    return _super.apply(this, arguments);
  }

  _createClass(DeviceTypeIcon, [{
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-dark";

      switch (tint) {
        case TINT_WHITE:
          return "fill-white";

        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SECONDARY:
          return "fill-secondary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_NAVY:
          return "fill-navy";

        case TINT_DARK:
          return "fill-dark";

        default:
          return "fill-dark";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          tint = _this$props.tint;
      if (!DT_ALL_TYPES.includes(type)) return "";
      var className = this.props.className || '';
      var currentTint = this.tintToClass(tint);
      var iconSize = size || defaultIconSize$6;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(currentTint, " ").concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        // Personal devices
        case DT_AUTOMATIC:
          return /*#__PURE__*/React__default["default"].createElement(SvgAutomatic, {
            width: iconSize,
            height: iconSize
          });

        case DT_GENERIC:
          return /*#__PURE__*/React__default["default"].createElement(SvgGeneric24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MOBILE:
          return /*#__PURE__*/React__default["default"].createElement(SvgMobile24, {
            width: iconSize,
            height: iconSize
          });

        case DT_TABLET:
          return /*#__PURE__*/React__default["default"].createElement(SvgTablet24, {
            width: iconSize,
            height: iconSize
          });

        case DT_IPOD:
          return /*#__PURE__*/React__default["default"].createElement(SvgIpod24, {
            width: iconSize,
            height: iconSize
          });

        case DT_EREADER:
          return /*#__PURE__*/React__default["default"].createElement(SvgEreader24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WATCH:
          return /*#__PURE__*/React__default["default"].createElement(SvgWatch24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WEARABLE:
          return /*#__PURE__*/React__default["default"].createElement(SvgWearable24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CAR:
          return /*#__PURE__*/React__default["default"].createElement(SvgCar24, {
            width: iconSize,
            height: iconSize
          });
        // Audio & Video

        case DT_MEDIA_PLAYER:
          return /*#__PURE__*/React__default["default"].createElement(SvgMediaPlayer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_TELEVISION:
          return /*#__PURE__*/React__default["default"].createElement(SvgTelevision24, {
            width: iconSize,
            height: iconSize
          });

        case DT_GAME_CONSOLE:
          return /*#__PURE__*/React__default["default"].createElement(SvgGameConsole24, {
            width: iconSize,
            height: iconSize
          });

        case DT_STREAMING_DONGLE:
          return /*#__PURE__*/React__default["default"].createElement(SvgStreamingDongle24, {
            width: iconSize,
            height: iconSize
          });

        case DT_LOUDSPEAKER:
          return /*#__PURE__*/React__default["default"].createElement(SvgLoudspeaker24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SOUND_SYSTEM:
          return /*#__PURE__*/React__default["default"].createElement(SvgSoundSystem24, {
            width: iconSize,
            height: iconSize
          });

        case DT_STB:
          return /*#__PURE__*/React__default["default"].createElement(SvgStb24, {
            width: iconSize,
            height: iconSize
          });

        case DT_DISC_PLAYER:
          return /*#__PURE__*/React__default["default"].createElement(SvgDiscPlayer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SATELLITE:
          return /*#__PURE__*/React__default["default"].createElement(SvgSatellite24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MUSIC:
          return /*#__PURE__*/React__default["default"].createElement(SvgMusic24, {
            width: iconSize,
            height: iconSize
          });

        case DT_REMOTE_CONTROL:
          return /*#__PURE__*/React__default["default"].createElement(SvgRemoteControl24, {
            width: iconSize,
            height: iconSize
          });

        case DT_RADIO:
          return /*#__PURE__*/React__default["default"].createElement(SvgRadio24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PHOTO_CAMERA:
          return /*#__PURE__*/React__default["default"].createElement(SvgPhotoCamera24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PHOTOS:
          return /*#__PURE__*/React__default["default"].createElement(SvgPhotos24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MICROPHONE:
          return /*#__PURE__*/React__default["default"].createElement(SvgMicrophone24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PROJECTOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgProjector24, {
            width: iconSize,
            height: iconSize
          });
        // Home & Office

        case DT_COMPUTER:
          return /*#__PURE__*/React__default["default"].createElement(SvgComputer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_LAPTOP:
          return /*#__PURE__*/React__default["default"].createElement(SvgLaptop24, {
            width: iconSize,
            height: iconSize
          });

        case DT_DESKTOP:
          return /*#__PURE__*/React__default["default"].createElement(SvgDesktop24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PRINTER:
          return /*#__PURE__*/React__default["default"].createElement(SvgPrinter24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PHONE:
          return /*#__PURE__*/React__default["default"].createElement(SvgPhone24, {
            width: iconSize,
            height: iconSize
          });

        case DT_VOIP:
          return /*#__PURE__*/React__default["default"].createElement(SvgVoip24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CONFERENCING:
          return /*#__PURE__*/React__default["default"].createElement(SvgConferencing24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SCANNER:
          return /*#__PURE__*/React__default["default"].createElement(SvgScanner24, {
            width: iconSize,
            height: iconSize
          });

        case DT_POS:
          return /*#__PURE__*/React__default["default"].createElement(SvgPos24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CLOCK:
          return /*#__PURE__*/React__default["default"].createElement(SvgClock24, {
            width: iconSize,
            height: iconSize
          });

        case DT_BARCODE:
          return /*#__PURE__*/React__default["default"].createElement(SvgBarcode24, {
            width: iconSize,
            height: iconSize
          });
        // Smart Home

        case DT_SURVEILLANCE_CAMERA:
          return /*#__PURE__*/React__default["default"].createElement(SvgSurveillanceCamera24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMART_HOME:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmartHome24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMART_PLUG:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmartPlug24, {
            width: iconSize,
            height: iconSize
          });

        case DT_LIGHT:
          return /*#__PURE__*/React__default["default"].createElement(SvgLight24, {
            width: iconSize,
            height: iconSize
          });

        case DT_VOICE_CONTROL:
          return /*#__PURE__*/React__default["default"].createElement(SvgVoiceControl24, {
            width: iconSize,
            height: iconSize
          });

        case DT_THERMOSTAT:
          return /*#__PURE__*/React__default["default"].createElement(SvgThermostat24, {
            width: iconSize,
            height: iconSize
          });

        case DT_POWER_SYSTEM:
          return /*#__PURE__*/React__default["default"].createElement(SvgPowerSystem24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SOLAR_PANEL:
          return /*#__PURE__*/React__default["default"].createElement(SvgSolarPanel24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMART_METER:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmartMeter24, {
            width: iconSize,
            height: iconSize
          });

        case DT_HEATING:
          return /*#__PURE__*/React__default["default"].createElement(SvgHeating24, {
            width: iconSize,
            height: iconSize
          });

        case DT_APPLIANCE:
          return /*#__PURE__*/React__default["default"].createElement(SvgAppliance24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WASHER:
          return /*#__PURE__*/React__default["default"].createElement(SvgWasher24, {
            width: iconSize,
            height: iconSize
          });

        case DT_FRIDGE:
          return /*#__PURE__*/React__default["default"].createElement(SvgFridge24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CLEANER:
          return /*#__PURE__*/React__default["default"].createElement(SvgCleaner24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SLEEP:
          return /*#__PURE__*/React__default["default"].createElement(SvgSleep24, {
            width: iconSize,
            height: iconSize
          });

        case DT_FITNESS:
          return /*#__PURE__*/React__default["default"].createElement(SvgFitness24, {
            width: iconSize,
            height: iconSize
          });

        case DT_GARAGE:
          return /*#__PURE__*/React__default["default"].createElement(SvgGarage24, {
            width: iconSize,
            height: iconSize
          });

        case DT_POOL:
          return /*#__PURE__*/React__default["default"].createElement(SvgPool24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SPRINKLER:
          return /*#__PURE__*/React__default["default"].createElement(SvgSprinkler24, {
            width: iconSize,
            height: iconSize
          });

        case DT_BELL:
          return /*#__PURE__*/React__default["default"].createElement(SvgBell24, {
            width: iconSize,
            height: iconSize
          });

        case DT_KEY_LOCK:
          return /*#__PURE__*/React__default["default"].createElement(SvgKeyLock24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CONTROL_PANEL:
          return /*#__PURE__*/React__default["default"].createElement(SvgControlPanel24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMART_CONTROLLER:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmartController24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SCALE:
          return /*#__PURE__*/React__default["default"].createElement(SvgScale24, {
            width: iconSize,
            height: iconSize
          });

        case DT_TOY:
          return /*#__PURE__*/React__default["default"].createElement(SvgToy24, {
            width: iconSize,
            height: iconSize
          });

        case DT_ROBOT:
          return /*#__PURE__*/React__default["default"].createElement(SvgRobot24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WEATHER:
          return /*#__PURE__*/React__default["default"].createElement(SvgWeather24, {
            width: iconSize,
            height: iconSize
          });

        case DT_HEALTH_MONITOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgHealthMonitor24, {
            width: iconSize,
            height: iconSize
          });

        case DT_BABY_MONITOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgBabyMonitor24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PET_MONITOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgPetMonitor24, {
            width: iconSize,
            height: iconSize
          });

        case DT_ALARM:
          return /*#__PURE__*/React__default["default"].createElement(SvgAlarm24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MOTION_DETECTOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgMotionDetector24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SECURITY_SYSTEM:
          return /*#__PURE__*/React__default["default"].createElement(SvgSecuritySystem24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMOKE:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmoke24, {
            width: iconSize,
            height: iconSize
          });

        case DT_HUMIDITY:
          return /*#__PURE__*/React__default["default"].createElement(SvgHumidity24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SENSOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgSensor24, {
            width: iconSize,
            height: iconSize
          });

        case DT_FINGBOX:
          return /*#__PURE__*/React__default["default"].createElement(SvgFingbox24, {
            width: iconSize,
            height: iconSize
          });

        case DT_DOMOTZ_BOX:
          return /*#__PURE__*/React__default["default"].createElement(SvgDomotzBox24, {
            width: iconSize,
            height: iconSize
          });

        case DT_ROUTER:
          return /*#__PURE__*/React__default["default"].createElement(SvgRouter24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WIFI:
          return /*#__PURE__*/React__default["default"].createElement(SvgWifi24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WIFI_EXTENDER:
          return /*#__PURE__*/React__default["default"].createElement(SvgWifiExtender24, {
            width: iconSize,
            height: iconSize
          });

        case DT_NAS_STORAGE:
          return /*#__PURE__*/React__default["default"].createElement(SvgNasStorage24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MODEM:
          return /*#__PURE__*/React__default["default"].createElement(SvgModem24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SWITCH:
          return /*#__PURE__*/React__default["default"].createElement(SvgSwitch24, {
            width: iconSize,
            height: iconSize
          });

        case DT_GATEWAY:
          return /*#__PURE__*/React__default["default"].createElement(SvgGateway24, {
            width: iconSize,
            height: iconSize
          });

        case DT_FIREWALL:
          return /*#__PURE__*/React__default["default"].createElement(SvgFirewall24, {
            width: iconSize,
            height: iconSize
          });

        case DT_VPN:
          return /*#__PURE__*/React__default["default"].createElement(SvgVpn24, {
            width: iconSize,
            height: iconSize
          });

        case DT_POE_PLUG:
          return /*#__PURE__*/React__default["default"].createElement(SvgPoePlug24, {
            width: iconSize,
            height: iconSize
          });

        case DT_USB:
          return /*#__PURE__*/React__default["default"].createElement(SvgUsb24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SMALL_CELL:
          return /*#__PURE__*/React__default["default"].createElement(SvgSmallCell24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CLOUD:
          return /*#__PURE__*/React__default["default"].createElement(SvgCloud24, {
            width: iconSize,
            height: iconSize
          });

        case DT_BATTERY:
          return /*#__PURE__*/React__default["default"].createElement(SvgBattery24, {
            width: iconSize,
            height: iconSize
          });

        case DT_NETWORK_APPLIANCE:
          return /*#__PURE__*/React__default["default"].createElement(SvgNetworkAppliance24, {
            width: iconSize,
            height: iconSize
          });

        case DT_VIRTUAL_MACHINE:
          return /*#__PURE__*/React__default["default"].createElement(SvgVirtualMachine24, {
            width: iconSize,
            height: iconSize
          });

        case DT_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_TERMINAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgTerminal24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MAIL_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgMailServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_FILE_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgFileServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PROXY_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgProxyServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_WEB_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgWebServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_DOMAIN_SERVER:
          return /*#__PURE__*/React__default["default"].createElement(SvgDomainServer24, {
            width: iconSize,
            height: iconSize
          });

        case DT_COMMUNICATION:
          return /*#__PURE__*/React__default["default"].createElement(SvgCommunication24, {
            width: iconSize,
            height: iconSize
          });

        case DT_DATABASE:
          return /*#__PURE__*/React__default["default"].createElement(SvgDatabase24, {
            width: iconSize,
            height: iconSize
          });

        case DT_RASPBERRY:
          return /*#__PURE__*/React__default["default"].createElement(SvgRaspberry24, {
            width: iconSize,
            height: iconSize
          });

        case DT_ARDUINO:
          return /*#__PURE__*/React__default["default"].createElement(SvgArduino24, {
            width: iconSize,
            height: iconSize
          });

        case DT_PROCESSOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgProcessor24, {
            width: iconSize,
            height: iconSize
          });

        case DT_CIRCUIT_CARD:
          return /*#__PURE__*/React__default["default"].createElement(SvgCircuitCard24, {
            width: iconSize,
            height: iconSize
          });

        case DT_RFID:
          return /*#__PURE__*/React__default["default"].createElement(SvgRfid24, {
            width: iconSize,
            height: iconSize
          });

        case DT_INDUSTRIAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgIndustrial24, {
            width: iconSize,
            height: iconSize
          });

        case DT_MEDICAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgMedical24, {
            width: iconSize,
            height: iconSize
          });

        case DT_AUTOMOTIVE:
          return /*#__PURE__*/React__default["default"].createElement(SvgAutomotive24, {
            width: iconSize,
            height: iconSize
          });

        case DT_ENERGY:
          return /*#__PURE__*/React__default["default"].createElement(SvgElectric24, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return DeviceTypeIcon;
}(React.Component);

var _path$H;

function _extends$S() { _extends$S = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$S.apply(this, arguments); }

function SvgNetcontextHome24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$S({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$H || (_path$H = /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M11.293.293l-11 11A1 1 0 001 13h1.25a.25.25 0 01.25.25V23a1 1 0 001 1h5.75a.25.25 0 00.25-.25V19a2.5 2.5 0 115 0v4.75c0 .138.112.25.25.25h5.75a1 1 0 001-1v-9.75a.25.25 0 01.25-.25H23a1 1 0 00.707-1.707l-11-11a1 1 0 00-1.414 0zM14.5 9.5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"
  })));
}

var _path$G;

function _extends$R() { _extends$R = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$R.apply(this, arguments); }

function SvgNetcontextOffice24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$R({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$G || (_path$G = /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23.571 13.2a.434.434 0 00.429-.44V9.68c0-1.458-1.151-2.64-2.571-2.64h-2.572C18.857 3.152 15.787 0 12 0 8.213 0 5.143 3.152 5.143 7.04H2.57C1.151 7.04 0 8.222 0 9.68v3.08c0 .243.192.44.429.44H23.57zM12 3.52c1.894 0 3.429 1.576 3.429 3.52H8.57c0-1.944 1.536-3.52 3.429-3.52zm1.286 12.5c0-.232.192-.42.428-.42h9.857c.237 0 .429.188.429.42v5.46c0 1.392-1.151 2.52-2.571 2.52H2.57C1.151 24 0 22.872 0 21.48v-5.46c0-.232.192-.42.429-.42h9.857c.236 0 .428.188.428.42v1.68c0 .696.576 1.26 1.286 1.26.71 0 1.286-.564 1.286-1.26v-1.68z"
  })));
}

var _path$F;

function _extends$Q() { _extends$Q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$Q.apply(this, arguments); }

function SvgNetcontextRental24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$Q({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$F || (_path$F = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M6.545 12.727a3.268 3.268 0 003.273-3.272 3.268 3.268 0 00-3.273-3.273 3.268 3.268 0 00-3.272 3.273 3.268 3.268 0 003.272 3.272zm13.091-6.545h-6.545c-1.2 0-2.182.982-2.182 2.182v5.454H2.182V5.091C2.182 4.49 1.69 4 1.09 4S0 4.49 0 5.09v14.183c0 .6.49 1.09 1.09 1.09.6 0 1.092-.49 1.092-1.09V17.09h19.636v2.182c0 .6.491 1.09 1.091 1.09S24 19.874 24 19.274v-8.727a4.362 4.362 0 00-4.364-4.364z"
  })));
}

var _path$E;

function _extends$P() { _extends$P = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$P.apply(this, arguments); }

function SvgNetcontextPublic24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$P({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$E || (_path$E = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21.6 1H4.8C3.48 1 2.4 2.08 2.4 3.4V13c0 2.652 2.148 4.8 4.8 4.8h7.2c2.652 0 4.8-2.148 4.8-4.8V9.4h2.4C22.92 9.4 24 8.32 24 7V3.4C24 2.08 22.92 1 21.6 1zm0 6h-2.4V3.4h2.4V7zM1.2 22.6h19.2c.66 0 1.2-.54 1.2-1.2 0-.66-.54-1.2-1.2-1.2H1.2c-.66 0-1.2.54-1.2 1.2 0 .66.54 1.2 1.2 1.2z"
  })));
}

var defaultIconSize$5 = "24px";
/**
 */

var NetworkContextIcon = /*#__PURE__*/function (_Component) {
  _inherits(NetworkContextIcon, _Component);

  var _super = _createSuper(NetworkContextIcon);

  function NetworkContextIcon() {
    _classCallCheck(this, NetworkContextIcon);

    return _super.apply(this, arguments);
  }

  _createClass(NetworkContextIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size;
      if (!NC_ALL_TYPES.includes(type)) return "";
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$5;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case NC_HOME:
          return /*#__PURE__*/React__default["default"].createElement(SvgNetcontextHome24, {
            width: iconSize,
            height: iconSize
          });

        case NC_OFFICE:
          return /*#__PURE__*/React__default["default"].createElement(SvgNetcontextOffice24, {
            width: iconSize,
            height: iconSize
          });

        case NC_RENTAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgNetcontextRental24, {
            width: iconSize,
            height: iconSize
          });

        case NC_PUBLIC:
          return /*#__PURE__*/React__default["default"].createElement(SvgNetcontextPublic24, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return NetworkContextIcon;
}(React.Component);

var _path$D;

function _extends$O() { _extends$O = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$O.apply(this, arguments); }

function SvgFlag(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$O({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512"
  }, props), _path$D || (_path$D = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "current",
    d: "M64 32v448c0 17.7-14.3 32-32 32S0 497.7 0 480V32C0 14.3 14.3 0 32 0s32 14.3 32 32zm40.8 302.8c-3 .9-6 1.7-8.8 2.6V13.5C121.5 6.4 153 0 184 0c36.5 0 68.3 9.1 95.6 16.9l1.3.4C309.4 25.4 333.3 32 360 32c26.8 0 52.9-6.8 73-14.1 9.9-3.6 17.9-7.2 23.4-9.8 2.7-1.3 4.8-2.4 6.2-3.1.7-.4 1.1-.6 1.4-.8l.2-.1c9.9-5.6 22.1-5.6 31.9.2S512 20.6 512 32v256c0 12.1-6.8 23.2-17.7 28.6L480 288l14.3 28.6h-.1l-.2.1-.7.4c-.6.3-1.5.7-2.5 1.2-2.2 1-5.2 2.4-9 4-7.7 3.3-18.5 7.6-31.5 11.9-25.8 8.7-61.5 17.8-98.3 17.8-37 0-65.2-9.4-89-17.3l-1-.3c-24-8-43.7-14.4-70-14.4-27.5 0-60.1 7-87.2 14.8z"
  })));
}

var _path$C;

function _extends$N() { _extends$N = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$N.apply(this, arguments); }

function SvgFlagOut(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$N({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512"
  }, props), _path$C || (_path$C = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "current",
    d: "M476.3 0c-6.365 0-13.01 1.35-19.34 4.233-45.69 20.86-79.56 27.94-107.8 27.94-59.96 0-94.81-31.86-163.9-31.87-34.63 0-77.87 8.003-137.2 32.05V24C48 10.75 37.25 0 24 0S0 10.75 0 24v464c0 13.3 10.75 24 24 24s24-10.75 24-24V384c53.59-23.86 96.02-31.81 132.8-31.81 73.63 0 124.9 31.78 198.6 31.78 31.91 0 68.02-5.971 111.1-23.09 13.6-4.98 21.5-16.48 21.5-28.78V30.73C512 11.1 495.3 0 476.3 0zM464 319.8c-30.31 10.82-58.08 16.1-84.6 16.1-30.8 0-58.31-7-87.44-14.41-32.01-8.141-68.29-17.37-111.1-17.37-42.35 0-85.99 9.09-132.8 27.73V84.14l18.03-7.301c47.39-19.2 86.38-28.54 119.2-28.54 28.24.004 49.12 6.711 73.31 14.48 25.38 8.148 54.13 17.39 90.58 17.39 35.43 0 72.24-8.496 114.9-26.61V319.8z"
  })));
}

var _g$a, _defs$5;

function _extends$M() { _extends$M = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$M.apply(this, arguments); }

function SvgTrendingUp$1(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$M({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$a || (_g$a = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#trending-up_svg__clip0)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.697 6.042l1.766 1.766-5.984 5.984-4.034-4.034a1.221 1.221 0 00-1.73 0L.36 17.127a1.221 1.221 0 000 1.729c.478.478 1.25.478 1.729 0l6.486-6.499 4.034 4.034c.478.479 1.251.479 1.73 0l6.854-6.842 1.765 1.766c.38.38 1.043.11 1.043-.43V5.614A.59.59 0 0023.399 5h-5.26c-.552 0-.822.662-.442 1.042z"
  }))), _defs$5 || (_defs$5 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "trending-up_svg__clip0"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _path$B;

function _extends$L() { _extends$L = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$L.apply(this, arguments); }

function SvgTrendingFlat(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$L({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$B || (_path$B = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.82 11.757l-3.564-3.563a.64.64 0 00-1.098.447v2.286H1.278c-.703 0-1.278.575-1.278 1.277a1.28 1.28 0 001.277 1.277h17.88v2.286c0 .575.69.856 1.086.447l3.564-3.563a.628.628 0 00.013-.894z"
  })));
}

var _g$9, _defs$4;

function _extends$K() { _extends$K = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$K.apply(this, arguments); }

function SvgTrendingDown$1(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$K({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$9 || (_g$9 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#trending-down_svg__clip0)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.697 18.173l1.766-1.766-5.984-5.984-4.034 4.034a1.221 1.221 0 01-1.73 0L.36 7.087a1.221 1.221 0 010-1.728 1.221 1.221 0 011.729 0l6.486 6.499 4.034-4.035a1.221 1.221 0 011.73 0l6.854 6.843 1.766-1.766c.38-.38 1.042-.11 1.042.429v5.26c0 .344-.27.614-.613.614h-5.26c-.54.012-.81-.65-.43-1.03z"
  }))), _defs$4 || (_defs$4 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "trending-down_svg__clip0"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _path$A;

function _extends$J() { _extends$J = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$J.apply(this, arguments); }

function SvgQuestion(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$J({
    viewBox: "0 0 18 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$A || (_path$A = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.47 0C5.728 0 3.305 1.533 1.402 4.267a1.126 1.126 0 00.243 1.54l2.022 1.534a1.125 1.125 0 001.559-.194C6.4 5.676 7.27 4.829 9.105 4.829c1.442 0 3.226.928 3.226 2.326 0 1.057-.873 1.6-2.297 2.398-1.66.931-3.858 2.09-3.858 4.988V15c0 .621.504 1.125 1.125 1.125h3.397c.622 0 1.125-.504 1.125-1.125v-.27c0-2.01 5.872-2.093 5.872-7.53 0-4.094-4.247-7.2-8.225-7.2zM9 17.506a3.25 3.25 0 00-3.247 3.247A3.25 3.25 0 009 24a3.25 3.25 0 003.247-3.247A3.25 3.25 0 009 17.506z"
  })));
}

var _path$z, _path2$5;

function _extends$I() { _extends$I = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$I.apply(this, arguments); }

function SvgLocation(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$I({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$z || (_path$z = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  })), _path2$5 || (_path2$5 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5a2.5 2.5 0 010-5 2.5 2.5 0 010 5z"
  })));
}

var _path$y, _path2$4;

function _extends$H() { _extends$H = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$H.apply(this, arguments); }

function SvgUp(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$H({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$y || (_path$y = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0z"
  })), _path2$4 || (_path2$4 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.71 9.7c.39.39 1.02.39 1.41 0L11 5.83V21c0 .55.45 1 1 1s1-.45 1-1V5.83l3.88 3.88a.996.996 0 101.41-1.41L12.7 2.7a.996.996 0 00-1.41 0L5.71 8.29a.996.996 0 000 1.41z"
  })));
}

var _path$x, _path2$3;

function _extends$G() { _extends$G = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$G.apply(this, arguments); }

function SvgDown(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$G({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$x || (_path$x = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0z"
  })), _path2$3 || (_path2$3 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.3 14.29a.996.996 0 00-1.41 0L13 18.17V3c0-.55-.45-1-1-1s-1 .45-1 1v15.18L7.12 14.3a.996.996 0 10-1.41 1.41l5.59 5.59c.39.39 1.02.39 1.41 0l5.59-5.59c.38-.39.38-1.03 0-1.42z"
  })));
}

var _g$8, _defs$3;

function _extends$F() { _extends$F = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$F.apply(this, arguments); }

function SvgQuestionCircle(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$F({
    viewBox: "0 0 34 35",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$8 || (_g$8 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#question-circle_svg__clip0_710_16400)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 .5C7.616.5 0 8.116 0 17.5s7.616 17 17 17 17-7.616 17-17-7.616-17-17-17zm1.7 28.9h-3.4V26h3.4v3.4zm3.519-13.175l-1.53 1.564C19.465 19.03 18.7 20.05 18.7 22.6h-3.4v-.85c0-1.87.765-3.57 1.989-4.811l2.108-2.142A3.324 3.324 0 0020.4 12.4c0-1.87-1.53-3.4-3.4-3.4a3.41 3.41 0 00-3.4 3.4h-3.4c0-3.757 3.043-6.8 6.8-6.8 3.757 0 6.8 3.043 6.8 6.8a5.41 5.41 0 01-1.581 3.825z"
  }))), _defs$3 || (_defs$3 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "question-circle_svg__clip0_710_16400"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    transform: "translate(0 .5)",
    d: "M0 0h34v34H0z"
  })))));
}

var _path$w;

function _extends$E() { _extends$E = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$E.apply(this, arguments); }

function SvgInfo(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$E({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$w || (_path$w = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 0C5.376 0 0 5.376 0 12s5.376 12 12 12 12-5.376 12-12S18.624 0 12 0zm1.2 18h-2.4v-7.2h2.4V18zm0-9.6h-2.4V6h2.4v2.4z"
  })));
}

var _path$v;

function _extends$D() { _extends$D = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$D.apply(this, arguments); }

function SvgBadge(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$D({
    width: 24,
    height: 24,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$v || (_path$v = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.667 0H19c1.467 0 2.667 1.2 2.667 2.667V24l-9.334-4L3 24V2.667C3 1.2 4.2 0 5.667 0zm9.226 7.668l4.467.388c.812.065 1.136 1.08.517 1.615l-3.388 2.936 1.016 4.366c.184.794-.674 1.422-1.376.997l-3.83-2.317-3.831 2.308c-.702.424-1.56-.203-1.375-.997l1.015-4.357L4.72 9.67c-.618-.535-.286-1.55.526-1.615l4.459-.378 1.744-4.117c.314-.748 1.385-.748 1.699 0l1.745 4.107z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var defaultIconSize$4 = "24px";

var GenericIcon = /*#__PURE__*/function (_Component) {
  _inherits(GenericIcon, _Component);

  var _super = _createSuper(GenericIcon);

  function GenericIcon() {
    _classCallCheck(this, GenericIcon);

    return _super.apply(this, arguments);
  }

  _createClass(GenericIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          color = _this$props.color;
      if (!GEN_ALL_TYPES.includes(type)) return "";
      var currentTint = this.tintToClass(color);
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$4;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(currentTint, " ").concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-primary";

      switch (tint) {
        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_DARK:
          return "fill-dark";

        case TINT_INDIGO:
          return "fill-indigo";

        case TINT_NAVY:
          return "fill-navy";

        case TINT_PURPLE:
          return "fill-purple";

        default:
          return "fill-primary";
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case GEN_LOCATION:
          return /*#__PURE__*/React__default["default"].createElement(SvgLocation, {
            width: iconSize,
            height: iconSize
          });

        case GEN_UP:
          return /*#__PURE__*/React__default["default"].createElement(SvgUp, {
            width: iconSize,
            height: iconSize
          });

        case GEN_DOWN:
          return /*#__PURE__*/React__default["default"].createElement(SvgDown, {
            width: iconSize,
            height: iconSize
          });

        case GEN_QUESTION:
          return /*#__PURE__*/React__default["default"].createElement(SvgQuestion, {
            width: iconSize,
            height: iconSize
          });

        case GEN_QUESTION_CIRCLE:
          return /*#__PURE__*/React__default["default"].createElement(SvgQuestionCircle, {
            width: iconSize,
            height: iconSize
          });

        case GEN_INFO:
          return /*#__PURE__*/React__default["default"].createElement(SvgInfo, {
            width: iconSize,
            height: iconSize
          });

        case GEN_TREND_UP:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingUp$1, {
            width: iconSize,
            height: iconSize
          });

        case GEN_TREND_DOWN:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingDown$1, {
            width: iconSize,
            height: iconSize
          });

        case GEN_TREND_FLAT:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingFlat, {
            width: iconSize,
            height: iconSize
          });

        case GEN_BADGE:
          return /*#__PURE__*/React__default["default"].createElement(SvgBadge, {
            width: iconSize,
            height: iconSize
          });

        case GEN_FLAG_OUT:
          return /*#__PURE__*/React__default["default"].createElement(SvgFlagOut, {
            width: iconSize,
            height: iconSize
          });

        case GEN_FLAG:
          return /*#__PURE__*/React__default["default"].createElement(SvgFlag, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return GenericIcon;
}(React.Component);
GenericIcon.propTypes = {
  size: PropTypes__default["default"].number,
  type: PropTypes__default["default"].oneOf([GEN_LOCATION, GEN_UP, GEN_DOWN, GEN_QUESTION, GEN_QUESTION_CIRCLE, GEN_INFO, GEN_TREND_UP, GEN_TREND_DOWN, GEN_TREND_FLAT, GEN_BADGE, GEN_FLAG_OUT, GEN_FLAG]),
  color: PropTypes__default["default"].oneOf([TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING, TINT_DANGER, TINT_DARK, TINT_INDIGO, TINT_NAVY, TINT_PURPLE])
};

var _path$u;

function _extends$C() { _extends$C = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$C.apply(this, arguments); }

function SvgTrendingUp(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$C({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$u || (_path$u = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 20.274c0 .796.645 1.44 1.44 1.44h8.935A9.119 9.119 0 0019.2 14.88l1.474-5.694a.249.249 0 01.3-.18l1.252.3a1.44 1.44 0 001.556-2.158l-2.14-3.466a1.474 1.474 0 00-.744-.594 1.4 1.4 0 00-1.214.114L16.2 5.348a1.44 1.44 0 00.425 2.627l1.064.252a.25.25 0 01.185.306l-1.458 5.622a6.24 6.24 0 01-6.041 4.676H1.44A1.44 1.44 0 000 20.274z"
  })));
}

var _g$7, _defs$2;

function _extends$B() { _extends$B = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$B.apply(this, arguments); }

function SvgTrendingUpFast(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$B({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$7 || (_g$7 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#trending-up-fast_svg__clip0_338_97)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.61 18.524a1.447 1.447 0 01-2.428-1.126c.016-.385.184-.747.467-1.007a18.347 18.347 0 005.613-10.31.25.25 0 00-.246-.294h-.54a1.447 1.447 0 01-1.089-2.4l2.544-2.9c.26-.311.645-.49 1.05-.487.403.004.79.164 1.077.447l2.77 2.895a1.448 1.448 0 01-1.046 2.445h-1.31c-.124 0-.229.09-.247.213a21.274 21.274 0 01-6.616 12.524zm-5.7 3.606c.22 0 .437-.05.634-.147.615-.3 1.225-.636 1.813-1A1.447 1.447 0 108.84 18.52c-.509.313-1.036.6-1.566.862a1.447 1.447 0 00.636 2.748zM1.452 24c.053 0 .106 0 .16-.008a21.13 21.13 0 002.046-.328 1.448 1.448 0 00-.6-2.833c-.582.124-1.17.218-1.763.283A1.447 1.447 0 001.452 24z"
  }))), _defs$2 || (_defs$2 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "trending-up-fast_svg__clip0_338_97"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _g$6;

function _extends$A() { _extends$A = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$A.apply(this, arguments); }

function SvgTrendingDown(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$A({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$6 || (_g$6 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#trending-down_svg__clip0_338_108)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 3.726c0-.796.645-1.44 1.44-1.44h8.935A9.119 9.119 0 0119.2 9.12l1.474 5.694a.25.25 0 00.3.18l1.252-.3a1.44 1.44 0 011.556 2.158l-2.14 3.466a1.474 1.474 0 01-.744.594 1.4 1.4 0 01-1.214-.114L16.2 18.652a1.44 1.44 0 01.425-2.627l1.064-.252a.25.25 0 00.185-.306l-1.458-5.622a6.24 6.24 0 00-6.041-4.676H1.44A1.44 1.44 0 010 3.726z"
  }))));
}

var _g$5, _defs$1;

function _extends$z() { _extends$z = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$z.apply(this, arguments); }

function SvgTrendingDownFast(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$z({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$5 || (_g$5 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#trending-down-fast_svg__clip0_341_114)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.61 5.476a1.447 1.447 0 00-2.428 1.126c.016.385.184.747.467 1.007a18.347 18.347 0 015.613 10.31.25.25 0 01-.246.294h-.54a1.447 1.447 0 00-1.089 2.4l2.544 2.9c.26.311.645.49 1.05.487.403-.004.79-.164 1.077-.447l2.77-2.895a1.448 1.448 0 00-1.046-2.445h-1.31a.249.249 0 01-.247-.213A21.274 21.274 0 0013.61 5.476zM7.91 1.87c.22 0 .437.05.634.147.615.3 1.225.636 1.813 1A1.447 1.447 0 118.84 5.48c-.509-.313-1.036-.6-1.566-.862A1.447 1.447 0 017.91 1.87zM1.452 0c.053 0 .106 0 .16.008a21.13 21.13 0 012.046.328 1.448 1.448 0 01-.6 2.833 17.811 17.811 0 00-1.763-.283A1.447 1.447 0 011.452 0z"
  }))), _defs$1 || (_defs$1 = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "trending-down-fast_svg__clip0_341_114"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    transform: "matrix(1 0 0 -1 0 24)",
    d: "M0 0h24v24H0z"
  })))));
}

var defaultIconSize$3 = "24px";

var TrendIcon = /*#__PURE__*/function (_Component) {
  _inherits(TrendIcon, _Component);

  var _super = _createSuper(TrendIcon);

  function TrendIcon() {
    _classCallCheck(this, TrendIcon);

    return _super.apply(this, arguments);
  }

  _createClass(TrendIcon, [{
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-primary";

      switch (tint) {
        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SECONDARY:
          return "fill-secondary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_NAVY:
          return "fill-navy";

        case TINT_DARK:
          return "fill-dark";

        default:
          return "fill-primary";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          tint = _this$props.tint;
      if (!TI_ALL_TYPES.includes(type)) return "";
      var className = this.props.className || '';
      var currentTint = this.tintToClass(tint);
      var iconSize = size || defaultIconSize$3;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(className, " ").concat(currentTint)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case TI_UP:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingUp, {
            width: iconSize,
            height: iconSize
          });

        case TI_UP_FAST:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingUpFast, {
            width: iconSize,
            height: iconSize
          });

        case TI_DOWN:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingDown, {
            width: iconSize,
            height: iconSize
          });

        case TI_DOWN_FAST:
          return /*#__PURE__*/React__default["default"].createElement(SvgTrendingDownFast, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return TrendIcon;
}(React.Component);
TrendIcon.propTypes = {
  size: PropTypes__default["default"].number,
  type: PropTypes__default["default"].oneOf([TI_DOWN, TI_DOWN_FAST, TI_UP, TI_UP_FAST]),
  tint: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_SECONDARY, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING])
};

var _path$t;

function _extends$y() { _extends$y = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$y.apply(this, arguments); }

function SvgNettypeWifi24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$y({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$t || (_path$t = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.03 9.676C15.38 5.886 8.677 5.875 4.015 9.64c-.35.283-1.185.742-1.993-.066S1.656 7.924 2 7.635c5.767-4.849 14.234-4.847 20.007.007.34.287.884 1.02-.01 1.913-.894.894-1.633.393-1.967.12zm-5.334 7.18C13.53 18.251 12 19.552 12 19.552s-1.845-1.72-2.643-2.643c-.27-.311-.148-.557-.037-.647a4.239 4.239 0 015.402.036c.096.08.229.255-.026.558zm1.695-2.847a7.078 7.078 0 00-8.789.006c-.208.165-.974.165-1.588-.448-.613-.614-.624-1.39-.42-1.563 3.683-3.13 9.127-3.129 12.816.005.202.172.31.824-.41 1.544-.72.72-1.398.623-1.61.456z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$s;

function _extends$x() { _extends$x = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$x.apply(this, arguments); }

function SvgNettypeIp24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$x({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$s || (_path$s = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95a15.65 15.65 0 00-1.38-3.56A8.03 8.03 0 0118.92 8zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56A7.987 7.987 0 015.08 16zm2.95-8H5.08a7.987 7.987 0 014.33-3.56A15.65 15.65 0 008.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95a8.03 8.03 0 01-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$r;

function _extends$w() { _extends$w = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$w.apply(this, arguments); }

function SvgNettypeEth24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$w({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$r || (_path$r = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.95 6.28L6.41 5 1 11.52l5.41 6.52 1.54-1.28-4.35-5.24 4.35-5.24zm-.77 6.24h2v-2h-2v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zM17.95 5l-1.54 1.28 4.35 5.24-4.35 5.24 1.54 1.28 5.41-6.52L17.95 5z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$q;

function _extends$v() { _extends$v = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$v.apply(this, arguments); }

function SvgNettypeEthUsb24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$v({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$q || (_path$q = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20 5V4c0-.55-.45-1-1-1h-2c-.55 0-1 .45-1 1v1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h1v6.91c0 1.04-.76 1.98-1.79 2.08-1.2.12-2.21-.82-2.21-1.99V7.14c0-2.13-1.61-3.99-3.74-4.13A3.993 3.993 0 005 7v7H4c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1v1c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-1c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1H7V7.09c0-1.04.76-1.98 1.79-2.08C9.99 4.89 11 5.83 11 7v9.86c0 2.13 1.61 3.99 3.74 4.13C17.07 21.14 19 19.3 19 17v-7h1c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$p;

function _extends$u() { _extends$u = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$u.apply(this, arguments); }

function SvgNettypeEthWifi24(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$u({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$p || (_path$p = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29a2.5 2.5 0 00-5 0c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2a9 9 0 0118 0h2c0-6.07-4.93-11-11-11z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$o;

function _extends$t() { _extends$t = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$t.apply(this, arguments); }

function SvgNettypeFingboxV124(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$t({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$o || (_path$o = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.55 4.728c7.975 0 9.776 3.123 9.776 3.123.938 1.065.686 2.21.686 2.21l-.436 3.953a5.224 5.224 0 01-.495 1.652c-1.33 2.655-4.781 3.904-9.657 3.75-3.496-.11-6.59-1.042-8.41-2.628-1.026-.895-1.64-2.047-1.731-3.392l-.223-3.99-.012-.15c-.021-.231-.012-1.236.697-1.96 0 0 1.83-2.568 9.805-2.568zM11.5 6c-1.175 0-2.295.087-3.32.237l-.55.089c-.54.094-1.05.206-1.523.333l-.461.13C3.703 7.377 2.48 8.204 2.48 8.972c0 .59.723 1.217 1.942 1.741l.38.154c1.644.628 4.026 1.076 6.699 1.076s5.055-.448 6.699-1.076l.38-.154c1.218-.524 1.942-1.15 1.942-1.74 0-.769-1.223-1.596-3.166-2.182l-.461-.131a17.862 17.862 0 00-1.523-.333l-.55-.089A22.962 22.962 0 0011.501 6z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$n;

function _extends$s() { _extends$s = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$s.apply(this, arguments); }

function SvgNettypeFingboxV224(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$s({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$n || (_path$n = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12.5 5c4.883 0 8.95 1.384 9.84 3.217l.003.006c.772 1.482.72 5.527.553 6.4-.254 1.325-3.008 4.102-10.399 4.218-7.39.115-10.269-3.033-10.403-4.218-.044-.384-.352-4.537.56-6.4l-.049.116.055-.122C3.55 6.384 7.617 5 12.5 5zm0 1c-1.176 0-2.296.087-3.321.237l-.55.089c-.54.094-1.05.206-1.523.333l-.461.13c-1.943.587-3.166 1.414-3.166 2.182 0 .59.723 1.217 1.942 1.741l.38.154c1.644.628 4.026 1.076 6.699 1.076s5.055-.448 6.699-1.076l.38-.154c1.219-.524 1.942-1.15 1.942-1.74 0-.769-1.223-1.596-3.166-2.182l-.461-.131a17.862 17.862 0 00-1.523-.333l-.55-.089A22.962 22.962 0 0012.5 6zm-.08 1.2c1.698 0 3.074.539 3.074 1.203 0 .665-1.376 1.204-3.074 1.204s-3.074-.539-3.074-1.204c0-.664 1.376-1.203 3.074-1.203z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var defaultIconSize$2 = "24px";
/**
 */

var NetworkTypeIcon = /*#__PURE__*/function (_Component) {
  _inherits(NetworkTypeIcon, _Component);

  var _super = _createSuper(NetworkTypeIcon);

  function NetworkTypeIcon() {
    _classCallCheck(this, NetworkTypeIcon);

    return _super.apply(this, arguments);
  }

  _createClass(NetworkTypeIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size;
      if (!NT_ALL_TYPES.includes(type)) return "";
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$2;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case NT_WIFI:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeWifi24, {
            width: iconSize,
            height: iconSize
          });

        case NT_ETHERNET:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeEth24, {
            width: iconSize,
            height: iconSize
          });

        case NT_ETH_USB:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeEthUsb24, {
            width: iconSize,
            height: iconSize
          });

        case NT_ETH_WIFI:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeEthWifi24, {
            width: iconSize,
            height: iconSize
          });

        case NT_FINGBOX_V1:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeFingboxV124, {
            width: iconSize,
            height: iconSize
          });

        case NT_FINGBOX_V2:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeFingboxV224, {
            width: iconSize,
            height: iconSize
          });

        case NT_IP:
          return /*#__PURE__*/React__default["default"].createElement(SvgNettypeIp24, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return NetworkTypeIcon;
}(React.Component);

var SC_DIM_SMALL = "DIM_SMALL";
var SC_DIM_DEFAULT = "DIM_DEFAULT";
var SC_DIM_LARGE = "DIM_LARGE";
var DEFAULT_COLOR = '#abadb3';

var SegmentedChart = /*#__PURE__*/function (_Component) {
  _inherits(SegmentedChart, _Component);

  var _super = _createSuper(SegmentedChart);

  function SegmentedChart() {
    _classCallCheck(this, SegmentedChart);

    return _super.apply(this, arguments);
  }

  _createClass(SegmentedChart, [{
    key: "getHeight",
    value: function getHeight(dim) {
      if (!dim) return 30;

      switch (dim) {
        case SC_DIM_DEFAULT:
          return 24;

        case SC_DIM_LARGE:
          return 32;

        case SC_DIM_SMALL:
          return 16;

        default:
          return 24;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          leftText = _this$props.leftText,
          rightText = _this$props.rightText,
          dimension = _this$props.dimension,
          length = _this$props.length,
          className = _this$props.className,
          value = _this$props.value,
          coloringFn = _this$props.coloringFn;
      var barHeight = this.getHeight(dimension);
      var countSegments = length - 1 || 4;
      var cName = className || 'w-100';
      var segments = [];

      for (var i = 0; i <= countSegments; i++) {
        var color = coloringFn(i);
        var segmentColored = i <= value - 1 ? color : DEFAULT_COLOR;
        var style = this.renderStyleSegment(segmentColored);
        var single = /*#__PURE__*/React__default["default"].createElement("div", {
          className: "h-100 flex-grow-1 flex-shrink-1",
          style: style
        });
        segments.push(single);
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: cName
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          height: barHeight
        },
        className: "d-flex align-items-center justify-content-center"
      }, React__default["default"].Children.toArray(segments)), (leftText || rightText) && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-between my-2"
      }, leftText && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mx-1"
      }, leftText), rightText && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mx-1"
      }, rightText)));
    }
  }, {
    key: "renderStyleSegment",
    value: function renderStyleSegment(color) {
      return {
        backgroundColor: color,
        borderRadius: '4px',
        marginRight: '2px'
      };
    }
  }]);

  return SegmentedChart;
}(React.Component);
SegmentedChart.propTypes = {
  coloringFn: PropTypes__default["default"].func,
  value: PropTypes__default["default"].number,
  className: PropTypes__default["default"].string,
  leftText: PropTypes__default["default"].string,
  rightText: PropTypes__default["default"].string,
  length: PropTypes__default["default"].number,
  dimension: PropTypes__default["default"].oneOf([SC_DIM_SMALL, SC_DIM_LARGE, SC_DIM_DEFAULT])
};

var CC_DIM_SMALL = "DIM_SMALL";
var CC_DIM_DEFAULT = "DIM_DEFAULT";
var CC_DIM_LARGE = "DIM_LARGE";
var CC_ANIM_FAST = "ANIM_FAST";
var CC_ANIM_SLOW = "ANIM_LOW";
var CC_RADIUS_SMALL = "RADIUS_SMALL";
var CC_RADIUS_DEFAULT = "RADIUS_DEFAULT";
var CC_RADIUS_LARGE = "RADIUS_LARGE";

var CircularChart = /*#__PURE__*/function (_Component) {
  _inherits(CircularChart, _Component);

  var _super = _createSuper(CircularChart);

  function CircularChart() {
    var _this;

    _classCallCheck(this, CircularChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {});

    return _this;
  }

  _createClass(CircularChart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      // For initial animation
      setTimeout(function () {
        _this2.setState({
          startAnimationComponent: true
        });
      });
    }
  }, {
    key: "getValueLabel",
    value: function getValueLabel() {
      return this.props.initState ? '0' : this.props.valueLabel;
    }
  }, {
    key: "getProgress",
    value: function getProgress() {
      return this.props.initState ? '0' : this.props.progress;
    }
  }, {
    key: "tintToColorClass",
    value: function tintToColorClass(tint) {
      if (!tint) return "stroke-primary";

      switch (tint) {
        case TINT_PRIMARY:
          return "stroke-primary";

        case TINT_SUCCESS:
          return "stroke-success";

        case TINT_WARNING:
          return "stroke-warning";

        case TINT_DANGER:
          return "stroke-danger";

        case TINT_NAVY:
          return "stroke-navy";

        case TINT_DARK:
          return "stroke-dark";

        default:
          return "stroke-primary";
      }
    }
  }, {
    key: "tintToSpinnerColorClass",
    value: function tintToSpinnerColorClass(tint) {
      if (!tint) return "text-primary";

      switch (tint) {
        case TINT_PRIMARY:
          return "text-primary";

        case TINT_SUCCESS:
          return "text-success";

        case TINT_WARNING:
          return "text-warning";

        case TINT_DANGER:
          return "text-danger";

        case TINT_NAVY:
          return "text-navy";

        case TINT_DARK:
          return "text-dark";

        default:
          return "text-primary";
      }
    }
  }, {
    key: "getTotalDimension",
    value: function getTotalDimension(dim) {
      if (!dim) return 180;

      switch (dim) {
        case CC_DIM_DEFAULT:
          return 180;

        case CC_DIM_LARGE:
          return 230;

        case CC_DIM_SMALL:
          return 130;

        default:
          return 180;
      }
    }
  }, {
    key: "getAnimation",
    value: function getAnimation(anim) {
      var path = function path(duration) {
        return "all ".concat(duration, "s cubic-bezier(0.58, 0.16, 0.5, 1.14)");
      };

      if (!anim) return path(0.2);

      switch (anim) {
        case CC_ANIM_FAST:
          return path(0.2);

        case CC_ANIM_SLOW:
          return path(1);

        default:
          return path(0.2);
      }
    }
  }, {
    key: "getRadius",
    value: function getRadius(rad) {
      if (!rad) return 70;

      switch (rad) {
        case CC_RADIUS_DEFAULT:
          return 70;

        case CC_RADIUS_LARGE:
          return 80;

        case CC_RADIUS_SMALL:
          return 60;

        default:
          return 70;
      }
    }
  }, {
    key: "getStrokeWidth",
    value: function getStrokeWidth(dim) {
      if (!dim) return 18;

      switch (dim) {
        case CC_DIM_DEFAULT:
          return 18;

        case CC_DIM_LARGE:
          return 20;

        case CC_DIM_SMALL:
          return 16;

        default:
          return 18;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          failed = _this$props.failed,
          loading = _this$props.loading; // progress, color, animated, dimension, radius, animation, min, max, value
      // Ensure the user value is always between 0 and 100

      var value = Math.max(0, Math.min(this.getProgress(), 100));
      var userMax = 100; // Value scaled outside the component

      var circleMax = 75; // Value scaled inside the component

      var scaledValue = value * circleMax / userMax;
      var circleRadius = Math.min(this.getRadius(this.props.radius), 85);
      var circumference = 2 * 3.14 * circleRadius;
      var strokeLength = this.state.startAnimationComponent ? circumference / 100 * scaledValue : 0; // Change this part of code to change the type of the circle(full/half/ecc.ecc.)

      var strokeLengthFull = this.state.startAnimationComponent ? circumference / 100 * 75 : 0;
      return /*#__PURE__*/React__default["default"].createElement("svg", {
        viewBox: "0 0 180 180",
        width: this.getTotalDimension(this.props.dimension),
        height: this.getTotalDimension(this.props.dimension),
        className: className || ""
      }, this.renderCircle(circleRadius, strokeLengthFull, circumference, true), failed ? '' : this.renderCircle(circleRadius, strokeLength, circumference, false), loading ? this.renderSpinner() : this.getValueLabel() && this.renderText(50, 50, 30, "middle", failed ? '--' : this.props.valueLabel), this.props.minLabel && this.renderText(15, 93, 14, "start", this.props.minLabel), this.props.maxLabel && this.renderText(85, 93, 14, "end", this.props.maxLabel));
    }
  }, {
    key: "renderSpinner",
    value: function renderSpinner() {
      return /*#__PURE__*/React__default["default"].createElement("foreignObject", {
        textAnchor: "middle",
        className: "node",
        x: "22%",
        y: "40%",
        width: "100px",
        height: "100px"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "spinner-border text-center " + this.tintToSpinnerColorClass(this.props.color),
        role: "status"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "sr-only"
      }, "Loading...")));
    }
  }, {
    key: "renderText",
    value: function renderText(x, y, fontSize, anchor, text) {
      return /*#__PURE__*/React__default["default"].createElement("text", {
        fontSize: fontSize || 15,
        x: x + "%",
        dominantBaseline: "central",
        y: y + "%",
        textAnchor: anchor || "middle"
      }, text);
    }
  }, {
    key: "renderCircle",
    value: function renderCircle(circleRadius, stroke, circumference, path) {
      return /*#__PURE__*/React__default["default"].createElement("circle", {
        style: path ? {
          "transform": "rotate(135deg)",
          "transformOrigin": "center",
          "opacity": this.props.failed ? "0.4" : "0.05"
        } : !this.props.animated ? {
          "transform": "rotate(135deg)",
          "transformOrigin": "center"
        } : {
          "transform": "rotate(135deg)",
          "transformOrigin": "center",
          "transition": this.getAnimation(this.props.animation)
        },
        className: path ? "stroke-dark" : this.tintToColorClass(this.props.color),
        strokeWidth: this.getStrokeWidth(this.props.dimension),
        strokeDasharray: "".concat(stroke, ",").concat(circumference),
        strokeLinecap: "round",
        fill: "none",
        cx: "90",
        cy: "90",
        r: circleRadius
      });
    }
  }]);

  return CircularChart;
}(React.Component);
CircularChart.propTypes = {
  loading: PropTypes__default["default"].bool,
  failed: PropTypes__default["default"].bool,
  className: PropTypes__default["default"].string,
  minLabel: PropTypes__default["default"].string,
  maxLabel: PropTypes__default["default"].string,
  valueLabel: PropTypes__default["default"].any,
  radius: PropTypes__default["default"].oneOf([CC_RADIUS_SMALL, CC_RADIUS_LARGE, CC_RADIUS_DEFAULT]),
  animated: PropTypes__default["default"].bool,
  animation: PropTypes__default["default"].oneOf([CC_ANIM_FAST, CC_ANIM_SLOW]),
  color: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING]),
  progress: PropTypes__default["default"].any,
  dimension: PropTypes__default["default"].oneOf([CC_DIM_SMALL, CC_DIM_LARGE, CC_DIM_DEFAULT])
};

var CopyToClipboard = /*#__PURE__*/function (_React$Component) {
  _inherits(CopyToClipboard, _React$Component);

  var _super = _createSuper(CopyToClipboard);

  function CopyToClipboard(props) {
    var _this;

    _classCallCheck(this, CopyToClipboard);

    _this = _super.call(this, props);
    _this.state = {
      hide: false
    };
    _this.ref = /*#__PURE__*/React__default["default"].createRef();
    return _this;
  }

  _createClass(CopyToClipboard, [{
    key: "render",
    value: function render() {
      var _this$props$className,
          _this2 = this;

      if (!this.props.text) {
        return null;
      }

      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "far fa-fw ml-2 fa-copy text-primary ".concat((_this$props$className = this.props.className) !== null && _this$props$className !== void 0 ? _this$props$className : ""),
        ref: this.ref,
        role: "button",
        "data-container": "body",
        "data-toggle": "popover",
        "data-placement": "right",
        "data-content": intl__default["default"].get("copy_to_clipboard_copied"),
        onClick: function onClick() {
          clearTimeout(_this2.timeout);
          window.$(_this2.ref.current).popover("show");

          _this2.setState({
            hide: false
          });

          navigator.clipboard.writeText(_this2.props.text).then(function () {
            clearTimeout(_this2.timeout);
            setTimeout(function () {
              return _this2.setState({
                hide: true
              });
            }, 1000);
          }).catch(function () {
            _this2.setState({
              hide: false
            });
          });
        }
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window.initTooltips === "function") {
        window.initTooltips();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeout);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.state.hide) {
        window.$(this.ref.current).popover("hide");
        this.setState({
          hide: false
        });
        clearTimeout(this.timeout);
      }
    }
  }]);

  return CopyToClipboard;
}(React__default["default"].Component);
CopyToClipboard.propTypes = {
  text: PropTypes__default["default"].string
};

var InfoPanel = /*#__PURE__*/function (_Component) {
  _inherits(InfoPanel, _Component);

  var _super = _createSuper(InfoPanel);

  function InfoPanel() {
    _classCallCheck(this, InfoPanel);

    return _super.apply(this, arguments);
  }

  _createClass(InfoPanel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          values = _this$props.values,
          image = _this$props.image;
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "card-title"
      }, title), image && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        height: "64",
        src: image
      })), values && values.length > 0 ? this.renderValuesMapped(values) : '');
    }
  }, {
    key: "renderValuesMapped",
    value: function renderValuesMapped(values) {
      return React__default["default"].Children.toArray(values.map(function (val) {
        if (val.action) {
          return /*#__PURE__*/React__default["default"].createElement("div", {
            className: "row"
          }, /*#__PURE__*/React__default["default"].createElement("dt", {
            className: "col-sm-6 text-muted font-weight-normal "
          }, val.value), /*#__PURE__*/React__default["default"].createElement("dd", {
            className: "col-sm-6 text-dark font-weight-normal "
          }, /*#__PURE__*/React__default["default"].createElement("a", {
            className: "link link-underline " + (val.action ? "link-cursor-pointer" : "link-cursor-not-allowed"),
            onClick: val.action,
            href: "#"
          }, val.description)));
        }

        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "row"
        }, /*#__PURE__*/React__default["default"].createElement("dt", {
          className: "col-sm-6 text-muted font-weight-normal"
        }, val.value), /*#__PURE__*/React__default["default"].createElement("dd", {
          className: "col-sm-6 text-dark font-weight-normal"
        }, /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex"
        }, val.description, val.icon ? val.icon : '')));
      }));
    }
  }]);

  return InfoPanel;
}(React.Component);
InfoPanel.propTypes = {
  title: PropTypes__default["default"].string,
  image: PropTypes__default["default"].string,
  values: PropTypes__default["default"].array
};

var CardPanel = /*#__PURE__*/function (_Component) {
  _inherits(CardPanel, _Component);

  var _super = _createSuper(CardPanel);

  function CardPanel() {
    _classCallCheck(this, CardPanel);

    return _super.apply(this, arguments);
  }

  _createClass(CardPanel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          icon = _this$props.icon,
          className = _this$props.className,
          usePlusIcon = _this$props.usePlusIcon;
      var cName = className || "d-flex align-items-start";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: cName
      }, icon ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mr-1"
      }, /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
        size: "24px",
        shape: usePlusIcon ? SI_SHAPE_PLUS : SI_SHAPE_SHIELD,
        status: icon
      })) : '', /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-1"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 text-dark"
      }, subtitle)));
    }
  }]);

  return CardPanel;
}(React.Component);
CardPanel.propTypes = {
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element]),
  icon: PropTypes__default["default"].node,
  usePlusIcon: PropTypes__default["default"].bool
};

var color = "#26A65D";

var ComparisonChart = /*#__PURE__*/function (_Component) {
  _inherits(ComparisonChart, _Component);

  var _super = _createSuper(ComparisonChart);

  function ComparisonChart() {
    _classCallCheck(this, ComparisonChart);

    return _super.apply(this, arguments);
  }

  _createClass(ComparisonChart, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          topItem = _this$props.topItem,
          bottomItem = _this$props.bottomItem,
          height = _this$props.height;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center overflow-hidden h-100"
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        width: "100%",
        height: height
      }, this.renderScale(), this.renderLegend(), this.renderTopItemLine(topItem), this.renderBottomItemLine(bottomItem), this.renderTopItemText(topItem), this.renderBottomItemText(bottomItem)));
    }
  }, {
    key: "renderTopItemLine",
    value: function renderTopItemLine(item) {
      var x = "".concat(item.getValue(), "%");
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("line", {
        x1: x,
        y1: "0",
        x2: x,
        y2: "50%",
        transform: "translate(0,15)",
        className: "stroke-charcoal"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: x,
        cy: 15,
        r: 5,
        className: "fill-charcoal"
      }));
    }
  }, {
    key: "renderBottomItemLine",
    value: function renderBottomItemLine(item) {
      var x = "".concat(item.getValue(), "%");
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("line", {
        x1: x,
        y1: "50%",
        x2: x,
        y2: "100%",
        transform: "translate(0,-15)",
        className: "stroke-charcoal"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        cx: x,
        cy: "100%",
        r: 5,
        transform: "translate(0,-15)",
        className: "fill-charcoal"
      }));
    }
  }, {
    key: "renderTopItemText",
    value: function renderTopItemText(item) {
      var x = "".concat(item.getValue(), "%");
      var shouldAnchorLeft = item.getValue() > 60;
      var dx = shouldAnchorLeft ? -16 : 16;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("text", {
        x: x,
        dx: dx,
        y: "0%",
        dy: 20,
        textAnchor: shouldAnchorLeft ? "end" : "start"
      }, /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "font-weight-bolder"
      }, item.getTitle()), /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "small fill-dark",
        x: x,
        dx: dx,
        dy: "1.5em"
      }, item.getSubTitle()), /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "small fill-secondary",
        x: x,
        dx: dx,
        dy: "1.1em"
      }, item.getExtra())));
    }
  }, {
    key: "renderBottomItemText",
    value: function renderBottomItemText(item) {
      var x = "".concat(item.getValue(), "%");
      var shouldAnchorLeft = item.getValue() > 60;
      var dx = shouldAnchorLeft ? -16 : 16;
      return /*#__PURE__*/React__default["default"].createElement("text", {
        x: x,
        dx: dx,
        y: "100%",
        dy: -42,
        textAnchor: shouldAnchorLeft ? "end" : "start"
      }, /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "font-weight-bolder"
      }, item.getTitle()), /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "small fill-dark",
        x: x,
        dx: dx,
        dy: "1.5em"
      }, item.getSubTitle()), /*#__PURE__*/React__default["default"].createElement("tspan", {
        className: "small fill-secondary",
        x: x,
        dx: dx,
        dy: "1.1em"
      }, item.getExtra()));
    }
  }, {
    key: "renderScale",
    value: function renderScale() {
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("linearGradient", {
        gradientTransform: "rotate(-90)",
        id: "scale_chart_gradient",
        gradientUnits: "objectBoundingBox",
        x1: "0",
        y1: "0",
        x2: "0",
        y2: "1"
      }, /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "0",
        style: {
          "stopColor": color,
          "stopOpacity": 0
        }
      }), /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "1",
        style: {
          "stopColor": color
        }
      })), /*#__PURE__*/React__default["default"].createElement("rect", {
        x: "0",
        y: "50%",
        width: "100%",
        height: 30,
        rx: "5",
        transform: "translate(0,-15)",
        fill: "url(#scale_chart_gradient)"
      }));
    }
  }, {
    key: "renderLegend",
    value: function renderLegend() {
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("text", {
        className: "small fill-charcoal",
        x: "8",
        y: "50%",
        dy: 5
      }, intl__default["default"].get('generic_worst')), /*#__PURE__*/React__default["default"].createElement("text", {
        className: "small fill-white",
        x: "100%",
        dx: -8,
        y: "50%",
        dy: 5,
        textAnchor: "end"
      }, intl__default["default"].get('generic_best')));
    }
  }]);

  return ComparisonChart;
}(React.Component);
ComparisonChart.propTypes = {
  topItem: PropTypes__default["default"].object,
  // ComparisonChartItem
  bottomItem: PropTypes__default["default"].object,
  // ComparisonChartItem
  height: PropTypes__default["default"].number
};
/**
 * Represents an item on the scale.
 */

var ComparisonChartItem = /*#__PURE__*/function () {
  function ComparisonChartItem(value, title, subtitle, extra) {
    _classCallCheck(this, ComparisonChartItem);

    _defineProperty(this, "value", void 0);

    _defineProperty(this, "title", void 0);

    _defineProperty(this, "subtitle", void 0);

    _defineProperty(this, "extra", void 0);

    this.value = value;
    this.title = title;
    this.subtitle = subtitle;
    this.extra = extra;
  }

  _createClass(ComparisonChartItem, [{
    key: "getValue",
    value: function getValue() {
      if (!this.value) return 0;
      return Math.max(0, Math.min(this.value, 100));
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.title || '';
    }
  }, {
    key: "getSubTitle",
    value: function getSubTitle() {
      return this.subtitle || '';
    }
  }, {
    key: "getExtra",
    value: function getExtra() {
      return this.extra || '';
    }
  }]);

  return ComparisonChartItem;
}();

var EmptyState = /*#__PURE__*/function (_Component) {
  _inherits(EmptyState, _Component);

  var _super = _createSuper(EmptyState);

  function EmptyState() {
    _classCallCheck(this, EmptyState);

    return _super.apply(this, arguments);
  }

  _createClass(EmptyState, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          image = _this$props.image,
          caption = _this$props.caption,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          className = _this$props.className,
          action = _this$props.action;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center ".concat(className || "m-8")
      }, /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "opacity"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "mx-auto",
        src: image,
        height: "256px",
        alt: caption || intl__default["default"].get('empty_state_title_fallback')
      })), /*#__PURE__*/React__default["default"].createElement("h4", null, title || intl__default["default"].get('empty_state_title_fallback')), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mx-6"
      }, subtitle || intl__default["default"].get('empty_state_subtitle_fallback')), action);
    }
  }]);

  return EmptyState;
}(React.Component);
EmptyState.propTypes = {
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string,
  caption: PropTypes__default["default"].string,
  image: PropTypes__default["default"].node,
  action: PropTypes__default["default"].object
};

var PromoState = /*#__PURE__*/function (_Component) {
  _inherits(PromoState, _Component);

  var _super = _createSuper(PromoState);

  function PromoState() {
    _classCallCheck(this, PromoState);

    return _super.apply(this, arguments);
  }

  _createClass(PromoState, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          image = _this$props.image,
          caption = _this$props.caption,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          className = _this$props.className,
          action = _this$props.action;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "".concat(className || "m-8", " d-flex align-items-center")
      }, /*#__PURE__*/React__default["default"].createElement("figure", null, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "mx-auto",
        src: image,
        height: "256px",
        alt: caption
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-3"
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, title), /*#__PURE__*/React__default["default"].createElement("p", null, subtitle), action));
    }
  }]);

  return PromoState;
}(React.Component);
PromoState.propTypes = {
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string,
  caption: PropTypes__default["default"].string,
  image: PropTypes__default["default"].node,
  action: PropTypes__default["default"].object
};

// Only one modal dialog can be displayed in a page, at any given time

var showDialogById = function showDialogById(name) {
  window.$("#".concat(name)).modal('show');
};
var hideDialogById = function hideDialogById(name) {
  window.$("#".concat(name)).modal('hide');
};
/**
 * Standard modal dialog.
 */

var ModalDialog = /*#__PURE__*/function (_Component) {
  _inherits(ModalDialog, _Component);

  var _super = _createSuper(ModalDialog);

  function ModalDialog() {
    _classCallCheck(this, ModalDialog);

    return _super.apply(this, arguments);
  }

  _createClass(ModalDialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      /**
       * IMPORTANT MODAL LIFECYCLE NOTE
       * 
       * Simply using onClose isn't sufficient because it's registered only to the header close button,
       * so when the user clicks the backdrop the managing component would not be notified.
       * A check could be added to run the onClose whenever this happens by means of a flag in the close
       * button handler. However this works until EVERY non-header close is a backdrop close, a fact that can't
       * be guaranteed. For instance, a common use case is adding a close button to the footer as well that
       * registers to the same onClose callback. In that case the onClose would be ran two times, a circumstance
       * that can range from irrelevant, say, a simple request for hideDialogById that is idempotent and functionally
       * equivalent, to disastrous ones such as sending a doubled analytics event.
       * To prevent that, since the dialog must be closed manually most (but not all) the times, the onClose should
       * be used for such cosmetic jobs. Point is, the onClose should be renamed to something in the likes of 
       * requestDialogClose as it's the user responsibility to do so, how and what, but to exclude breaking changes 
       * this can't be easily done. 
       * So a second callback prop is added, named onHide, to safely manage the proper callback-like situations like 
       * sending events or data remotely, that acts more like your typical onClose behavior.
       * 
       * To summarize: use onClose to register the associated hideDialogById call and onHide to do stuff as a
       * consequence of the modal closing itself
       */
      window.$("#".concat(this.props.id)).on("hide.bs.modal", function () {
        if (_this.props.onHide) {
          _this.props.onHide();
        }
      });
      window.$("#".concat(this.props.id)).on("show.bs.modal", function () {
        if (_this.props.onShow) {
          _this.props.onShow();
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.$("#".concat(this.props.id)).unbind("hide.bs.modal");
      window.$("#".concat(this.props.id)).unbind("show.bs.modal");
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          headerClassName = _this$props.headerClassName,
          size = _this$props.size,
          title = _this$props.title,
          onClose = _this$props.onClose,
          subtitle = _this$props.subtitle,
          centerVertically = _this$props.centerVertically,
          onClick = _this$props.onClick,
          centerTitle = _this$props.centerTitle,
          scrollable = _this$props.scrollable;
      var headerClass = headerClassName || '';
      var outerClass = className || '';
      var sizeClass = size || '';
      var centeringClass = centerVertically ? "modal-dialog-centered" : "";
      var titleCenteringClass = centerTitle ? "w-100 text-center" : "";
      var showCloseButton = onClose !== null && onClose !== undefined;
      var isScrollable = scrollable !== undefined ? scrollable : true;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        id: id,
        className: "modal fade ".concat(outerClass),
        tabIndex: "-1",
        role: "dialog",
        "aria-modal": true,
        "aria-labelledby": "modalDialogLabel",
        "aria-hidden": "true",
        "data-backdrop": "true"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "modal-dialog ".concat(isScrollable ? "modal-dialog-scrollable" : "", " ").concat(centeringClass, " ").concat(sizeClass),
        role: "document",
        onClick: onClick
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "modal-content"
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogHeader, {
        className: headerClass,
        subtitle: subtitle,
        showCloseButton: showCloseButton,
        title: title,
        titleCenteringClass: titleCenteringClass,
        onClose: onClose
      }), this.props.children)));
    }
  }]);

  return ModalDialog;
}(React.Component);
var ModalDialogHeader = /*#__PURE__*/function (_Component2) {
  _inherits(ModalDialogHeader, _Component2);

  var _super2 = _createSuper(ModalDialogHeader);

  function ModalDialogHeader() {
    _classCallCheck(this, ModalDialogHeader);

    return _super2.apply(this, arguments);
  }

  _createClass(ModalDialogHeader, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          showCloseButton = _this$props2.showCloseButton,
          subtitle = _this$props2.subtitle,
          title = _this$props2.title,
          titleCenteringClass = _this$props2.titleCenteringClass,
          onClose = _this$props2.onClose;

      if (title || showCloseButton) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "modal-header ".concat(className)
        }, /*#__PURE__*/React__default["default"].createElement("h5", {
          className: "modal-title ".concat(titleCenteringClass),
          id: "modalDialogLabel"
        }, title), /*#__PURE__*/React__default["default"].createElement("p", null, subtitle), showCloseButton && this.renderCloseButton(onClose));
      }

      return '';
    }
  }, {
    key: "renderCloseButton",
    value: function renderCloseButton(onClose) {
      return /*#__PURE__*/React__default["default"].createElement("button", {
        type: "button",
        className: "btn btn-xs btn-icon btn-soft-secondary",
        "data-dismiss": "modal",
        "aria-label": "Close",
        onClick: onClose
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        "aria-hidden": "true",
        width: "10",
        height: "10",
        viewBox: "0 0 18 18",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/React__default["default"].createElement("path", {
        fill: "currentColor",
        d: "M11.5,9.5l5-5c0.2-0.2,0.2-0.6-0.1-0.9l-1-1c-0.3-0.3-0.7-0.3-0.9-0.1l-5,5l-5-5C4.3,2.3,3.9,2.4,3.6,2.6l-1,1 C2.4,3.9,2.3,4.3,2.5,4.5l5,5l-5,5c-0.2,0.2-0.2,0.6,0.1,0.9l1,1c0.3,0.3,0.7,0.3,0.9,0.1l5-5l5,5c0.2,0.2,0.6,0.2,0.9-0.1l1-1 c0.3-0.3,0.3-0.7,0.1-0.9L11.5,9.5z"
      })));
    }
  }]);

  return ModalDialogHeader;
}(React.Component);
/**
 * Standard modal dialog body.
 */

var ModalDialogBody = /*#__PURE__*/function (_Component3) {
  _inherits(ModalDialogBody, _Component3);

  var _super3 = _createSuper(ModalDialogBody);

  function ModalDialogBody() {
    _classCallCheck(this, ModalDialogBody);

    return _super3.apply(this, arguments);
  }

  _createClass(ModalDialogBody, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          className = _this$props3.className,
          noPadding = _this$props3.noPadding;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "".concat(className || '', " modal-body ").concat(noPadding ? "" : "py-3")
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return ModalDialogBody;
}(React.Component);
/**
 * Standard modal dialog footer.
 */

var ModalDialogFooter = /*#__PURE__*/function (_Component4) {
  _inherits(ModalDialogFooter, _Component4);

  var _super4 = _createSuper(ModalDialogFooter);

  function ModalDialogFooter() {
    _classCallCheck(this, ModalDialogFooter);

    return _super4.apply(this, arguments);
  }

  _createClass(ModalDialogFooter, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          className = _this$props4.className,
          noPadding = _this$props4.noPadding;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "".concat(className || '', " modal-footer ").concat(noPadding ? "p-0 b-0" : "py-3")
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return ModalDialogFooter;
}(React.Component);
ModalDialog.propTypes = {
  id: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string,
  onClick: PropTypes__default["default"].func,
  // Click on the entire dialog
  onClose: PropTypes__default["default"].func,
  // Close button on dialog header
  onHide: PropTypes__default["default"].func,
  // Runs when the dialog is hidden after a explicit/implicit close
  size: PropTypes__default["default"].string,
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].string,
  centerTitle: PropTypes__default["default"].bool,
  centerVertically: PropTypes__default["default"].bool,
  scrollable: PropTypes__default["default"].bool
};

var SendReportDialog = /*#__PURE__*/function (_Component) {
  _inherits(SendReportDialog, _Component);

  var _super = _createSuper(SendReportDialog);

  function SendReportDialog(props, context) {
    var _this;

    _classCallCheck(this, SendReportDialog);

    _this = _super.call(this, props, context);
    _this.emailInputRef = /*#__PURE__*/React__default["default"].createRef();
    return _this;
  }

  _createClass(SendReportDialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          completed = _this$props.completed,
          onClose = _this$props.onClose,
          title = _this$props.title;
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title,
        onClose: onClose
      }, completed ? this.renderCompleted() : this.renderEmailForm());
    }
  }, {
    key: "renderCompleted",
    value: function renderCompleted() {
      var _this$props2 = this.props,
          emptyState = _this$props2.emptyState,
          onClose = _this$props2.onClose;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, emptyState), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close')
      })));
    }
  }, {
    key: "renderEmailForm",
    value: function renderEmailForm() {
      var _this2 = this;

      var _this$props3 = this.props,
          email = _this$props3.email,
          canChangeEmail = _this$props3.canChangeEmail,
          onClose = _this$props3.onClose,
          onConfirm = _this$props3.onConfirm,
          bodyText = _this$props3.bodyText;

      var onSend = function onSend() {
        var email = _this2.emailInputRef.current.value;
        if (onConfirm) onConfirm(email);
      };

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("p", null, bodyText), /*#__PURE__*/React__default["default"].createElement("form", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "emailInput"
      }, intl__default["default"].get("generic_email")), /*#__PURE__*/React__default["default"].createElement("input", {
        id: "emailInput",
        ref: this.emailInputRef,
        type: "text",
        className: "form-control form-control-sm",
        "aria-describedby": "emailInput",
        placeholder: intl__default["default"].get("placeholder_email"),
        defaultValue: email,
        disabled: !canChangeEmail
      })))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onSend,
        title: intl__default["default"].get('generic_send')
      })));
    }
  }]);

  return SendReportDialog;
}(React.Component);
SendReportDialog.propTypes = {
  email: PropTypes__default["default"].string,
  id: PropTypes__default["default"].string,
  title: PropTypes__default["default"].string,
  completed: PropTypes__default["default"].bool,
  emptyState: PropTypes__default["default"].node,
  canChangeEmail: PropTypes__default["default"].bool,
  onClose: PropTypes__default["default"].func,
  onConfirm: PropTypes__default["default"].func,
  bodyText: PropTypes__default["default"].string
};

/**
 * Standard navigation bar.
 */

var TitleBar = /*#__PURE__*/function (_Component) {
  _inherits(TitleBar, _Component);

  var _super = _createSuper(TitleBar);

  function TitleBar() {
    _classCallCheck(this, TitleBar);

    return _super.apply(this, arguments);
  }

  _createClass(TitleBar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          right = _this$props.right,
          className = _this$props.className;
      var titleUI = this.renderTitle(title);
      var rightUI = this.renderComponent(right);
      var outerClass = className || "mb-2";
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center ".concat(outerClass)
      }, titleUI, rightUI));
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(title) {
      return /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "font-weight-bolder mb-0"
      }, title || '');
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(comp) {
      // z-index to ensure the buttons are on top of the title block which has static positioning
      return comp ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-auto"
      }, comp) : '';
    }
  }]);

  return TitleBar;
}(React.Component);
TitleBar.propTypes = {
  title: PropTypes__default["default"].string,
  right: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string
};

var RefreshButton = /*#__PURE__*/function (_Component) {
  _inherits(RefreshButton, _Component);

  var _super = _createSuper(RefreshButton);

  function RefreshButton() {
    _classCallCheck(this, RefreshButton);

    return _super.apply(this, arguments);
  }

  _createClass(RefreshButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          action = _this$props.action,
          running = _this$props.running,
          disabled = _this$props.disabled;
      return /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: action,
        title: intl__default["default"].get('generic_refresh'),
        running: running,
        disabled: disabled,
        icon: "fas fa-redo mr-1",
        size: BTN_SIZE_BIG,
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_PRIMARY
      });
    }
  }]);

  return RefreshButton;
}(React.Component);

var SCB_TYPE_PRIMARY = "scb-primary";
var SCB_TYPE_SECONDARY = "scb-secondary";
var SCB_TYPE_WARNING = "scb-warning";

var SecurityCardButton = /*#__PURE__*/function (_React$Component) {
  _inherits(SecurityCardButton, _React$Component);

  var _super = _createSuper(SecurityCardButton);

  function SecurityCardButton() {
    _classCallCheck(this, SecurityCardButton);

    return _super.apply(this, arguments);
  }

  _createClass(SecurityCardButton, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "py-1 text-nowrap ".concat(this.props.className || ""),
        icon: this.props.icon,
        size: BTN_SIZE_BIG,
        type: this.getType(),
        tint: this.getTint(),
        action: this.props.action,
        title: this.getTitle(),
        disabled: this.props.disabled || this.props.freeze
      });
    }
  }, {
    key: "getTint",
    value: function getTint() {
      if (this.props.freeze) {
        return BTN_TINT_SECONDARY;
      }

      return this.props.type === SCB_TYPE_WARNING ? BTN_TINT_DANGER : BTN_TINT_PRIMARY;
    }
  }, {
    key: "getType",
    value: function getType() {
      switch (this.props.type) {
        case SCB_TYPE_PRIMARY:
          return BTN_TYPE_DEFAULT;

        case SCB_TYPE_SECONDARY:
          return BTN_TYPE_SOFT;

        case SCB_TYPE_WARNING:
          return BTN_TYPE_OUTLINE;
        // Forward any unrecognized type to ActionButton as it is

        default:
          return this.props.type;
      }
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-inline-block",
        style: {
          minWidth: this.getMinWidth()
        }
      }, this.props.title);
    }
  }, {
    key: "getMinWidth",
    value: function getMinWidth() {
      return this.props.icon ? 82 : 100;
    }
  }]);

  return SecurityCardButton;
}(React__default["default"].Component);
var SecurityCardButtonGroup = /*#__PURE__*/function (_React$Component2) {
  _inherits(SecurityCardButtonGroup, _React$Component2);

  var _super2 = _createSuper(SecurityCardButtonGroup);

  function SecurityCardButtonGroup() {
    _classCallCheck(this, SecurityCardButtonGroup);

    return _super2.apply(this, arguments);
  }

  _createClass(SecurityCardButtonGroup, [{
    key: "render",
    value: function render() {
      var guttersValue = this.props.gutters || "3";
      var gutters = "pl-md-".concat(guttersValue, " pl-0");
      var firstElementGutters = "pr-".concat(guttersValue, " pr-md-0");
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row m-0 justify-content-lg-end justify-content-start"
      }, this.props.children.map(function (child, index) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          key: index,
          className: "py-1 ".concat(index !== 0 ? gutters : firstElementGutters)
        }, child);
      }));
    }
  }]);

  return SecurityCardButtonGroup;
}(React__default["default"].Component);

var SummaryTitle = /*#__PURE__*/function (_Component) {
  _inherits(SummaryTitle, _Component);

  var _super = _createSuper(SummaryTitle);

  function SummaryTitle() {
    _classCallCheck(this, SummaryTitle);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryTitle, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: this.props.className || ""
      }, this.renderTitle());
    }
  }, {
    key: "renderTitle",
    value: function renderTitle() {
      if (this.props.onUnlock) {
        return /*#__PURE__*/React__default["default"].createElement(ComplexTitle, this.props);
      }

      return /*#__PURE__*/React__default["default"].createElement(SimpleTitle, this.props);
    }
  }]);

  return SummaryTitle;
}(React.Component);

var SimpleTitle = function SimpleTitle(props) {
  return /*#__PURE__*/React__default["default"].createElement("h3", {
    className: "mb-3"
  }, props.title);
};

var ComplexTitle = function ComplexTitle(props) {
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "row m-0 pr-3 pb-3"
  }, /*#__PURE__*/React__default["default"].createElement("h3", {
    className: "m-0"
  }, props.title), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "pt-2 pt-md-0 pl-2 m-0"
  }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
    title: props.actionTitle || props.title,
    className: "px-0 px-md-2",
    type: BTN_TYPE_GHOST,
    action: props.onUnlock,
    icon: "fa fa-star"
  })));
};

var SummaryCard = /*#__PURE__*/function (_Component) {
  _inherits(SummaryCard, _Component);

  var _super = _createSuper(SummaryCard);

  function SummaryCard() {
    _classCallCheck(this, SummaryCard);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          background = _this$props.background,
          badgeIcon = _this$props.badgeIcon;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered border shadow-none h-100 rounded-0 overflow-hidden ".concat(background || '')
      }, badgeIcon, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row pl-3 pr-lg-7 pb-3 pb-lg-0"
      }, this.props.children));
    }
  }]);

  return SummaryCard;
}(React.Component);

var SummaryCardBody = /*#__PURE__*/function (_Component) {
  _inherits(SummaryCardBody, _Component);

  var _super = _createSuper(SummaryCardBody);

  function SummaryCardBody() {
    _classCallCheck(this, SummaryCardBody);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryCardBody, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          reduce = _this$props.reduce,
          className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body p-3 col-xl-".concat(reduce ? "7" : "8", " col-lg-").concat(reduce ? "6" : "7", " ").concat(className || '', " ")
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryCardBody;
}(React.Component);

var SummaryCardFooter = /*#__PURE__*/function (_Component) {
  _inherits(SummaryCardFooter, _Component);

  var _super = _createSuper(SummaryCardFooter);

  function SummaryCardFooter() {
    _classCallCheck(this, SummaryCardFooter);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryCardFooter, [{
    key: "render",
    value: function render() {
      var expand = this.props.expand;
      var colClasses = expand ? "col-xl-5 col-lg-6" : "col-xl-4 col-lg-5";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "bg-transparent ".concat(colClasses, " pl-lg-0 pl-6 d-flex justify-content-lg-end justify-content-start align-items-center")
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryCardFooter;
}(React.Component);

var SummaryRow = /*#__PURE__*/function (_Component) {
  _inherits(SummaryRow, _Component);

  var _super = _createSuper(SummaryRow);

  function SummaryRow() {
    _classCallCheck(this, SummaryRow);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryRow, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row mb-3"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryRow;
}(React.Component);

var SummaryColLeft = /*#__PURE__*/function (_Component) {
  _inherits(SummaryColLeft, _Component);

  var _super = _createSuper(SummaryColLeft);

  function SummaryColLeft() {
    _classCallCheck(this, SummaryColLeft);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryColLeft, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-6 mb-3 mb-lg-0"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryColLeft;
}(React.Component);

var SummaryColRight = /*#__PURE__*/function (_Component) {
  _inherits(SummaryColRight, _Component);

  var _super = _createSuper(SummaryColRight);

  function SummaryColRight() {
    _classCallCheck(this, SummaryColRight);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryColRight, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-6"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryColRight;
}(React.Component);

var SummaryRowWithCards = /*#__PURE__*/function (_Component) {
  _inherits(SummaryRowWithCards, _Component);

  var _super = _createSuper(SummaryRowWithCards);

  function SummaryRowWithCards() {
    _classCallCheck(this, SummaryRowWithCards);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryRowWithCards, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          cardLeft = _this$props.cardLeft,
          cardRight = _this$props.cardRight;
      return /*#__PURE__*/React__default["default"].createElement(SummaryRow, null, /*#__PURE__*/React__default["default"].createElement(SummaryColLeft, null, cardLeft), /*#__PURE__*/React__default["default"].createElement(SummaryColRight, null, cardRight));
    }
  }]);

  return SummaryRowWithCards;
}(React.Component);

var SummarySection = /*#__PURE__*/function (_Component) {
  _inherits(SummarySection, _Component);

  var _super = _createSuper(SummarySection);

  function SummarySection() {
    _classCallCheck(this, SummarySection);

    return _super.apply(this, arguments);
  }

  _createClass(SummarySection, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mt-3 mb-6"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummarySection;
}(React.Component);

var COLORS$1 = ['#F7CA45', '#DECF4B', '#C5D251', '#91D251', '#36CE33'];

var SummaryInternetScore = /*#__PURE__*/function (_Component) {
  _inherits(SummaryInternetScore, _Component);

  var _super = _createSuper(SummaryInternetScore);

  function SummaryInternetScore() {
    _classCallCheck(this, SummaryInternetScore);

    return _super.apply(this, arguments);
  }

  _createClass(SummaryInternetScore, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          leftText = _this$props.leftText,
          rightText = _this$props.rightText,
          score = _this$props.score,
          infoText = _this$props.infoText;

      var coloringFn = function coloringFn(idx) {
        if (idx >= 0 && idx < COLORS$1.length) return COLORS$1[idx];
      };

      return /*#__PURE__*/React__default["default"].createElement(SummaryInternetCard, {
        background: 'bg-light'
      }, /*#__PURE__*/React__default["default"].createElement(SummaryInternetCardBody, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "container pb-3"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-6 col-12"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          width: '300px'
        }
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedChart, {
        coloringFn: coloringFn,
        value: score,
        length: 5,
        dimension: SC_DIM_SMALL,
        leftText: leftText,
        rightText: rightText
      })))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-6 col-12 pl-lg-6"
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark"
      }, infoText), React__default["default"].Children.toArray(this.props.children))))));
    }
  }]);

  return SummaryInternetScore;
}(React.Component);

var SummaryInternetCard = /*#__PURE__*/function (_Component2) {
  _inherits(SummaryInternetCard, _Component2);

  var _super2 = _createSuper(SummaryInternetCard);

  function SummaryInternetCard() {
    _classCallCheck(this, SummaryInternetCard);

    return _super2.apply(this, arguments);
  }

  _createClass(SummaryInternetCard, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          background = _this$props2.background,
          badgeIcon = _this$props2.badgeIcon;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered shadow-none h-100 ".concat(background || '')
      }, badgeIcon, this.props.children);
    }
  }]);

  return SummaryInternetCard;
}(React.Component);

var SummaryInternetCardBody = /*#__PURE__*/function (_Component3) {
  _inherits(SummaryInternetCardBody, _Component3);

  var _super3 = _createSuper(SummaryInternetCardBody);

  function SummaryInternetCardBody() {
    _classCallCheck(this, SummaryInternetCardBody);

    return _super3.apply(this, arguments);
  }

  _createClass(SummaryInternetCardBody, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body px-3 pt-4 pb-2 ".concat(className || '', " ")
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return SummaryInternetCardBody;
}(React.Component);

var Header = /*#__PURE__*/function (_Component) {
  _inherits(Header, _Component);

  var _super = _createSuper(Header);

  function Header() {
    _classCallCheck(this, Header);

    return _super.apply(this, arguments);
  }

  _createClass(Header, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          classContainer = _this$props.classContainer;
      var cName = className || '';
      var cContainer = classContainer || '';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "w-100 ".concat(cName)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "container ".concat(cContainer)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-start"
      }, this.props.children)));
    }
  }]);

  return Header;
}(React.Component);

var COLORS = ['#F7CA45', '#DECF4B', '#C5D251', '#91D251', '#36CE33'];

var SummarySecurityScore = /*#__PURE__*/function (_Component) {
  _inherits(SummarySecurityScore, _Component);

  var _super = _createSuper(SummarySecurityScore);

  function SummarySecurityScore() {
    _classCallCheck(this, SummarySecurityScore);

    return _super.apply(this, arguments);
  }

  _createClass(SummarySecurityScore, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          leftText = _this$props.leftText,
          rightText = _this$props.rightText,
          infoTitle = _this$props.infoTitle,
          infoText = _this$props.infoText,
          score = _this$props.score;

      var coloringFn = function coloringFn(idx) {
        if (idx >= 0 && idx < COLORS.length) return COLORS[idx];
      };

      return /*#__PURE__*/React__default["default"].createElement(Header, {
        className: "bg-soft-primary overflow-hidden"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "container pb-1 pt-3 px-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-4 col-12"
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, intl__default["default"].get("security_score_score")), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "pb-1 pt-2",
        style: {
          width: "300px"
        }
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedChart, {
        className: "text-dark",
        coloringFn: coloringFn,
        value: score,
        length: 5,
        dimension: SC_DIM_SMALL,
        leftText: leftText,
        rightText: rightText
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-8 col-12 pb-1 text-dark"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "pb-1 mb-0 font-weight-normal"
      }, infoTitle), /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          lineHeight: 1.3
        }
      }, infoText)))));
    }
  }]);

  return SummarySecurityScore;
}(React.Component);

var DashboardCard = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardCard, _React$Component);

  var _super = _createSuper(DashboardCard);

  function DashboardCard() {
    _classCallCheck(this, DashboardCard);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardCard, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered shadow-none h-100"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DashboardCard;
}(React__default["default"].Component);

var DashboardCardBody = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardCardBody, _React$Component);

  var _super = _createSuper(DashboardCardBody);

  function DashboardCardBody() {
    _classCallCheck(this, DashboardCardBody);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardCardBody, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          description = _this$props.description;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body text-start pb-0"
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 initialism"
      }, title), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, subtitle), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "small mb-0"
      }, description), React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DashboardCardBody;
}(React__default["default"].Component);

var DashboardCardFooter = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardCardFooter, _React$Component);

  var _super = _createSuper(DashboardCardFooter);

  function DashboardCardFooter() {
    _classCallCheck(this, DashboardCardFooter);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardCardFooter, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-footer",
        style: {
          borderTop: 0
        }
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DashboardCardFooter;
}(React__default["default"].Component);

var DashboardSection = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardSection, _React$Component);

  var _super = _createSuper(DashboardSection);

  function DashboardSection() {
    _classCallCheck(this, DashboardSection);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardSection, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("section", {
        className: cName
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "space-1 container"
      }, React__default["default"].Children.toArray(this.props.children)));
    }
  }]);

  return DashboardSection;
}(React__default["default"].Component);

var DashboardRow = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardRow, _React$Component);

  var _super = _createSuper(DashboardRow);

  function DashboardRow() {
    _classCallCheck(this, DashboardRow);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardRow, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DashboardRow;
}(React__default["default"].Component);

var DashboardCol = /*#__PURE__*/function (_React$Component) {
  _inherits(DashboardCol, _React$Component);

  var _super = _createSuper(DashboardCol);

  function DashboardCol() {
    _classCallCheck(this, DashboardCol);

    return _super.apply(this, arguments);
  }

  _createClass(DashboardCol, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-3 col-sm-12 col-md-6 col-lg-6 col-xl-3 mb-3"
      }, React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DashboardCol;
}(React__default["default"].Component);

var DetailSectionHeader = /*#__PURE__*/function (_Component) {
  _inherits(DetailSectionHeader, _Component);

  var _super = _createSuper(DetailSectionHeader);

  function DetailSectionHeader() {
    _classCallCheck(this, DetailSectionHeader);

    return _super.apply(this, arguments);
  }

  _createClass(DetailSectionHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          element = _this$props.element,
          className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, (title || element) && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-end ".concat(className ? className : "")
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, title), element));
    }
  }]);

  return DetailSectionHeader;
}(React.Component);

var DetailHeader = /*#__PURE__*/function (_Component) {
  _inherits(DetailHeader, _Component);

  var _super = _createSuper(DetailHeader);

  function DetailHeader() {
    _classCallCheck(this, DetailHeader);

    return _super.apply(this, arguments);
  }

  _createClass(DetailHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-inline-flex align-items-center justify-content-start w-100 ".concat(className ? className : "")
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0 text-nowrap"
      }, title), /*#__PURE__*/React__default["default"].createElement("hr", {
        className: "w-100 my-0 ml-2 border-primary"
      }));
    }
  }]);

  return DetailHeader;
}(React.Component);

var SolutionBadge = /*#__PURE__*/function (_Component) {
  _inherits(SolutionBadge, _Component);

  var _super = _createSuper(SolutionBadge);

  function SolutionBadge() {
    _classCallCheck(this, SolutionBadge);

    return _super.apply(this, arguments);
  }

  _createClass(SolutionBadge, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          icon = _this$props.icon,
          disabled = _this$props.disabled,
          action = _this$props.action;
      var colorText = disabled ? "text-muted" : "text-primary";
      var colorBg = disabled ? "badge-soft-secondary" : "badge-soft-primary";
      return disabled ? /*#__PURE__*/React__default["default"].createElement("span", {
        style: {
          borderRadius: "50px"
        },
        className: "badge w-100 p-2 my-2 d-flex align-items-center justify-content-lg-start " + colorBg
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-flex align-items-center justify-content-center legend-indicator bg-light p-2 mr-2",
        style: {
          width: 30,
          height: 30
        }
      }, /*#__PURE__*/React__default["default"].createElement("i", {
        className: icon
      })), /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0 " + colorText
      }, text)) : /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        onClick: action,
        style: {
          borderRadius: "50px"
        },
        className: "badge w-100 p-2 my-2 d-flex align-items-center justify-content-lg-start " + colorBg
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-flex align-items-center justify-content-center legend-indicator bg-light p-2 mr-2",
        style: {
          width: 30,
          height: 30
        }
      }, /*#__PURE__*/React__default["default"].createElement("i", {
        className: icon
      })), /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0 " + colorText
      }, text)));
    }
  }]);

  return SolutionBadge;
}(React.Component);

var DeviceDetailTable = /*#__PURE__*/function (_Component) {
  _inherits(DeviceDetailTable, _Component);

  var _super = _createSuper(DeviceDetailTable);

  function DeviceDetailTable() {
    _classCallCheck(this, DeviceDetailTable);

    return _super.apply(this, arguments);
  }

  _createClass(DeviceDetailTable, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          tableHead = _this$props.tableHead,
          className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-striped table-md ".concat(className ? className : "")
      }, tableHead && /*#__PURE__*/React__default["default"].createElement("thead", null, tableHead), /*#__PURE__*/React__default["default"].createElement("tbody", null, React__default["default"].Children.toArray(this.props.children)));
    }
  }]);

  return DeviceDetailTable;
}(React.Component);

var DeviceDetailTableRow = /*#__PURE__*/function (_Component) {
  _inherits(DeviceDetailTableRow, _Component);

  var _super = _createSuper(DeviceDetailTableRow);

  function DeviceDetailTableRow() {
    _classCallCheck(this, DeviceDetailTableRow);

    return _super.apply(this, arguments);
  }

  _createClass(DeviceDetailTableRow, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        style: {
          width: '100%'
        },
        className: cName
      }, this.props.children);
    }
  }]);

  return DeviceDetailTableRow;
}(React.Component);

var DeviceDetailBanner = /*#__PURE__*/function (_Component) {
  _inherits(DeviceDetailBanner, _Component);

  var _super = _createSuper(DeviceDetailBanner);

  function DeviceDetailBanner() {
    _classCallCheck(this, DeviceDetailBanner);

    return _super.apply(this, arguments);
  }

  _createClass(DeviceDetailBanner, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          bgColor = _this$props.bgColor,
          textColor = _this$props.textColor,
          className = _this$props.className;
      var textClass = textColor || "text-dark";
      var cName = className || "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "alert " + cName + " " + bgColor
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-between"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, title && /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0 card-title"
      }, title), subtitle && /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small " + textClass
      }, subtitle)), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, React__default["default"].Children.toArray(this.props.children))));
    }
  }]);

  return DeviceDetailBanner;
}(React.Component);

var DetailSolution = /*#__PURE__*/function (_Component) {
  _inherits(DetailSolution, _Component);

  var _super = _createSuper(DetailSolution);

  function DetailSolution() {
    _classCallCheck(this, DetailSolution);

    return _super.apply(this, arguments);
  }

  _createClass(DetailSolution, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          title = _this$props.title;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: className
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, title), React__default["default"].Children.toArray(this.props.children));
    }
  }]);

  return DetailSolution;
}(React.Component);

var DetailImage = /*#__PURE__*/function (_Component) {
  _inherits(DetailImage, _Component);

  var _super = _createSuper(DetailImage);

  function DetailImage() {
    _classCallCheck(this, DetailImage);

    return _super.apply(this, arguments);
  }

  _createClass(DetailImage, [{
    key: "render",
    value: function render() {
      var data = this.props.data;
      var heightImg = 48;
      var widthImg = 84;

      if (data && data.bannerImageUrl) {
        heightImg = 42;
        return /*#__PURE__*/React__default["default"].createElement("img", {
          height: heightImg,
          width: widthImg,
          src: data.bannerImageUrl
        });
      } else if (data && data.logoImageUrl) {
        widthImg = 48;
        return /*#__PURE__*/React__default["default"].createElement("img", {
          height: heightImg,
          width: widthImg,
          src: data.logoImageUrl
        });
      }

      return '';
    }
  }]);

  return DetailImage;
}(React.Component);

var ExpandableCell = /*#__PURE__*/function (_Component) {
  _inherits(ExpandableCell, _Component);

  var _super = _createSuper(ExpandableCell);

  function ExpandableCell() {
    _classCallCheck(this, ExpandableCell);

    return _super.apply(this, arguments);
  }

  _createClass(ExpandableCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          text = _this$props.text,
          className = _this$props.className;
      var cName = className || "border w-70";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, icon, text));
    }
  }]);

  return ExpandableCell;
}(React.Component);

var TitleCell = /*#__PURE__*/function (_Component) {
  _inherits(TitleCell, _Component);

  var _super = _createSuper(TitleCell);

  function TitleCell() {
    _classCallCheck(this, TitleCell);

    return _super.apply(this, arguments);
  }

  _createClass(TitleCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          className = _this$props.className;
      var cName = className || "border w-30";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, text));
    }
  }]);

  return TitleCell;
}(React.Component);

var LinkCard = /*#__PURE__*/function (_PureComponent) {
  _inherits(LinkCard, _PureComponent);

  var _super = _createSuper(LinkCard);

  function LinkCard() {
    _classCallCheck(this, LinkCard);

    return _super.apply(this, arguments);
  }

  _createClass(LinkCard, [{
    key: "render",
    value: function render() {
      var action = this.props.action;
      return /*#__PURE__*/React__default["default"].createElement("a", {
        role: action ? "button" : "generic",
        className: "h-100",
        onClick: action
      }, this.props.children);
    }
  }]);

  return LinkCard;
}(React.PureComponent);

var LinkCell = /*#__PURE__*/function (_Component) {
  _inherits(LinkCell, _Component);

  var _super = _createSuper(LinkCell);

  function LinkCell() {
    _classCallCheck(this, LinkCell);

    return _super.apply(this, arguments);
  }

  _createClass(LinkCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          action = _this$props.action,
          text = _this$props.text,
          className = _this$props.className;
      var cName = className || "border w-70";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement(LinkCard, {
        action: action
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mb-0 font-weight-bold text-primary"
      }, text), /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-link text-primary"
      }))));
    }
  }]);

  return LinkCell;
}(React.Component);

var DescriptionCell = /*#__PURE__*/function (_Component) {
  _inherits(DescriptionCell, _Component);

  var _super = _createSuper(DescriptionCell);

  function DescriptionCell() {
    _classCallCheck(this, DescriptionCell);

    return _super.apply(this, arguments);
  }

  _createClass(DescriptionCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          className = _this$props.className;
      var cName = className || "border w-70";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mb-0 font-weight-bold text-dark"
      }, text));
    }
  }]);

  return DescriptionCell;
}(React.Component);

var CopyTextCell = /*#__PURE__*/function (_Component) {
  _inherits(CopyTextCell, _Component);

  var _super = _createSuper(CopyTextCell);

  function CopyTextCell() {
    _classCallCheck(this, CopyTextCell);

    return _super.apply(this, arguments);
  }

  _createClass(CopyTextCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          className = _this$props.className;
      var cName = className || "border w-70";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mb-0 font-weight-bold text-dark"
      }, text), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center"
      }, /*#__PURE__*/React__default["default"].createElement(CopyToClipboard, {
        text: text
      }))));
    }
  }]);

  return CopyTextCell;
}(React.Component);

var BadgeCell = /*#__PURE__*/function (_Component) {
  _inherits(BadgeCell, _Component);

  var _super = _createSuper(BadgeCell);

  function BadgeCell() {
    _classCallCheck(this, BadgeCell);

    return _super.apply(this, arguments);
  }

  _createClass(BadgeCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          badges = _this$props.badges,
          className = _this$props.className;
      var cName = className || "border w-70";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, badges);
    }
  }]);

  return BadgeCell;
}(React.Component);

/**
 * Standard progress bar. Can become a separator line when off, or leave it empty.
 */

var PB_LG = "large";
var PB_SM = "small";
var PB_MD = "medium";
var PB_XS = "extra-small";
var PB_VISIBLE_WHEN_EMPTY = "hide-when-empty";
var PB_VISIBLE_WHEN_FULL = "hide-when-full";
var PB_VISIBLE_ALWAYS = "hide-always";

var ProgressBar = /*#__PURE__*/function (_Component) {
  _inherits(ProgressBar, _Component);

  var _super = _createSuper(ProgressBar);

  function ProgressBar() {
    _classCallCheck(this, ProgressBar);

    return _super.apply(this, arguments);
  }

  _createClass(ProgressBar, [{
    key: "getSize",
    value: function getSize(size) {
      if (!size) return {
        height: "5px"
      };

      if (typeof size == 'number') {
        return {
          height: size + "px"
        };
      }

      switch (size) {
        case PB_LG:
          return {
            height: "15px"
          };

        case PB_MD:
          return {
            height: "10px"
          };

        case PB_SM:
          return {
            height: "5px"
          };

        case PB_XS:
          return {
            height: "2px"
          };

        default:
          return {
            height: "5px"
          };
      }
    }
  }, {
    key: "getVisibilityPolicy",
    value: function getVisibilityPolicy(value, policy) {
      if (policy === PB_VISIBLE_ALWAYS) {
        return true;
      } else if (policy === PB_VISIBLE_WHEN_FULL) {
        return value !== 0 && value <= 100;
      } else if (policy === PB_VISIBLE_WHEN_EMPTY) {
        return value !== 100 && value >= 0;
      }

      return value < 100 && value > 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          className = _this$props.className,
          barClassName = _this$props.barClassName,
          barNoSeparator = _this$props.barNoSeparator,
          size = _this$props.size,
          visibilityPolicy = _this$props.visibilityPolicy,
          max = _this$props.max,
          text = _this$props.text;
      var outerClass = className || '';
      var h3px = {
        height: "3px"
      };
      var sizeStyle = this.getSize(size);
      var maxValue = max || "100";
      var hideSeparator = barNoSeparator === true;
      var visible = this.getVisibilityPolicy(value, visibilityPolicy);

      if (!visible) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          style: sizeStyle,
          className: outerClass
        }, !hideSeparator && /*#__PURE__*/React__default["default"].createElement("div", {
          style: h3px,
          className: "border-bottom"
        }));
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        style: sizeStyle,
        className: "progress ".concat(outerClass)
      }, text ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "progress-bar ".concat(barClassName),
        role: "progressbar",
        style: {
          width: value + "%"
        },
        "aria-valuenow": value,
        "aria-valuemin": "0",
        "aria-valuemax": maxValue
      }, text) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "progress-bar ".concat(barClassName),
        role: "progressbar",
        style: {
          width: value + "%"
        },
        "aria-valuenow": value,
        "aria-valuemin": "0",
        "aria-valuemax": maxValue
      }));
    }
  }]);

  return ProgressBar;
}(React.Component);
ProgressBar.propTypes = {
  size: PropTypes__default["default"].any,
  visibilityPolicy: PropTypes__default["default"].oneOf([PB_VISIBLE_ALWAYS, PB_VISIBLE_WHEN_EMPTY, PB_VISIBLE_WHEN_FULL]),
  max: PropTypes__default["default"].number,
  value: PropTypes__default["default"].number,
  barClassName: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string,
  barNoSeparator: PropTypes__default["default"].bool
};

var ComplexCell = /*#__PURE__*/function (_Component) {
  _inherits(ComplexCell, _Component);

  var _super = _createSuper(ComplexCell);

  function ComplexCell() {
    _classCallCheck(this, ComplexCell);

    return _super.apply(this, arguments);
  }

  _createClass(ComplexCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          text = _this$props.text,
          className = _this$props.className,
          icon = _this$props.icon,
          progressValue = _this$props.progressValue;
      var cName = className || "border w-70";
      var progressClass = progressValue > 66 ? "bg-success" : progressValue > 40 ? "bg-warning" : "bg-danger";
      var progressText = progressValue > 40 && progressValue < 60 ? /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark mb-0"
      }, progressValue + '%') : progressValue + '%';
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mb-0 font-weight-bold text-dark"
      }, text), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center"
      }, /*#__PURE__*/React__default["default"].createElement(CopyToClipboard, {
        text: text
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-start align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mr-2"
      }, icon), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "w-100"
      }, progressValue < 5 ? /*#__PURE__*/React__default["default"].createElement(ProgressBar, {
        size: PB_MD,
        visibilityPolicy: PB_VISIBLE_ALWAYS,
        barClassName: progressClass,
        value: progressValue
      }) : /*#__PURE__*/React__default["default"].createElement(ProgressBar, {
        size: PB_MD,
        visibilityPolicy: PB_VISIBLE_ALWAYS,
        barClassName: progressClass,
        value: progressValue,
        text: progressText
      }))));
    }
  }]);

  return ComplexCell;
}(React.Component);

var SegmentedChartCell = /*#__PURE__*/function (_Component) {
  _inherits(SegmentedChartCell, _Component);

  var _super = _createSuper(SegmentedChartCell);

  function SegmentedChartCell() {
    _classCallCheck(this, SegmentedChartCell);

    return _super.apply(this, arguments);
  }

  _createClass(SegmentedChartCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          coloringFn = _this$props.coloringFn,
          value = _this$props.value,
          className = _this$props.className,
          length = _this$props.length,
          valueLabel = _this$props.valueLabel;
      var cName = className || "border w-70 d-flex";
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: cName,
        style: {
          verticalAlign: "middle"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          width: '200px',
          marginTop: "6px"
        }
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedChart, {
        dimension: SC_DIM_SMALL,
        coloringFn: coloringFn,
        value: value,
        length: length || 5
      })), valueLabel && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "ml-2"
      }, valueLabel));
    }
  }]);

  return SegmentedChartCell;
}(React.Component);

var HeaderLeftSide = /*#__PURE__*/function (_Component) {
  _inherits(HeaderLeftSide, _Component);

  var _super = _createSuper(HeaderLeftSide);

  function HeaderLeftSide() {
    _classCallCheck(this, HeaderLeftSide);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderLeftSide, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center ".concat(cName)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center"
      }, this.props.children));
    }
  }]);

  return HeaderLeftSide;
}(React.Component);

var HeaderRightSide = /*#__PURE__*/function (_Component) {
  _inherits(HeaderRightSide, _Component);

  var _super = _createSuper(HeaderRightSide);

  function HeaderRightSide() {
    _classCallCheck(this, HeaderRightSide);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderRightSide, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          dividerColor = _this$props.dividerColor,
          className = _this$props.className;
      var cName = className || '';
      var borderClass = dividerColor ? "border-left ".concat(dividerColor) : '';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "w-100 ".concat(borderClass, " ").concat(cName)
      }, this.props.children);
    }
  }]);

  return HeaderRightSide;
}(React.Component);

var HeaderSubSideDetail = /*#__PURE__*/function (_Component) {
  _inherits(HeaderSubSideDetail, _Component);

  var _super = _createSuper(HeaderSubSideDetail);

  function HeaderSubSideDetail() {
    _classCallCheck(this, HeaderSubSideDetail);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderSubSideDetail, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex d-md-block d-sm-block d-lg-flex align-items-center justify-content-between " + cName
      }, this.props.children);
    }
  }]);

  return HeaderSubSideDetail;
}(React.Component);

var HeaderSubSideAction = /*#__PURE__*/function (_Component) {
  _inherits(HeaderSubSideAction, _Component);

  var _super = _createSuper(HeaderSubSideAction);

  function HeaderSubSideAction() {
    _classCallCheck(this, HeaderSubSideAction);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderSubSideAction, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex d-md-block d-sm-block d-lg-flex align-items-center justify-content-between ".concat(cName)
      }, this.props.children);
    }
  }]);

  return HeaderSubSideAction;
}(React.Component);

var HeaderTrailingSide = /*#__PURE__*/function (_React$Component) {
  _inherits(HeaderTrailingSide, _React$Component);

  var _super = _createSuper(HeaderTrailingSide);

  function HeaderTrailingSide() {
    _classCallCheck(this, HeaderTrailingSide);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderTrailingSide, [{
    key: "render",
    value: function render() {
      var className = "col-auto p-0 ".concat(this.props.className || "");
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: className
      }, this.props.children);
    }
  }]);

  return HeaderTrailingSide;
}(React__default["default"].Component);

var ModalDialogInfoNote = /*#__PURE__*/function (_Component) {
  _inherits(ModalDialogInfoNote, _Component);

  var _super = _createSuper(ModalDialogInfoNote);

  function ModalDialogInfoNote() {
    _classCallCheck(this, ModalDialogInfoNote);

    return _super.apply(this, arguments);
  }

  _createClass(ModalDialogInfoNote, [{
    key: "render",
    value: function render() {
      var iconClass = this.props.icon || "fa-info-circle";
      var text = this.props.text || "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "alert alert-soft-info media d-flex align-items-center small",
        role: "alert"
      }, /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fas ".concat(iconClass, " mt-1 mr-2")
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "media-body",
        role: "alert"
      }, text));
    }
  }]);

  return ModalDialogInfoNote;
}(React.Component);
ModalDialogInfoNote.propTypes = {
  icon: PropTypes__default["default"].string,
  text: PropTypes__default["default"].string
};

var sidebarOptions = function sidebarOptions(target) {
  return JSON.stringify({
    "target": "#" + target,
    "type": "css-animation",
    "animationIn": "fadeInRight",
    "animationOut": "fadeOutRight",
    "hasOverlay": "rgba(55, 125, 255, 0.1)",
    "smartPositionOff": true
  });
};
/**
 * Standard modal dialog.
 */

var ModalSidebar = /*#__PURE__*/function (_Component) {
  _inherits(ModalSidebar, _Component);

  var _super = _createSuper(ModalSidebar);

  function ModalSidebar() {
    _classCallCheck(this, ModalSidebar);

    return _super.apply(this, arguments);
  }

  _createClass(ModalSidebar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.initDropdown();
    }
  }, {
    key: "render",
    value: function render() {
      var target = this.props.id;
      var children = React__default["default"].Children.toArray(this.props.children);
      var bodyElem = children.length >= 1 ? children[0] : null;
      var footerElem = children.length >= 2 ? children[1] : null;
      var hasBody = bodyElem !== null;
      var hasFooter = footerElem !== null;
      return /*#__PURE__*/React__default["default"].createElement("aside", {
        id: target,
        className: "hs-unfold-content sidebar"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "sidebar-scroller"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "sidebar-container"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "sidebar-footer-offset",
        style: {
          paddingBottom: "7rem"
        }
      }, this.renderHeader(), hasBody && bodyElem), hasFooter && footerElem)));
    }
  }, {
    key: "renderHeader",
    value: function renderHeader() {
      var target = this.props.id;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-end align-items-center pt-4 px-4"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "hs-unfold"
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        className: "js-hs-unfold-invoker btn btn-icon btn-xs btn-soft-secondary",
        href: "javascript:",
        "data-hs-unfold-options": sidebarOptions(target)
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        width: "10",
        height: "10",
        viewBox: "0 0 18 18",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/React__default["default"].createElement("path", {
        fill: "currentColor",
        d: "M11.5,9.5l5-5c0.2-0.2,0.2-0.6-0.1-0.9l-1-1c-0.3-0.3-0.7-0.3-0.9-0.1l-5,5l-5-5C4.3,2.3,3.9,2.4,3.6,2.6l-1,1 C2.4,3.9,2.3,4.3,2.5,4.5l5,5l-5,5c-0.2,0.2-0.2,0.6,0.1,0.9l1,1c0.3,0.3,0.7,0.3,0.9,0.1l5-5l5,5c0.2,0.2,0.6,0.2,0.9-0.1l1-1 c0.3-0.3,0.3-0.7,0.1-0.9L11.5,9.5z"
      })))));
    }
  }]);

  return ModalSidebar;
}(React.Component);
var ModalSidebarBody = /*#__PURE__*/function (_Component2) {
  _inherits(ModalSidebarBody, _Component2);

  var _super2 = _createSuper(ModalSidebarBody);

  function ModalSidebarBody() {
    _classCallCheck(this, ModalSidebarBody);

    return _super2.apply(this, arguments);
  }

  _createClass(ModalSidebarBody, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "scrollbar sidebar-body"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "sidebar-content ".concat(className || "py-2 px-4")
      }, this.props.children));
    }
  }]);

  return ModalSidebarBody;
}(React.Component);
/**
 * Standard modal dialog footer.
 */

var ModalSidebarFooter = /*#__PURE__*/function (_Component3) {
  _inherits(ModalSidebarFooter, _Component3);

  var _super3 = _createSuper(ModalSidebarFooter);

  function ModalSidebarFooter() {
    _classCallCheck(this, ModalSidebarFooter);

    return _super3.apply(this, arguments);
  }

  _createClass(ModalSidebarFooter, [{
    key: "render",
    value: function render() {
      var className = this.props.className;
      return /*#__PURE__*/React__default["default"].createElement("footer", {
        className: "sidebar-footer ".concat(className || "py-2 px-4")
      }, this.props.children);
    }
  }]);

  return ModalSidebarFooter;
}(React.Component);
ModalSidebar.propTypes = {
  id: PropTypes__default["default"].string,
  children: PropTypes__default["default"].array
};

/**
 * Standard navigation bar.
 */

var MetricCard = /*#__PURE__*/function (_Component) {
  _inherits(MetricCard, _Component);

  var _super = _createSuper(MetricCard);

  function MetricCard() {
    _classCallCheck(this, MetricCard);

    return _super.apply(this, arguments);
  }

  _createClass(MetricCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          metric = _this$props.metric,
          description = _this$props.description,
          icon = _this$props.icon,
          bgColor = _this$props.bgColor,
          extra = _this$props.extra;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card border-0 shadow-none mr-2 mb-2 ".concat(bgColor),
        style: {
          height: "150px",
          width: "180px"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body card-body-centered"
      }, /*#__PURE__*/React__default["default"].createElement("h2", {
        className: "mb-0"
      }, metric), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline"
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0 text-dark"
      }, description), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline-item"
      }, icon)), /*#__PURE__*/React__default["default"].createElement("small", {
        className: "text-dark"
      }, extra)));
    }
  }]);

  return MetricCard;
}(React.Component);
MetricCard.propTypes = {
  metric: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  bgColor: PropTypes__default["default"].string,
  extra: PropTypes__default["default"].string,
  icon: PropTypes__default["default"].node
};

/**
 * Standard navigation bar.
 */

var NavigationBar = /*#__PURE__*/function (_Component) {
  _inherits(NavigationBar, _Component);

  var _super = _createSuper(NavigationBar);

  function NavigationBar() {
    _classCallCheck(this, NavigationBar);

    return _super.apply(this, arguments);
  }

  _createClass(NavigationBar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          left = _this$props.left,
          title = _this$props.title,
          right = _this$props.right,
          className = _this$props.className;
      var leftUI = this.renderComponent(left);
      var titleUI = this.renderTitle(title);
      var rightUI = this.renderComponent(right);
      var outerClass = className || '';
      return /*#__PURE__*/React__default["default"].createElement("nav", {
        className: "position-relative d-flex justify-content-between align-items-center my-1 " + outerClass,
        style: {
          minHeight: "2em"
        }
      }, leftUI, /*#__PURE__*/React__default["default"].createElement("h6", {
        className: "position-absolute left-0 right-0 text-center font-weight-bold my-0"
      }, titleUI), rightUI);
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(title) {
      return title || '';
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(comp) {
      // z-index to ensure the buttons are on top of the title block which has static positioning
      return comp ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "z-index-2"
      }, comp) : '';
    }
  }]);

  return NavigationBar;
}(React.Component);
NavigationBar.propTypes = {
  left: PropTypes__default["default"].node,
  title: PropTypes__default["default"].string,
  right: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string
};

/**
 * A control that consists of multiple options, mutually exclusive.
 * The outcome of selecting an item in the OptionBar is to switch among options, like a Select element with all
 * the elements being visualized at the same time (and therefore, must be in a limited number)
 */

var OptionBar = /*#__PURE__*/function (_PureComponent) {
  _inherits(OptionBar, _PureComponent);

  var _super = _createSuper(OptionBar);

  function OptionBar(props, context) {
    var _this;

    _classCallCheck(this, OptionBar);

    _this = _super.call(this, props, context);
    _this.groupName = "option-bar-" + nextId__default["default"]();
    return _this;
  }

  _createClass(OptionBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className;
      if (!children || children.length === 0) return '';
      var cName = className || '';
      var flexClass = this.props.vertical === true ? '' : "d-md-inline-flex align-middle";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "".concat(flexClass, " ").concat(cName)
      }, React__default["default"].Children.toArray(children.map(function (item, idx) {
        return _this2.renderItem(item, idx);
      })));
    }
  }, {
    key: "renderItem",
    value: function renderItem(item, idx) {
      var _this$props2 = this.props,
          itemClassName = _this$props2.itemClassName,
          onOptionSelected = _this$props2.onOptionSelected,
          checkboxIcon = _this$props2.checkboxIcon;
      var inputId = this.groupName + "-input-" + idx;
      var checkboxIconClass = checkboxIcon === false ? "" : "checkbox-icon";
      var checkboxIconInputClass = checkboxIcon === false ? "" : "checkbox-icon-input";
      var checkboxIconLabelClass = checkboxIcon === false ? "" : "checkbox-icon-label";

      var onInputChange = function onInputChange(e) {
        if (onOptionSelected) onOptionSelected(idx);
      };

      var selected = this.props.activeIndex === idx;
      var cName = itemClassName || 'w-100 mx-1';
      var selectedClass = selected ? "bg-soft-primary text-primary" : "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-radio custom-control-inline checkbox-outline ".concat(checkboxIconClass, " ").concat(cName)
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        type: "radio",
        id: inputId,
        name: this.groupName,
        className: "custom-control-input checkbox-outline-input ".concat(checkboxIconInputClass),
        checked: selected,
        onChange: onInputChange
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "checkbox-outline-label ".concat(checkboxIconLabelClass, " w-100 rounded-lg px-3 py-2 ").concat(selectedClass),
        htmlFor: inputId,
        onChange: onInputChange
      }, item));
    }
  }]);

  return OptionBar;
}(React.PureComponent);
OptionBar.propTypes = {
  activeIndex: PropTypes__default["default"].number,
  className: PropTypes__default["default"].string,
  onOptionSelected: PropTypes__default["default"].func,
  vertical: PropTypes__default["default"].bool,
  checkboxIcon: PropTypes__default["default"].bool
};

var NetworkContextPicker = /*#__PURE__*/function (_Component) {
  _inherits(NetworkContextPicker, _Component);

  var _super = _createSuper(NetworkContextPicker);

  function NetworkContextPicker() {
    _classCallCheck(this, NetworkContextPicker);

    return _super.apply(this, arguments);
  }

  _createClass(NetworkContextPicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          context = _this$props.context,
          onContextSelected = _this$props.onContextSelected;
      var activeIndex = null;
      if (context === NC_HOME) activeIndex = 0;else if (context === NC_OFFICE) activeIndex = 1;else if (context === NC_RENTAL) activeIndex = 2;else if (context === NC_PUBLIC) activeIndex = 3;
      var onOptionSelected = null;

      if (onContextSelected) {
        onOptionSelected = function onOptionSelected(idx) {
          if (idx === 0) onContextSelected(NC_HOME);else if (idx === 1) onContextSelected(NC_OFFICE);else if (idx === 2) onContextSelected(NC_RENTAL);else if (idx === 3) onContextSelected(NC_PUBLIC);
        };
      }

      return /*#__PURE__*/React__default["default"].createElement(OptionBar, {
        className: className,
        checkboxIcon: false,
        activeIndex: activeIndex,
        onOptionSelected: onOptionSelected
      }, /*#__PURE__*/React__default["default"].createElement(ContextOption, {
        type: NC_HOME,
        label: intl__default["default"].get("generic_home")
      }), /*#__PURE__*/React__default["default"].createElement(ContextOption, {
        type: NC_OFFICE,
        label: intl__default["default"].get("generic_office")
      }), /*#__PURE__*/React__default["default"].createElement(ContextOption, {
        type: NC_RENTAL,
        label: intl__default["default"].get("generic_rental")
      }), /*#__PURE__*/React__default["default"].createElement(ContextOption, {
        type: NC_PUBLIC,
        label: intl__default["default"].get("generic_public")
      }));
    }
  }]);

  return NetworkContextPicker;
}(React.Component);
NetworkContextPicker.propTypes = {
  className: PropTypes__default["default"].string,
  context: PropTypes__default["default"].oneOf([NC_RENTAL, NC_OFFICE, NC_HOME, NC_PUBLIC]),
  onContextSelected: PropTypes__default["default"].func
};

var ContextOption = /*#__PURE__*/function (_Component2) {
  _inherits(ContextOption, _Component2);

  var _super2 = _createSuper(ContextOption);

  function ContextOption() {
    _classCallCheck(this, ContextOption);

    return _super2.apply(this, arguments);
  }

  _createClass(ContextOption, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          selected = _this$props2.selected,
          type = _this$props2.type,
          label = _this$props2.label;
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar avatar-circle ".concat(selected === true ? "avatar-primary" : "avatar-soft-secondary")
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "avatar-initials"
      }, /*#__PURE__*/React__default["default"].createElement(NetworkContextIcon, {
        className: "d-inline-block ".concat(selected === true ? "fill-white" : "fill-secondary"),
        type: type
      }))), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block"
      }, label));
    }
  }]);

  return ContextOption;
}(React.Component);

ContextOption.propTypes = {
  label: PropTypes__default["default"].string,
  context: PropTypes__default["default"].string,
  selected: PropTypes__default["default"].bool
};

/**
 * A horizontal control that consists of multiple segments, each segment functioning as a discrete button.
 * The outcome of selecting an item in the SegmentedBar is to switch another view being presented.
 */

var SegmentedBar = /*#__PURE__*/function (_Component) {
  _inherits(SegmentedBar, _Component);

  var _super = _createSuper(SegmentedBar);

  function SegmentedBar(props, context) {
    var _this;

    _classCallCheck(this, SegmentedBar);

    _this = _super.call(this, props, context);
    var activeIndex = _this.props.activeIndex || 0;
    _this.state = {
      activeIndex: activeIndex
    };
    return _this;
  }

  _createClass(SegmentedBar, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.props.activeIndex !== null && prevProps.activeIndex !== this.props.activeIndex) this.setState({
        activeIndex: this.props.activeIndex || 0
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          items = _this$props.items,
          className = _this$props.className,
          accessory = _this$props.accessory;
      var activeIndex = this.state.activeIndex;
      if (!items || items.length === 0) return '';
      var accessoryUI = this.renderAccessory(accessory);
      var calculatedClass = className || "nav-segment nav-pills justify-content-center";
      var separatorClass = this.props.children && this.props.children.length >= items.length ? "mb-3" : "";
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("ul", {
        className: "nav ".concat(calculatedClass, " ").concat(separatorClass)
      }, items.map(function (item, idx) {
        return _this2.renderItem(item, idx);
      }), accessoryUI), /*#__PURE__*/React__default["default"].createElement("div", null, this.props.children && this.props.children.length >= items.length ? this.props.children[activeIndex] : ""));
    }
  }, {
    key: "renderItem",
    value: function renderItem(item, idx) {
      var _this3 = this;

      if (!item) return '';
      var active = idx === this.state.activeIndex;
      var disabled = item.disabled && item.disabled === true;
      var iconUI = this.renderIcon(item, idx);
      var labelUI = this.renderLabel(item, idx);
      var badgeUI = this.renderBadge(item, idx);

      var onClick = function onClick(e) {
        e.preventDefault();
        if (disabled) return;

        _this3.setState({
          activeIndex: idx
        });

        if (_this3.props.onItemSelected) {
          _this3.props.onItemSelected(idx);
        }
      };

      return /*#__PURE__*/React__default["default"].createElement("li", {
        className: "nav-item",
        key: "segmented_bar_" + idx
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        className: "nav-link py-1" + (active ? ' active' : '') + (disabled ? ' disabled' : ''),
        onClick: onClick,
        href: "/#"
      }, iconUI, labelUI, badgeUI));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(item, idx) {
      return item.icon ? /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fas ".concat(item.icon, " nav-icon")
      }) : '';
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(item, idx) {
      return item.label || '';
    }
  }, {
    key: "renderBadge",
    value: function renderBadge(item, idx) {
      var badgeClass = item.badgeClass || "badge-pill badge-soft-primary";
      return item.badge !== null ? /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge ".concat(badgeClass, " ml-2 align-text-bottom")
      }, item.badge) : '';
    }
  }, {
    key: "renderAccessory",
    value: function renderAccessory(accessory) {
      if (accessory) {
        return /*#__PURE__*/React__default["default"].createElement("li", {
          className: "ml-auto align-self-end py-1"
        }, accessory);
      } else {
        return '';
      }
    }
  }]);

  return SegmentedBar;
}(React.Component);
SegmentedBar.propTypes = {
  activeIndex: PropTypes__default["default"].number,
  items: PropTypes__default["default"].array,
  className: PropTypes__default["default"].string,
  accessory: PropTypes__default["default"].node,
  onItemSelected: PropTypes__default["default"].func,
  children: PropTypes__default["default"].array
};

/**
 */

var StatusBadge = /*#__PURE__*/function (_Component) {
  _inherits(StatusBadge, _Component);

  var _super = _createSuper(StatusBadge);

  function StatusBadge() {
    _classCallCheck(this, StatusBadge);

    return _super.apply(this, arguments);
  }

  _createClass(StatusBadge, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          icon = _this$props.icon,
          className = _this$props.className;
      var labelUI = this.renderLabel(label);
      var iconUI = this.renderIcon(label, icon);
      var cName = className || '';
      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge ".concat(cName)
      }, labelUI, iconUI);
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(label) {
      return label || '';
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(label, icon) {
      var margin = label ? "ml-2" : '';
      return icon ? /*#__PURE__*/React__default["default"].createElement("small", {
        className: "fas ".concat(icon, " ").concat(margin)
      }) : '';
    }
  }]);

  return StatusBadge;
}(React.Component);
StatusBadge.propTypes = {
  icon: PropTypes__default["default"].string,
  label: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string
};

/**
 * Standard navigation bar.
 */

var ToolHeader = /*#__PURE__*/function (_Component) {
  _inherits(ToolHeader, _Component);

  var _super = _createSuper(ToolHeader);

  function ToolHeader() {
    _classCallCheck(this, ToolHeader);

    return _super.apply(this, arguments);
  }

  _createClass(ToolHeader, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          statusIcon = _this$props.statusIcon,
          action = _this$props.action,
          progressBar = _this$props.progressBar,
          className = _this$props.className;
      var titleUI = this.renderTitle(title);
      var subtitleUI = this.renderSubtitle(subtitle);
      var actionUI = this.renderComponent(action);
      var progressUI = this.renderComponent(progressBar);
      var outerClass = className || '';
      return /*#__PURE__*/React__default["default"].createElement("section", {
        className: "mb-2 " + outerClass
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-start mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, titleUI, statusIcon), /*#__PURE__*/React__default["default"].createElement("div", null, subtitleUI)), actionUI), progressUI);
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(title) {
      return title ? /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0 mr-2"
      }, title) : '';
    }
  }, {
    key: "renderSubtitle",
    value: function renderSubtitle(subtitle) {
      return subtitle || '';
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(comp) {
      return comp ? /*#__PURE__*/React__default["default"].createElement("div", null, comp) : '';
    }
  }]);

  return ToolHeader;
}(React.Component);
ToolHeader.propTypes = {
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].string,
  statusIcon: PropTypes__default["default"].node,
  action: PropTypes__default["default"].node,
  progressBar: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string
};

var DiscountRightArrow = /*#__PURE__*/function (_React$Component) {
  _inherits(DiscountRightArrow, _React$Component);

  var _super = _createSuper(DiscountRightArrow);

  function DiscountRightArrow() {
    _classCallCheck(this, DiscountRightArrow);

    return _super.apply(this, arguments);
  }

  _createClass(DiscountRightArrow, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: this.props.className
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge text-nowrap badge-warning badge-pill text-dark p-2 ml-2"
      }, this.props.text), /*#__PURE__*/React__default["default"].createElement(RightArrow, {
        className: "position-absolute mt-2 ml-1"
      }));
    }
  }]);

  return DiscountRightArrow;
}(React__default["default"].Component);

var RightArrow = function RightArrow(_ref) {
  var className = _ref.className;
  return /*#__PURE__*/React__default["default"].createElement("svg", {
    className: className,
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    viewBox: "0 0 99.3 57",
    width: "38",
    transform: "scale(-1, 1)"
  }, /*#__PURE__*/React__default["default"].createElement("path", {
    fill: "none",
    stroke: "#bdc5d1",
    strokeWidth: "4",
    strokeLinecap: "round",
    strokeMiterlimit: "10",
    d: "M2,39.5l7.7,14.8c0.4,0.7,1.3,0.9,2,0.4L27.9,42"
  }), /*#__PURE__*/React__default["default"].createElement("path", {
    fill: "none",
    stroke: "#bdc5d1",
    strokeWidth: "4",
    strokeLinecap: "round",
    strokeMiterlimit: "10",
    d: "M11,54.3c0,0,10.3-65.2,86.3-50"
  }));
};

var _g$4;

function _extends$r() { _extends$r = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$r.apply(this, arguments); }

function SvgDownArrow(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$r({
    xmlns: "http://www.w3.org/2000/svg",
    width: 25,
    height: 50
  }, props), _g$4 || (_g$4 = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "none",
    stroke: "#000",
    strokeWidth: 1.5,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 10
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M4.873 2.633c2.016 9.183-.708 22.769-2.644 32.029 5.562-3.645 12.041-9.266 16.359-14.364-.41 4.257-1.23 8.461-2.145 12.635-.631 2.879-1.1 5.885-1.887 8.762"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.436 36.008c2.776 3.398 1.996 7.65 3.962 11.359 1.963-2.531 6.176-7.484 9.373-8.557"
  }))));
}

var SideBanner = /*#__PURE__*/function (_React$Component) {
  _inherits(SideBanner, _React$Component);

  var _super = _createSuper(SideBanner);

  function SideBanner(props) {
    var _this;

    _classCallCheck(this, SideBanner);

    _this = _super.call(this, props);
    _this.state = {
      isClosing: false
    };
    _this.ref = /*#__PURE__*/React__default["default"].createRef();
    _this.refUpdated = false;
    return _this;
  }

  _createClass(SideBanner, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.update();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (!this.refUpdated && this.ref) {
        window.$(this.ref.current).on("close.bs.alert", function () {
          _this2.setState({
            isClosing: true
          });
        });
        this.refUpdated = true;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var dismissible = this.props.dismissible || this.props.onClose;
      var styling = this.props.styling || "warning";
      var soft = this.props.soft ? "soft-" : "";
      var balloonClass = this.props.balloonClass || "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "position-relative " + (this.props.className || ""),
        style: this.props.style
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: this.props.floating ? "position-relative" : ""
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: this.props.floating ? "position-absolute bottom-0" : ""
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        ref: this.ref,
        className: "alert alert-".concat(soft).concat(styling, " ").concat(dismissible ? "alert-dismissible" : "", " fade show ").concat(balloonClass),
        role: "alert"
      }, this.props.children, dismissible && /*#__PURE__*/React__default["default"].createElement("button", {
        type: "button",
        className: "close",
        "data-dismiss": "alert",
        "aria-label": "Close",
        onClick: this.props.onClose
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "align-middle",
        "aria-hidden": "true"
      }, "\xD7"))), /*#__PURE__*/React__default["default"].createElement(SvgDownArrow, {
        style: {
          overflow: "visible",
          position: "relative",
          zIndex: 1,
          pointerEvents: "none"
        },
        className: "d-block mx-auto p-0 mt-n2 ".concat(this.state.isClosing ? "fade" : "")
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center"
      }, this.props.target));
    }
  }]);

  return SideBanner;
}(React__default["default"].Component);
SideBanner.propTypes = {
  dismissible: PropTypes__default["default"].bool,
  onClose: PropTypes__default["default"].func,
  soft: PropTypes__default["default"].bool,
  balloonClass: PropTypes__default["default"].string,
  floating: PropTypes__default["default"].bool,
  target: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string
};

var _CUSTOM_COLORS;
var BADGE_TINT_PRIMARY = "primary";
var BADGE_TINT_DANGER = "danger";
var BADGE_TINT_DARK = "dark";
var BADGE_TINT_SUCCESS = "success";
var BADGE_TINT_WARNING = "warning";
var BADGE_TINT_SECONDARY = "secondary";
var BADGE_TINT_INDIGO = "indigo";
var BADGE_TINT_PINK = "pink";
var BADGE_TINT_ORANGE = "orange";
var BADGE_TINT_PRIMARY_BORDERED = "primary_border";
var BADGE_TINT_DISABLED = "disabled";
var B_SM = "small";
var B_MD = "medium";
var B_XS = "extra-small";
var B_LG = "large";
var CUSTOM_COLORS = (_CUSTOM_COLORS = {}, _defineProperty(_CUSTOM_COLORS, BADGE_TINT_INDIGO, {
  color: "#ffffff",
  backgroundColor: "#2d1582"
}), _defineProperty(_CUSTOM_COLORS, BADGE_TINT_ORANGE, {
  color: "#ffffff",
  backgroundColor: "#fd7e14"
}), _defineProperty(_CUSTOM_COLORS, BADGE_TINT_PINK, {
  color: "#ffffff",
  backgroundColor: "#e83e8c"
}), _defineProperty(_CUSTOM_COLORS, BADGE_TINT_PRIMARY_BORDERED, {
  color: "#1a6aff",
  backgroundColor: "#ffffff",
  borderColor: "#1a6aff"
}), _defineProperty(_CUSTOM_COLORS, BADGE_TINT_DISABLED, {
  color: "#060606",
  backgroundColor: "#E3E3E3"
}), _CUSTOM_COLORS);

var Badge = /*#__PURE__*/function (_Component) {
  _inherits(Badge, _Component);

  var _super = _createSuper(Badge);

  function Badge() {
    _classCallCheck(this, Badge);

    return _super.apply(this, arguments);
  }

  _createClass(Badge, [{
    key: "getColorByTint",
    value: function getColorByTint(tint, soft) {
      if (!tint) return "";
      var color = 'badge-';
      if (soft) color += 'soft-';

      switch (tint) {
        case BADGE_TINT_SECONDARY:
          color += "secondary";
          break;

        case BADGE_TINT_PRIMARY:
          color += "primary";
          break;

        case BADGE_TINT_SUCCESS:
          color += "success";
          break;

        case BADGE_TINT_WARNING:
          color += "warning";
          break;

        case BADGE_TINT_DANGER:
          color += "danger";
          break;

        case BADGE_TINT_DARK:
          color += "dark";
          break;

        default:
          color += "primary";
          break;
      }

      return color;
    }
  }, {
    key: "getSize",
    value: function getSize(size) {
      if (!size) return "px-3 py-2";

      switch (size) {
        case B_LG:
          return 'p-3';

        case B_MD:
          return 'px-3 py-2';

        case B_SM:
          return 'p-2';

        case B_XS:
          return '';

        default:
          return 'p-2';
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          pill = _this$props.pill,
          soft = _this$props.soft,
          tint = _this$props.tint,
          text = _this$props.text,
          icon = _this$props.icon,
          reverse = _this$props.reverse,
          size = _this$props.size;
          _this$props.customBgColor;
          _this$props.customTextColor;
      var cName = className || "";
      var cPill = pill ? 'badge-pill' : '';
      var cMarginIcon = text && icon ? reverse ? 'mr-2' : 'ml-2' : '';
      var cPadding = !text || !icon ? 'px-2' : '';
      var cSize = this.getSize(size);

      if (CUSTOM_COLORS[tint]) {
        return /*#__PURE__*/React__default["default"].createElement("span", {
          style: CUSTOM_COLORS[tint],
          className: "badge ".concat(cName, " ").concat(cPill, " ").concat(cPadding, " ").concat(cSize)
        }, /*#__PURE__*/React__default["default"].createElement(BadgeInside, {
          icon: icon,
          cMarginIcon: cMarginIcon,
          text: text,
          reverse: reverse
        }));
      }

      var bgColor = this.getColorByTint(tint, soft);
      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge ".concat(cName, " ").concat(bgColor, " ").concat(cPill, " ").concat(cPadding, " ").concat(cSize)
      }, /*#__PURE__*/React__default["default"].createElement(BadgeInside, {
        icon: icon,
        cMarginIcon: cMarginIcon,
        text: text,
        reverse: reverse
      }));
    }
  }]);

  return Badge;
}(React.Component);

var BadgeInside = /*#__PURE__*/function (_Component2) {
  _inherits(BadgeInside, _Component2);

  var _super2 = _createSuper(BadgeInside);

  function BadgeInside() {
    _classCallCheck(this, BadgeInside);

    return _super2.apply(this, arguments);
  }

  _createClass(BadgeInside, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          cMarginIcon = _this$props2.cMarginIcon,
          text = _this$props2.text,
          icon = _this$props2.icon,
          reverse = _this$props2.reverse;
      var cName = "".concat(icon, " ").concat(cMarginIcon);

      if (reverse) {
        return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, icon && /*#__PURE__*/React__default["default"].createElement("small", {
          className: cName
        }), text ? text : '');
      }

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, text ? text : '', icon && /*#__PURE__*/React__default["default"].createElement("small", {
        className: cName
      }));
    }
  }]);

  return BadgeInside;
}(React.Component);

Badge.propTypes = {
  reverse: PropTypes__default["default"].bool,
  className: PropTypes__default["default"].string,
  text: PropTypes__default["default"].string,
  size: PropTypes__default["default"].oneOf([B_MD, B_SM, B_XS]),
  pill: PropTypes__default["default"].bool,
  icon: PropTypes__default["default"].string,
  soft: PropTypes__default["default"].bool,
  tint: PropTypes__default["default"].oneOf([BADGE_TINT_PRIMARY, BADGE_TINT_SECONDARY, BADGE_TINT_WARNING, BADGE_TINT_DANGER, BADGE_TINT_DARK, BADGE_TINT_SUCCESS])
};

var RB_SMALL = "small";
var RB_LARGE = "large";
var RB_TINY = "tiny";
var RB_DEFAULT = "default";

var RatingBar = /*#__PURE__*/function (_Component) {
  _inherits(RatingBar, _Component);

  var _super = _createSuper(RatingBar);

  function RatingBar(props, context) {
    var _this;

    _classCallCheck(this, RatingBar);

    _this = _super.call(this, props, context);
    _this.state = {
      currentValue: props.value
    };
    return _this;
  }

  _createClass(RatingBar, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.props.value !== prevProps.value) {
        this.setState({
          currentValue: this.props.value
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          length = _this$props.length,
          size = _this$props.size,
          type = _this$props.type,
          tint = _this$props.tint; // editable, onRatingChanged, value

      var icons = [];
      var valueBar = Math.min(length, Math.max(0, this.state.currentValue));
      var iconSize = this.getSize(size);
      var isDecimal = valueBar % 1 !== 0;

      if (isDecimal) {
        (function () {
          var rate = Math.floor(valueBar);

          var _loop = function _loop(i) {
            icons.push( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
              onClick: function onClick() {
                _this2.onClickIcon(valueBar);
              },
              onMouseEnter: function onMouseEnter() {
                _this2.changeValue(i + 1);
              },
              size: iconSize,
              className: "mr-1 d-flex",
              key: i + 1,
              tint: tint,
              type: type,
              variant: RTI_FULL
            }));
          };

          for (var i = 0; i < rate; i++) {
            _loop(i);
          }

          icons.push( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
            onClick: function onClick() {
              _this2.onClickIcon(valueBar);
            },
            onMouseEnter: function onMouseEnter() {
              _this2.changeValue(rate);
            },
            size: iconSize,
            className: "mr-1 d-flex",
            key: valueBar,
            tint: tint,
            type: type,
            variant: RTI_HALF
          }));

          var _loop2 = function _loop2(_i) {
            icons.push( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
              onClick: function onClick() {
                _this2.onClickIcon(valueBar);
              },
              onMouseEnter: function onMouseEnter() {
                _this2.changeValue(rate + _i + 2);
              },
              size: iconSize,
              className: "mr-1 d-flex",
              key: rate + _i + 2,
              tint: tint,
              type: type,
              variant: RTI_EMPTY
            }));
          };

          for (var _i = 0; _i < length - rate - 1; _i++) {
            _loop2(_i);
          }
        })();
      } else {
        var _loop3 = function _loop3(i) {
          valueBar > i ? icons.push( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
            onClick: function onClick() {
              _this2.onClickIcon(valueBar);
            },
            onMouseEnter: function onMouseEnter() {
              _this2.changeValue(i + 1);
            },
            size: iconSize,
            className: "mr-1 d-flex",
            key: i + 1,
            tint: tint,
            type: type,
            variant: RTI_FULL
          })) : icons.push( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
            onClick: function onClick() {
              _this2.onClickIcon(valueBar);
            },
            onMouseEnter: function onMouseEnter() {
              _this2.changeValue(i + 1);
            },
            key: i + 2,
            className: "mr-1 d-flex",
            tint: tint,
            size: iconSize,
            type: type,
            variant: RTI_EMPTY
          }));
        };

        for (var i = 0; i < length; i++) {
          _loop3(i);
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center",
        onMouseLeave: function onMouseLeave() {
          _this2.resetValue();
        }
      }, icons);
    }
  }, {
    key: "onClickIcon",
    value: function onClickIcon(valueBar) {
      if (this.props.editable && this.props.onRatingChanged) {
        this.props.onRatingChanged(valueBar);
      }
    }
  }, {
    key: "resetValue",
    value: function resetValue() {
      if (this.props.editable) {
        this.setState({
          currentValue: this.props.value
        });
      }
    }
  }, {
    key: "changeValue",
    value: function changeValue(value) {
      if (this.props.editable) {
        this.setState({
          currentValue: value
        });
      }
    }
  }, {
    key: "getSize",
    value: function getSize(size) {
      switch (size) {
        case RB_DEFAULT:
          return 24;

        case RB_SMALL:
          return 16;

        case RB_TINY:
          return 12;

        case RB_LARGE:
          return 32;

        default:
          return 24;
      }
    }
  }]);

  return RatingBar;
}(React.Component);
RatingBar.propTypes = {
  onRatingChanged: PropTypes__default["default"].func,
  editable: PropTypes__default["default"].bool,
  length: PropTypes__default["default"].number,
  value: PropTypes__default["default"].any,
  tint: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_SECONDARY, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING]),
  type: PropTypes__default["default"].oneOf([RTI_HEART, RTI_BOLT, RTI_STAR, RTI_DOT]),
  size: PropTypes__default["default"].oneOf([RB_SMALL, RB_DEFAULT, RB_LARGE, RB_TINY])
};

var RatingComment = /*#__PURE__*/function () {
  function RatingComment(rating, comment, timestamp, country, city, region, ispName, commentLang) {
    _classCallCheck(this, RatingComment);

    _defineProperty(this, "rating", void 0);

    _defineProperty(this, "comment", void 0);

    _defineProperty(this, "commentLang", void 0);

    _defineProperty(this, "timestamp", void 0);

    _defineProperty(this, "country", void 0);

    _defineProperty(this, "city", void 0);

    _defineProperty(this, "region", void 0);

    _defineProperty(this, "ispName", void 0);

    this.rating = rating;
    this.comment = comment;
    this.timestamp = timestamp;
    this.country = country;
    this.city = city;
    this.region = region;
    this.ispName = ispName;
    this.commentLang = commentLang;
  }

  _createClass(RatingComment, [{
    key: "getRating",
    value: function getRating() {
      return Number(this.rating) || 0;
    }
  }, {
    key: "getComment",
    value: function getComment() {
      return this.comment || "";
    }
  }, {
    key: "getCommentLang",
    value: function getCommentLang() {
      return this.commentLang || "";
    }
  }, {
    key: "getTimestamp",
    value: function getTimestamp() {
      return this.timestamp || 0;
    }
  }, {
    key: "getCountry",
    value: function getCountry() {
      return this.country || "";
    }
  }, {
    key: "getCity",
    value: function getCity() {
      return this.city || "";
    }
  }, {
    key: "getRegion",
    value: function getRegion() {
      return this.region || "";
    }
  }, {
    key: "getIspName",
    value: function getIspName() {
      return this.ispName || "";
    }
  }, {
    key: "toRequestBody",
    value: function toRequestBody() {
      return JSON.stringify(this.toRequestJson());
    }
  }, {
    key: "toRequestJson",
    value: function toRequestJson() {
      var res = this.getRatingInfo();
      var isp = this.getAggregateIspInfo();

      if (isp && Object.keys(isp).length > 0) {
        res.isp = isp;
      }

      return res;
    }
  }, {
    key: "getRatingInfo",
    value: function getRatingInfo() {
      var res = {};
      extractIn(res, "rating", this.getRating());
      extractIn(res, "comment", this.getComment());
      extractIn(res, "comment_lang", this.getCommentLang());
      return res;
    }
  }, {
    key: "getAggregateIspInfo",
    value: function getAggregateIspInfo() {
      var res = {};
      extractIn(res, "name", this.getIspName());
      extractIn(res, "countryCode", this.getCountry());
      extractIn(res, "countryRegion", this.getRegion());
      extractIn(res, "countryCity", this.getCity());
      return res;
    }
  }]);

  return RatingComment;
}();

function extractIn(dst, key, value) {
  if (value) {
    dst[key] = value;
  }
}

var RatingEditDialog = /*#__PURE__*/function (_Component) {
  _inherits(RatingEditDialog, _Component);

  var _super = _createSuper(RatingEditDialog);

  function RatingEditDialog(props, context) {
    var _this;

    _classCallCheck(this, RatingEditDialog);

    _this = _super.call(this, props, context);
    _this.onClearDialog = _this.onClearDialog.bind(_assertThisInitialized(_this));
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onConfirmDialog = _this.onConfirmDialog.bind(_assertThisInitialized(_this));
    _this.state = {
      value: _this.props.value || 0,
      comment: _this.props.comment || ''
    };
    return _this;
  }

  _createClass(RatingEditDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (prevProps.value !== this.props.value || prevProps.comment !== this.props.comment) {
        this.setState({
          value: this.props.value || 0,
          comment: this.props.comment || ''
        });
      }
    }
  }, {
    key: "onClearDialog",
    value: function onClearDialog() {
      this.setState({
        value: 0,
        comment: ''
      });

      if (this.props.onClear) {
        this.props.onClear();
      }
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "onConfirmDialog",
    value: function onConfirmDialog() {
      if (this.props.onConfirm) {
        this.props.onConfirm({
          name: this.props.subjectName,
          value: this.getCurrentValue(),
          comment: this.getCurrentComment()
        });
      }
    }
  }, {
    key: "getCurrentValue",
    value: function getCurrentValue() {
      return this.state.value;
    }
  }, {
    key: "getCurrentComment",
    value: function getCurrentComment() {
      return this.state.comment;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          subjectName = _this$props.subjectName;
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: intl__default["default"].get("rating_title", {
          ispName: subjectName || ''
        }),
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, this.renderBody()), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, {
        className: "border-0"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onClearDialog,
        title: intl__default["default"].get('generic_clear'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK,
        className: "mr-auto"
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onConfirmDialog,
        title: intl__default["default"].get('generic_save'),
        disabled: this.getCurrentValue() === 0
      })));
    }
  }, {
    key: "renderImage",
    value: function renderImage() {
      var _this$props2 = this.props,
          subjectImageBanner = _this$props2.subjectImageBanner,
          subjectImageLogo = _this$props2.subjectImageLogo,
          subjectName = _this$props2.subjectName;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "align-middle"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        src: subjectImageLogo || subjectImageBanner,
        height: "96",
        width: subjectImageLogo ? 96 : 192,
        className: "m-4",
        alt: subjectName || ''
      }));
    }
  }, {
    key: "renderBody",
    value: function renderBody(title, message) {
      var _this2 = this;

      var _this$props3 = this.props,
          ratingColor = _this$props3.ratingColor,
          type = _this$props3.type,
          id = _this$props3.id;
      var _this$state = this.state,
          comment = _this$state.comment,
          value = _this$state.value;
      return /*#__PURE__*/React__default["default"].createElement("form", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group text-center justify-content-center"
      }, this.renderImage(), title && /*#__PURE__*/React__default["default"].createElement("h3", {
        className: 'm-2'
      }, title), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center"
      }, /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        onRatingChanged: function onRatingChanged(newRating) {
          _this2.setState({
            value: newRating
          });
        },
        editable: true,
        tint: ratingColor,
        length: 5,
        value: value,
        type: type,
        size: RB_LARGE
      })), /*#__PURE__*/React__default["default"].createElement("hr", {
        className: "mx-4"
      }), message ? /*#__PURE__*/React__default["default"].createElement("h5", {
        className: 'm-2'
      }, message) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: 'm-2'
      }, intl__default["default"].get(this.getMessage())), /*#__PURE__*/React__default["default"].createElement("textarea", {
        id: id,
        onChange: function onChange(input) {
          return _this2.setState({
            comment: input.target.value
          });
        },
        rows: "3",
        value: comment,
        className: "form-control form-control-sm",
        placeholder: intl__default["default"].get('rating_comments')
      })));
    }
  }, {
    key: "getMessage",
    value: function getMessage() {
      switch (this.getCurrentValue()) {
        case 1:
          return "rating_hate_because";

        case 2:
          return "rating_dislike_because";

        case 3:
          return "rating_ok_because";

        case 4:
          return "rating_like_because";

        case 5:
          return "rating_love_because";
      }

      return "waiting_rate";
    }
  }]);

  return RatingEditDialog;
}(React.Component);
RatingEditDialog.propTypes = {
  id: PropTypes__default["default"].string,
  value: PropTypes__default["default"].number,
  comment: PropTypes__default["default"].string,
  onConfirm: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  onClear: PropTypes__default["default"].func,
  subjectImageLogo: PropTypes__default["default"].string,
  subjectImageBanner: PropTypes__default["default"].string,
  type: PropTypes__default["default"].oneOf([RTI_HEART, RTI_BOLT, RTI_STAR, RTI_DOT]),
  ratingColor: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING])
};

var DiagnosticEditDialog = /*#__PURE__*/function (_Component) {
  _inherits(DiagnosticEditDialog, _Component);

  var _super = _createSuper(DiagnosticEditDialog);

  function DiagnosticEditDialog() {
    _classCallCheck(this, DiagnosticEditDialog);

    return _super.apply(this, arguments);
  }

  _createClass(DiagnosticEditDialog, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          id = _this$props.id,
          itemCode = _this$props.itemCode,
          reachCustomTargets = _this$props.reachCustomTargets,
          onClose = _this$props.onClose,
          onConfirm = _this$props.onConfirm;
      if (!itemCode) return '';
      var dialogTitle;
      dialogTitle = intl__default["default"].get("healthcheck_report_checkinfo_modal_checkcode_title", {
        code: itemCode
      });
      intl__default["default"].get("healthcheck_generic_code", {
        code: itemCode
      }) + intl__default["default"].get("healthcheck_".concat(itemCode, "_G"));
      intl__default["default"].get("healthcheck_".concat(itemCode, "_B"));
      var targets = reachCustomTargets ? reachCustomTargets.targets.join("\n") : "";
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: dialogTitle,
        size: "modal-lg",
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("form", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        className: "input-label",
        htmlFor: "checkCustomTargetsInput"
      }, intl__default["default"].get('healthcheck_report_customtarget_modal_area_label')), /*#__PURE__*/React__default["default"].createElement("textarea", {
        id: "checkCustomTargetsInput",
        ref: function ref(input) {
          return _this.checkCustomTargetsInput = input;
        },
        rows: "3",
        className: "form-control form-control-sm",
        "aria-describedby": "netNotesHelp",
        placeholder: intl__default["default"].get('healtcheck_edit_dialog_placeholder'),
        defaultValue: targets
      }), /*#__PURE__*/React__default["default"].createElement("small", {
        id: "netNotesHelp",
        className: "form-text text-muted"
      }, intl__default["default"].get('healthcheck_report_customtarget_modal_area_small'))))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return onConfirm(_this.checkCustomTargetsInput.value);
        },
        title: intl__default["default"].get('generic_save')
      })));
    }
  }]);

  return DiagnosticEditDialog;
}(React.Component);

/*
 * Copyright (c) Fing. All rights reserved.
 */
function bestMakeAndModelAsArray(node) {
  if (!node || !node.bestMake && !node.best_make && !node.macVendor) return [];
  var make = node.bestMake || node.best_make;
  var model = node.bestModel;

  if (make && model) {
    return [make, model];
  } else if (model) {
    return [model];
  } else if (make) {
    return [make];
  } else {
    return [node.macVendor];
  }
}
function bestMakeAndModelAsArrayForRouter(node) {
  if (!node || !node.make) return [];
  var make = node.make;
  var model = node.model;

  if (make && model) {
    return [make, model];
  } else if (model) {
    return [model];
  } else if (make) {
    return [make];
  } else {
    return [];
  }
}
function getOsPrintableVersion(os, v) {
  if (!os || !v) return null;

  if (os === 'Android') {
    if (v.startsWith("10")) return null;else if (v.startsWith("9")) return "Pie";else if (v.startsWith("8")) return "Oreo";else if (v.startsWith("7")) return "Nougat";else if (v.startsWith("6")) return "Marshmallow";else if (v.startsWith("5")) return "Lollipop";else if (v.startsWith("4.4")) return "KitKat";else if (v.startsWith("4.1")) return "Jelly Bean";else if (v.startsWith("4.0")) return "Ice Cream Sandwitch";else if (v.startsWith("3.0")) return "Honeycomb";else if (v.startsWith("2.3")) return "Gingerbread";else if (v.startsWith("2.2")) return "Froyo";
  } else if (os === 'macOS' || os === 'OS X') {
    if (v.startsWith("11.") || v.startsWith("20")) return "Big Sur";else if (v.startsWith("10.15.") || v.startsWith("19")) return "Catalina";else if (v.startsWith("10.14.") || v.startsWith("18")) return "Mojave";else if (v.startsWith("10.13.") || v.startsWith("17")) return "High Sierra";else if (v.startsWith("10.12.") || v.startsWith("16")) return "Sierra";else if (v.startsWith("10.11.") || v.startsWith("15")) return "El Capitan";else if (v.startsWith("10.10.") || v.startsWith("14")) return "Yosemite";else if (v.startsWith("10.9.") || v.startsWith("13")) return "Mavericks";else if (v.startsWith("10.8.") || v.startsWith("12")) return "Mountain Lion";else if (v.startsWith("10.7.") || v.startsWith("11")) return "Lion";else if (v.startsWith("10.6.")) return "Snow Leopard";else if (v.startsWith("10.5.")) return "Leopard";else if (v.startsWith("10.4.")) return "Tiger";
  }

  return null;
}

function roundPercentile(percentile, factor) {
  var quotient = Math.floor(percentile / factor);
  var remainder = percentile % factor;
  return Math.round(Math.max(quotient * factor + (remainder >= factor / 2.0 ? factor : 0), factor));
}

function parseEthernetAnswer(rate) {
  var number = Number(rate) / 1000000;
  if (number === 10000) return intl__default["default"].get("10_gbit");else if (number === 1000) return intl__default["default"].get("1_gbit");else if (number === 100) return intl__default["default"].get("100_mbit");else if (number === 10) return intl__default["default"].get("10_mbit");
  return number.toFixed(1) + intl__default["default"].get("#_mbit");
}
function rankString(score) {
  var SCORE_ROUND_FACTOR = 5.0;

  if (score && score >= 55.0) {
    return intl__default["default"].get('isp_rank_summary_ranktop', {
      rank: roundPercentile(100.0 - score, SCORE_ROUND_FACTOR)
    });
  } else if (score && score <= 45.0) {
    return intl__default["default"].get('isp_rank_summary_rankbottom', {
      rank: roundPercentile(score, SCORE_ROUND_FACTOR)
    });
  } else {
    return intl__default["default"].get('isp_rank_summary_rankaverage');
  }
}
function formatSpeed(speed) {
  return (speed / 1000000).toFixed(1);
}
function formatTrend(trend) {
  var s = (trend * 100).toFixed(0);
  if (Math.abs(s) === 0) return "0%";
  return s + "%";
}
function bestIspLocation(internetInfo) {
  var location = '';

  if (internetInfo && internetInfo.isp && internetInfo.isp.country_name) {
    var isp = internetInfo.isp;

    if (isp.country_city) {
      location = isp.country_city + ", " + isp.country_name;
    } else {
      location = isp.country_name;
    }
  }

  return location;
}
function getLocationFromDiscovery(discovery) {
  var location = '';

  if (discovery.network && discovery.network.customLocation) {
    location = discovery.network.customLocation;
  } else if (discovery.internetinfo && discovery.internetinfo.isp && discovery.internetinfo.isp.country_name) {
    var isp = discovery.internetinfo.isp;

    if (isp.country_city) {
      location = isp.country_city + ", " + isp.country_name;
    } else {
      location = isp.country_name;
    }
  }

  return location;
}
function rankStringWithLocation(score, location) {
  var SCORE_ROUND_FACTOR = 5.0;

  if (score && score >= 55.0) {
    return intl__default["default"].get('isp_rank_summary_ranktop_location', {
      rank: roundPercentile(100.0 - score, SCORE_ROUND_FACTOR),
      location: location
    });
  } else if (score && score <= 45.0) {
    return intl__default["default"].get('isp_rank_summary_rankbottom_location', {
      rank: roundPercentile(score, SCORE_ROUND_FACTOR),
      location: location
    });
  } else {
    return intl__default["default"].get('isp_rank_summary_rankaverage_location', {
      location: location
    });
  }
}
function getIPLocalAddress(discovery, networkInterfaces) {
  if (!discovery || !discovery.nicinfo) {
    return "";
  } // If the field is there, just use that


  if (discovery.nicinfo.address) {
    return discovery.nicinfo.address;
  }

  var macAddress = discovery.nicinfo.hardwareaddress;

  if (!macAddress) {
    return "";
  } // Check into getNetworkInfo results, but only if the interface is really the same (i.e. has the same MAC address)


  if (networkInterfaces && networkInterfaces.nicinfos) {
    var nif = networkInterfaces.nicinfos.find(function (net) {
      return net.gatewayAddress && net.hardwareaddress === macAddress;
    });

    if (nif) {
      return nif.address;
    }
  } // Otherwise, scan all discovery nodes in search of the right one, as a last resort


  if (!discovery.nodes) {
    return "";
  }

  var _iterator = _createForOfIteratorHelper(discovery.nodes),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;

      if (node.mac_address === macAddress) {
        return node.address_list[0] || "";
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return "";
}

// PUBLIC API
// --------------------------------------------------------------------------------

var HC_STATE_OK = "OK";
var HC_STATE_SKIP = "SKIP";
var HC_STATE_INFO = "INFO";
var HC_STATE_WARN = "WARN";
var HC_STATE_FAIL = "FAIL";
var HC_STATES_GOOD = [HC_STATE_OK, HC_STATE_SKIP, HC_STATE_INFO];
var HC_VIRTUAL_SELF = "self";
var HC_VIRTUAL_GEO_LOCATION = "geoloc";
var HC_VIRTUAL_ISP = "isp";
var HC_VIRTUAL_NIC_INFO = "nicinfo";
var HC_VIRTUAL_NETWORK = "network";
var HC_VIRTUAL_GATEWAY = "gateway";
var HC_SEGMENT_LOCAL = 'local';
var HC_SEGMENT_NETWORK = 'network';
var HC_SEGMENT_INTERNET = 'internet';
var HC_SEGMENT_VIRTUAL = "virtual";
var HC_IMAGE_TYPE_FONTAWESOME = "fontawesome_icon";
var HC_IMAGE_TYPE_CDN = "cdn_image";
var HC_IMAGE_TYPE_NETWORK_ICON = "network_type_icon";
var HC_IMAGE_TYPE_DEVICE_ICON = "device_type_icon";
var HC_IMAGE_TYPE_CONTEXT_ICON = "context_icon";
/**
 * Converts the given healthState object into a list of items to display.

 * @param healthState
 * @returns An array of item objects, or null if no original data could be extracted
 */

function convertToItemList(healthState) {
  if (!healthState || !healthState.result || !healthState.result.checks || healthState.result.checks.length < 1) return null;
  var checks = injectVirtualChecks(healthState);
  return checks.map(function (check, index) {
    return check.segment === HC_SEGMENT_VIRTUAL ? convertVirtualCheckToItem(index, check, healthState) : convertCheckToItem(index, check, healthState);
  });
} // --------------------------------------------------------------------------------
// IMPLEMENTATION & PRIVATE CONVENIENCE FUNCTIONS
// --------------------------------------------------------------------------------

function convertVirtualCheckToItem(index, check, healthState) {
  if (check.type === HC_VIRTUAL_SELF) {
    return convertSelfCheck(index, check, healthState);
  } else if (check.type === HC_VIRTUAL_GATEWAY) {
    return convertGatewayCheck(index, check, healthState);
  } else if (check.type === HC_VIRTUAL_NIC_INFO) {
    return convertNicInfoCheck(index, check, healthState);
  } else if (check.type === HC_VIRTUAL_GEO_LOCATION) {
    return convertGeoLocInfoCheck(index, check, healthState);
  } else if (check.type === HC_VIRTUAL_ISP) {
    return convertIspInfoCheck(index, check, healthState);
  } else if (check.type === HC_VIRTUAL_NETWORK) {
    return convertNetworkInfoCheck(index, check, healthState);
  }

  return newItem(index, check);
}

function convertGatewayCheck(index, check, healthState) {
  var device = healthState.result.gateway;
  var deviceDetails = bestMakeAndModelAsArray(device);
  if (deviceDetails.length === 0 && device.mac_vendor) deviceDetails = [device.mac_vendor];
  var deviceOs;

  if (device && device.best_os) {
    deviceOs = device.best_os;

    if (device.best_osver) {
      var ver = getOsPrintableVersion(device.best_os, device.best_osver);
      deviceOs += " ".concat(ver ? ver : device.best_osver);
    }
  }

  var info = intl__default["default"].get('discovery_network_netinfo_gateway_explicit');
  if (device.mac_address) info += " ".concat(device.mac_address);
  if (device.address_list && device.address_list.length > 0) info += " (".concat(device.address_list[0], ")");
  var titleElements = [];
  if (deviceDetails) titleElements.push.apply(titleElements, _toConsumableArray(deviceDetails));
  if (deviceOs) titleElements.push(deviceOs);
  if (!deviceDetails || deviceDetails.length === 0) titleElements.push(intl__default["default"].get('healthcheck_report_network_gateway'));
  var item = newItem(index, check);
  item.segmentImage = {
    type: HC_IMAGE_TYPE_DEVICE_ICON,
    ref: device.best_type
  };
  item.segmentText = intl__default["default"].get('discovery_network_netinfo_gateway');
  item.itemTitle = titleElements.join(" • ");
  item.itemSubtitle = info;
  return item;
}

function convertSelfCheck(index, check, healthState) {
  var device = healthState.result.self;
  var deviceDetails = bestMakeAndModelAsArray(device);
  var deviceOs;

  if (device && device.best_os) {
    deviceOs = device.best_os;

    if (device.best_osver) {
      var ver = getOsPrintableVersion(device.best_os, device.best_osver);
      deviceOs += ' ' + (ver ? ver : device.best_osver);
    }
  }

  var titleElements = [];
  if (deviceDetails) titleElements.push.apply(titleElements, _toConsumableArray(deviceDetails));
  if (deviceOs) titleElements.push(deviceOs);
  var item = newItem(index, check);
  item.segmentImage = {
    type: HC_IMAGE_TYPE_DEVICE_ICON,
    ref: device.best_type
  };
  item.segmentText = intl__default["default"].get('generic_you').toLowerCase();
  item.itemTitle = titleElements.join(" • "); // Not localized because all other subtitles coming from the agent are not localized as well

  item.itemSubtitle = "Your device, ".concat(device.best_name, " (").concat(device.mac_address, ")");
  return item;
}

function convertNicInfoCheck(index, check, healthState) {
  var nif = healthState.result.nicinfos[0];
  var info = intl__default["default"].get("healthcheck_v_nicinfo_I");
  var title;

  if (nif && nif.type === NT_ETHERNET) {
    title = intl__default["default"].get('network_connection_type_eth_simple');
    info = intl__default["default"].get('healthcheck_report_nicinfo_connection_info', {
      address: nif.address,
      ethRate: parseEthernetAnswer(nif.downlinkeffectiverate)
    });
  } else if (nif && nif.type === NT_ETH_USB) {
    title = intl__default["default"].get('network_connection_type_eth_usb_simple');
    info = intl__default["default"].get('healthcheck_report_nicinfo_connection_info', {
      address: nif.address,
      ethRate: parseEthernetAnswer(nif.downlinkeffectiverate)
    });
  } else if (nif && nif.type === NT_WIFI) {
    var band = nif.channel > 14 ? '5 GHz' : '2.4 GHz';

    if (nif.apssid && nif.apbssid) {
      title = intl__default["default"].get('network_connection_type_wifi_apbssid', {
        band: band,
        apssid: nif.apbssid
      });
      info = intl__default["default"].get('healthcheck_report_nicinfo_connection_more_info', {
        address: nif.address,
        speed: parseEthernetAnswer(nif.downlinkeffectiverate),
        apbssid: nif.apbssid,
        channel: nif.channel
      });
    } else {
      title = intl__default["default"].get('network_connection_type_wifi', {
        band: band
      });
      info = intl__default["default"].get('healthcheck_report_nicinfo_connection_info_nostation', {
        address: nif.address,
        speed: parseEthernetAnswer(nif.downlinkeffectiverate),
        channel: nif.channel
      });
    }
  } else {
    title = intl__default["default"].get("generic_not_connected");
  }

  var item = newItem(index, check);
  item.segmentImage = {
    type: HC_IMAGE_TYPE_NETWORK_ICON,
    ref: nif ? nif.type : NT_WIFI
  };
  item.segmentText = intl__default["default"].get('generic_link');
  item.itemTitle = title;
  item.itemSubtitle = info;
  return item;
}

function convertGeoLocInfoCheck(index, check, healthState) {
  var isp = healthState.result.internetinfo.isp;
  var image = isp.country_code ? "/flags/1x1/" + isp.country_code.toLowerCase() + ".png" : "/isp/general/default_isp.png";
  var titleElements = [];
  if (isp.country_city) titleElements.push(isp.country_city);
  if (isp.country_region) titleElements.push(isp.country_region);
  if (isp.country_name) titleElements.push(isp.country_name);
  var info = intl__default["default"].get('healthcheck_report_geoloc_info', {
    name: isp.country_name,
    tz: isp.timezone ? intl__default["default"].get('healthcheck_report_geoloc_timezone') + isp.timezone : ""
  });
  var item = newItem(index, check);
  item.segmentImage = {
    type: HC_IMAGE_TYPE_CDN,
    ref: image
  };
  item.segmentText = intl__default["default"].get('healthcheck_report_geoloc_location');
  item.itemTitle = titleElements.join(", ");
  item.itemSubtitle = info;
  return item;
}

function convertIspInfoCheck(index, check, healthState) {
  var internetInfo = healthState.result.internetinfo;
  var isp = internetInfo.isp;
  var ispInfo = internetInfo.ispinfo;
  if (!isp || !ispInfo) return newItem(index, check);
  var image;

  if (ispInfo.bannerimageurl) {
    image = ispInfo.bannerimageurl;
  } else if (ispInfo.logoimageurl) {
    image = ispInfo.logoimageurl;
  } else {
    image = "/isp/general/default_isp.png";
  }

  var ispName = ispInfo.name ? ispInfo.name : isp.isp ? isp.isp : isp.organization;
  var bestLoc = isp.country_city ? isp.country_city : isp.country_name ? isp.country_name : '';
  if (ispInfo.ispstats) bestLoc = ispInfo.ispstats && ispInfo.ispstats.city ? ispInfo.ispstats.city : ispInfo.ispstats.country ? ispInfo.ispstats.country : '';
  var title = intl__default["default"].get('healthcheck_report_isp_info_descr', {
    name: ispName,
    loc: bestLoc,
    address: isp.address
  });
  var info = intl__default["default"].get('healthcheck_report_isp_info_message');

  if (ispInfo.ispstats) {
    info = intl__default["default"].get('healthcheck_report_isp_info_stats_message_download', {
      number: Number(ispInfo.ispstats.downloadSpeedMbpsAvg).toFixed(1)
    });
    info += intl__default["default"].get('healthcheck_report_isp_info_stats_message_upload', {
      number: Number(ispInfo.ispstats.uploadSpeedMbpsAvg).toFixed(1)
    });
    info += intl__default["default"].get('healthcheck_report_isp_info_stats_message_share', {
      number: (Number(ispInfo.ispstats.distribution) * 100.0).toFixed(1)
    });
  }

  var item = newItem(index, check);
  item.segmentImage = {
    type: HC_IMAGE_TYPE_CDN,
    ref: image
  };
  item.segmentText = intl__default["default"].get('generic_internet');
  item.itemTitle = title;
  item.itemSubtitle = info;
  return item;
}

function convertNetworkInfoCheck(index, check, healthState) {
  var net = healthState.result.network;
  var nif = healthState.result.nicinfos[0];
  var image = {
    type: HC_IMAGE_TYPE_NETWORK_ICON,
    ref: nif ? nif.type : NT_WIFI
  };
  var context = intl__default["default"].get("generic_unknown");

  if (net.context && NC_ALL_TYPES.includes(net.context)) {
    if (net.context === NC_HOME) {
      image = {
        type: HC_IMAGE_TYPE_CONTEXT_ICON,
        ref: NC_HOME
      };
      context = intl__default["default"].get("generic_home");
    } else if (net.context === NC_OFFICE) {
      image = {
        type: HC_IMAGE_TYPE_CONTEXT_ICON,
        ref: NC_OFFICE
      };
      context = intl__default["default"].get('generic_office');
    } else if (net.context === NC_PUBLIC) {
      image = {
        type: HC_IMAGE_TYPE_CONTEXT_ICON,
        ref: NC_PUBLIC
      };
      context = intl__default["default"].get('generic_public');
    } else if (net.context === 'RENTAL') {
      image = {
        type: HC_IMAGE_TYPE_CONTEXT_ICON,
        ref: NC_RENTAL
      };
      context = intl__default["default"].get('generic_rental');
    }
  }

  var title = intl__default["default"].get('healthcheck_report_networkinfo', {
    context: context
  });
  var accessPointList = "";
  var accessPointCount = 0;

  if (net.bssid || net.additionalbssids) {
    accessPointList = net.bssid;
    accessPointCount = 1;

    if (net.additionalbssids && net.additionalbssids.length > 0) {
      accessPointList += ", " + net.additionalbssids.join(", ");
      accessPointCount += net.additionalbssids.length;
    }
  }

  var info;

  if (net.address_type === 'NTYPE_WIFI') {
    info = intl__default["default"].get('healthcheck_report_nettype_wireless', {
      address: net.address,
      aps: accessPointCount,
      bssid: accessPointList
    });
  } else if (net.address_type === 'NTYPE_ETHWIFI') {
    info = intl__default["default"].get('healthcheck_report_nettype_ethwifi', {
      address: net.address,
      aps: accessPointCount,
      bssid: accessPointList
    });
  } else if (net.address_type === 'NTYPE_ETHERNET') {
    info = intl__default["default"].get('healthcheck_report_nettype_eth', {
      address: net.address
    });
  } else {
    info = net.address;
  }

  var item = newItem(index, check);
  item.segmentImage = image;
  item.segmentText = intl__default["default"].get('discovery_header_network');
  item.itemTitle = title;
  item.itemSubtitle = info;
  return item;
}

function convertCheckToItem(index, check, healthState) {
  var segmentImage = {
    type: HC_IMAGE_TYPE_FONTAWESOME,
    ref: "fa-server"
  };
  var segmentText = "";

  if (check.segment === HC_SEGMENT_NETWORK) {
    var nicInfo = healthState.result.nicinfos;
    var nif = nicInfo.length > 0 ? nicInfo[0] : null;

    if (nif && nif.type) {
      segmentImage = {
        type: HC_IMAGE_TYPE_NETWORK_ICON,
        ref: nif.type
      };
    } else {
      segmentImage = {
        type: HC_IMAGE_TYPE_FONTAWESOME,
        ref: "fa-network-wired"
      };
    }

    segmentText = intl__default["default"].get('generic_network').toLowerCase();
  } else if (check.segment === HC_SEGMENT_INTERNET) {
    segmentImage = {
      type: HC_IMAGE_TYPE_FONTAWESOME,
      ref: "fa-cloud"
    };
    segmentText = intl__default["default"].get('generic_internet').toLowerCase(); // Override with ISP-specific icon if available

    var internetInfo = healthState.result.internetinfo;

    if (internetInfo && internetInfo.ispinfo) {
      var ispInfo = internetInfo.ispinfo;

      if (ispInfo.bannerimageurl) {
        segmentImage = {
          type: HC_IMAGE_TYPE_CDN,
          ref: ispInfo.bannerimageurl
        };
      } else if (ispInfo.logoimageurl) {
        segmentImage = {
          type: HC_IMAGE_TYPE_CDN,
          ref: ispInfo.logoimageurl
        };
      }
    }
  } else if (check.segment === HC_SEGMENT_LOCAL) {
    segmentImage = {
      type: HC_IMAGE_TYPE_FONTAWESOME,
      ref: "fa-laptop"
    };
    segmentText = intl__default["default"].get('generic_local').toLowerCase();
  }

  var title = intl__default["default"].get("healthcheck_".concat(check.type, "_").concat(HC_STATES_GOOD.includes(check.status) ? "G" : "B"));
  var subtitle = check.info;
  var item = newItem(index, check);
  item.segmentImage = segmentImage;
  item.segmentText = segmentText;
  item.itemTitle = title;
  item.itemSubtitle = subtitle;
  item.noContext = check.type === "402" && check.status === HC_STATE_WARN && healthState.result.network;
  item.editable = check.type === "810";
  item.mutable = check.status === HC_STATE_WARN && check.type !== "402";
  return item;
}
/**
 * Creates the base item for the UI.
 */


function newItem(index, check) {
  return {
    itemId: "hc_".concat(index),
    code: check.type,
    segment: check.segment,
    status: check.status,
    premium: check.premium === "true",
    muted: check.muted === "true",
    segmentImage: {
      type: null,
      ref: null
    },
    segmentText: null,
    itemTitle: null,
    itemSubtitle: null,
    category: null,
    noContext: false,
    editable: false
  };
}
/**
 * Injects the array of engine checks with new virtual checks from local data. The checks are inserted at the
 * proper place.
 *
 * @param healthState The Health Check tool result
 * @return The modified list of checks
 */


function injectVirtualChecks(healthState) {
  var progress = healthState.progress;
  var isRunning = progress < 100;
  var checks = isRunning ? healthState.result.checks.slice(0) : // Makes a copy of the array
  healthState.result.checks.filter(function (c) {
    return c.status !== HC_STATE_SKIP || c.premium === "true";
  });

  if (healthState.result.self) {
    addVirtualCheck(checks, HC_SEGMENT_LOCAL, {
      segment: HC_SEGMENT_VIRTUAL,
      type: HC_VIRTUAL_SELF,
      status: HC_STATE_INFO
    });
  }

  var internetInfo = healthState.result.internetinfo;

  if (internetInfo && internetInfo.isp && internetInfo.isp.country_name) {
    addVirtualCheck(checks, HC_SEGMENT_INTERNET, {
      segment: HC_SEGMENT_VIRTUAL,
      type: HC_VIRTUAL_GEO_LOCATION,
      status: HC_STATE_INFO
    }); // TODO: Check logic!

    if (internetInfo.isp.isp) {
      addVirtualCheck(checks, HC_SEGMENT_INTERNET, {
        segment: HC_SEGMENT_VIRTUAL,
        type: HC_VIRTUAL_ISP,
        status: HC_STATE_INFO
      });
    }

    if (internetInfo.isp.ispinfo && (internetInfo.isp.isp || internetInfo.isp.organization)) {
      addVirtualCheck(checks, HC_SEGMENT_INTERNET, {
        segment: HC_SEGMENT_VIRTUAL,
        type: HC_VIRTUAL_ISP,
        status: HC_STATE_INFO
      });
    }
  }

  var nicInfo = healthState.result.nicinfos;

  if (nicInfo && nicInfo.length > 0 && nicInfo[0].state && nicInfo[0].state === "ACTIVE") {
    addVirtualCheck(checks, HC_SEGMENT_NETWORK, {
      segment: HC_SEGMENT_VIRTUAL,
      type: HC_VIRTUAL_NIC_INFO,
      status: HC_STATE_INFO
    });
  }

  if (healthState.result.network) {
    addVirtualCheck(checks, HC_SEGMENT_NETWORK, {
      segment: HC_SEGMENT_VIRTUAL,
      type: HC_VIRTUAL_NETWORK,
      status: HC_STATE_INFO
    });
  }

  if (healthState.result.gateway) {
    addVirtualCheck(checks, HC_SEGMENT_NETWORK, {
      segment: HC_SEGMENT_VIRTUAL,
      type: HC_VIRTUAL_GATEWAY,
      status: HC_STATE_INFO
    });
  }

  return checks;
}

function addVirtualCheck(checks, beforeSegment, virtualCheck) {
  virtualCheck.muted = "false";
  var pos = 0;

  for (; pos < checks.length; ++pos) {
    if (checks[pos].segment === beforeSegment) break;
  }

  checks.splice(pos, 0, virtualCheck);
}

var DiagnosticHelpDialog = /*#__PURE__*/function (_Component) {
  _inherits(DiagnosticHelpDialog, _Component);

  var _super = _createSuper(DiagnosticHelpDialog);

  function DiagnosticHelpDialog() {
    _classCallCheck(this, DiagnosticHelpDialog);

    return _super.apply(this, arguments);
  }

  _createClass(DiagnosticHelpDialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          item = _this$props.item,
          onClose = _this$props.onClose,
          onConfirm = _this$props.onConfirm;
      if (!item) return '';
      var itemCode = item.code;
      var isVirtual = item.segment === HC_SEGMENT_VIRTUAL;
      var dialogTitle, failedDescr, segmentDescr, techDescr, easyDescr;

      if (isVirtual) {
        dialogTitle = intl__default["default"].get('healthcheck_report_checkinfo_modal_title');
        intl__default["default"].get("healthcheck_v_".concat(itemCode, "_I"));
        techDescr = intl__default["default"].getHTML("healthcheck_v_".concat(itemCode, "_tech"));
        easyDescr = intl__default["default"].getHTML("healthcheck_v_".concat(itemCode, "_easy"));
      } else {
        dialogTitle = intl__default["default"].get('healthcheck_report_checkinfo_modal_checkcode_title', {
          code: itemCode
        });
        intl__default["default"].get('healthcheck_generic_code', {
          code: itemCode
        }) + intl__default["default"].get("healthcheck_".concat(itemCode, "_G"));
        failedDescr = intl__default["default"].get("healthcheck_".concat(itemCode, "_B"));
        segmentDescr = intl__default["default"].get("healthcheck_".concat(item.segment));
        techDescr = intl__default["default"].getHTML("healthcheck_".concat(itemCode, "_tech"));
        easyDescr = intl__default["default"].getHTML("healthcheck_".concat(itemCode, "_easy"));
      }

      var fixDescr = intl__default["default"].getHTML("healthcheck_".concat(itemCode, "_fix"));
      var barItems = [];
      if (techDescr) barItems.push({
        label: intl__default["default"].get('healthcheck_help_dialog_tab_techdef'),
        icon: "fa-book-open"
      });
      if (easyDescr) barItems.push({
        label: intl__default["default"].get('healthcheck_help_dialog_tab_means'),
        icon: "fa-lightbulb"
      });
      if (fixDescr) barItems.push({
        label: intl__default["default"].get('healthcheck_help_dialog_tab_howfix'),
        icon: "fa-wrench"
      });

      var badge = function badge(title, className) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "ml-auto text-right small min-w-15rem"
        }, /*#__PURE__*/React__default["default"].createElement("span", {
          className: "display-1 badge badge-soft-".concat(className)
        }, /*#__PURE__*/React__default["default"].createElement("i", {
          className: "fa fa-fw fa-arrow-left"
        }), title));
      }; // Trick to understand if it's not a premium user => premium check got skipped


      var showPromoPremium = item.premium && item.status === HC_STATE_SKIP;
      var promoView = /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3"
      }, /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
        className: "badge-dark",
        label: intl__default["default"].get("healthcheck_report_customtarget_modal_nopremium_title"),
        icon: "fa-star"
      }));
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: dialogTitle,
        size: "modal-lg",
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "callout callout-primary mx-n4 p-4 mb-3"
      }, showPromoPremium && promoView, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "pb-2 border-bottom mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, item.itemTitle), badge(intl__default["default"].get('generic_result'), "primary")), segmentDescr && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, segmentDescr), segmentDescr && badge(intl__default["default"].get('generic_source'), "secondary"))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, item.itemSubtitle && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, item.itemSubtitle), failedDescr ? badge(intl__default["default"].get('healthcheck_help_dialog_successbadge'), "success") : badge(intl__default["default"].get('generic_description'), "secondary"))), failedDescr && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, failedDescr), failedDescr && badge(intl__default["default"].get('healthcheck_help_dialog_failurebadge'), "danger"))), /*#__PURE__*/React__default["default"].createElement(SegmentedBar, {
        className: "nav-classic nav-sm",
        items: barItems
      }, techDescr && /*#__PURE__*/React__default["default"].createElement("p", null, techDescr), easyDescr && /*#__PURE__*/React__default["default"].createElement("p", null, easyDescr), fixDescr && /*#__PURE__*/React__default["default"].createElement("p", null, fixDescr))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), showPromoPremium ? /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onConfirm,
        title: intl__default["default"].get('generic_upgrade'),
        tint: BTN_TINT_DARK
      }) : /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onConfirm,
        title: intl__default["default"].get('healthcheck_help_dialog_action'),
        chevron: "fa-share"
      })));
    }
  }]);

  return DiagnosticHelpDialog;
}(React.Component);

var DiagnosticMuteDialog = /*#__PURE__*/function (_Component) {
  _inherits(DiagnosticMuteDialog, _Component);

  var _super = _createSuper(DiagnosticMuteDialog);

  function DiagnosticMuteDialog() {
    _classCallCheck(this, DiagnosticMuteDialog);

    return _super.apply(this, arguments);
  }

  _createClass(DiagnosticMuteDialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          item = _this$props.item,
          onClose = _this$props.onClose,
          onConfirm = _this$props.onConfirm;
      if (!item) return '';
      var itemCode = item.code;
      var isMuted = item.muted;
      var checkTitle = intl__default["default"].get('healthcheck_generic_code', {
        code: itemCode
      }) + intl__default["default"].get("healthcheck_" + itemCode + "_B");
      var dialogTitle = isMuted ? intl__default["default"].get('healthcheck_report_mute_dialog_unmutecheck') : intl__default["default"].get('healthcheck_report_mute_dialog_mutecheck');
      var dialogText = isMuted ? intl__default["default"].get('healthcheck_report_mute_dialog_unmutecheck_description') : intl__default["default"].get('healthcheck_report_mute_dialog_mutecheck_description');
      var newItem = Object.assign({}, item);
      newItem.muted = !item.muted;
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: "".concat(dialogTitle, " - ").concat(checkTitle),
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "px-3"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "h6 text-secondary"
      }, dialogText)))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), !isMuted && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return onConfirm(newItem);
        },
        icon: "fa-bell-slash",
        title: intl__default["default"].get('healthcheck_report_mute_action')
      }), isMuted && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return onConfirm(newItem);
        },
        icon: "fa-bell",
        title: intl__default["default"].get('healthcheck_report_unmute_action')
      })));
    }
  }]);

  return DiagnosticMuteDialog;
}(React.Component);

var DiagnosticShareDialog = /*#__PURE__*/function (_Component) {
  _inherits(DiagnosticShareDialog, _Component);

  var _super = _createSuper(DiagnosticShareDialog);

  function DiagnosticShareDialog() {
    _classCallCheck(this, DiagnosticShareDialog);

    return _super.apply(this, arguments);
  }

  _createClass(DiagnosticShareDialog, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          dialogImage = _this$props.dialogImage,
          dialogImageCaption = _this$props.dialogImageCaption,
          onClose = _this$props.onClose,
          onConfirm = _this$props.onConfirm;
      var title = intl__default["default"].get('healthcheck_report_askhelp_title');
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title,
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-7"
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "py-4"
      }, intl__default["default"].get('healthcheck_report_askhelp_description'))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-5"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "mx-auto",
        src: dialogImage,
        alt: dialogImageCaption || intl__default["default"].get('empty_state_title_fallback')
      }))), /*#__PURE__*/React__default["default"].createElement(ModalDialogInfoNote, {
        icon: "fa-info-circle",
        text: intl__default["default"].get('healthcheck_report_askhelp_privacy')
      })), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return onConfirm();
        },
        title: intl__default["default"].get('healthcheck_report_askhelp_modal_share_action'),
        chevron: "fa-share"
      })));
    }
  }]);

  return DiagnosticShareDialog;
}(React.Component);

var GROUP_ALL = "ALL";
var GROUP_PREMIUM = "PREMIUM";
/**
 * A view showing the report of health check analysis.
 */

var DiagnosticReportView = /*#__PURE__*/function (_Component) {
  _inherits(DiagnosticReportView, _Component);

  var _super = _createSuper(DiagnosticReportView);

  function DiagnosticReportView(props, context) {
    var _this;

    _classCallCheck(this, DiagnosticReportView);

    _this = _super.call(this, props, context);
    _this.state = {
      selectedCategoryIndex: -1
    };
    return _this;
  }

  _createClass(DiagnosticReportView, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          items = _this$props.items,
          grouped = _this$props.grouped;
      var itemsByCategory = items.reduce(function (acc, item) {
        acc[item.status] = acc[item.status] + 1 || 1;
        acc[GROUP_ALL] = acc[GROUP_ALL] + 1;
        acc[GROUP_PREMIUM] = acc[GROUP_PREMIUM] + (item.premium ? 1 : 0);
        return acc;
      }, {
        ALL: 0,
        PREMIUM: 0
      });
      var tabIndex;

      if (this.state.selectedCategoryIndex >= 0) {
        tabIndex = this.state.selectedCategoryIndex;
      } else if (itemsByCategory[HC_STATE_FAIL] > 0) {
        tabIndex = 3;
      } else if (itemsByCategory[HC_STATE_WARN] > 0) {
        tabIndex = 2;
      } else {
        tabIndex = 0;
      }

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, grouped && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center mt-2 mb-4"
      }, this.renderSegmentedBar(items, itemsByCategory, tabIndex)), /*#__PURE__*/React__default["default"].createElement("div", null, items && items.length > 0 && this.renderTable(items, itemsByCategory, tabIndex)));
    }
  }, {
    key: "renderSegmentedBar",
    value: function renderSegmentedBar(items, itemsByCategory, tabIndex) {
      var _this2 = this;

      var onItemSelected = function onItemSelected(idx) {
        return _this2.setState({
          selectedCategoryIndex: idx
        });
      };

      return /*#__PURE__*/React__default["default"].createElement(SegmentedBar, {
        items: [{
          label: intl__default["default"].get("healthcheck_report_radio_button_all"),
          badge: itemsByCategory[GROUP_ALL] || 0,
          badgeClass: "badge-pill badge-soft-primary text-dark"
        }, {
          label: intl__default["default"].get("healthcheck_report_radio_button_info"),
          badge: itemsByCategory[HC_STATE_INFO] || 0,
          badgeClass: "badge-pill badge-soft-primary text-dark"
        }, {
          label: intl__default["default"].get("healthcheck_report_radio_button_warn"),
          badge: itemsByCategory[HC_STATE_WARN] || 0,
          badgeClass: "badge-pill badge-soft-primary text-dark"
        }, {
          label: intl__default["default"].get("healthcheck_report_radio_button_fail"),
          badge: itemsByCategory[HC_STATE_FAIL] || 0,
          badgeClass: "badge-pill badge-soft-danger"
        }, {
          label: intl__default["default"].get("healthcheck_report_radio_button_premium"),
          badge: itemsByCategory[GROUP_PREMIUM] || 0,
          badgeClass: "badge-pill badge-soft-primary text-dark"
        }],
        activeIndex: tabIndex,
        onItemSelected: onItemSelected
      });
    }
  }, {
    key: "renderTable",
    value: function renderTable(items, itemsByCategory, tabIndex) {
      var _this3 = this;

      var visibleItems = items.filter(function (item) {
        return tabIndex === 0 || tabIndex === 1 && item.status === HC_STATE_INFO || tabIndex === 2 && item.status === HC_STATE_WARN || tabIndex === 3 && item.status === HC_STATE_FAIL || tabIndex === 4 && item.premium === true;
      });
      if (visibleItems.length === 0) return this.renderEmptyState();else return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-sm table-responsive-flip table-align-middle"
      }, /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", null, this.headerForColumn(0)), /*#__PURE__*/React__default["default"].createElement("th", {
        className: "text-center"
      }, this.headerForColumn(1)), /*#__PURE__*/React__default["default"].createElement("th", null, this.headerForColumn(2)), /*#__PURE__*/React__default["default"].createElement("th", null))), /*#__PURE__*/React__default["default"].createElement("tbody", null, visibleItems.map(function (item) {
        return _this3.renderTableRow(item);
      }))));
    }
  }, {
    key: "renderTableRow",
    value: function renderTableRow(item) {
      var backgroundClass;

      if (HC_STATES_GOOD.includes(item.status)) {
        // Highlight skipped Premium checks => the user is not Premium
        backgroundClass = item.premium && item.status === HC_STATE_SKIP ? "bg-soft-dark" : "";
      } else if (item.status === HC_STATE_WARN) {
        backgroundClass = "bg-soft-warning";
      } else {
        backgroundClass = "bg-soft-danger";
      }

      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: "item_" + item.itemId,
        className: backgroundClass
      }, /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, this.renderStatus(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, this.renderWhere(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, this.renderWhat(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3),
        className: "text-md-right"
      }, this.renderActions(item)));
    }
  }, {
    key: "renderStatus",
    value: function renderStatus(item) {
      var status = item.status;
      if (!status) return /*#__PURE__*/React__default["default"].createElement("span", null, "\xA0");

      switch (status) {
        case HC_STATE_OK:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-success",
            label: intl__default["default"].get('healthcheck_statusbadge_success'),
            icon: "fa-check"
          });

        case HC_STATE_INFO:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-secondary",
            label: intl__default["default"].get('healthcheck_statusbadge_info'),
            icon: "fa-info"
          });

        case HC_STATE_SKIP:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-soft-secondary",
            label: intl__default["default"].get('healthcheck_statusbadge_skipped'),
            icon: "fa-asterisk"
          });

        case HC_STATE_WARN:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-warning",
            label: intl__default["default"].get('healthcheck_statusbadge_warn'),
            icon: "fa-exclamation"
          });

        case HC_STATE_FAIL:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-danger",
            label: intl__default["default"].get('healthcheck_statusbadge_fail'),
            icon: "fa-times"
          });

        default:
          return /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
            className: "badge-light",
            label: "",
            icon: "fa-asterisk"
          });
      }
    }
  }, {
    key: "renderWhere",
    value: function renderWhere(item) {
      var image = item.segmentImage,
          label = item.segmentText;
      if (!image && !label) return /*#__PURE__*/React__default["default"].createElement("span", null, "\xA0"); // Render inline on small screens, render vertically (block) for screens >= MD size

      var alignerClass = "d-inline-block mr-2 d-md-block mr-md-0";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-md-center"
      }, image && image.ref && image.type === HC_IMAGE_TYPE_CDN && /*#__PURE__*/React__default["default"].createElement("img", {
        className: "".concat(alignerClass, " mx-md-auto"),
        src: "https://cdn.fing.io/images".concat(image.ref),
        height: 24,
        alt: label
      }), image && image.ref && image.type === HC_IMAGE_TYPE_FONTAWESOME && /*#__PURE__*/React__default["default"].createElement("i", {
        className: "".concat(alignerClass, " mt-md-2 text-dark fa ").concat(image.ref)
      }), image && image.ref && image.type === HC_IMAGE_TYPE_NETWORK_ICON && /*#__PURE__*/React__default["default"].createElement(NetworkTypeIcon, {
        className: alignerClass,
        type: image.ref
      }), image && image.ref && image.type === HC_IMAGE_TYPE_CONTEXT_ICON && /*#__PURE__*/React__default["default"].createElement(NetworkContextIcon, {
        className: alignerClass,
        type: image.ref
      }), image && image.ref && image.type === HC_IMAGE_TYPE_DEVICE_ICON && /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        className: alignerClass,
        type: image.ref
      }), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small"
      }, label));
    }
  }, {
    key: "renderWhat",
    value: function renderWhat(item) {
      if (item.noContext) {
        return this.renderWhatForMissingContext(item);
      }

      var title = item.itemTitle,
          subtitle = item.itemSubtitle;
      if (!title && !subtitle) return /*#__PURE__*/React__default["default"].createElement("span", null, "\xA0");
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, title || ''), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "small"
      }, subtitle || ''));
    }
  }, {
    key: "renderWhatForMissingContext",
    value: function renderWhatForMissingContext(item) {
      var title = item.itemTitle;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, title || ''), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "my-2"
      }, /*#__PURE__*/React__default["default"].createElement(NetworkContextPicker, {
        className: "overflow-hidden",
        onContextSelected: this.props.onContextPicked
      })));
    }
  }, {
    key: "renderActions",
    value: function renderActions(item) {
      var isPremium = item.premium === true;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, item.onMute && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: item.onMute,
        icon: item.muted ? "fa-bell" : "fa-bell-slash",
        type: BTN_TYPE_SOFT,
        tint: isPremium ? BTN_TINT_DARK : BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get(item.muted ? "healthcheck_report_unmute_action" : "healthcheck_report_mute_action"),
        titleClass: "d-md-none"
      }), item.onEdit && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: item.onEdit,
        icon: "fa-cog",
        disabled: false,
        type: BTN_TYPE_SOFT,
        tint: isPremium ? BTN_TINT_DARK : BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get("generic_edit"),
        titleClass: "d-md-none"
      }), item.onHelp && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: item.onHelp,
        icon: isPremium ? "fa-star" : "fa-question-circle",
        type: BTN_TYPE_SOFT,
        tint: isPremium ? BTN_TINT_DARK : BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get(isPremium ? "generic_upgrade" : "generic_help"),
        titleClass: "d-md-none"
      }));
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get("healthcheck_report_table_header_state");
      if (idx === 1) return intl__default["default"].get("healthcheck_report_table_header_where");
      if (idx === 2) return intl__default["default"].get("healthcheck_report_table_header_what");
      if (idx === 3) return intl__default["default"].get("generic_actions");
      return '';
    }
  }, {
    key: "renderEmptyState",
    value: function renderEmptyState() {
      var emptyStateText = "";

      switch (this.state.activeGroupIndex) {
        case 0:
          emptyStateText = intl__default["default"].get('healthcheck_report_emptystate', {
            filter: "check"
          });
          break;

        case 1:
          emptyStateText = intl__default["default"].get('healthcheck_report_emptystate', {
            filter: "info"
          });
          break;

        case 2:
          emptyStateText = intl__default["default"].get('healthcheck_report_emptystate', {
            filter: "warning"
          });
          break;

        case 3:
          emptyStateText = intl__default["default"].get('healthcheck_report_emptystate', {
            filter: "failure"
          });
          break;

        case 4:
          emptyStateText = intl__default["default"].get('healthcheck_report_emptystate_premium');
          break;
      }

      return /*#__PURE__*/React__default["default"].createElement(EmptyState, {
        image: this.props.emptyStateImage,
        caption: emptyStateText,
        title: emptyStateText,
        subtitle: intl__default["default"].get("healthcheck_report_emptystate_component_message")
      });
    }
  }]);

  return DiagnosticReportView;
}(React.Component);

/**
 * This class merges the properties of a Contact with the device data the contact has on a network.
 */
var Contact = /*#__PURE__*/function () {
  function Contact() {
    _classCallCheck(this, Contact);

    _defineProperty(this, "contactId", void 0);

    _defineProperty(this, "contactName", void 0);

    _defineProperty(this, "contactType", void 0);

    _defineProperty(this, "gender", void 0);

    _defineProperty(this, "imageURL", void 0);

    _defineProperty(this, "online", void 0);

    _defineProperty(this, "lastChange", void 0);

    _defineProperty(this, "presenceDevices", void 0);

    _defineProperty(this, "otherDevices", void 0);

    _defineProperty(this, "activeScheduleItemIds", void 0);
  }

  _createClass(Contact, [{
    key: "applyDataContact",
    value: // List of IDs of active schedule items for this contact
    function applyDataContact(_ref) {
      var contactId = _ref.contactId,
          contactName = _ref.contactName,
          contactType = _ref.contactType,
          gender = _ref.gender,
          imageURL = _ref.imageURL,
          online = _ref.online,
          lastChange = _ref.lastChange,
          presenceDevices = _ref.presenceDevices,
          otherDevices = _ref.otherDevices;
      this.contactId = contactId;
      this.contactName = contactName;
      this.contactType = contactType;
      this.gender = gender;
      this.imageURL = imageURL;
      this.online = online;
      this.lastChange = lastChange;
      this.presenceDevices = presenceDevices;
      this.otherDevices = otherDevices;
    }
  }, {
    key: "getPictureUrl",
    value: function getPictureUrl() {
      var url = this.imageURL;
      return url && (url.startsWith("http://") || url.startsWith("https://") || url.startsWith("images/")) ? url : null;
    }
  }, {
    key: "getPictureImageData",
    value: function getPictureImageData() {
      var url = this.imageURL;
      if (!url) return null;
      var formats = ["png", "jpeg"];

      for (var _i = 0, _formats = formats; _i < _formats.length; _i++) {
        var format = _formats[_i];
        var preamble = "data:image/".concat(format, ";base64,");

        if (url.startsWith(preamble)) {
          return url.substring(preamble.length);
        }
      }

      return null;
    }
  }, {
    key: "isScheduledInternetDowntimeActive",
    value: function isScheduledInternetDowntimeActive() {
      return this.getActiveScheduleItems().length > 0;
    }
  }, {
    key: "getActiveScheduleItems",
    value: function getActiveScheduleItems() {
      return this.activeScheduleItemIds || [];
    }
  }]);

  return Contact;
}();
function newContactWithId() {
  var c = new Contact();
  c.contactId = uuidv4();
  return c;
} // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid

function uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
}

var AVT_SIZE_MINI = "SIZE_MINI";
var AVT_SIZE_SMALL = "SIZE_SMALL";
var AVT_SIZE_DEFAULT = "SIZE_DEFAULT";
var AVT_SIZE_BIG = "SIZE_BIG";
var AVT_SIZE_JUMBO = "SIZE_JUMBO";
var UI_MIN_RGB = 0.05;
var UI_MAX_RGB = 0.95;

var ContactAvatar = /*#__PURE__*/function (_Component) {
  _inherits(ContactAvatar, _Component);

  var _super = _createSuper(ContactAvatar);

  function ContactAvatar() {
    _classCallCheck(this, ContactAvatar);

    return _super.apply(this, arguments);
  }

  _createClass(ContactAvatar, [{
    key: "sizeToClass",
    value: function sizeToClass(size) {
      if (!size) return "avatar-lg";

      switch (size) {
        case AVT_SIZE_MINI:
          return "avatar-xs";

        case AVT_SIZE_SMALL:
          return "";

        case AVT_SIZE_DEFAULT:
          return "avatar-lg";

        case AVT_SIZE_BIG:
          return "avatar-xl";

        case AVT_SIZE_JUMBO:
          return "avatar-xxl";

        default:
          return "avatar-lg";
      }
    }
  }, {
    key: "statusSizeToClass",
    value: function statusSizeToClass(size) {
      if (!size) return "avatar-sm-status";

      switch (size) {
        case AVT_SIZE_MINI:
        case AVT_SIZE_SMALL:
        case AVT_SIZE_DEFAULT:
          return "avatar-sm-status";

        case AVT_SIZE_BIG:
          return "";

        case AVT_SIZE_JUMBO:
          return "avatar-lg-status";

        default:
          return "avatar-sm-status";
      }
    }
  }, {
    key: "statusColor",
    value: function statusColor(contact) {
      if (contact) {
        var online = contact.online;
        var netNodes = [];

        if (contact.presenceDevices && contact.presenceDevices.length > 0) {
          netNodes.push.apply(netNodes, _toConsumableArray(contact.presenceDevices));
        }
        /*if(contact.otherDevices && contact.otherDevices.length > 0){
            netNodes.push(...contact.otherDevices);
        }*/


        var isScheduledInternetDowntimeActive = contact.isScheduledInternetDowntimeActive && contact.isScheduledInternetDowntimeActive();
        var filteredNetNodes = netNodes.filter(function (n) {
          return n.isBlocked() || n.isPaused();
        });

        if (isScheduledInternetDowntimeActive || filteredNetNodes.length > 0) {
          return "avatar-danger";
        } else if (online) {
          return "avatar-success";
        }
      }

      return "avatar-secondary";
    }
  }, {
    key: "getAvatarInitials",
    value: function getAvatarInitials(name, initials) {
      if (name) {
        return name.split(" ").map(function (part) {
          return part.charAt(0);
        }).join('');
      } else if (initials) {
        return initials;
      }

      return null;
    }
  }, {
    key: "getBackgroundColor",
    value: function getBackgroundColor(name) {
      if (name) {
        return this.colorFromPattern(name);
      }

      return "lightgray";
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          name = _this$props.name,
          url = _this$props.url,
          initials = _this$props.initials,
          size = _this$props.size,
          tooltip = _this$props.tooltip,
          className = _this$props.className,
          contact = _this$props.contact,
          status = _this$props.status,
          statusVisible = _this$props.statusVisible;
      var sizeClass = this.sizeToClass(size);
      var statusSizeClass = this.statusSizeToClass(size);
      var outerClass = className || '';
      var displayStatus = statusVisible || true;
      url = contact ? contact.imageURL : url;
      name = contact ? contact.contactName : name;
      tooltip = contact ? contact.contactName : name;
      var avatarInitials = this.getAvatarInitials(name, initials);

      if (url) {
        avatarInitials = null;
      }

      var backgroundColor = this.getBackgroundColor(name);
      var statusColor = status || this.statusColor(contact);
      return /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar avatar-circle ".concat(sizeClass, " ").concat(outerClass),
        style: {
          backgroundColor: backgroundColor
        },
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: tooltip
      }, url && /*#__PURE__*/React__default["default"].createElement("img", {
        className: "avatar-img",
        src: url,
        alt: name || ""
      }), avatarInitials && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar-initials text-white"
      }, avatarInitials), displayStatus && contact && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar-status ".concat(statusSizeClass, " ").concat(statusColor)
      }));
    }
  }, {
    key: "hashCode",
    value: function hashCode(string) {
      var hash = 0,
          i,
          chr;
      if (string.length === 0) return hash;

      for (i = 0; i < string.length; i++) {
        chr = string.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash;
    }
  }, {
    key: "colorFromPattern",
    value: function colorFromPattern(pattern) {
      var hash = this.hashCode(pattern);
      var r = Math.floor(Math.max(Math.min(((hash & 0xFF0000) >> 16) / 255.0, UI_MAX_RGB), UI_MIN_RGB) * 255.0);
      var g = Math.floor(Math.max(Math.min(((hash & 0x00FF00) >> 8) / 255.0, UI_MAX_RGB), UI_MIN_RGB) * 255.0);
      var b = Math.floor(Math.max(Math.min((hash & 0x0000FF) / 255.0, UI_MAX_RGB), UI_MIN_RGB) * 255.0);
      return "rgb(".concat(r, ",").concat(g, ",").concat(b, ")");
    }
  }]);

  return ContactAvatar;
}(React.Component);
ContactAvatar.propTypes = {
  name: PropTypes__default["default"].string,
  initials: PropTypes__default["default"].string,
  tint: PropTypes__default["default"].oneOf([TINT_DANGER, TINT_WARNING, TINT_SECONDARY, TINT_SUCCESS]),
  size: PropTypes__default["default"].oneOf([AVT_SIZE_MINI, AVT_SIZE_SMALL, AVT_SIZE_DEFAULT, AVT_SIZE_BIG, AVT_SIZE_JUMBO]),
  className: PropTypes__default["default"].string,
  tooltip: PropTypes__default["default"].string,
  contact: PropTypes__default["default"].instanceOf(Contact)
};

var autoblock_card_action_enable$2 = "Enable";
var autoblock_card_subtitle_disabled$2 = "Fing Desktop is not automatically blocking new devices that connect to this network, leaving it potentially unsecure.";
var autoblock_card_subtitle_enabled$2 = "New devices that connect to the network <b>{networkName}</b> will be automatically blocked. You will need to manually unblock these devices to allow them to use the network.";
var autoblock_card_subtitle_permission_disabled$2 = "Automatically block new devices that connect to your domestic network.";
var autoblock_card_subtitle_validation_disabled$2 = "It's not possible to automatically block new devices that connect to the network <b>{networkName}</b>. This may be due to lack of permissions or to a network context that does not allow to automatically block devices.";
var autoblock_card_title$2 = "Autoblock new devices";
var autoblock_card_title_disabled$2 = "Autoblock is disabled";
var autoblock_card_title_enabled$2 = "Autoblock is enabled";
var back_button$2 = "Back";
var contacttype_colleague$2 = "Colleague";
var contacttype_colleague_contractor$2 = "Contractor";
var contacttype_colleague_staff$2 = "Staff";
var contacttype_colleague_visitor$2 = "Visitor";
var contacttype_family$2 = "Family";
var contacttype_family_her$2 = "Her";
var contacttype_family_him$2 = "Him";
var contacttype_family_kid$2 = "Kid";
var contacttype_family_pet$2 = "Pet";
var contacttype_family_pet_cat$2 = "Cat";
var contacttype_family_pet_dog$2 = "Dog";
var contacttype_family_relative$2 = "Relative";
var contacttype_friend$2 = "Friend";
var contacttype_guest$2 = "Guest";
var contacttype_help$2 = "Help";
var contacttype_help_cleaning$2 = "Cleaning";
var contacttype_help_delivery$2 = "Delivery";
var contacttype_help_maintenance$2 = "Maintenance";
var contacttype_help_medical$2 = "Medical";
var contacttype_other$2 = "Other";
var contacttype_others$2 = "Others";
var copy_to_clipboard_copied$2 = "Copied!";
var data_no_trend$2 = "No trend data";
var data_trend_down_1$2 = "Declining fast";
var data_trend_down_2$2 = "Getting worse";
var data_trend_stable$2 = "Stable trend";
var data_trend_up_1$2 = "Improving fast";
var data_trend_up_2$2 = "Getting better";
var dateformat_day$2 = "day";
var dateformat_day_long$2 = "{amount} day";
var dateformat_day_short$2 = "{amount}d";
var dateformat_dayago$2 = "{amount} day ago";
var dateformat_days$2 = "days";
var dateformat_days_long$2 = "{amount} days";
var dateformat_daysago$2 = "{amount} days ago";
var dateformat_hour$2 = "hour";
var dateformat_hour_long$2 = "{amount} hour";
var dateformat_hour_short$2 = "{amount}h";
var dateformat_hourago$2 = "{amount} hour ago";
var dateformat_hours$2 = "hours";
var dateformat_hours_long$2 = "{amount} hours";
var dateformat_hoursago$2 = "{amount} hours ago";
var dateformat_min$2 = "min";
var dateformat_min_long$2 = "{amount} minute";
var dateformat_min_short$2 = "{amount}m";
var dateformat_minago$2 = "{amount} min ago";
var dateformat_mins$2 = "mins";
var dateformat_mins_long$2 = "{amount} minutes";
var dateformat_minsago$2 = "{amount} mins ago";
var dateformat_minutes$2 = "minutes";
var dateformat_month$2 = "month";
var dateformat_month_apr$2 = "Apr";
var dateformat_month_aug$2 = "Aug";
var dateformat_month_dec$2 = "Dec";
var dateformat_month_feb$2 = "Feb";
var dateformat_month_jan$2 = "Jan";
var dateformat_month_jul$2 = "Jul";
var dateformat_month_jun$2 = "Jun";
var dateformat_month_mar$2 = "Mar";
var dateformat_month_may$2 = "May";
var dateformat_month_nov$2 = "Nov";
var dateformat_month_oct$2 = "Oct";
var dateformat_month_sep$2 = "Sep";
var dateformat_monthago$2 = "{amount} month ago";
var dateformat_months$2 = "months";
var dateformat_monthsago$2 = "{amount} months ago";
var dateformat_now$2 = "Now";
var dateformat_week$2 = "week";
var dateformat_week_long$2 = "{amount} week";
var dateformat_week_short$2 = "{amount}w";
var dateformat_weekago$2 = "{amount} week ago";
var dateformat_weeks$2 = "weeks";
var dateformat_weeks_long$2 = "{amount} weeks";
var dateformat_weeksago$2 = "{amount} weeks ago";
var dateformat_year$2 = "year";
var dateformat_yearago$2 = "{amount} year ago";
var dateformat_years$2 = "years";
var dateformat_yearsago$2 = "{amount} years ago";
var device_alerts_dialog_body$2 = "Receive mail and mobile notifications when a device goes online or offline from this network.";
var device_alerts_dialog_title$2 = "Notification of known devices";
var device_confirm_dialog_body$2 = "Devices first seen in the network in the last {days} days";
var device_confirm_dialog_body_alt$2 = "Devices in your network yet to be confirmed";
var device_confirm_dialog_title$2 = "Confirm known devices";
var device_detail_banner_choose_action$2 = "Edit model";
var device_detail_banner_choose_action_os$2 = "Edit OS";
var device_detail_banner_choose_subtitle$2 = "This device has been recognized by Fing.";
var device_detail_banner_choose_subtitle_model$2 = "Help us to get it right: open our Fing catalogue and select a model.";
var device_detail_banner_choose_subtitle_os$2 = "Help us to get it right: open our Fing catalogue and select an operating system.";
var device_detail_banner_empty_state_action$2 = "Choose model";
var device_detail_banner_empty_state_subtitle$2 = "Help us to get it right: open our Fing catalogue and select a model.";
var device_detail_banner_feedback_subtitle$2 = "Your feedback helps us improve device recognition results";
var device_detail_banner_feedback_title$2 = "Did Fing get it right?";
var device_detail_banner_revert_action$2 = "Revert to original";
var device_detail_banner_revert_subtitle$2 = "Please update these details if they no longer look right";
var device_detail_banner_thanks$2 = "Thank you, recognition confirmed.";
var device_detail_clear_action$2 = "Clear from device list";
var device_detail_delete_modal_action$2 = "Remove from list";
var device_detail_delete_modal_body$2 = "Do you want to remove this device from the list?<br /> A new network scan will add it back to the list, if the device is detected online.";
var device_detail_delete_modal_body_small$2 = "Deleting a device doesn't prevent it to access the network.";
var device_detail_delete_modal_title$2 = "Delete a device";
var device_detail_edit_action$2 = "Edit device details";
var device_detail_edit_modal_nameinput_placeholder$2 = "Enter a name for your device";
var device_detail_edit_modal_nameinput_small$2 = "Enter a name that will make easier to identify this device";
var device_detail_edit_modal_notesinput_label$2 = "Notes";
var device_detail_edit_modal_notesinput_placeholder$2 = "Enter additional notes";
var device_detail_edit_modal_notesinput_small$2 = "Free-text notes related to this device. Max 1000 characters";
var device_detail_edit_modal_placementinput_label$2 = "Placement";
var device_detail_edit_modal_placementinput_small$2 = "Enter the space where you set your device";
var device_detail_edit_modal_title$2 = "Add or change device details";
var device_detail_family$2 = "Family";
var device_detail_icon_picker_hint$2 = "Search device types";
var device_detail_icon_picker_title$2 = "Select your device type";
var device_detail_internet_downtime_schedule$2 = "<b>{name}</b> active from {startTime} to {endTime}";
var device_detail_internet_downtime_schedule_manage$2 = "Manage schedule";
var device_detail_kick_out_mode_blocked$2 = "Blocked";
var device_detail_kick_out_mode_blocked_ago$2 = "Blocked {time}";
var device_detail_kick_out_mode_blocked_ago_for$2 = "Blocked {time} for {duration}";
var device_detail_kick_out_mode_blocked_for$2 = "Has been blocked for {duration}";
var device_detail_kick_out_mode_blocked_on$2 = "On block";
var device_detail_kick_out_mode_paused$2 = "Paused";
var device_detail_kick_out_mode_paused_ago$2 = "Paused {time}";
var device_detail_kick_out_mode_paused_ago_for$2 = "Paused {time} for {duration}";
var device_detail_kick_out_mode_paused_for$2 = "Has been paused for {duration}";
var device_detail_kick_out_mode_paused_on$2 = "On pause";
var device_detail_kick_out_mode_resumed_immediately$2 = "Has been resumed almost immediately";
var device_detail_kick_out_mode_resumed_while$2 = "Has been resumed in a while";
var device_detail_kick_out_mode_unblocked_immediately$2 = "Has been unblocked almost immediately";
var device_detail_kick_out_mode_unblocked_while$2 = "Has been blocked in a while";
var device_detail_notification_set_automatic$2 = "Automatic (\"{time}\" min)";
var device_detail_notification_set_millis$2 = "Current (\"{time}\" min)";
var device_detail_snmp_description$2 = "Description";
var device_detail_wol_failed$2 = "Fing could not send a packet to turn this device on.";
var device_detail_wol_modal_title_fail$2 = "Failed to send, please try again";
var device_detail_wol_modal_title_success$2 = "Packet sent!";
var device_detail_wol_success$2 = "A signal has been successfully delivered to this device.";
var device_place_Basement$2 = "Basement";
var device_place_Bathroom$2 = "Bathroom";
var device_place_Bedroom$2 = "Bedroom";
var device_place_Cellar$2 = "Cellar";
var device_place_Closet$2 = "Closet";
var device_place_Default$2 = "Select a place";
var device_place_Dining_Room$2 = "Dining Room";
var device_place_Garage$2 = "Garage";
var device_place_Garden$2 = "Garden";
var device_place_Gym$2 = "Gym";
var device_place_Hallway$2 = "Hallway";
var device_place_Indoors$2 = "Indoors";
var device_place_Kitchen$2 = "Kitchen";
var device_place_Living_Room$2 = "Living Room";
var device_place_Lobby$2 = "Lobby";
var device_place_Office$2 = "Office";
var device_place_Outdoors$2 = "Outdoors";
var device_place_Pool$2 = "Pool";
var device_place_Study$2 = "Study";
var devicecategory_audio_and_video$2 = "Audio &amp; Video";
var devicecategory_engineering$2 = "Engineering";
var devicecategory_everything_else$2 = "Everything else";
var devicecategory_home_and_office$2 = "Home &amp; Office";
var devicecategory_industry$2 = "Industry";
var devicecategory_mobile$2 = "Mobile";
var devicecategory_network$2 = "Network";
var devicecategory_offline$2 = "Offline devices";
var devicecategory_personal$2 = "Personal";
var devicecategory_server$2 = "Server";
var devicecategory_smart_home$2 = "Smart Home";
var devicetype_alarm$2 = "Alarm";
var devicetype_appliance$2 = "Smart Appliance";
var devicetype_arduino$2 = "Arduino";
var devicetype_automotive$2 = "Automotive";
var devicetype_baby_monitor$2 = "Baby Monitor";
var devicetype_barcode$2 = "Barcode Scanner";
var devicetype_battery$2 = "UPS";
var devicetype_bell$2 = "Doorbell";
var devicetype_car$2 = "Car";
var devicetype_circuit_card$2 = "Circuit Board";
var devicetype_cleaner$2 = "Smart Cleaner";
var devicetype_clock$2 = "Clock";
var devicetype_cloud$2 = "Cloud";
var devicetype_communication$2 = "Communication";
var devicetype_computer$2 = "Computer";
var devicetype_conferencing$2 = "Conferencing";
var devicetype_control_panel$2 = "Touch Panel";
var devicetype_database$2 = "Database";
var devicetype_desktop$2 = "Desktop";
var devicetype_disc_player$2 = "Disc Player";
var devicetype_domain_server$2 = "Domain Server";
var devicetype_domotz_box$2 = "Domotz Box";
var devicetype_electric$2 = "Electric";
var devicetype_energy$2 = "Energy";
var devicetype_ereader$2 = "eBook Reader";
var devicetype_file_server$2 = "File Server";
var devicetype_fingbox$2 = "Fingbox";
var devicetype_firewall$2 = "Firewall";
var devicetype_fitness$2 = "Fitness";
var devicetype_fridge$2 = "Smart Fridge";
var devicetype_game_console$2 = "Game Console";
var devicetype_garage$2 = "Garage Door";
var devicetype_gateway$2 = "Gateway";
var devicetype_generic$2 = "Generic";
var devicetype_health_monitor$2 = "Health Monitor";
var devicetype_heating$2 = "HVAC";
var devicetype_humidity$2 = "Water Sensor";
var devicetype_industrial$2 = "Industrial Device";
var devicetype_ipod$2 = "MP3 Player";
var devicetype_key_lock$2 = "Smart Lock";
var devicetype_laptop$2 = "Laptop";
var devicetype_light$2 = "Light";
var devicetype_loudspeaker$2 = "Speaker/Amp";
var devicetype_mail_server$2 = "Mail Server";
var devicetype_media_player$2 = "Media Player";
var devicetype_medical$2 = "Medical Device";
var devicetype_microphone$2 = "Mic";
var devicetype_mobile$2 = "Mobile";
var devicetype_modem$2 = "Modem";
var devicetype_motion_detector$2 = "Motion Detector";
var devicetype_music$2 = "Audio Player";
var devicetype_nas_storage$2 = "NAS";
var devicetype_network_appliance$2 = "Network Appliance";
var devicetype_pet_monitor$2 = "Pet Monitor";
var devicetype_phone$2 = "IP Phone";
var devicetype_photo_camera$2 = "Photo Camera";
var devicetype_photos$2 = "Photo Display";
var devicetype_poe_plug$2 = "PoE Switch";
var devicetype_pool$2 = "Pool";
var devicetype_pos$2 = "Point of Sale";
var devicetype_power_system$2 = "Power System";
var devicetype_printer$2 = "Printer";
var devicetype_processor$2 = "Processing Unit";
var devicetype_projector$2 = "Projector";
var devicetype_proxy_server$2 = "Proxy Server";
var devicetype_radio$2 = "Radio";
var devicetype_raspberry$2 = "Raspberry";
var devicetype_remote_control$2 = "Remote Control";
var devicetype_rfid$2 = "RFID Tag";
var devicetype_robot$2 = "Robot";
var devicetype_router$2 = "Router";
var devicetype_satellite$2 = "Satellite";
var devicetype_scale$2 = "Scale";
var devicetype_scanner$2 = "Scanner";
var devicetype_security_system$2 = "Security System";
var devicetype_sensor$2 = "Sensor";
var devicetype_server$2 = "Server";
var devicetype_sleep$2 = "Sleep Tech";
var devicetype_small_cell$2 = "Small Cell";
var devicetype_smart_controller$2 = "Controller";
var devicetype_smart_home$2 = "Smart Device";
var devicetype_smart_meter$2 = "Smart Meter";
var devicetype_smart_plug$2 = "Smart Plug";
var devicetype_smoke$2 = "Smoke Detector";
var devicetype_solar_panel$2 = "Solar Panel";
var devicetype_sound_system$2 = "AV Receiver";
var devicetype_sprinkler$2 = "Sprinkler";
var devicetype_stb$2 = "Cable Box";
var devicetype_streaming_dongle$2 = "Streaming Dongle";
var devicetype_surveillance_camera$2 = "IP Camera";
var devicetype_switch$2 = "Switch";
var devicetype_tablet$2 = "Tablet";
var devicetype_television$2 = "Television";
var devicetype_terminal$2 = "Terminal";
var devicetype_thermostat$2 = "Thermostat";
var devicetype_toy$2 = "Toy";
var devicetype_undefined$2 = "Default icon";
var devicetype_usb$2 = "USB";
var devicetype_virtual_machine$2 = "Virtual Machine";
var devicetype_voice_control$2 = "Voice Assistant";
var devicetype_voip$2 = "VoIP Device";
var devicetype_vpn$2 = "VPN";
var devicetype_washer$2 = "Smart Washer";
var devicetype_watch$2 = "Smart Watch";
var devicetype_wearable$2 = "Wearable";
var devicetype_weather$2 = "Weather Station";
var devicetype_web_server$2 = "Web Server";
var devicetype_wifi$2 = "Wi-Fi";
var devicetype_wifi_extender$2 = "Wi-Fi Extender";
var dhcpdiscovery_result_domain$2 = "Domain";
var discovery_action_edit$2 = "Edit";
var discovery_device_action_change$2 = "Change";
var discovery_devices_filter_all$2 = "All";
var discovery_devices_filter_offline$2 = "Offline";
var discovery_devices_filter_online$2 = "Online";
var discovery_devices_sorted_name$2 = "Name";
var discovery_devices_sorted_state$2 = "State";
var discovery_events_change_state_briefly$2 = " briefly";
var discovery_events_change_state_till$2 = "<span> until now</span>";
var discovery_events_empty_state$2 = "There aren't any events for {time}";
var discovery_events_heatmap_status$2 = "<span><strong>{distinct}</strong> devices</span>";
var discovery_events_no_in_this_period$2 = "No Events found in this period";
var discovery_events_premium_banner_description$2 = "Upgrade Fing to view a full timeline of your network events.";
var discovery_events_premium_banner_description_end$2 = "Upgrade to view your complete timeline.";
var discovery_events_show_next$2 = "Show next events";
var discovery_events_show_previous$2 = "Show previous events";
var discovery_events_timeline_more$2 = "Show more events";
var discovery_events_timeline_new$2 = "First seen on network";
var discovery_events_timeline_new_blocked$2 = "First seen on network, autoblocked";
var discovery_events_timeline_offline_briefly$2 = "Offline briefly";
var discovery_events_timeline_offline_duration$2 = "Has been online for {duration}";
var discovery_events_timeline_offline_duration_immediately$2 = "Turned online almost immediately";
var discovery_events_timeline_offline_duration_while$2 = "Has been online for a while";
var discovery_events_timeline_offline_till_now$2 = "Offline until now";
var discovery_events_timeline_online_briefly$2 = "Online briefly";
var discovery_events_timeline_online_duration$2 = "Has been offline for {duration}";
var discovery_events_timeline_online_duration_immediately$2 = "Turned offline almost immediately";
var discovery_events_timeline_online_duration_while$2 = "Has been offline for a while";
var discovery_events_timeline_online_till_now$2 = "Online until now";
var discovery_events_week_heatmap_header$2 = "Heatmap of last 7 days";
var discovery_events_week_timeline_header$2 = "Timeline of last 7 days";
var discovery_header_location$2 = "Location";
var discovery_header_network$2 = "Network";
var discovery_network_internet_header$2 = "Internet Setup";
var discovery_network_internet_hostname$2 = "Hostname";
var discovery_network_internet_isp$2 = "ISP";
var discovery_network_internet_location$2 = "Location";
var discovery_network_internet_provider$2 = "Provider";
var discovery_network_internet_pubaddress$2 = "Public Address";
var discovery_network_internet_timezone$2 = "Timezone";
var discovery_network_netinfo_gateway$2 = "Gateway";
var discovery_security_newdevices_confirmall$2 = "Confirm all";
var discovery_security_newdevices_confirmed$2 = "Confirmed";
var discovery_security_newdevices_last30days$2 = "Last 30 days";
var discovery_security_newdevices_last7days$2 = "Last 7 days";
var discovery_security_newdevices_message$2 = "Fing keeps track of when each device has been seen for the first time. Confirm all devices that you recognize, to easily spot intruders.";
var discovery_security_newdevices_title$2 = "New devices";
var discovery_security_newdevices_today$2 = "Today";
var dnslookup_info_local_title$2 = "Local";
var duration_day_long$2 = "{amount, plural, =1 {# day} other {# days}}";
var duration_day_short$2 = "{amount}d";
var duration_hour_long$2 = "{amount, plural, =1 {# hour} other {# hours}}";
var duration_hour_short$2 = "{amount}h";
var duration_min_long$2 = "{amount, plural, =1 {# min} other {# mins}}";
var duration_min_short$2 = "{amount}m";
var duration_minute_long$2 = "{amount, plural, =1 {# minute} other {# minutes}}";
var duration_month_long$2 = "{amount, plural, =1 {# month} other {# months}}";
var duration_month_short$2 = "{amount}mo";
var duration_week_long$2 = "{amount, plural, =1 {# week} other {# weeks}}";
var duration_week_short$2 = "{amount}w";
var duration_year_long$2 = "{amount, plural, =1 {# year} other {# years}}";
var duration_year_short$2 = "{amount}yr";
var empty_state_subtitle_fallback$2 = "There is nothing at the moment. Come back later";
var empty_state_title_fallback$2 = "Nothing to display";
var every_day$2 = "Every {num}d";
var every_hour$2 = "Every {num}h";
var every_week$2 = "Every {num}w";
var findhiddencameras_emptystate_subtitle$2 = "No cameras found.";
var findhiddencameras_emptystate_title$2 = "Everything's fine.";
var findhiddencameras_foundcameras_title$2 = "Revealed cameras";
var findhiddencameras_helper_0found$2 = "0 device found";
var findhiddencameras_helper_totdevice$2 = "{totDeviceString} found";
var findhiddencameras_helper_totdevice_1found$2 = "1 device ";
var findhiddencameras_helper_totdevice_manyfound$2 = "{tot} devices ";
var findhiddencameras_helper_totdevice_with_unknown$2 = "{totDeviceString} found, which {countUnknown} unknown";
var findhiddencameras_helper_type_babymonitor$2 = "Baby monitor";
var findhiddencameras_helper_type_ipcamera$2 = "IP camera";
var findhiddencameras_helper_type_monitordetector$2 = "Monitor detector";
var findhiddencameras_helper_type_photocamera$2 = "Photo camera";
var findhiddencameras_helper_type_securitysystem$2 = "Security system";
var findhiddencameras_progress_subtitle$2 = "Analysis at {progress}%. Please wait while we check with our systems to identify cameras";
var findhiddencameras_progress_title$2 = "Collecting cameras info";
var findhiddencameras_summary_title$2 = "Summary";
var findhiddencameras_toolresult_danger_subtitle$2 = "Detected {length} unknown active cameras. If these devices belong to you, acknowledge them manually and they won't show up in the report.";
var findhiddencameras_toolresult_danger_title$2 = "Unknown cameras found";
var findhiddencameras_toolresult_fingpedia_stats$2 = "Fing has identified {length} cameras to date.";
var findhiddencameras_toolresult_premium_subtitle$2 = "Protect your privacy through an advanced scan to detect video-recording devices.";
var findhiddencameras_toolresult_premium_title$2 = "Hidden camera check is disabled";
var findhiddencameras_toolresult_success_nofound_subtitle$2 = "Analysis found {length} active devices but no cameras.";
var findhiddencameras_toolresult_success_nofound_title$2 = "No camera found";
var findhiddencameras_toolresult_success_subtitle$2 = "Detected {length} known active cameras. Make sure the access to the cameras is protected against intrusion and you are good to go.";
var findhiddencameras_toolresult_success_title$2 = "Cameras found";
var findhiddencameras_toolresult_sync_subtitle$2 = "Sit tight! This may take a while. The duration of the test depends on your network size and the number of connected devices.";
var findhiddencameras_toolresult_sync_title$2 = "Searching hidden camera...";
var findhiddencameras_unrecognized_subtitle$2 = "Found {length} devices that Fing could not recognize. We cannot establish whether these devices are cameras or not.";
var findhiddencameras_unrecognized_title$2 = "Unrecognized devices";
var format_speed$2 = "{dw} Mbps / {up} Mbps";
var gender_female$2 = "Female";
var gender_male$2 = "Male";
var gender_other$2 = "Other";
var generic_VPN$2 = "VPN";
var generic_account$2 = "Account";
var generic_actions$2 = "Actions";
var generic_alert$2 = "Alert";
var generic_am$2 = "AM";
var generic_auto$2 = "Auto";
var generic_automatic$2 = "Automatic";
var generic_avg$2 = "Avg";
var generic_back$2 = "Back";
var generic_band$2 = "Band";
var generic_best$2 = "Best";
var generic_brandandmodel$2 = "Brand and Model";
var generic_bssid$2 = "BSSID";
var generic_cancel$2 = "Cancel";
var generic_change$2 = "Change";
var generic_changed$2 = "Changed";
var generic_check$2 = "Check";
var generic_clear$2 = "Clear";
var generic_close$2 = "Close";
var generic_completed$2 = "Completed";
var generic_confirm$2 = "Confirm";
var generic_connected_to$2 = "Connected to ";
var generic_continue$2 = "Continue";
var generic_country$2 = "Country";
var generic_data_not_available$2 = "Data not available";
var generic_delete$2 = "Delete";
var generic_description$2 = "Description";
var generic_details$2 = "Details";
var generic_device$2 = "Device";
var generic_dhcp$2 = "DHCP";
var generic_dhcp_proxy$2 = "DHCP Proxy WPAD";
var generic_disable_all$2 = "Disable all";
var generic_disabled$2 = "Disabled";
var generic_domain$2 = "Domain";
var generic_download_speed$2 = "Download speed";
var generic_edit$2 = "Edit";
var generic_edit_profile$2 = "Edit your profile";
var generic_email$2 = "Email";
var generic_enable_all$2 = "Enable all";
var generic_enabled$2 = "Enabled";
var generic_error$2 = "Error";
var generic_example$2 = "Example";
var generic_failed$2 = "Failed";
var generic_first_seen$2 = "First seen";
var generic_for$2 = "for";
var generic_help$2 = "Help";
var generic_help_on_fing$2 = "Help on Fing";
var generic_home$2 = "Home";
var generic_hotspot$2 = "Hotspot";
var generic_id$2 = "Id";
var generic_idle$2 = "Idle";
var generic_important$2 = "Important";
var generic_inspect$2 = "Inspect";
var generic_internet$2 = "Internet";
var generic_ip$2 = "IP";
var generic_lastchange$2 = "Last change";
var generic_link$2 = "Link";
var generic_link_speed$2 = "Link speed";
var generic_live$2 = "Live";
var generic_local$2 = "Local";
var generic_logo$2 = "Logo";
var generic_make$2 = "Make";
var generic_manage$2 = "Manage";
var generic_manual$2 = "Manual";
var generic_map_gpudisabled_link$2 = "here";
var generic_map_gpudisabled_message$2 = "Maps require GPU acceleration. You can enable it";
var generic_max$2 = "Max";
var generic_mbps_download$2 = "Mbps download";
var generic_mbps_upload$2 = "Mbps upload";
var generic_min$2 = "Min";
var generic_ms$2 = "ms";
var generic_ms_latency$2 = "Millis latency";
var generic_name$2 = "Name";
var generic_network$2 = "Network";
var generic_next$2 = "Next";
var generic_no$2 = "No";
var generic_no_internet$2 = "No Internet";
var generic_no_name$2 = "No name";
var generic_not_available$2 = "N/A";
var generic_not_connected$2 = "Not connected";
var generic_not_in_network$2 = "Not in network";
var generic_not_tracking$2 = "Not tracking";
var generic_notset$2 = "not set";
var generic_office$2 = "Office";
var generic_offline$2 = "Offline";
var generic_ok$2 = "Ok";
var generic_online$2 = "Online";
var generic_open$2 = "Open";
var generic_operatingsystem$2 = "Operating System";
var generic_optional$2 = "Optional";
var generic_or$2 = "or";
var generic_order_by$2 = "Order by";
var generic_os$2 = "OS";
var generic_outage$2 = "Outage";
var generic_outages$2 = "Outages";
var generic_pm$2 = "PM";
var generic_public$2 = "Public";
var generic_recent$2 = "Recent";
var generic_refresh$2 = "Refresh";
var generic_related_articles$2 = "Related articles";
var generic_rental$2 = "Rental";
var generic_report$2 = "Report";
var generic_result$2 = "Result";
var generic_running$2 = "Running";
var generic_save$2 = "Save";
var generic_security$2 = "Security";
var generic_see_result$2 = "See result";
var generic_seeall$2 = "See all";
var generic_send$2 = "Send";
var generic_service$2 = "Service";
var generic_settings$2 = "Settings";
var generic_share$2 = "Share";
var generic_show_data_for$2 = "Show data for";
var generic_signal$2 = "Signal";
var generic_size$2 = "Size";
var generic_source$2 = "Source";
var generic_ssid$2 = "SSID";
var generic_start$2 = "Start";
var generic_stop$2 = "Stop";
var generic_support$2 = "Support";
var generic_tracking$2 = "Tracking";
var generic_type$2 = "Type";
var generic_unknown$2 = "Unknown";
var generic_unrecognized$2 = "Unrecognized";
var generic_updating$2 = "Updating";
var generic_upgrade$2 = "Upgrade";
var generic_upload_speed$2 = "Upload speed";
var generic_view$2 = "View";
var generic_view_details$2 = "View details";
var generic_view_less$2 = "View less";
var generic_view_more$2 = "View more";
var generic_website$2 = "Website";
var generic_what_outage$2 = "What's an outage";
var generic_worst$2 = "Worst";
var generic_wps_enabled$2 = "WPS Enabled";
var generic_yes$2 = "Yes";
var generic_you$2 = "You";
var healtcheck_edit_dialog_placeholder$2 = "Enter list of target hosts";
var healthcheck_001_B$2 = "Device is not in network: no IP address";
var healthcheck_001_G$2 = "Device is in network: has a valid IP address";
var healthcheck_001_easy$2 = "You need an (IP) address for your computer to be in a network. Your computer/device needs to be in a network to communicate with other devices and reach Internet.";
var healthcheck_001_fix$2 = "If you are unable to connect to a wired network you should check the cables; if it’s a Wireless network, you should check the Wireless router. On Windows, you can click on the Network icon and run the Troubleshoot Problems option. On Mac, you can run the Wireless Diagnostics tool, available in the Spotlight Search. In some cases, even a laptop reboot can fix the problem.";
var healthcheck_001_tech$2 = "The check enumerates available network adapters to find an interface with a valid IPv4 address.";
var healthcheck_002_B$2 = "Device IP address is assigned static, not by DHCP";
var healthcheck_002_G$2 = "Device IP address is assigned static";
var healthcheck_002_easy$2 = "Your (IP) address for your computer in your network is not assigned by your router, but it's manually configured instead. You should avoid this unless you understand networking.";
var healthcheck_002_tech$2 = "The check alerts when the device IP address is assigned statically and not got from DHCP.";
var healthcheck_003_B$2 = "Device is not in network: trying to get an IP address from DHCP";
var healthcheck_003_G$2 = "Device is in network: successfully got an IP address from DHCP";
var healthcheck_003_easy$2 = "You need an IP address for your computer to be in a network and thus be able to communicate with other devices and reach Internet. In nowawadays local networks, Wi-Fi and Ethernet, IP addresses are assigned to each PC/device as it joins the network automatically, without any manual pre-configuration. The process and service is <b>DHCP</b>: Dynamic Host Configuration Protocol.";
var healthcheck_003_fix$2 = "If your device is not getting an address you cannot enter the network. You should try to disconnect and reconnect to the network. If the problem persists you should try to reboot your device. If this doesn’t fix it then your DHCP could be in need of a reboot: you could power cycle your home router, to make sure it starts fresh.";
var healthcheck_003_tech$2 = "The check ensures that your current IP address is assigned by a DHCP and it's not manual.";
var healthcheck_004_B$2 = "Computer clock is not synchronized";
var healthcheck_004_G$2 = "Computer clock is synchronized";
var healthcheck_004_easy$2 = "If your computer clock is not synchronized it might affect several functionalities of your PC. Even website browsing can be impacted since security certificates are always validated against expiration date.";
var healthcheck_004_fix$2 = "You should open Date & Time preferences in your System settings and make sure that <i>Set date and time automatically</i> is enabled.";
var healthcheck_004_tech$2 = "The check compares your local time of the PC with a remote time server.";
var healthcheck_005_B$2 = "No DNS server is configured";
var healthcheck_005_G$2 = "DNS server is configured";
var healthcheck_005_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Your PC needs to have at least one DNS configured in order for you to reach and browse Internet.";
var healthcheck_005_fix$2 = "In a safe and sound network the DNS servers are automatically sent to your PC by your router. You should check the network configuration of your computer to make sure it’s OK. You could also check your router configuration to make sure it has a valid DNS set. Sometimes your local or Provider DNS servers are malfunctioning and you can bypass them by manually configuring in your local PC common standard DNS servers like e.g. Google DNS: 8.8.8.8 If you are entering a public Wi-Fi that needs a login, it might happen that the login page doesn’t work and you are unable to access the Internet. A good workaround is to open your browser and manually visit the following page, which forces the so-called “captive portal” to load and allows you to log in: captive.apple.com";
var healthcheck_005_tech$2 = "The check verifies that one or more DNS servers are configured in your PC.";
var healthcheck_006_B$2 = "No network gateway is configured";
var healthcheck_006_G$2 = "Gateway is configured";
var healthcheck_006_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet.";
var healthcheck_006_fix$2 = "If the gateway is not configured there could be multiple causes, so there isn’t a specific fix for this problem. You should look for other issues reported by other checks and try the solutions suggested.";
var healthcheck_006_tech$2 = "The check verifies that a default route to the Internet is available on the enabled network interface, via a local next hop which will be the gateway to the Internet.";
var healthcheck_007_B$2 = "Wi-Fi strength is unreliable";
var healthcheck_007_G$2 = "Wi-Fi strength is good or acceptable";
var healthcheck_007_easy$2 = "Wireless signal strength is measured in dBm (decibel milliwatts) and is, confusingly, expressed as negative values, that's why Fing translates it to a percentage value on a scale of 1-100%. If you get a weak signal warning, it means that your PC isn’t getting an optimal Wireless signal in that specific location, and this impacts the access to both the local network as well as Internet browsing.";
var healthcheck_007_fix$2 = "First of all, make sure your router or other wireless access points are placed high up, with an unobstructed view of the widest area of your home; don’t hide your access point behind a TV or inside a cabinet. Another possible cause of poor signal is Wi-Fi channel conflicts: if you and a neighbor are both using the same network channel, the signals can interfere with one another and slow down your connection. You can scan the spectrum for activity on each channel and if you notice that your network and another network are on the same channel, try switching your router to a different one: login to your router administrative panel, find the wireless configuration and edit the channel properties switching the selected channel or setting it to automatic channel selection, if available.";
var healthcheck_007_tech$2 = "The check alerts when the Wi-Fi Signal strength is below thresholds: above -60 dBm (66%) signal is good, until -75 dBm (40%) it's not strong but acceptable, beyond -75 dBm it's unreliable.";
var healthcheck_008_B$2 = "Ethernet link speed is not optimal";
var healthcheck_008_G$2 = "Ethernet link speed is fast";
var healthcheck_008_easy$2 = "Wired network link speed is measured in Mbps (Megabit per second). Higher value is faster, better. In modern networks you should aim for 1Gbps (equal to 1000Mbps), or even more in corporate networks.";
var healthcheck_008_fix$2 = "Modern PC's network card support 1Gbps, so first of all you should check cables and make sure they are <i>Gigabit Ethernet Cable</i>. You should also check the router and the optional switches in the middle, to make sure your cable is connected to Gigabit port.";
var healthcheck_008_tech$2 = "The check alerts when your wired link speed is below 1Gbps.";
var healthcheck_009_B$2 = "Network Adapter is not active";
var healthcheck_009_G$2 = "Network Adapter is active";
var healthcheck_009_easy$2 = "You need an active network adapter in your computer to be in a network. It can be wired (Ethernet) or wireless (Wi-Fi). An active adapter gets an (IP) address for your computer to be in a network. Your computer/device needs to be in a network to communicate with other devices and reach Internet.";
var healthcheck_009_fix$2 = "You should open network settings/configuration on your laptop, e.g. on Windows you can click on Network icon and make sure that your adapter is not disabled. You can also run <i>Troubleshoot Problems</i> option. In some cases a laptop reboot can fix the situation.";
var healthcheck_009_tech$2 = "The check enumerates available network adapters to find the active/enabled network interface.";
var healthcheck_00A_G$2 = "Computer DNS overrides network configuration";
var healthcheck_00A_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Your PC needs to have at least one DNS configured in order for you to reach and browse Internet.<br/>The check informs you that DNS configuration of your PC is overriding network defaults.";
var healthcheck_00A_tech$2 = "The informational check tells you if your computer DNS configuration overrides network default DNS servers.";
var healthcheck_010_G$2 = "Antivirus installed";
var healthcheck_010_easy$2 = "An antivirus software is installed in the local computer.";
var healthcheck_010_tech$2 = "The informational check tells you if an antivirus software is intalled on your computer.";
var healthcheck_401_B$2 = "Device is not connected to a local network";
var healthcheck_401_G$2 = "Device is in a local network";
var healthcheck_401_easy$2 = "You need an (IP) address for your computer to be in a network. Your computer/device needs to be in a network to communicate with other devices and reach Internet.";
var healthcheck_401_fix$2 = "If you are unable to connect to a wired network you should check the cables; if it’s a Wireless network, you should check the Wireless router. On Windows, you can click on the Network icon and run the Troubleshoot Problems option. On Mac, you can run the Wireless Diagnostics tool, available in the Spotlight Search. In some cases, even a laptop reboot can fix the problem.";
var healthcheck_401_tech$2 = "The check enumerates available network adapters to find an interface with a valid IP network configuration: IP address, gateway, DNS.";
var healthcheck_402_B$2 = "You must provide a context for current network to activate advanced checks";
var healthcheck_402_G$2 = "You provided a context for current network";
var healthcheck_402_easy$2 = "By providing context for the current network you allow Fing to be sharper in its connectivity health checks.";
var healthcheck_402_fix$2 = "Tell Fing if the current network is a home network or rather a business or public one. This will make the warning disappear and also enable specific contextual connectivity health checks on the network.";
var healthcheck_402_tech$2 = "Setting a context for the current network changes and tunes the checks that Fing performs on it.";
var healthcheck_403_B$2 = "No route to DNS server";
var healthcheck_403_G$2 = "A valid route exists to DNS";
var healthcheck_403_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Your PC needs to have at least one DNS configured in order for you to reach and browse Internet.";
var healthcheck_403_fix$2 = "In a safe and sound network the DNS servers are automatically sent to your PC by your router and your PC is able to reach them via a valid route. You should check your local network configuration to make sure it's OK. You could also check your router configuration to make sure it has a valid DNS set. Sometimes your local or Provider DNS servers are malfunctioning and you can bypass them by manually configuring in your local PC common standard DNS servers like e.g. Google DNS: 8.8.8.8";
var healthcheck_403_tech$2 = "The check verifies that configured primary DNS server is reachable via a valid route.";
var healthcheck_404_B$2 = "No route to secondary DNS server";
var healthcheck_404_G$2 = "A valid route exists to secondary DNS";
var healthcheck_404_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Your PC needs to have at least one DNS configured in order for you to reach and browse Internet. Optionally there could be additional DNS configured, called secondary DNS: when the primary DNS fails, the PC tries again on the secondary DNS.";
var healthcheck_404_fix$2 = "In a safe and sound network the DNS servers are automatically sent to your PC by your router and your PC is able to reach them via a valid route. You should check your local network configuration to make sure it's OK. You could also check your router configuration to make sure it has a valid DNS set. Sometimes your local or Provider DNS servers are malfunctioning and you can bypass them by manually configuring in your local PC common standard DNS servers like e.g. Google DNS: 8.8.8.8";
var healthcheck_404_tech$2 = "The check verifies that configured secondary DNS servers are reachable via a valid route.";
var healthcheck_405_B$2 = "No route to network gateway";
var healthcheck_405_G$2 = "A valid route exists to network gateway";
var healthcheck_405_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet. Fing warns you in case the current network configuration of the PC is not correct to reach and talk to the network gateway or router.";
var healthcheck_405_tech$2 = "The check verifies that the network gateway (i.e. next hop of the default route) is reachable via a valid route (local or remote).";
var healthcheck_406_B$2 = "Network netmask (prefix length) is not tuned correctly";
var healthcheck_406_G$2 = "Network netmask (prefix length) is correctly configured";
var healthcheck_406_easy$2 = "A subnet mask is a number that defines the range of (IP) addresses available within a network. It uses the same format as IP address, but in negative format, e.g. 255.255.255.0 is a typical <i>Class C</i> mask including a range of 256 addresses. An alternate form to express it is as network prefix length, meaning how many bits of the network address are stable: a class C network is /24, meaning that 24 bits, first 3 bytes of the address, are not varying.";
var healthcheck_406_fix$2 = "An oversized network is much slower than a correctly sized one. E.g. a home network with dozen devices not being a Class C is definitely not tuned correctly. In order to fix it you don't have to change your local PC configuration but rather login into the router configuration and edit it. To make sure every device gets the new updated configuration you should also power cycle or reconnect all connected devices.";
var healthcheck_406_tech$2 = "The check verifies that your network subnet mask (or network prefix length) is not oversized. Although networking standards recommend to always prefer multicast and broadcast when searching for networking services and devices, many modern IoT devices have still been using unicast sweeps to find peers: this means that lookup, onboarding, pairing or service usage when you have a big network will make the device lookup for the service on a very big number of possible devices, instead of just 256/512. A good example of this is also Windows workgroup: NetBIOS is unicast, so lookup of other PC and printers in a big network takes much longer. The same happens as well to network monitoring software like Fing, Fingbox, and so on: these apps leverage ARP-sweep or ping or similar, so the time taken by a network discovery is proportional to the network size.";
var healthcheck_407_B$2 = "Network gateway is not reachable";
var healthcheck_407_G$2 = "Network gateway is reachable";
var healthcheck_407_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet. Fing warns you in case the gateway or router is not currently reachable, thus impacting access to Internet.";
var healthcheck_407_fix$2 = "If you cannot connect to the gateway, you are not able to access the Internet. If it is a wired connection you should check the cables; if it's a Wireless one, then you should check your Wireless router. On Windows you can click on the Network icon and run the Troubleshoot Problems option. If the problem persists, you should check if the router is on, and working fine, e.g. by checking if its LEDs are all green.";
var healthcheck_407_tech$2 = "The check verifies that the network gateway is reachable and active, i.e. answering ARP requests.";
var healthcheck_408_B$2 = "Unable to reach local DNS";
var healthcheck_408_G$2 = "Local DNS is reachable";
var healthcheck_408_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Fing warns you in case your network has a local DNS server configured to answer queries, but it appears that it's not correctly answering to requests.";
var healthcheck_408_fix$2 = "You should check your router configuration to make sure it has valid DNS set and if it's itself you could think about power cycling it. You could try bypassing the local network DNS by manually configuring in your local PC common standard DNS servers like e.g. Google DNS: 8.8.8.8";
var healthcheck_408_tech$2 = "The check verifies that configured local DNS server is actually reachable and alive, answering to queries.";
var healthcheck_409_B$2 = "Secondary DNS is not reachable";
var healthcheck_409_G$2 = "Secondary Local DNS is reachable";
var healthcheck_409_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Fing warns you when your network has secondary local DNS server configured to answer queries, but it appears that it's not correctly answering to requests.";
var healthcheck_409_tech$2 = "The check verifies that configured secondary local DNS server is actually reachable and alive, answering to queries.";
var healthcheck_40A_B$2 = "Some device is not able to get in network";
var healthcheck_40A_G$2 = "Devices are successfully entering the network";
var healthcheck_40A_easy$2 = "Devices need an (IP) address to be in the network and thus be able to communicate with other devices and reach the Internet. In modern local, Wi-Fi and Ethernet networks, the IP address is automatically assigned to each PC/device when it joins the network, without any manual pre-configuration. This process and service is called DHCP: Dynamic Host Configuration Protocol. This check verifies that the network configuration sent by DHCP to the devices is accurate and optimal.";
var healthcheck_40A_fix$2 = "First check should be on the target device which is experiencing issues in getting into network: check its configuration and make sure the network configuration (network name, password, etc) to your Wi-Fi is correct. A power cycle of the specific device can be of help in some cases, as at startup it'll try again to enter the network. In some situations it might happen that your router/DHCP ran out of addresses to assign to new devices. Thus, as a last resort step, you could check your router status and power cycle the router: upon reboot it'll restart assigning addresses to devices; please be aware that rebooting your router will cause a temporary interruption of any networking for all devices.";
var healthcheck_40A_tech$2 = "The check monitors DHCP requests of other devices that enter the network: a warning is raised if some device sends multiple requests but don't get any valid address to stay in the local network.";
var healthcheck_40B_B$2 = "Google DNS is not in use";
var healthcheck_40B_G$2 = "Google DNS is in use";
var healthcheck_40B_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. Your PC needs to have at least one DNS configured in order for you to reach and browse Internet. Google provides free DNS service worldwide with stable DNS addresses as: 8.8.8.8 and 8.8.4.4";
var healthcheck_40B_tech$2 = "The informational check tells you if your DNS configuration includes Google DNS (8.8.8.8)";
var healthcheck_40C_B$2 = "Quad9 DNS is not in use";
var healthcheck_40C_G$2 = "Quad9 DNS is in use";
var healthcheck_40C_easy$2 = "Everything on the Internet, including websites, live at a numerical IP address. The Domain Name System, or DNS, translates these numerical IP addresses into human-readable domain names that we all know and remember. If your DNS settings are not working correctly, or you’re still using defaults, you may be at risk for cybercrime and performance issues. Quad9 is a free security solution that uses the DNS to protect your system against the most common cyber threats. It improves your system’s performance, plus, it preserves and protects your privacy. It’s like an immunization for your computer and devices.";
var healthcheck_40C_tech$2 = "The informational check tells you if your DNS configuration includes Quad9 DNS (9.9.9.9)";
var healthcheck_40D_B$2 = "DNSFilter DNS is not in use";
var healthcheck_40D_G$2 = "DNSFilter DNS is in use";
var healthcheck_40D_easy$2 = "DNSFilter provides paid safe DNS: easily protect your entire organization from online security threats and undesirable content. With powerful artificial intelligence and an industry-leading global network behind DNSFilter, you can be safe and secure in mere minutes.";
var healthcheck_40D_tech$2 = "The informational check tells you if your DNS configuration uses DNSFilter";
var healthcheck_40E_B$2 = "Cloudflare DNS is not in use";
var healthcheck_40E_G$2 = "Cloudflare DNS is in use";
var healthcheck_40E_easy$2 = "Cloudflare provides fast and secure managed DNS as a built-in service on its network; DNS is available on all free and paid subscription plans. Domain name queries are processed within milliseconds,and a robust global Anycast network ensures DNS availability.";
var healthcheck_40E_tech$2 = "The informational check tells you if your DNS configuration uses Cloudflare DNS (1.1.1.1)";
var healthcheck_40F_B$2 = "Gateway is not healthy";
var healthcheck_40F_G$2 = "Gateway is healthy and forwarding traffic";
var healthcheck_40F_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet. Fing warns you in case the router or gateway is not currently allowing you to reach Internet.";
var healthcheck_40F_fix$2 = "You should check if your network router or gateway is switched on and works properly, e.g. by checking if its LEDs are all green. Temporary Internet outages might happen for several causes, but if the problem persists you should get in touch with your Internet Service Provider.";
var healthcheck_40F_tech$2 = "The check verifies that the network gateway is active and is allowing you to reach the Internet: Fing tries to connect to some connectivity-check web service.";
var healthcheck_410_B$2 = "Local network cannot be discovered";
var healthcheck_410_G$2 = "Local network can be discovered to list devices";
var healthcheck_410_easy$2 = "Beside the connectivity health check, which informs you about possible issues with your PC and in your network, Fing also performs a search for all of devices in your local network, the full list of devices with information about the type, brand model, and much more, is available in <i>Devices</i> section.";
var healthcheck_410_tech$2 = "The check verifies that local network discovery can be successfully performed.";
var healthcheck_411_G$2 = "Network Gateway recognition";
var healthcheck_411_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet. Fing provides you with relevant details about your router or gateway, useful to know its specific type, brand, model and version.";
var healthcheck_411_tech$2 = "The informational check provides details about your network gateway.";
var healthcheck_412_G$2 = "The network has new devices";
var healthcheck_412_easy$2 = "Knowing if there are new devices in your network that recently joined it for the first time is relevant for security aspects: if you are the owner of this network, make sure these new devices are not intruders. In the Devices section, Fing provides a list of all devices, online and offline, with relevant details like device type, brand and model. Thus you can check the list and make sure they are all expected. In case you have recently been experiencing issues in your network or Internet connectivity, knowing the list of recently added devices can be a hint to investigate if the new device is degrading network performances or causing conflicts with other devices.";
var healthcheck_412_tech$2 = "The informational check tells you if new devices recently joined your network for the first time.";
var healthcheck_415_B$2 = "DHCP is not healthy";
var healthcheck_415_G$2 = "DHCP is healthy and allowing devices to enter network";
var healthcheck_415_easy$2 = "Devices need an (IP) address to be in network and thus be able to communicate with other devices and reach Internet. In modern local, Wi-Fi and Ethernet networks, IP address is automatically assigned to each PC/device when it joins the network, without any manual pre-configuration. This process and service is called <b>DHCP</b>: Dynamic Host Configuration Protocol. Your network needs to have an always running and single DHCP server assigning addresses to devices that want to enter the network.";
var healthcheck_415_fix$2 = "In case there is no DHCP active, it might have happened that your router/DHCP ran out of addresses to assign to new devices; as a last resort step, you could check your router status and power cycle the router: upon reboot it'll restart assigning addresses to devices; please be aware that rebooting your router will cause a temporary interruption of any networking for all devices.<br/>In case instead the checks reports more than one DHCP running in the network, you should make sure to disable or turn off DHCP's until there is a single one. You should look for other running DHCP's in routers, switches and security devices.";
var healthcheck_415_tech$2 = "The check verifies that a single DHCP server is active: a warning is raised if there is no DHCP or when there is more than one DHCP server offering IP addresses.";
var healthcheck_416_B$2 = "DHCP configuration is not optimal";
var healthcheck_416_G$2 = "DHCP configuration is good";
var healthcheck_416_easy$2 = "Devices need an (IP) address to be in network and thus be able to communicate with other devices and reach Internet. In modern local, Wi-Fi and Ethernet networks, IP address is automatically assigned to each PC/device when it joins the network, without any manual pre-configuration. This process and service is called <b>DHCP</b>: Dynamic Host Configuration Protocol. The check verifies that network configuration sent by DHCP to devices is accurate and optimal.";
var healthcheck_416_fix$2 = "In case the DHCP configuration is not optimal, you might want to check your router configuration and adjust it.";
var healthcheck_416_tech$2 = "The check verifies that DHCP params configuration is good and optimal (MTU, DNS, lease time).";
var healthcheck_417_G$2 = "Port forwarding is enabled in gateway via UPnP";
var healthcheck_417_easy$2 = "Devices and programs can automatically bypass the firewall to allow incoming connections with no additional control or authorization via UPnP. Applications can expose your devices without control. This can be useful for Internet calls and online gaming but potentially dangerous.";
var healthcheck_417_fix$2 = "In case you want to disable it, you should check your router/gateway manual or administrative page and find out if it's possible to disable the UPnP feature.";
var healthcheck_417_tech$2 = "Your gateway allows unchecked UPnP port forwarding";
var healthcheck_418_G$2 = "Port forwarding is enabled in gateway via NAT-PMP";
var healthcheck_418_easy$2 = "Devices and programs can automatically bypass the firewall to allow incoming connections with no additional control or authorization via NAT-PMP. Applications can expose your devices without control. This can be useful for Internet calls and online gaming but potentially dangerous.";
var healthcheck_418_fix$2 = "In case you want to disable it, you should check your router/gateway manual or administrative page and find out if it's possible to disable the NAT-PMP feature.";
var healthcheck_418_tech$2 = "Your gateway allows unchecked NAT-PMP port forwarding";
var healthcheck_419_G$2 = "UPnP Port forwarding is not active in gateway";
var healthcheck_419_easy$2 = "Devices and programs won't be able to automatically bypass the firewall to allow incoming connections with no additional control or authorization via UPnP.";
var healthcheck_419_fix$2 = "In case you want to enable it, you should check your router/gateway manual or administrative page and find out if it's possible to enable the UPnP feature.";
var healthcheck_419_tech$2 = "Your gateway does not allow unchecked UPnP port forwarding";
var healthcheck_41A_G$2 = "NAT-PMP Port forwarding is not active in gateway";
var healthcheck_41A_easy$2 = "Devices and programs won't be able to automatically bypass the firewall to allow incoming connections with no additional control or authorization via NAT-PMP.";
var healthcheck_41A_fix$2 = "In case you want to enable it, you should check your router/gateway manual or administrative page and find out if it's supported by your router so that you can manually enable the NAT-PMP feature.";
var healthcheck_41A_tech$2 = "Your gateway does not allow unchecked NAT-PMP port forwarding";
var healthcheck_801_B$2 = "Not connected to Internet";
var healthcheck_801_G$2 = "Connected to Internet";
var healthcheck_801_easy$2 = "A connectivity check towards Internet to verify if your computer is connected to Internet and thus able to access to websites, email, browsing, etc.";
var healthcheck_801_fix$2 = "If you are not connected to Internet you should check your router status and cables. In some cases even a power cycle of the router can fix the situation.";
var healthcheck_801_tech$2 = "The check verifies that your PC can reach Internet: Fing connects to several ad-hoc connectivity check web services.";
var healthcheck_802_B$2 = "DNS resolution is not working";
var healthcheck_802_G$2 = "DNS resolution is working";
var healthcheck_802_easy$2 = "DNS stands for Domain Name Resolution: in essence DNS is a database that links meaningful names (host names), such as <i>www.fing.com</i>, to specific IP addresses that can be reached over the Internet or in local networks. If your configured DNS is not processing and answering queries you are not able to use Internet.";
var healthcheck_802_fix$2 = "In a safe and sound network the DNS servers are automatically sent to your PC by your router. You should check your local network configuration to make sure it's OK. You could also check your router configuration to make sure it has a valid DNS set. Sometimes your local or Provider DNS servers are malfunctioning and you can bypass them by manually configuring in your local PC common standard DNS servers like e.g. Google DNS: 8.8.8.8";
var healthcheck_802_tech$2 = "The check verifies that configured DNS server is actually reachable and alive, answering to DNS queries.";
var healthcheck_803_B$2 = "You are not on a business line";
var healthcheck_803_G$2 = "You are on a business line";
var healthcheck_803_easy$2 = "Business Internet has more features and benefits than residential, and is worth the higher cost. Residential internet often has restricted upload speeds and comes with only best-effort service agreements, while business internet demands faster upload speeds in order to perform operations. In addition, ISPs provide guaranteed service and uptimes for business Internet.";
var healthcheck_803_tech$2 = "The informational check tells you if your connection is a Business Internet line.";
var healthcheck_804_B$2 = "Google web cannot be reached";
var healthcheck_804_G$2 = "Google web can be reached";
var healthcheck_804_easy$2 = "Google allows you to search the world's information, including webpages, images, videos and more. Google also provides many other services, such as: email, calendar, smartphone operating system (Android), smart assistant, and many more.";
var healthcheck_804_tech$2 = "The check verifies that www.google.com is browsable.";
var healthcheck_805_B$2 = "Amazon cannot be reached";
var healthcheck_805_G$2 = "Amazon can be reached";
var healthcheck_805_easy$2 = "Amazon website is an online store of products of all sorts. Amazon also provides Internet services known as AWS, Amazon Web Services, used by many businesses worldwide to build cloud services in a virtualized environment.";
var healthcheck_805_tech$2 = "The check verifies that www.amazon.com is browsable.";
var healthcheck_806_B$2 = "Netflix cannot be reached";
var healthcheck_806_G$2 = "Netflix can be reached";
var healthcheck_806_easy$2 = "Netflix is an online video streaming service that allows paying subscribers to watch TV series, movies, documentaries and much more.";
var healthcheck_806_tech$2 = "The check verifies that www.netflix.com is browsable.";
var healthcheck_807_B$2 = "Facebook cannot be reached";
var healthcheck_807_G$2 = "Facebook can be reached";
var healthcheck_807_easy$2 = "Facebook is a popular free social networking website that allows registered users to create profiles, upload photos and videos, send messages and keep in touch.";
var healthcheck_807_tech$2 = "The check verifies that www.facebook.com is browsable.";
var healthcheck_808_B$2 = "WhatsApp is not available";
var healthcheck_808_G$2 = "WhatsApp is available";
var healthcheck_808_easy$2 = "WhatsApp is the name of a mobile messaging app for Android, iPhone, Windows Phone, and for Mac/Windows PCs. WhatsApp allows users to make free voice calls, face-to-face video calls and send text messages.";
var healthcheck_808_tech$2 = "The check verifies that web.whatsapp.com is browsable.";
var healthcheck_809_G$2 = "Provider was stable over the past 7 days";
var healthcheck_809_easy$2 = "The check verified with Fing Internet Outage Detector that your ISP had no widespread outages in the last 7 days. Fing outage detection is a free service that provides you awareness of your connectivity quality in real-time, able to automatically detect and report widespread outages of Internet Service Providers, worldwide.";
var healthcheck_809_tech$2 = "The check verified that your ISP was stable over the last 7 days.";
var healthcheck_80A_G$2 = "Provider was not flawless over the past 7 days";
var healthcheck_80A_easy$2 = "The check verified with Fing Internet Outage Detector that your ISP was not flawless over the past week. Fing outage detection is a free service that provides you awareness of your connectivity quality in real-time, able to automatically detect and report widespread outages of Internet Service Providers, worldwide.";
var healthcheck_80A_tech$2 = "The check warns you that your ISP had outages over the past week.";
var healthcheck_80B_G$2 = "VPN/Tunneled Internet connection";
var healthcheck_80B_easy$2 = "A VPN, or Virtual Private Network, allows you to create a secure connection to another network over the Internet. VPNs can be used to access region-restricted websites, shield your browsing activity from prying eyes on public Wi-Fi, and more.";
var healthcheck_80B_tech$2 = "The informational check detects if your connection is tunneled, like e.g. with a VPN.";
var healthcheck_80C_B$2 = "Microsoft Outlook Office 365 is not available";
var healthcheck_80C_G$2 = "Microsoft Outlook Office 365 is available";
var healthcheck_80C_easy$2 = "Microsoft Outlook is a personal information manager from Microsoft, available as a part of the Microsoft Office suite. Primarily an email application, it also includes a calendar, task manager, contact manager, note taking, journal, and web browsing.";
var healthcheck_80C_tech$2 = "The check verifies that outlook.office.com is reachable.";
var healthcheck_80D_G$2 = "Internet connection via Hotspot";
var healthcheck_80D_easy$2 = "Modern smartphones and mobile devices allow to share Internet connection by setting up a mobile hotspot: a Wi-Fi network exposed by the smartphone and where you can connect your devices like a laptop to reach Internet.";
var healthcheck_80D_tech$2 = "The informational check detects if your Internet connection is via Hotspot/tethering.";
var healthcheck_80E_G$2 = "Gateway directly connected to public Internet";
var healthcheck_80E_easy$2 = "Your gateway has a public Internet address and can be probed by anyone on the Internet";
var healthcheck_80E_tech$2 = "The informational check detects if your gateway is directly connected to public Internet.";
var healthcheck_80F_G$2 = "Gateway connected to a private network";
var healthcheck_80F_easy$2 = "Your gateway's external IP address is private. The router/gateway is not directly reachable from the public Internet.";
var healthcheck_80F_tech$2 = "The informational check detects if your gateway is connected to a private network.";
var healthcheck_810_B$2 = "Custom targets are not reachable";
var healthcheck_810_G$2 = "Custom targets are reachable";
var healthcheck_810_tech$2 = "The check verifies that your custom targets are reachable and browsable.";
var healthcheck_card_advice_link$2 = "Get advice now";
var healthcheck_card_advice_subtitle$2 = "To help address your connectivity issues, share your scan results with friends or the Fing Community. If your Wifi connection is not working, you can still send scan results using your smartphone.";
var healthcheck_card_advice_title$2 = "Need some advice?";
var healthcheck_card_connectivity_subtitle$2 = "Your network could be experiencing issues with allowing new devices in. Typical workaround is power cycling the router.";
var healthcheck_card_connectivity_title$2 = "Connectivity of other devices";
var healthcheck_card_publicwifi_subtitle$2 = "You are not able to reach Internet and the most probable cause is that you are entering a public Wi-Fi that needs login.";
var healthcheck_card_publicwifi_title$2 = "Entering a public Wi-Fi?";
var healthcheck_generic_code$2 = "Code {code}: ";
var healthcheck_healthsummary_fail_limitedconnectivity_subtitle$2 = "Your device is connected to the network, but network has limited connectivity. You cannot reach Internet, please check your router.";
var healthcheck_healthsummary_fail_manyissue_subtitle$2 = "You have a number of issues to be fixed.";
var healthcheck_healthsummary_fail_networkissue_subtitle$2 = "Your device is connected to the network and you can reach Internet, but network is experiencing issues.";
var healthcheck_healthsummary_fail_noconnection_subtitle$2 = "Your device is not connected to a network. Please make sure your Wi-Fi is enabled or check cables if you are using ethernet.";
var healthcheck_healthsummary_fail_title$2 = "You have connectivity problems";
var healthcheck_healthsummary_link_report$2 = "See report";
var healthcheck_healthsummary_refresh_button_text_one$2 = "Updates are automatic, but you can also";
var healthcheck_healthsummary_refresh_button_text_two$2 = "to force a new check now";
var healthcheck_healthsummary_refresh_running$2 = "Please wait while Fing checks your network setup";
var healthcheck_healthsummary_running_subtitle$2 = "Fing constantly checks your network setup and verifies your connection to Internet.";
var healthcheck_healthsummary_running_title$2 = "Connectivity check in progress";
var healthcheck_healthsummary_success_subtitle$2 = "Fing constantly checks your network setup and verifies your connection to Internet.";
var healthcheck_healthsummary_success_title$2 = "You are connected to Internet";
var healthcheck_healthsummary_warning_internet_subtitle$2 = "You reach Internet but you should check some possible issue. ";
var healthcheck_healthsummary_warning_local_subtitle$2 = "You have warnings in your device configuration.";
var healthcheck_healthsummary_warning_network_subtitle$2 = "Your network is working but something needs attention";
var healthcheck_healthsummary_warning_title$2 = "You have warnings";
var healthcheck_help_dialog_action$2 = "Get advice";
var healthcheck_help_dialog_failurebadge$2 = "In case of failure";
var healthcheck_help_dialog_successbadge$2 = "In case of success";
var healthcheck_help_dialog_tab_howfix$2 = "How can I fix this";
var healthcheck_help_dialog_tab_means$2 = "What it means for me";
var healthcheck_help_dialog_tab_techdef$2 = "Technical definition";
var healthcheck_internet$2 = "Internet check: performed reaching Internet from your current network";
var healthcheck_local$2 = "Local check: performed locally on your computer";
var healthcheck_network$2 = "Network check: information are gathered from your current network";
var healthcheck_report_askhelp_description$2 = "Fing can help you solve issues with your connection or your home technology by taking a snapshot of your network setup that you can share with your IT department.";
var healthcheck_report_askhelp_modal_share_action$2 = "Start sharing";
var healthcheck_report_askhelp_privacy$2 = "You can always control which details to share about your home environment.";
var healthcheck_report_askhelp_processing_title$2 = "We are processing your request";
var healthcheck_report_askhelp_title$2 = "Share this report with your Support Team";
var healthcheck_report_checkinfo_modal_checkcode_howcanifix$2 = "How I can fix this";
var healthcheck_report_checkinfo_modal_checkcode_title$2 = "Information about health check: {code}";
var healthcheck_report_checkinfo_modal_checkcode_whatitmeans$2 = "What it means for me";
var healthcheck_report_checkinfo_modal_footer_link$2 = "Get advice now";
var healthcheck_report_checkinfo_modal_footer_title$2 = "Could not solve your problems?";
var healthcheck_report_checkinfo_modal_title$2 = "Informational check";
var healthcheck_report_context_picker$2 = "Select the network profile below to enable specific checks";
var healthcheck_report_customtarget_modal_area_label$2 = "Custom targets";
var healthcheck_report_customtarget_modal_area_small$2 = "One line per target, https and http targets are accepted; custom port and URL accepted.";
var healthcheck_report_customtarget_modal_failure_title$2 = "Failure case: {fail}";
var healthcheck_report_customtarget_modal_nopremium_title$2 = "Advanced: available for Fing subscribers";
var healthcheck_report_customtarget_modal_premium_title$2 = "Advanced: included in your subscription";
var healthcheck_report_customtarget_modal_save_action$2 = "Save targets";
var healthcheck_report_customtarget_modal_tech_description$2 = "The check verifies that your custom targets are reachable and browsable. https and http targets are supported, also with specific port and URL. The check passes if hostname is resolved, connection can be established and HTTP status is 200, 301 or 302.";
var healthcheck_report_customtarget_modal_tech_title$2 = "Technical definition";
var healthcheck_report_customtarget_modal_title$2 = "Information about health check: {code}";
var healthcheck_report_emptystate$2 = "Everything's fine, no {filter} here!";
var healthcheck_report_emptystate_component_message$2 = "Use the buttons above to select a different group.";
var healthcheck_report_emptystate_premium$2 = "Please wait while perform all checks";
var healthcheck_report_geoloc_info$2 = "Internet address located in {name} {tz}";
var healthcheck_report_geoloc_location$2 = "location";
var healthcheck_report_geoloc_timezone$2 = ", with time zone ";
var healthcheck_report_isp_info_descr$2 = "ISP is {name} in {loc}, your public address is {address}";
var healthcheck_report_isp_info_message$2 = "No detailed stats available for this ISP";
var healthcheck_report_isp_info_stats_message_download$2 = "ISP average speed in location is download {number} Mbps, ";
var healthcheck_report_isp_info_stats_message_share$2 = " market share of {number}%";
var healthcheck_report_isp_info_stats_message_upload$2 = " upload {number} Mbps, ";
var healthcheck_report_mute_action$2 = "Mute";
var healthcheck_report_mute_dialog_mutecheck$2 = "Mute check";
var healthcheck_report_mute_dialog_mutecheck_description$2 = "Warnings from this check on current network will be dismissed and reported just at info level.";
var healthcheck_report_mute_dialog_unmutecheck$2 = "Unmute check";
var healthcheck_report_mute_dialog_unmutecheck_description$2 = "Warnings will be restored for this check on current network.";
var healthcheck_report_nettype_eth$2 = "Wired network {address}";
var healthcheck_report_nettype_ethwifi$2 = "Wired and Wireless network {address} with {aps} BSSID: {bssid}";
var healthcheck_report_nettype_wireless$2 = "Wireless network {address} with {aps} BSSID: {bssid}";
var healthcheck_report_network_gateway$2 = "Network gateway";
var healthcheck_report_networkinfo$2 = "{context} network";
var healthcheck_report_nicinfo_connection_info$2 = "IP address {address}, link speed {ethRate}";
var healthcheck_report_nicinfo_connection_info_nostation$2 = "IP address {address}, channel #{channel} at speed {speed}";
var healthcheck_report_nicinfo_connection_more_info$2 = "IP address {address}, Wi-Fi station {apbssid} on channel #{channel} at speed {speed}";
var healthcheck_report_qrcode_description$2 = "Just scan this QR Code from your smartphone. Our community of tech expert will receive your request to help you with your connectivity issues.";
var healthcheck_report_qrcode_title$2 = "No Internet?";
var healthcheck_report_qrcodemodal_title$2 = "Send your report from a smartphone";
var healthcheck_report_radio_button_all$2 = "All";
var healthcheck_report_radio_button_fail$2 = "Fail";
var healthcheck_report_radio_button_info$2 = "Info";
var healthcheck_report_radio_button_premium$2 = "Advanced features";
var healthcheck_report_radio_button_warn$2 = "Warn";
var healthcheck_report_table_header_state$2 = "State";
var healthcheck_report_table_header_what$2 = "What does Fing check?";
var healthcheck_report_table_header_where$2 = "Where";
var healthcheck_report_ticket$2 = "Your ticket";
var healthcheck_report_unmute_action$2 = "Unmute";
var healthcheck_status_check_running_subtitle$2 = "{completed} checks completed, {skipped} remaining.";
var healthcheck_status_check_running_title$2 = "Analysing your setup";
var healthcheck_status_code_subtitle$2 = "Health check code: {code}.";
var healthcheck_status_ok_nopremium_subtitle$2 = "{completed} checks completed, {premium} advanced checks skipped.";
var healthcheck_status_ok_subtitle$2 = "{completed} checks completed.";
var healthcheck_status_ok_title$2 = "All good in your network";
var healthcheck_status_problems_captive_subtitle$2 = "You are not able to reach Internet and the most probable cause is that you are entering a public Wi-Fi that needs login.";
var healthcheck_status_problems_generic_subtitle$2 = "You have a number of issues to be fixed.";
var healthcheck_status_problems_internet_subtitle$2 = "Your device is connected to the network, but network has limited connectivity. You cannot reach Internet, please check your router.";
var healthcheck_status_problems_local_subtitle$2 = "Your device is not connected to a network. Make sure your Wi-Fi is enabled, or check the cables if you are using ethernet.";
var healthcheck_status_problems_net_subtitle$2 = "Your device is connected to the network and you can reach Internet, but network is experiencing issues.";
var healthcheck_status_problems_title$2 = "You have connectivity problems";
var healthcheck_status_warn_dhcp_subtitle$2 = "Your network could be experiencing issues with allowing new devices in. Typical workaround is power cycling the router.";
var healthcheck_status_warn_generic_subtitle$2 = "You have a number of issues to be checked.";
var healthcheck_status_warn_internet_subtitle$2 = "You reach Internet, but you should check some potential issue. ";
var healthcheck_status_warn_local_subtitle$2 = "Your have warnings in your device configuration. ";
var healthcheck_status_warn_net_subtitle$2 = "Your network is working, but something needs attention. ";
var healthcheck_status_warn_title$2 = "You have warnings";
var healthcheck_statusbadge_fail$2 = "Failed";
var healthcheck_statusbadge_info$2 = "Info";
var healthcheck_statusbadge_skipped$2 = "Skipped";
var healthcheck_statusbadge_success$2 = "Passed";
var healthcheck_statusbadge_warn$2 = "Warning";
var healthcheck_v_gateway_I$2 = "Information about your router or gateway";
var healthcheck_v_gateway_easy$2 = "Routers and gateways are physical devices that join multiple wired or wireless networks together to allow intercommunication: even in a small home network you need at least one router to connect to the Internet. Fing provides you with relevant details about your router or gateway, useful to know its specific type, brand, model and version.";
var healthcheck_v_gateway_tech$2 = "The informational check provides details about your network gateway.";
var healthcheck_v_geoloc_I$2 = "Geolocation information about your Internet address";
var healthcheck_v_geoloc_easy$2 = "A form of geolocation: GeoIP refers to the method of finding the geographical location of a device, by identifying the Internet address and performing a remote database lookup in our servers to pinpoint the country, region, city and Internet Service Provider.";
var healthcheck_v_geoloc_tech$2 = "Your Internet address is looked up in a database of Internet addresses to determine its geographic location and Internet Service Provider.";
var healthcheck_v_isp_I$2 = "Information about the Internet Service Provider (ISP)";
var healthcheck_v_isp_easy$2 = "ISP (Internet Service Provider) is a company that provides individuals and other companies access to the Internet and other related services such as Web site building and virtual hosting. An ISP has the equipment and the telecommunication line access required to have a point-of-presence on the Internet for the geographic area served. The larger ISPs have their own high-speed leased lines so that they are less dependent on the telecommunication providers and can provide better service to their customers.<br/>Fing provides statistics about the ISP in its current location, like market share, average download and upload speeds.";
var healthcheck_v_isp_tech$2 = "Information about your current ISP is gathered by a GeoIP lookup of the Internet address. Fing Internet provides statistics and insights about the ISP in the current location.";
var healthcheck_v_network_I$2 = "Information about the connected network";
var healthcheck_v_network_easy$2 = "Detailed information about your currently connected network is collected and shown. The network address range shows the available range of addresses that devices can use to enter the network and communicate with each other. Network type tells you if the network is wired (ethernet) or wireless or both.<br/><b>Ethernet:</b> A standard data communications protocol enabling computers and computer peripheral devices, such as laptops, to interface with one another and across networks for the exchange of information.<br/><b>Link speed:</b> it's the nominal speed of the connection, measured in Mbps (Megabit per second). Higher value is faster, better. In modern wired networks you should aim for 1Gbps (equal to 1000Mbps), while good wireless connections can reach up to 200-300Mbps.<br/><b>Wireless Access Point (AP):</b> A wireless base station that connects a wired network (such as the wired Ethernet connection on a broadband modem) to the wireless network. The AP contains a radio transceiver (which transmits and receives radio signals on specific channels). Most APs contain also a router component, that directs your networked devices' data to and from the Internet.<br/><b>Wireless band/spectrum:</b> wireless access points use one of the two Wi-Fi frequency bands for signal: 2.4 GHz or 5 GHz. Some are dual-band routers and mesh routers are able to automatically select and mix channels and bands to deliver the best performance.<br/><b>Wireless Channel:</b> within the wireless frequency bands, there are smaller bands that are referred to as Wi-Fi channels. A Wi-Fi channel is the medium through which our wireless devices can send and receive data.<br/><b>Basic Service Set Identifiers (BSSID):</b> A unique identifier for each physical wireless access point.";
var healthcheck_v_network_tech$2 = "The informational check provides details about your active network: the context you assigned it, its IP address range, the type (wired and/or wireless), the list of BSSID's (if wireless).";
var healthcheck_v_nicinfo_I$2 = "Your connection to the network";
var healthcheck_v_nicinfo_easy$2 = "Detailed information about your current connection to the network are collected.<br/><b>Ethernet:</b> A standard data communications protocol enabling computers and computer peripheral devices, such as laptops, to interface with one another and across networks for the exchange of information.<br/><b>Link speed:</b> it's the nominal speed of the connection, measured in Mbps (Megabit per second). Higher value is faster, better. In modern wired networks you should aim for 1Gbps (equal to 1000Mbps), while good wireless connections can reach up to 200-300Mbps.<br/><b>Wireless Access Point (AP):</b> A wireless base station that connects a wired network (such as the wired Ethernet connection on a broadband modem) to the wireless network. The AP contains a radio transceiver (which transmits and receives radio signals on specific channels). Most APs contain also a router component, that directs your networked devices' data to and from the Internet.<br/><b>Wireless band/spectrum:</b> wireless access points use one of the two Wi-Fi frequency bands for signal: 2.4 GHz or 5 GHz. Some are dual-band routers and mesh routers are able to automatically select and mix channels and bands to deliver you best performance.<br/><b>Wireless Channel:</b> within the wireless frequency bands, there are smaller bands which are referred to as Wi-Fi channels. A Wi-Fi channel is the medium through which our wireless devices can send and receive data.<br/><b>Basic Service Set Identifiers (BSSID):</b> A unique identifier for each physical wireless access point.";
var healthcheck_v_nicinfo_tech$2 = "The informational check provides details about your active connection to the network: IP address, nominal link speed, type: ethernet or wireless; on Wi-Fi connections information about Access Point name, BSSID, spectrum and current channel.";
var healthcheck_v_self_I$2 = "Information about your device";
var healthcheck_v_self_easy$2 = "Fing provides you with relevant details about your PC or laptop, useful to know its specific type, brand, model, and operating system details. Also, a MAC address is provided (e.g. 11:22:33:69:22:9F): the MAC address is a globally unique address of a device, assigned by its manufacturer.";
var healthcheck_v_self_tech$2 = "Informational check gathers and shows info about your PC: MAC, name, brand, model and operating system details.";
var home_health_check_discovery_running$2 = "Please wait while Fing checks your network setup";
var home_network_subtitle_eth$2 = "{rate} Ethernet";
var home_network_subtitle_eth_usb$2 = "{rate} Ethernet via USB";
var internet_about$2 = "About your internet provider";
var internet_average_download$2 = "Average download: {value} Mbps";
var internet_average_title$2 = "Average performance of last {amount, plural, =1 {# day} other {# days}}";
var internet_average_upload$2 = "Average upload: {value} Mbps";
var internet_based_on$2 = "Based on speed, user reviews and widespread outages";
var internet_based_on_ratings$2 = "{num} ratings";
var internet_based_on_samples$2 = "{num} samples";
var internet_compare_providers$2 = "Compare providers";
var internet_data_trend$2 = "Trend data";
var internet_distribution$2 = "Distribution";
var internet_downtime$2 = "Downtime";
var internet_last_speed_test$2 = "Last speed test";
var internet_latency$2 = "Latency";
var internet_location_not_available$2 = "Location data not available";
var internet_location_server_from$2 = "From {serverCity}, {serverCountry}";
var internet_location_server_to$2 = "To {serverCity}, {serverCountry}";
var internet_network$2 = "Your network";
var internet_no_data$2 = "Not enough data";
var internet_no_data_last_speed_test$2 = "No data available for the last speed test performed";
var internet_no_data_period_example$2 = "See a preview of a sample data chart below";
var internet_no_data_period_timeline$2 = "No data available for this range of time";
var internet_no_data_trend$2 = "Trend data not available";
var internet_outages$2 = "Widespread outages";
var internet_outages_summary$2 = "{num} outage";
var internet_performance_score$2 = "Your performance score";
var internet_provider$2 = "Wifi Internet provider";
var internet_ratings$2 = "Ratings";
var internet_report$2 = "Report";
var internet_samples$2 = "Samples";
var internet_schedule$2 = "Schedule";
var internet_schedule_edit$2 = "Edit schedule";
var internet_score$2 = "Your internet score";
var internet_score_info$2 = "Fing ranks your average download and upload speed, comparing the results with other Internet Providers in your area to assess the performance of your internet connectivity.";
var internet_scoreboard$2 = "Scoreboard";
var internet_send_report_body$2 = "You’ll receive an email with your monthly internet report generated by Fing.";
var internet_send_report_empty_caption$2 = "Email sent";
var internet_send_report_empty_subtitle$2 = "Fing is generating your internet report, it will be in your inbox in a few minutes.";
var internet_send_report_empty_title$2 = "You will receive your report shortly";
var internet_send_report_title$2 = "Send monthly report";
var internet_sentiment$2 = "Sentiment";
var internet_speed_average$2 = "{avgDownload} Mbps / {avgUpload} Mbps";
var internet_speed_performance$2 = "Speed performance";
var internet_test_samples$2 = "Test samples";
var internet_test_server_location$2 = "Your test server is in {location}";
var internet_test_speed$2 = "Test speed";
var internet_timeline$2 = "Timeline";
var internet_total_rating$2 = "Total ratings";
var internet_trend_in$2 = "{isp} trend in {city}";
var internet_user_rating$2 = "User ratings";
var internet_view_details$2 = "View details";
var internetinfo_your_isp_home$2 = "At Home";
var isp_home$2 = "Home";
var isp_rank_summary_rankaverage$2 = "On average in ";
var isp_rank_summary_rankaverage_location$2 = "On average in {location}";
var isp_rank_summary_rankbottom$2 = "Bottom {rank}% in ";
var isp_rank_summary_rankbottom_location$2 = "Bottom {rank}% in {location}";
var isp_rank_summary_ranktop$2 = "Top {rank}% in ";
var isp_rank_summary_ranktop_location$2 = "Top {rank}% in {location}";
var isp_summary_card_nointernet$2 = "No Internet";
var last_month$2 = "Last month";
var maclookup_inforow_family$2 = "Family";
var maclookup_inforow_type$2 = "Type";
var model_not_recognized$2 = "Model not recognized";
var netstats_infoprofile_other$2 = "Other";
var netstats_type_personal$2 = "Personal";
var notification_service_healthcheck_connectivity_problems_title$2 = "You have connectivity problems";
var notifications_page_manage_body$2 = "Get notified when a known device goes offline and online";
var notifications_page_manage_extra$2 = "Notifications are enabled for {alertedDevices} devices";
var notifications_page_manage_title$2 = "Manage device notifications";
var notifications_page_notify_new$2 = "Notify on new devices";
var notifications_page_title$2 = "Notifications";
var notifications_set_title_recent$2 = "Recent";
var num_mbps$2 = "{num} Mbps";
var num_ms$2 = "{num} ms";
var outage_today$2 = "Today";
var placeholder_email$2 = "Enter a valid email address";
var portscan_port_action$2 = "Open";
var portscan_port_description$2 = "Description";
var portscan_port_name$2 = "Name";
var portscan_scanmode_all$2 = "All";
var premium_button$2 = "Premium";
var premium_feature$2 = "Showing {feature} is a Premium feature";
var premium_unlock_all$2 = "Unlock all with Premium";
var presence_add_dialog_title$2 = "Add user";
var presence_arrived_at_time$2 = "Arrived at {time}";
var presence_arrived_on_datetime$2 = "Arrived on {time}";
var presence_autofill_already_in_net$2 = "Already in this network";
var presence_autofill_dialog_more_users$2 = "+{amount} more users";
var presence_autofill_dialog_notfound_message$2 = " Can't find the user you were expecting? You can always add and edit users and their personal devices later.";
var presence_autofill_dialog_title$2 = "Autodetected users";
var presence_autofill_empty_caption$2 = "No contacts";
var presence_autofill_empty_subtitle$2 = "Try again when new devices join the network, or add new users manually.";
var presence_autofill_empty_title$2 = "No new user to add at this time";
var presence_autofill_table_headerdevice$2 = "Personal Device";
var presence_autofill_table_nameplaceholder$2 = "Enter the user's name";
var presence_badge_other$2 = "Other device";
var presence_badge_tracking$2 = "Presence device";
var presence_contact_type$2 = "Contact Type";
var presence_delete_dialog_body$2 = "Do you want to remove the user {contactName} from the list?<br />Notifications won't be sent anymore, and tracking of devices will be suspended.";
var presence_delete_dialog_title$2 = "Delete a contact";
var presence_devices_dialog_title$2 = "Select user's devices";
var presence_display_name$2 = "Display name";
var presence_edit_already_assigned_devices$2 = "Assigned to other users";
var presence_edit_at_least_one_device$2 = "Please select at least one device";
var presence_edit_dialog_title$2 = "Edit user";
var presence_edit_multi_device$2 = "Fing uses a single device to detect when a user is present in the network. If you select multiple devices, click on the badge on the right to elect the Presence device.";
var presence_error_incomplete$2 = "Please fill all mandatory elements";
var presence_gender$2 = "Gender";
var presence_gender_explanation$2 = "Helps using the right pronouns in notifications";
var presence_left_at_time$2 = "Left at {time}";
var presence_left_on_datetime$2 = "Left on {time}";
var presence_profile_photo$2 = "Profile photo";
var presence_send_report_body$2 = "Fing will generate a monthly report about presence in the network and send it to you via email.";
var presence_send_report_empty_caption$2 = "Email sent";
var presence_send_report_empty_subtitle$2 = "Fing is preparing the presence report. It should be available in your inbox in a few minutes.";
var presence_send_report_empty_title$2 = "We're sending you the report";
var presence_send_report_title$2 = "Send monthly report";
var presence_upload_profile_photo$2 = "Upload Photo";
var rating_comments$2 = "Comments";
var rating_date$2 = "You rated on {date}";
var rating_dislike_because$2 = "I dislike it because...";
var rating_edit$2 = "Edit rating";
var rating_hate_because$2 = "I hate it because...";
var rating_like_because$2 = "I like it because...";
var rating_love_because$2 = "I love it because...";
var rating_ok_because$2 = "Meh. It's OK because...";
var rating_title$2 = "Rate {ispName}";
var recognize_missing_modal_footer_nochecked$2 = "Check";
var recognize_missing_modal_form_typeheader$2 = "Type";
var recognize_userinput_form_os$2 = "Operating System";
var recognize_userinput_form_typeheader$2 = "Type";
var recognize_userinput_osselection_form_description$2 = "Operating System";
var relative_current_day$2 = "This day";
var relative_current_month$2 = "This month";
var relative_current_week$2 = "This week";
var relative_current_year$2 = "This year";
var relative_day_long$2 = "{amount, plural, =1 {# day ago} other {# days ago}}";
var relative_hour_long$2 = "{amount, plural, =1 {# hour ago} other {# hours ago}}";
var relative_min_long$2 = "{amount, plural, =1 {# min ago} other {# mins ago}}";
var relative_minute_long$2 = "{amount, plural, =1 {# minute ago} other {# minutes ago}}";
var relative_month_long$2 = "{amount, plural, =1 {# month ago} other {# months ago}}";
var relative_now$2 = "now";
var relative_older$2 = "Older";
var relative_today$2 = "Today";
var relative_week_long$2 = "{amount, plural, =1 {# week ago} other {# weeks ago}}";
var relative_year_long$2 = "{amount, plural, =1 {# year ago} other {# years ago}}";
var relative_yesterday$2 = "Yesterday";
var routercheck_emptystate_subtitle$2 = "No vulnerability found with the scan.";
var routercheck_emptystate_title$2 = "Everything's fine, no open port found";
var routercheck_internet_address$2 = "Detected public address: {address}";
var routercheck_last_update$2 = "Last update {date}";
var routercheck_never_subtitle$2 = "We haven't enough data for this section.";
var routercheck_never_title$2 = "Vulnerability checks did not yet run on this network.";
var routercheck_openports_action$2 = "Close {ports} ports";
var routercheck_openports_title$2 = "Open ports on your router";
var routercheck_port_external$2 = "External";
var routercheck_port_internal$2 = "Internal";
var routercheck_port_protocol$2 = "Protocol";
var routercheck_premium_subtitle$2 = "Check and fix vulnerabilities in the router configuration that could cause unauthorized access to connected devices.";
var routercheck_premium_title$2 = "Router vulnerability check not performed";
var routercheck_progress_caption$2 = "Analysing";
var routercheck_progress_subtitle$2 = "Please wait: we are checking details, manuals and router open ports.";
var routercheck_progress_title$2 = "Collecting router info...";
var routercheck_protected$2 = "Your router does not support automatic port forwarding";
var routercheck_protected_description$2 = "Port forwarding must be manually configured";
var routercheck_publicip$2 = "Directly connected to public Internet";
var routercheck_publicip_description$2 = "Your router has a public Internet address and can be probed by anyone on the Internet";
var routercheck_toolresult_danger_subtitle$2 = "Security check found vulnerabilities in the network configuration that could cause unauthorized access to connected devices.";
var routercheck_toolresult_danger_title$2 = "Some vulnerability detected";
var routercheck_toolresult_success_subtitle$2 = "Security check has detected an optimal network configuration for the security of the connected devices.";
var routercheck_toolresult_success_title$2 = "No vulnerability detected";
var routercheck_toolresult_sync_subtitle$2 = "Sit tight! This may take a while. The duration of the test depends on your network size and the number of connected devices.";
var routercheck_toolresult_sync_title$2 = "Security check is running...";
var routercheck_toolresult_warning_subtitle$2 = "Security check found potential vulnerabilities in the network configuration that could cause unauthorized access to connected devices.";
var routercheck_toolresult_warning_title$2 = "Moderate vulnerability detected";
var routercheck_unknown$2 = "Type of access not detected";
var routercheck_unknown_description$2 = "Without the UPnP and NAT-PMP IP addresses, there is no indication of how the external IP addresses and the internal IP addresses could match.";
var routercheck_unprotectedboth$2 = "Your router allows unchecked UPnP and NAT-PMP";
var routercheck_unprotectedboth_description$2 = "Applications can expose your devices without control. This can be useful for Internet calls and online gaming but potentially dangerous";
var routercheck_unprotectednatpmp$2 = "Your router allows unchecked NAT-PMP port forwarding";
var routercheck_unprotectednatpmp_description$2 = "Applications on your network can expose your devices without control";
var routercheck_unprotectedupnp$2 = "Your router allows unchecked UPnP port forwarding";
var routercheck_unprotectedupnp_description$2 = "Applications can expose your devices without control. This can be useful for Internet calls and online gaming but potentially dangerous";
var routercheck_wan$2 = "Connected to a private network";
var routercheck_wan_description$2 = "The external IP address is private. The router is not directly reachable from the public Internet";
var routercheck_webinterface_link$2 = "Web interface";
var routercheck_your_router_brand$2 = "Brand";
var routercheck_your_router_family$2 = "Family";
var routercheck_your_router_model$2 = "Model";
var routercheck_your_router_releasedate$2 = "Produced";
var routercheck_your_router_title$2 = "About your router";
var routercheck_your_setup_title$2 = "About your setup";
var schedule_hours$2 = "Schedule hours";
var schedule_max_run$2 = "You can run up to {max} tests each day";
var security_confirm_all_dialog_body$2 = "Fing will mark all {amount} devices as yours to easily recognize unidentified devices that join your network in the future.";
var security_confirm_all_dialog_title$2 = "Confirm {amount} devices";
var security_network_vulnerabilities$2 = "Network vulnerabilities";
var security_score_access_point_subtitle_danger$2 = "The access point is an open network. Data you sent wirelessly can be seen by everybody.";
var security_score_access_point_subtitle_success$2 = "The access point is using a secure protocol to send data wirelessly.";
var security_score_access_point_subtitle_warning$2 = "The access point does not guarantee full protection from attacks.";
var security_score_access_point_title_danger$2 = "Access point is not protected";
var security_score_access_point_title_success$2 = "Access Point is secure";
var security_score_access_point_title_warning$2 = "Access point has insufficient protection";
var security_score_alert_disabled_title$2 = "Notifications on new devices are disabled";
var security_score_alert_enabled_title$2 = "Notifications on new devices are enabled";
var security_score_alert_subtitle$2 = "Receive a notification when a new device joins your network.";
var security_score_alert_switch$2 = "Enable notifications";
var security_score_all_confirmed_devices_title$2 = "All devices are confirmed";
var security_score_automated_disabled_title$2 = "Automated router vulnerability check is disabled";
var security_score_automated_enabled_title$2 = "Automated router vulnerabilities";
var security_score_automated_subtitle$2 = "Automatically detect vulnerabilities to monitor any potential security weakness that may lead to unauthorized access.";
var security_score_confirm_devices$2 = "Confirm devices";
var security_score_score$2 = "Network security score";
var security_score_secure$2 = "Secure";
var security_score_state_change_disabled_title$2 = "Notifications on online activity are disabled";
var security_score_state_change_enabled_title$2 = "Single device notifications";
var security_score_state_change_subtitle$2 = "Get notified any time a known device goes offline and online.";
var security_score_unconfirmed_devices_subtitle$2 = "Confirm your devices to easily spot who is using your network.";
var security_score_unconfirmed_devices_title$2 = "{num} Unconfirmed device";
var security_score_unconfirmed_devices_titles$2 = "{num} Unconfirmed devices";
var security_score_unsecure$2 = "Unsecure";
var security_score_upgrade_to_unlock$2 = "Upgrade to unlock";
var sidebar_community$2 = "Community";
var sidebar_help$2 = "Help";
var sidebar_home$2 = "Overview";
var sidebar_internet$2 = "Internet";
var sidebar_notifications$2 = "Notifications";
var sidebar_outages$2 = "Outages";
var sidebar_tools$2 = "Tools";
var speedtest_achievements$2 = "What you can achieve";
var speedtest_city$2 = "City";
var speedtest_compare_location$2 = "{isp} in {location}";
var speedtest_compare_performance$2 = "Compare your speed performance";
var speedtest_comparison_not_available$2 = "Not enough data about {isp} to run a comparison";
var speedtest_contact_support$2 = "Contact support";
var speedtest_country$2 = "Country";
var speedtest_distribution_not_available$2 = "Not enough data about {isp} to see a distribution";
var speedtest_download$2 = "Download";
var speedtest_download_info$2 = "The average speed to retrieve data from a test server. A higher value means faster speed.";
var speedtest_failed$2 = "Your speed test failed. You might be experiencing a connectivity issue.";
var speedtest_header_connection$2 = "Connection";
var speedtest_header_location$2 = "Location";
var speedtest_header_provider$2 = "Provider";
var speedtest_isp_info_location$2 = "{isp} in {city}, {country}";
var speedtest_mlab_body$2 = "This test uses MLAB infrastructure to provide a realistic measure of speed achievable when connecting to genuine Internet services, not a formal speed sustainable just within the 'last mile' of your Internet provider";
var speedtest_mlab_title$2 = "Why are our results different?";
var speedtest_rate$2 = "Rate your provider";
var speedtest_reviews$2 = "{total} Reviews";
var speedtest_score_category_4k$2 = "4K";
var speedtest_score_category_AudioStream$2 = "Audio Stream";
var speedtest_score_category_BasicStream$2 = "Basic Streaming";
var speedtest_score_category_HDStream$2 = "HD Streaming";
var speedtest_score_category_HDWebcam$2 = "HD Webcam";
var speedtest_score_category_L_filetrans$2 = "Large file transfers";
var speedtest_score_category_Messaging$2 = "Messaging";
var speedtest_score_category_SDStream$2 = "SD Streaming";
var speedtest_score_category_SDWebcam$2 = "SD Webcam";
var speedtest_score_category_S_filetrans$2 = "Small file transfers";
var speedtest_score_category_UHD4K$2 = "Ultra HD 4K";
var speedtest_score_category_UHD8K$2 = "Ultra HD 8K";
var speedtest_score_category_brows_emails$2 = "Browsing & emails";
var speedtest_score_category_browsing$2 = "Browsing";
var speedtest_score_category_challenging$2 = "Challenging";
var speedtest_score_category_gameon$2 = "Game on!";
var speedtest_score_category_gameover$2 = "Game over";
var speedtest_score_category_inthegame$2 = "In the game";
var speedtest_score_category_limited$2 = "Limited";
var speedtest_score_category_photo$2 = "Photo";
var speedtest_score_category_small_brows_email$2 = "Small browsing & emails";
var speedtest_score_category_video$2 = "Video";
var speedtest_score_category_winning$2 = "Winning";
var speedtest_start_button$2 = "Start test";
var speedtest_stats_jitter$2 = "Jitter";
var speedtest_stats_jitter_info$2 = "The packet delay variation. A lower value means a more stable connection.";
var speedtest_stats_loss$2 = "Loss";
var speedtest_stats_loss_info$2 = "Amount of lost packets. A lower value means a more stable connection.";
var speedtest_stats_ping$2 = "Ping";
var speedtest_stats_ping_info$2 = "The time to reach a test server. A lower value means faster answers.";
var speedtest_tested$2 = "Tested by {tests}";
var speedtest_title$2 = "Your speed test";
var speedtest_title_call$2 = "Call";
var speedtest_title_gaming$2 = "Gaming";
var speedtest_title_social$2 = "Social";
var speedtest_title_video$2 = "Video";
var speedtest_title_work$2 = "Work";
var speedtest_try_again$2 = "Please try again or check your connection.";
var speedtest_upload$2 = "Upload";
var speedtest_upload_info$2 = "The average speed to send data to a test server. A higher value means faster speed.";
var status_for_duration$2 = "Has been {status} for {duration}";
var this_month$2 = "This month";
var time_current_day$2 = "This day";
var time_current_month$2 = "This month";
var time_current_week$2 = "This week";
var time_current_year$2 = "This year";
var time_older$2 = "Older";
var time_today$2 = "Today";
var time_yesterday$2 = "Yesterday";
var timeline_no_event$2 = "No event in recorded in this period";
var timeline_no_notification$2 = "No notifications available in this period";
var timeline_no_sample$2 = "No sample in recorded in this period";
var timeline_table_header_details$2 = "Details";
var timeline_table_header_port$2 = "Port forwarding";
var timeline_table_header_state$2 = "State";
var timeline_table_header_subject$2 = "Subject";
var timeline_table_header_type$2 = "Type";
var timeline_table_header_when$2 = "When";
var tools_page_title$2 = "Tools";
var tooltargetbar_ip_address$2 = "IP Address";
var tooltargetbar_location$2 = "Location";
var tooltargetbar_mac_address$2 = "MAC Address";
var tooltargetbar_no_open_ports$2 = "No open ports found";
var tooltargetbar_open_ports$2 = "Open ports";
var tooltargetbar_provider$2 = "Provider";
var view_timeline_button$2 = "View timeline";
var waiting_rate$2 = "Please provide your rating";
var LocaleEnUs = {
	"#_ghz": "{num} Ghz",
	"#_mbit": " Mbit",
	"#_mbps": "Mbps",
	"#_ms": "ms",
	"100_mbit": "100 Mbit",
	"10_gbit": "10 Gbit",
	"10_mbit": "10 Mbit",
	"1_gbit": "1 Gbit",
	autoblock_card_action_enable: autoblock_card_action_enable$2,
	autoblock_card_subtitle_disabled: autoblock_card_subtitle_disabled$2,
	autoblock_card_subtitle_enabled: autoblock_card_subtitle_enabled$2,
	autoblock_card_subtitle_permission_disabled: autoblock_card_subtitle_permission_disabled$2,
	autoblock_card_subtitle_validation_disabled: autoblock_card_subtitle_validation_disabled$2,
	autoblock_card_title: autoblock_card_title$2,
	autoblock_card_title_disabled: autoblock_card_title_disabled$2,
	autoblock_card_title_enabled: autoblock_card_title_enabled$2,
	back_button: back_button$2,
	contacttype_colleague: contacttype_colleague$2,
	contacttype_colleague_contractor: contacttype_colleague_contractor$2,
	contacttype_colleague_staff: contacttype_colleague_staff$2,
	contacttype_colleague_visitor: contacttype_colleague_visitor$2,
	contacttype_family: contacttype_family$2,
	contacttype_family_her: contacttype_family_her$2,
	contacttype_family_him: contacttype_family_him$2,
	contacttype_family_kid: contacttype_family_kid$2,
	contacttype_family_pet: contacttype_family_pet$2,
	contacttype_family_pet_cat: contacttype_family_pet_cat$2,
	contacttype_family_pet_dog: contacttype_family_pet_dog$2,
	contacttype_family_relative: contacttype_family_relative$2,
	contacttype_friend: contacttype_friend$2,
	contacttype_guest: contacttype_guest$2,
	contacttype_help: contacttype_help$2,
	contacttype_help_cleaning: contacttype_help_cleaning$2,
	contacttype_help_delivery: contacttype_help_delivery$2,
	contacttype_help_maintenance: contacttype_help_maintenance$2,
	contacttype_help_medical: contacttype_help_medical$2,
	contacttype_other: contacttype_other$2,
	contacttype_others: contacttype_others$2,
	copy_to_clipboard_copied: copy_to_clipboard_copied$2,
	data_no_trend: data_no_trend$2,
	data_trend_down_1: data_trend_down_1$2,
	data_trend_down_2: data_trend_down_2$2,
	data_trend_stable: data_trend_stable$2,
	data_trend_up_1: data_trend_up_1$2,
	data_trend_up_2: data_trend_up_2$2,
	dateformat_day: dateformat_day$2,
	dateformat_day_long: dateformat_day_long$2,
	dateformat_day_short: dateformat_day_short$2,
	dateformat_dayago: dateformat_dayago$2,
	dateformat_days: dateformat_days$2,
	dateformat_days_long: dateformat_days_long$2,
	dateformat_daysago: dateformat_daysago$2,
	dateformat_hour: dateformat_hour$2,
	dateformat_hour_long: dateformat_hour_long$2,
	dateformat_hour_short: dateformat_hour_short$2,
	dateformat_hourago: dateformat_hourago$2,
	dateformat_hours: dateformat_hours$2,
	dateformat_hours_long: dateformat_hours_long$2,
	dateformat_hoursago: dateformat_hoursago$2,
	dateformat_min: dateformat_min$2,
	dateformat_min_long: dateformat_min_long$2,
	dateformat_min_short: dateformat_min_short$2,
	dateformat_minago: dateformat_minago$2,
	dateformat_mins: dateformat_mins$2,
	dateformat_mins_long: dateformat_mins_long$2,
	dateformat_minsago: dateformat_minsago$2,
	dateformat_minutes: dateformat_minutes$2,
	dateformat_month: dateformat_month$2,
	dateformat_month_apr: dateformat_month_apr$2,
	dateformat_month_aug: dateformat_month_aug$2,
	dateformat_month_dec: dateformat_month_dec$2,
	dateformat_month_feb: dateformat_month_feb$2,
	dateformat_month_jan: dateformat_month_jan$2,
	dateformat_month_jul: dateformat_month_jul$2,
	dateformat_month_jun: dateformat_month_jun$2,
	dateformat_month_mar: dateformat_month_mar$2,
	dateformat_month_may: dateformat_month_may$2,
	dateformat_month_nov: dateformat_month_nov$2,
	dateformat_month_oct: dateformat_month_oct$2,
	dateformat_month_sep: dateformat_month_sep$2,
	dateformat_monthago: dateformat_monthago$2,
	dateformat_months: dateformat_months$2,
	dateformat_monthsago: dateformat_monthsago$2,
	dateformat_now: dateformat_now$2,
	dateformat_week: dateformat_week$2,
	dateformat_week_long: dateformat_week_long$2,
	dateformat_week_short: dateformat_week_short$2,
	dateformat_weekago: dateformat_weekago$2,
	dateformat_weeks: dateformat_weeks$2,
	dateformat_weeks_long: dateformat_weeks_long$2,
	dateformat_weeksago: dateformat_weeksago$2,
	dateformat_year: dateformat_year$2,
	dateformat_yearago: dateformat_yearago$2,
	dateformat_years: dateformat_years$2,
	dateformat_yearsago: dateformat_yearsago$2,
	device_alerts_dialog_body: device_alerts_dialog_body$2,
	device_alerts_dialog_title: device_alerts_dialog_title$2,
	device_confirm_dialog_body: device_confirm_dialog_body$2,
	device_confirm_dialog_body_alt: device_confirm_dialog_body_alt$2,
	device_confirm_dialog_title: device_confirm_dialog_title$2,
	device_detail_banner_choose_action: device_detail_banner_choose_action$2,
	device_detail_banner_choose_action_os: device_detail_banner_choose_action_os$2,
	device_detail_banner_choose_subtitle: device_detail_banner_choose_subtitle$2,
	device_detail_banner_choose_subtitle_model: device_detail_banner_choose_subtitle_model$2,
	device_detail_banner_choose_subtitle_os: device_detail_banner_choose_subtitle_os$2,
	device_detail_banner_empty_state_action: device_detail_banner_empty_state_action$2,
	device_detail_banner_empty_state_subtitle: device_detail_banner_empty_state_subtitle$2,
	device_detail_banner_feedback_subtitle: device_detail_banner_feedback_subtitle$2,
	device_detail_banner_feedback_title: device_detail_banner_feedback_title$2,
	device_detail_banner_revert_action: device_detail_banner_revert_action$2,
	device_detail_banner_revert_subtitle: device_detail_banner_revert_subtitle$2,
	device_detail_banner_thanks: device_detail_banner_thanks$2,
	device_detail_clear_action: device_detail_clear_action$2,
	device_detail_delete_modal_action: device_detail_delete_modal_action$2,
	device_detail_delete_modal_body: device_detail_delete_modal_body$2,
	device_detail_delete_modal_body_small: device_detail_delete_modal_body_small$2,
	device_detail_delete_modal_title: device_detail_delete_modal_title$2,
	device_detail_edit_action: device_detail_edit_action$2,
	device_detail_edit_modal_nameinput_placeholder: device_detail_edit_modal_nameinput_placeholder$2,
	device_detail_edit_modal_nameinput_small: device_detail_edit_modal_nameinput_small$2,
	device_detail_edit_modal_notesinput_label: device_detail_edit_modal_notesinput_label$2,
	device_detail_edit_modal_notesinput_placeholder: device_detail_edit_modal_notesinput_placeholder$2,
	device_detail_edit_modal_notesinput_small: device_detail_edit_modal_notesinput_small$2,
	device_detail_edit_modal_placementinput_label: device_detail_edit_modal_placementinput_label$2,
	device_detail_edit_modal_placementinput_small: device_detail_edit_modal_placementinput_small$2,
	device_detail_edit_modal_title: device_detail_edit_modal_title$2,
	device_detail_family: device_detail_family$2,
	device_detail_icon_picker_hint: device_detail_icon_picker_hint$2,
	device_detail_icon_picker_title: device_detail_icon_picker_title$2,
	device_detail_internet_downtime_schedule: device_detail_internet_downtime_schedule$2,
	device_detail_internet_downtime_schedule_manage: device_detail_internet_downtime_schedule_manage$2,
	device_detail_kick_out_mode_blocked: device_detail_kick_out_mode_blocked$2,
	device_detail_kick_out_mode_blocked_ago: device_detail_kick_out_mode_blocked_ago$2,
	device_detail_kick_out_mode_blocked_ago_for: device_detail_kick_out_mode_blocked_ago_for$2,
	device_detail_kick_out_mode_blocked_for: device_detail_kick_out_mode_blocked_for$2,
	device_detail_kick_out_mode_blocked_on: device_detail_kick_out_mode_blocked_on$2,
	device_detail_kick_out_mode_paused: device_detail_kick_out_mode_paused$2,
	device_detail_kick_out_mode_paused_ago: device_detail_kick_out_mode_paused_ago$2,
	device_detail_kick_out_mode_paused_ago_for: device_detail_kick_out_mode_paused_ago_for$2,
	device_detail_kick_out_mode_paused_for: device_detail_kick_out_mode_paused_for$2,
	device_detail_kick_out_mode_paused_on: device_detail_kick_out_mode_paused_on$2,
	device_detail_kick_out_mode_resumed_immediately: device_detail_kick_out_mode_resumed_immediately$2,
	device_detail_kick_out_mode_resumed_while: device_detail_kick_out_mode_resumed_while$2,
	device_detail_kick_out_mode_unblocked_immediately: device_detail_kick_out_mode_unblocked_immediately$2,
	device_detail_kick_out_mode_unblocked_while: device_detail_kick_out_mode_unblocked_while$2,
	device_detail_notification_set_automatic: device_detail_notification_set_automatic$2,
	device_detail_notification_set_millis: device_detail_notification_set_millis$2,
	device_detail_snmp_description: device_detail_snmp_description$2,
	device_detail_wol_failed: device_detail_wol_failed$2,
	device_detail_wol_modal_title_fail: device_detail_wol_modal_title_fail$2,
	device_detail_wol_modal_title_success: device_detail_wol_modal_title_success$2,
	device_detail_wol_success: device_detail_wol_success$2,
	device_place_Basement: device_place_Basement$2,
	device_place_Bathroom: device_place_Bathroom$2,
	device_place_Bedroom: device_place_Bedroom$2,
	device_place_Cellar: device_place_Cellar$2,
	device_place_Closet: device_place_Closet$2,
	device_place_Default: device_place_Default$2,
	device_place_Dining_Room: device_place_Dining_Room$2,
	device_place_Garage: device_place_Garage$2,
	device_place_Garden: device_place_Garden$2,
	device_place_Gym: device_place_Gym$2,
	device_place_Hallway: device_place_Hallway$2,
	device_place_Indoors: device_place_Indoors$2,
	device_place_Kitchen: device_place_Kitchen$2,
	"device_place_Laundry Room": "Laundry Room",
	device_place_Living_Room: device_place_Living_Room$2,
	device_place_Lobby: device_place_Lobby$2,
	device_place_Office: device_place_Office$2,
	device_place_Outdoors: device_place_Outdoors$2,
	device_place_Pool: device_place_Pool$2,
	"device_place_Recreation Room": "Recreation Room",
	"device_place_Safe Room": "Safe Room",
	device_place_Study: device_place_Study$2,
	"device_place_Utility Room": "Utility Room",
	devicecategory_audio_and_video: devicecategory_audio_and_video$2,
	devicecategory_engineering: devicecategory_engineering$2,
	devicecategory_everything_else: devicecategory_everything_else$2,
	devicecategory_home_and_office: devicecategory_home_and_office$2,
	devicecategory_industry: devicecategory_industry$2,
	devicecategory_mobile: devicecategory_mobile$2,
	devicecategory_network: devicecategory_network$2,
	devicecategory_offline: devicecategory_offline$2,
	devicecategory_personal: devicecategory_personal$2,
	devicecategory_server: devicecategory_server$2,
	devicecategory_smart_home: devicecategory_smart_home$2,
	devicetype_alarm: devicetype_alarm$2,
	devicetype_appliance: devicetype_appliance$2,
	devicetype_arduino: devicetype_arduino$2,
	devicetype_automotive: devicetype_automotive$2,
	devicetype_baby_monitor: devicetype_baby_monitor$2,
	devicetype_barcode: devicetype_barcode$2,
	devicetype_battery: devicetype_battery$2,
	devicetype_bell: devicetype_bell$2,
	devicetype_car: devicetype_car$2,
	devicetype_circuit_card: devicetype_circuit_card$2,
	devicetype_cleaner: devicetype_cleaner$2,
	devicetype_clock: devicetype_clock$2,
	devicetype_cloud: devicetype_cloud$2,
	devicetype_communication: devicetype_communication$2,
	devicetype_computer: devicetype_computer$2,
	devicetype_conferencing: devicetype_conferencing$2,
	devicetype_control_panel: devicetype_control_panel$2,
	devicetype_database: devicetype_database$2,
	devicetype_desktop: devicetype_desktop$2,
	devicetype_disc_player: devicetype_disc_player$2,
	devicetype_domain_server: devicetype_domain_server$2,
	devicetype_domotz_box: devicetype_domotz_box$2,
	devicetype_electric: devicetype_electric$2,
	devicetype_energy: devicetype_energy$2,
	devicetype_ereader: devicetype_ereader$2,
	devicetype_file_server: devicetype_file_server$2,
	devicetype_fingbox: devicetype_fingbox$2,
	devicetype_firewall: devicetype_firewall$2,
	devicetype_fitness: devicetype_fitness$2,
	devicetype_fridge: devicetype_fridge$2,
	devicetype_game_console: devicetype_game_console$2,
	devicetype_garage: devicetype_garage$2,
	devicetype_gateway: devicetype_gateway$2,
	devicetype_generic: devicetype_generic$2,
	devicetype_health_monitor: devicetype_health_monitor$2,
	devicetype_heating: devicetype_heating$2,
	devicetype_humidity: devicetype_humidity$2,
	devicetype_industrial: devicetype_industrial$2,
	devicetype_ipod: devicetype_ipod$2,
	devicetype_key_lock: devicetype_key_lock$2,
	devicetype_laptop: devicetype_laptop$2,
	devicetype_light: devicetype_light$2,
	devicetype_loudspeaker: devicetype_loudspeaker$2,
	devicetype_mail_server: devicetype_mail_server$2,
	devicetype_media_player: devicetype_media_player$2,
	devicetype_medical: devicetype_medical$2,
	devicetype_microphone: devicetype_microphone$2,
	devicetype_mobile: devicetype_mobile$2,
	devicetype_modem: devicetype_modem$2,
	devicetype_motion_detector: devicetype_motion_detector$2,
	devicetype_music: devicetype_music$2,
	devicetype_nas_storage: devicetype_nas_storage$2,
	devicetype_network_appliance: devicetype_network_appliance$2,
	devicetype_pet_monitor: devicetype_pet_monitor$2,
	devicetype_phone: devicetype_phone$2,
	devicetype_photo_camera: devicetype_photo_camera$2,
	devicetype_photos: devicetype_photos$2,
	devicetype_poe_plug: devicetype_poe_plug$2,
	devicetype_pool: devicetype_pool$2,
	devicetype_pos: devicetype_pos$2,
	devicetype_power_system: devicetype_power_system$2,
	devicetype_printer: devicetype_printer$2,
	devicetype_processor: devicetype_processor$2,
	devicetype_projector: devicetype_projector$2,
	devicetype_proxy_server: devicetype_proxy_server$2,
	devicetype_radio: devicetype_radio$2,
	devicetype_raspberry: devicetype_raspberry$2,
	devicetype_remote_control: devicetype_remote_control$2,
	devicetype_rfid: devicetype_rfid$2,
	devicetype_robot: devicetype_robot$2,
	devicetype_router: devicetype_router$2,
	devicetype_satellite: devicetype_satellite$2,
	devicetype_scale: devicetype_scale$2,
	devicetype_scanner: devicetype_scanner$2,
	devicetype_security_system: devicetype_security_system$2,
	devicetype_sensor: devicetype_sensor$2,
	devicetype_server: devicetype_server$2,
	devicetype_sleep: devicetype_sleep$2,
	devicetype_small_cell: devicetype_small_cell$2,
	devicetype_smart_controller: devicetype_smart_controller$2,
	devicetype_smart_home: devicetype_smart_home$2,
	devicetype_smart_meter: devicetype_smart_meter$2,
	devicetype_smart_plug: devicetype_smart_plug$2,
	devicetype_smoke: devicetype_smoke$2,
	devicetype_solar_panel: devicetype_solar_panel$2,
	devicetype_sound_system: devicetype_sound_system$2,
	devicetype_sprinkler: devicetype_sprinkler$2,
	devicetype_stb: devicetype_stb$2,
	devicetype_streaming_dongle: devicetype_streaming_dongle$2,
	devicetype_surveillance_camera: devicetype_surveillance_camera$2,
	devicetype_switch: devicetype_switch$2,
	devicetype_tablet: devicetype_tablet$2,
	devicetype_television: devicetype_television$2,
	devicetype_terminal: devicetype_terminal$2,
	devicetype_thermostat: devicetype_thermostat$2,
	devicetype_toy: devicetype_toy$2,
	devicetype_undefined: devicetype_undefined$2,
	devicetype_usb: devicetype_usb$2,
	devicetype_virtual_machine: devicetype_virtual_machine$2,
	devicetype_voice_control: devicetype_voice_control$2,
	devicetype_voip: devicetype_voip$2,
	devicetype_vpn: devicetype_vpn$2,
	devicetype_washer: devicetype_washer$2,
	devicetype_watch: devicetype_watch$2,
	devicetype_wearable: devicetype_wearable$2,
	devicetype_weather: devicetype_weather$2,
	devicetype_web_server: devicetype_web_server$2,
	devicetype_wifi: devicetype_wifi$2,
	devicetype_wifi_extender: devicetype_wifi_extender$2,
	dhcpdiscovery_result_domain: dhcpdiscovery_result_domain$2,
	discovery_action_edit: discovery_action_edit$2,
	discovery_device_action_change: discovery_device_action_change$2,
	discovery_devices_filter_all: discovery_devices_filter_all$2,
	discovery_devices_filter_offline: discovery_devices_filter_offline$2,
	discovery_devices_filter_online: discovery_devices_filter_online$2,
	discovery_devices_sorted_name: discovery_devices_sorted_name$2,
	discovery_devices_sorted_state: discovery_devices_sorted_state$2,
	discovery_events_change_state_briefly: discovery_events_change_state_briefly$2,
	discovery_events_change_state_till: discovery_events_change_state_till$2,
	discovery_events_empty_state: discovery_events_empty_state$2,
	discovery_events_heatmap_status: discovery_events_heatmap_status$2,
	discovery_events_no_in_this_period: discovery_events_no_in_this_period$2,
	discovery_events_premium_banner_description: discovery_events_premium_banner_description$2,
	discovery_events_premium_banner_description_end: discovery_events_premium_banner_description_end$2,
	discovery_events_show_next: discovery_events_show_next$2,
	discovery_events_show_previous: discovery_events_show_previous$2,
	discovery_events_timeline_more: discovery_events_timeline_more$2,
	discovery_events_timeline_new: discovery_events_timeline_new$2,
	discovery_events_timeline_new_blocked: discovery_events_timeline_new_blocked$2,
	discovery_events_timeline_offline_briefly: discovery_events_timeline_offline_briefly$2,
	discovery_events_timeline_offline_duration: discovery_events_timeline_offline_duration$2,
	discovery_events_timeline_offline_duration_immediately: discovery_events_timeline_offline_duration_immediately$2,
	discovery_events_timeline_offline_duration_while: discovery_events_timeline_offline_duration_while$2,
	discovery_events_timeline_offline_till_now: discovery_events_timeline_offline_till_now$2,
	discovery_events_timeline_online_briefly: discovery_events_timeline_online_briefly$2,
	discovery_events_timeline_online_duration: discovery_events_timeline_online_duration$2,
	discovery_events_timeline_online_duration_immediately: discovery_events_timeline_online_duration_immediately$2,
	discovery_events_timeline_online_duration_while: discovery_events_timeline_online_duration_while$2,
	discovery_events_timeline_online_till_now: discovery_events_timeline_online_till_now$2,
	discovery_events_week_heatmap_header: discovery_events_week_heatmap_header$2,
	discovery_events_week_timeline_header: discovery_events_week_timeline_header$2,
	discovery_header_location: discovery_header_location$2,
	discovery_header_network: discovery_header_network$2,
	discovery_network_internet_header: discovery_network_internet_header$2,
	discovery_network_internet_hostname: discovery_network_internet_hostname$2,
	discovery_network_internet_isp: discovery_network_internet_isp$2,
	discovery_network_internet_location: discovery_network_internet_location$2,
	discovery_network_internet_provider: discovery_network_internet_provider$2,
	discovery_network_internet_pubaddress: discovery_network_internet_pubaddress$2,
	discovery_network_internet_timezone: discovery_network_internet_timezone$2,
	discovery_network_netinfo_gateway: discovery_network_netinfo_gateway$2,
	discovery_security_newdevices_confirmall: discovery_security_newdevices_confirmall$2,
	discovery_security_newdevices_confirmed: discovery_security_newdevices_confirmed$2,
	discovery_security_newdevices_last30days: discovery_security_newdevices_last30days$2,
	discovery_security_newdevices_last7days: discovery_security_newdevices_last7days$2,
	discovery_security_newdevices_message: discovery_security_newdevices_message$2,
	discovery_security_newdevices_title: discovery_security_newdevices_title$2,
	discovery_security_newdevices_today: discovery_security_newdevices_today$2,
	dnslookup_info_local_title: dnslookup_info_local_title$2,
	duration_day_long: duration_day_long$2,
	duration_day_short: duration_day_short$2,
	duration_hour_long: duration_hour_long$2,
	duration_hour_short: duration_hour_short$2,
	duration_min_long: duration_min_long$2,
	duration_min_short: duration_min_short$2,
	duration_minute_long: duration_minute_long$2,
	duration_month_long: duration_month_long$2,
	duration_month_short: duration_month_short$2,
	duration_week_long: duration_week_long$2,
	duration_week_short: duration_week_short$2,
	duration_year_long: duration_year_long$2,
	duration_year_short: duration_year_short$2,
	empty_state_subtitle_fallback: empty_state_subtitle_fallback$2,
	empty_state_title_fallback: empty_state_title_fallback$2,
	every_day: every_day$2,
	every_hour: every_hour$2,
	every_week: every_week$2,
	findhiddencameras_emptystate_subtitle: findhiddencameras_emptystate_subtitle$2,
	findhiddencameras_emptystate_title: findhiddencameras_emptystate_title$2,
	findhiddencameras_foundcameras_title: findhiddencameras_foundcameras_title$2,
	findhiddencameras_helper_0found: findhiddencameras_helper_0found$2,
	findhiddencameras_helper_totdevice: findhiddencameras_helper_totdevice$2,
	findhiddencameras_helper_totdevice_1found: findhiddencameras_helper_totdevice_1found$2,
	findhiddencameras_helper_totdevice_manyfound: findhiddencameras_helper_totdevice_manyfound$2,
	findhiddencameras_helper_totdevice_with_unknown: findhiddencameras_helper_totdevice_with_unknown$2,
	findhiddencameras_helper_type_babymonitor: findhiddencameras_helper_type_babymonitor$2,
	findhiddencameras_helper_type_ipcamera: findhiddencameras_helper_type_ipcamera$2,
	findhiddencameras_helper_type_monitordetector: findhiddencameras_helper_type_monitordetector$2,
	findhiddencameras_helper_type_photocamera: findhiddencameras_helper_type_photocamera$2,
	findhiddencameras_helper_type_securitysystem: findhiddencameras_helper_type_securitysystem$2,
	findhiddencameras_progress_subtitle: findhiddencameras_progress_subtitle$2,
	findhiddencameras_progress_title: findhiddencameras_progress_title$2,
	findhiddencameras_summary_title: findhiddencameras_summary_title$2,
	findhiddencameras_toolresult_danger_subtitle: findhiddencameras_toolresult_danger_subtitle$2,
	findhiddencameras_toolresult_danger_title: findhiddencameras_toolresult_danger_title$2,
	findhiddencameras_toolresult_fingpedia_stats: findhiddencameras_toolresult_fingpedia_stats$2,
	findhiddencameras_toolresult_premium_subtitle: findhiddencameras_toolresult_premium_subtitle$2,
	findhiddencameras_toolresult_premium_title: findhiddencameras_toolresult_premium_title$2,
	findhiddencameras_toolresult_success_nofound_subtitle: findhiddencameras_toolresult_success_nofound_subtitle$2,
	findhiddencameras_toolresult_success_nofound_title: findhiddencameras_toolresult_success_nofound_title$2,
	findhiddencameras_toolresult_success_subtitle: findhiddencameras_toolresult_success_subtitle$2,
	findhiddencameras_toolresult_success_title: findhiddencameras_toolresult_success_title$2,
	findhiddencameras_toolresult_sync_subtitle: findhiddencameras_toolresult_sync_subtitle$2,
	findhiddencameras_toolresult_sync_title: findhiddencameras_toolresult_sync_title$2,
	findhiddencameras_unrecognized_subtitle: findhiddencameras_unrecognized_subtitle$2,
	findhiddencameras_unrecognized_title: findhiddencameras_unrecognized_title$2,
	format_speed: format_speed$2,
	gender_female: gender_female$2,
	gender_male: gender_male$2,
	gender_other: gender_other$2,
	generic_VPN: generic_VPN$2,
	generic_account: generic_account$2,
	generic_actions: generic_actions$2,
	generic_alert: generic_alert$2,
	generic_am: generic_am$2,
	generic_auto: generic_auto$2,
	generic_automatic: generic_automatic$2,
	generic_avg: generic_avg$2,
	generic_back: generic_back$2,
	generic_band: generic_band$2,
	generic_best: generic_best$2,
	generic_brandandmodel: generic_brandandmodel$2,
	generic_bssid: generic_bssid$2,
	generic_cancel: generic_cancel$2,
	generic_change: generic_change$2,
	generic_changed: generic_changed$2,
	generic_check: generic_check$2,
	generic_clear: generic_clear$2,
	generic_close: generic_close$2,
	generic_completed: generic_completed$2,
	generic_confirm: generic_confirm$2,
	generic_connected_to: generic_connected_to$2,
	generic_continue: generic_continue$2,
	generic_country: generic_country$2,
	generic_data_not_available: generic_data_not_available$2,
	generic_delete: generic_delete$2,
	generic_description: generic_description$2,
	generic_details: generic_details$2,
	generic_device: generic_device$2,
	generic_dhcp: generic_dhcp$2,
	generic_dhcp_proxy: generic_dhcp_proxy$2,
	generic_disable_all: generic_disable_all$2,
	generic_disabled: generic_disabled$2,
	generic_domain: generic_domain$2,
	generic_download_speed: generic_download_speed$2,
	generic_edit: generic_edit$2,
	generic_edit_profile: generic_edit_profile$2,
	generic_email: generic_email$2,
	generic_enable_all: generic_enable_all$2,
	generic_enabled: generic_enabled$2,
	generic_error: generic_error$2,
	generic_example: generic_example$2,
	generic_failed: generic_failed$2,
	generic_first_seen: generic_first_seen$2,
	generic_for: generic_for$2,
	generic_help: generic_help$2,
	generic_help_on_fing: generic_help_on_fing$2,
	generic_home: generic_home$2,
	generic_hotspot: generic_hotspot$2,
	generic_id: generic_id$2,
	generic_idle: generic_idle$2,
	generic_important: generic_important$2,
	generic_inspect: generic_inspect$2,
	generic_internet: generic_internet$2,
	generic_ip: generic_ip$2,
	generic_lastchange: generic_lastchange$2,
	generic_link: generic_link$2,
	generic_link_speed: generic_link_speed$2,
	generic_live: generic_live$2,
	generic_local: generic_local$2,
	generic_logo: generic_logo$2,
	generic_make: generic_make$2,
	generic_manage: generic_manage$2,
	generic_manual: generic_manual$2,
	generic_map_gpudisabled_link: generic_map_gpudisabled_link$2,
	generic_map_gpudisabled_message: generic_map_gpudisabled_message$2,
	generic_max: generic_max$2,
	generic_mbps_download: generic_mbps_download$2,
	generic_mbps_upload: generic_mbps_upload$2,
	generic_min: generic_min$2,
	generic_ms: generic_ms$2,
	generic_ms_latency: generic_ms_latency$2,
	generic_name: generic_name$2,
	generic_network: generic_network$2,
	generic_next: generic_next$2,
	generic_no: generic_no$2,
	generic_no_internet: generic_no_internet$2,
	generic_no_name: generic_no_name$2,
	generic_not_available: generic_not_available$2,
	generic_not_connected: generic_not_connected$2,
	generic_not_in_network: generic_not_in_network$2,
	generic_not_tracking: generic_not_tracking$2,
	generic_notset: generic_notset$2,
	generic_office: generic_office$2,
	generic_offline: generic_offline$2,
	generic_ok: generic_ok$2,
	generic_online: generic_online$2,
	generic_open: generic_open$2,
	generic_operatingsystem: generic_operatingsystem$2,
	generic_optional: generic_optional$2,
	generic_or: generic_or$2,
	generic_order_by: generic_order_by$2,
	generic_os: generic_os$2,
	generic_outage: generic_outage$2,
	generic_outages: generic_outages$2,
	generic_pm: generic_pm$2,
	generic_public: generic_public$2,
	generic_recent: generic_recent$2,
	generic_refresh: generic_refresh$2,
	generic_related_articles: generic_related_articles$2,
	generic_rental: generic_rental$2,
	generic_report: generic_report$2,
	generic_result: generic_result$2,
	generic_running: generic_running$2,
	generic_save: generic_save$2,
	generic_security: generic_security$2,
	generic_see_result: generic_see_result$2,
	generic_seeall: generic_seeall$2,
	generic_send: generic_send$2,
	generic_service: generic_service$2,
	generic_settings: generic_settings$2,
	generic_share: generic_share$2,
	generic_show_data_for: generic_show_data_for$2,
	generic_signal: generic_signal$2,
	generic_size: generic_size$2,
	generic_source: generic_source$2,
	generic_ssid: generic_ssid$2,
	generic_start: generic_start$2,
	generic_stop: generic_stop$2,
	generic_support: generic_support$2,
	generic_tracking: generic_tracking$2,
	generic_type: generic_type$2,
	generic_unknown: generic_unknown$2,
	generic_unrecognized: generic_unrecognized$2,
	generic_updating: generic_updating$2,
	generic_upgrade: generic_upgrade$2,
	generic_upload_speed: generic_upload_speed$2,
	generic_view: generic_view$2,
	generic_view_details: generic_view_details$2,
	generic_view_less: generic_view_less$2,
	generic_view_more: generic_view_more$2,
	generic_website: generic_website$2,
	generic_what_outage: generic_what_outage$2,
	generic_worst: generic_worst$2,
	generic_wps_enabled: generic_wps_enabled$2,
	generic_yes: generic_yes$2,
	generic_you: generic_you$2,
	healtcheck_edit_dialog_placeholder: healtcheck_edit_dialog_placeholder$2,
	healthcheck_001_B: healthcheck_001_B$2,
	healthcheck_001_G: healthcheck_001_G$2,
	healthcheck_001_easy: healthcheck_001_easy$2,
	healthcheck_001_fix: healthcheck_001_fix$2,
	healthcheck_001_tech: healthcheck_001_tech$2,
	healthcheck_002_B: healthcheck_002_B$2,
	healthcheck_002_G: healthcheck_002_G$2,
	healthcheck_002_easy: healthcheck_002_easy$2,
	healthcheck_002_tech: healthcheck_002_tech$2,
	healthcheck_003_B: healthcheck_003_B$2,
	healthcheck_003_G: healthcheck_003_G$2,
	healthcheck_003_easy: healthcheck_003_easy$2,
	healthcheck_003_fix: healthcheck_003_fix$2,
	healthcheck_003_tech: healthcheck_003_tech$2,
	healthcheck_004_B: healthcheck_004_B$2,
	healthcheck_004_G: healthcheck_004_G$2,
	healthcheck_004_easy: healthcheck_004_easy$2,
	healthcheck_004_fix: healthcheck_004_fix$2,
	healthcheck_004_tech: healthcheck_004_tech$2,
	healthcheck_005_B: healthcheck_005_B$2,
	healthcheck_005_G: healthcheck_005_G$2,
	healthcheck_005_easy: healthcheck_005_easy$2,
	healthcheck_005_fix: healthcheck_005_fix$2,
	healthcheck_005_tech: healthcheck_005_tech$2,
	healthcheck_006_B: healthcheck_006_B$2,
	healthcheck_006_G: healthcheck_006_G$2,
	healthcheck_006_easy: healthcheck_006_easy$2,
	healthcheck_006_fix: healthcheck_006_fix$2,
	healthcheck_006_tech: healthcheck_006_tech$2,
	healthcheck_007_B: healthcheck_007_B$2,
	healthcheck_007_G: healthcheck_007_G$2,
	healthcheck_007_easy: healthcheck_007_easy$2,
	healthcheck_007_fix: healthcheck_007_fix$2,
	healthcheck_007_tech: healthcheck_007_tech$2,
	healthcheck_008_B: healthcheck_008_B$2,
	healthcheck_008_G: healthcheck_008_G$2,
	healthcheck_008_easy: healthcheck_008_easy$2,
	healthcheck_008_fix: healthcheck_008_fix$2,
	healthcheck_008_tech: healthcheck_008_tech$2,
	healthcheck_009_B: healthcheck_009_B$2,
	healthcheck_009_G: healthcheck_009_G$2,
	healthcheck_009_easy: healthcheck_009_easy$2,
	healthcheck_009_fix: healthcheck_009_fix$2,
	healthcheck_009_tech: healthcheck_009_tech$2,
	healthcheck_00A_G: healthcheck_00A_G$2,
	healthcheck_00A_easy: healthcheck_00A_easy$2,
	healthcheck_00A_tech: healthcheck_00A_tech$2,
	healthcheck_010_G: healthcheck_010_G$2,
	healthcheck_010_easy: healthcheck_010_easy$2,
	healthcheck_010_tech: healthcheck_010_tech$2,
	healthcheck_401_B: healthcheck_401_B$2,
	healthcheck_401_G: healthcheck_401_G$2,
	healthcheck_401_easy: healthcheck_401_easy$2,
	healthcheck_401_fix: healthcheck_401_fix$2,
	healthcheck_401_tech: healthcheck_401_tech$2,
	healthcheck_402_B: healthcheck_402_B$2,
	healthcheck_402_G: healthcheck_402_G$2,
	healthcheck_402_easy: healthcheck_402_easy$2,
	healthcheck_402_fix: healthcheck_402_fix$2,
	healthcheck_402_tech: healthcheck_402_tech$2,
	healthcheck_403_B: healthcheck_403_B$2,
	healthcheck_403_G: healthcheck_403_G$2,
	healthcheck_403_easy: healthcheck_403_easy$2,
	healthcheck_403_fix: healthcheck_403_fix$2,
	healthcheck_403_tech: healthcheck_403_tech$2,
	healthcheck_404_B: healthcheck_404_B$2,
	healthcheck_404_G: healthcheck_404_G$2,
	healthcheck_404_easy: healthcheck_404_easy$2,
	healthcheck_404_fix: healthcheck_404_fix$2,
	healthcheck_404_tech: healthcheck_404_tech$2,
	healthcheck_405_B: healthcheck_405_B$2,
	healthcheck_405_G: healthcheck_405_G$2,
	healthcheck_405_easy: healthcheck_405_easy$2,
	healthcheck_405_tech: healthcheck_405_tech$2,
	healthcheck_406_B: healthcheck_406_B$2,
	healthcheck_406_G: healthcheck_406_G$2,
	healthcheck_406_easy: healthcheck_406_easy$2,
	healthcheck_406_fix: healthcheck_406_fix$2,
	healthcheck_406_tech: healthcheck_406_tech$2,
	healthcheck_407_B: healthcheck_407_B$2,
	healthcheck_407_G: healthcheck_407_G$2,
	healthcheck_407_easy: healthcheck_407_easy$2,
	healthcheck_407_fix: healthcheck_407_fix$2,
	healthcheck_407_tech: healthcheck_407_tech$2,
	healthcheck_408_B: healthcheck_408_B$2,
	healthcheck_408_G: healthcheck_408_G$2,
	healthcheck_408_easy: healthcheck_408_easy$2,
	healthcheck_408_fix: healthcheck_408_fix$2,
	healthcheck_408_tech: healthcheck_408_tech$2,
	healthcheck_409_B: healthcheck_409_B$2,
	healthcheck_409_G: healthcheck_409_G$2,
	healthcheck_409_easy: healthcheck_409_easy$2,
	healthcheck_409_tech: healthcheck_409_tech$2,
	healthcheck_40A_B: healthcheck_40A_B$2,
	healthcheck_40A_G: healthcheck_40A_G$2,
	healthcheck_40A_easy: healthcheck_40A_easy$2,
	healthcheck_40A_fix: healthcheck_40A_fix$2,
	healthcheck_40A_tech: healthcheck_40A_tech$2,
	healthcheck_40B_B: healthcheck_40B_B$2,
	healthcheck_40B_G: healthcheck_40B_G$2,
	healthcheck_40B_easy: healthcheck_40B_easy$2,
	healthcheck_40B_tech: healthcheck_40B_tech$2,
	healthcheck_40C_B: healthcheck_40C_B$2,
	healthcheck_40C_G: healthcheck_40C_G$2,
	healthcheck_40C_easy: healthcheck_40C_easy$2,
	healthcheck_40C_tech: healthcheck_40C_tech$2,
	healthcheck_40D_B: healthcheck_40D_B$2,
	healthcheck_40D_G: healthcheck_40D_G$2,
	healthcheck_40D_easy: healthcheck_40D_easy$2,
	healthcheck_40D_tech: healthcheck_40D_tech$2,
	healthcheck_40E_B: healthcheck_40E_B$2,
	healthcheck_40E_G: healthcheck_40E_G$2,
	healthcheck_40E_easy: healthcheck_40E_easy$2,
	healthcheck_40E_tech: healthcheck_40E_tech$2,
	healthcheck_40F_B: healthcheck_40F_B$2,
	healthcheck_40F_G: healthcheck_40F_G$2,
	healthcheck_40F_easy: healthcheck_40F_easy$2,
	healthcheck_40F_fix: healthcheck_40F_fix$2,
	healthcheck_40F_tech: healthcheck_40F_tech$2,
	healthcheck_410_B: healthcheck_410_B$2,
	healthcheck_410_G: healthcheck_410_G$2,
	healthcheck_410_easy: healthcheck_410_easy$2,
	healthcheck_410_tech: healthcheck_410_tech$2,
	healthcheck_411_G: healthcheck_411_G$2,
	healthcheck_411_easy: healthcheck_411_easy$2,
	healthcheck_411_tech: healthcheck_411_tech$2,
	healthcheck_412_G: healthcheck_412_G$2,
	healthcheck_412_easy: healthcheck_412_easy$2,
	healthcheck_412_tech: healthcheck_412_tech$2,
	healthcheck_415_B: healthcheck_415_B$2,
	healthcheck_415_G: healthcheck_415_G$2,
	healthcheck_415_easy: healthcheck_415_easy$2,
	healthcheck_415_fix: healthcheck_415_fix$2,
	healthcheck_415_tech: healthcheck_415_tech$2,
	healthcheck_416_B: healthcheck_416_B$2,
	healthcheck_416_G: healthcheck_416_G$2,
	healthcheck_416_easy: healthcheck_416_easy$2,
	healthcheck_416_fix: healthcheck_416_fix$2,
	healthcheck_416_tech: healthcheck_416_tech$2,
	healthcheck_417_G: healthcheck_417_G$2,
	healthcheck_417_easy: healthcheck_417_easy$2,
	healthcheck_417_fix: healthcheck_417_fix$2,
	healthcheck_417_tech: healthcheck_417_tech$2,
	healthcheck_418_G: healthcheck_418_G$2,
	healthcheck_418_easy: healthcheck_418_easy$2,
	healthcheck_418_fix: healthcheck_418_fix$2,
	healthcheck_418_tech: healthcheck_418_tech$2,
	healthcheck_419_G: healthcheck_419_G$2,
	healthcheck_419_easy: healthcheck_419_easy$2,
	healthcheck_419_fix: healthcheck_419_fix$2,
	healthcheck_419_tech: healthcheck_419_tech$2,
	healthcheck_41A_G: healthcheck_41A_G$2,
	healthcheck_41A_easy: healthcheck_41A_easy$2,
	healthcheck_41A_fix: healthcheck_41A_fix$2,
	healthcheck_41A_tech: healthcheck_41A_tech$2,
	healthcheck_801_B: healthcheck_801_B$2,
	healthcheck_801_G: healthcheck_801_G$2,
	healthcheck_801_easy: healthcheck_801_easy$2,
	healthcheck_801_fix: healthcheck_801_fix$2,
	healthcheck_801_tech: healthcheck_801_tech$2,
	healthcheck_802_B: healthcheck_802_B$2,
	healthcheck_802_G: healthcheck_802_G$2,
	healthcheck_802_easy: healthcheck_802_easy$2,
	healthcheck_802_fix: healthcheck_802_fix$2,
	healthcheck_802_tech: healthcheck_802_tech$2,
	healthcheck_803_B: healthcheck_803_B$2,
	healthcheck_803_G: healthcheck_803_G$2,
	healthcheck_803_easy: healthcheck_803_easy$2,
	healthcheck_803_tech: healthcheck_803_tech$2,
	healthcheck_804_B: healthcheck_804_B$2,
	healthcheck_804_G: healthcheck_804_G$2,
	healthcheck_804_easy: healthcheck_804_easy$2,
	healthcheck_804_tech: healthcheck_804_tech$2,
	healthcheck_805_B: healthcheck_805_B$2,
	healthcheck_805_G: healthcheck_805_G$2,
	healthcheck_805_easy: healthcheck_805_easy$2,
	healthcheck_805_tech: healthcheck_805_tech$2,
	healthcheck_806_B: healthcheck_806_B$2,
	healthcheck_806_G: healthcheck_806_G$2,
	healthcheck_806_easy: healthcheck_806_easy$2,
	healthcheck_806_tech: healthcheck_806_tech$2,
	healthcheck_807_B: healthcheck_807_B$2,
	healthcheck_807_G: healthcheck_807_G$2,
	healthcheck_807_easy: healthcheck_807_easy$2,
	healthcheck_807_tech: healthcheck_807_tech$2,
	healthcheck_808_B: healthcheck_808_B$2,
	healthcheck_808_G: healthcheck_808_G$2,
	healthcheck_808_easy: healthcheck_808_easy$2,
	healthcheck_808_tech: healthcheck_808_tech$2,
	healthcheck_809_G: healthcheck_809_G$2,
	healthcheck_809_easy: healthcheck_809_easy$2,
	healthcheck_809_tech: healthcheck_809_tech$2,
	healthcheck_80A_G: healthcheck_80A_G$2,
	healthcheck_80A_easy: healthcheck_80A_easy$2,
	healthcheck_80A_tech: healthcheck_80A_tech$2,
	healthcheck_80B_G: healthcheck_80B_G$2,
	healthcheck_80B_easy: healthcheck_80B_easy$2,
	healthcheck_80B_tech: healthcheck_80B_tech$2,
	healthcheck_80C_B: healthcheck_80C_B$2,
	healthcheck_80C_G: healthcheck_80C_G$2,
	healthcheck_80C_easy: healthcheck_80C_easy$2,
	healthcheck_80C_tech: healthcheck_80C_tech$2,
	healthcheck_80D_G: healthcheck_80D_G$2,
	healthcheck_80D_easy: healthcheck_80D_easy$2,
	healthcheck_80D_tech: healthcheck_80D_tech$2,
	healthcheck_80E_G: healthcheck_80E_G$2,
	healthcheck_80E_easy: healthcheck_80E_easy$2,
	healthcheck_80E_tech: healthcheck_80E_tech$2,
	healthcheck_80F_G: healthcheck_80F_G$2,
	healthcheck_80F_easy: healthcheck_80F_easy$2,
	healthcheck_80F_tech: healthcheck_80F_tech$2,
	healthcheck_810_B: healthcheck_810_B$2,
	healthcheck_810_G: healthcheck_810_G$2,
	healthcheck_810_tech: healthcheck_810_tech$2,
	healthcheck_card_advice_link: healthcheck_card_advice_link$2,
	healthcheck_card_advice_subtitle: healthcheck_card_advice_subtitle$2,
	healthcheck_card_advice_title: healthcheck_card_advice_title$2,
	healthcheck_card_connectivity_subtitle: healthcheck_card_connectivity_subtitle$2,
	healthcheck_card_connectivity_title: healthcheck_card_connectivity_title$2,
	healthcheck_card_publicwifi_subtitle: healthcheck_card_publicwifi_subtitle$2,
	healthcheck_card_publicwifi_title: healthcheck_card_publicwifi_title$2,
	healthcheck_generic_code: healthcheck_generic_code$2,
	healthcheck_healthsummary_fail_limitedconnectivity_subtitle: healthcheck_healthsummary_fail_limitedconnectivity_subtitle$2,
	healthcheck_healthsummary_fail_manyissue_subtitle: healthcheck_healthsummary_fail_manyissue_subtitle$2,
	healthcheck_healthsummary_fail_networkissue_subtitle: healthcheck_healthsummary_fail_networkissue_subtitle$2,
	healthcheck_healthsummary_fail_noconnection_subtitle: healthcheck_healthsummary_fail_noconnection_subtitle$2,
	healthcheck_healthsummary_fail_title: healthcheck_healthsummary_fail_title$2,
	healthcheck_healthsummary_link_report: healthcheck_healthsummary_link_report$2,
	healthcheck_healthsummary_refresh_button_text_one: healthcheck_healthsummary_refresh_button_text_one$2,
	healthcheck_healthsummary_refresh_button_text_two: healthcheck_healthsummary_refresh_button_text_two$2,
	healthcheck_healthsummary_refresh_running: healthcheck_healthsummary_refresh_running$2,
	healthcheck_healthsummary_running_subtitle: healthcheck_healthsummary_running_subtitle$2,
	healthcheck_healthsummary_running_title: healthcheck_healthsummary_running_title$2,
	healthcheck_healthsummary_success_subtitle: healthcheck_healthsummary_success_subtitle$2,
	healthcheck_healthsummary_success_title: healthcheck_healthsummary_success_title$2,
	healthcheck_healthsummary_warning_internet_subtitle: healthcheck_healthsummary_warning_internet_subtitle$2,
	healthcheck_healthsummary_warning_local_subtitle: healthcheck_healthsummary_warning_local_subtitle$2,
	healthcheck_healthsummary_warning_network_subtitle: healthcheck_healthsummary_warning_network_subtitle$2,
	healthcheck_healthsummary_warning_title: healthcheck_healthsummary_warning_title$2,
	healthcheck_help_dialog_action: healthcheck_help_dialog_action$2,
	healthcheck_help_dialog_failurebadge: healthcheck_help_dialog_failurebadge$2,
	healthcheck_help_dialog_successbadge: healthcheck_help_dialog_successbadge$2,
	healthcheck_help_dialog_tab_howfix: healthcheck_help_dialog_tab_howfix$2,
	healthcheck_help_dialog_tab_means: healthcheck_help_dialog_tab_means$2,
	healthcheck_help_dialog_tab_techdef: healthcheck_help_dialog_tab_techdef$2,
	healthcheck_internet: healthcheck_internet$2,
	healthcheck_local: healthcheck_local$2,
	healthcheck_network: healthcheck_network$2,
	healthcheck_report_askhelp_description: healthcheck_report_askhelp_description$2,
	healthcheck_report_askhelp_modal_share_action: healthcheck_report_askhelp_modal_share_action$2,
	healthcheck_report_askhelp_privacy: healthcheck_report_askhelp_privacy$2,
	healthcheck_report_askhelp_processing_title: healthcheck_report_askhelp_processing_title$2,
	healthcheck_report_askhelp_title: healthcheck_report_askhelp_title$2,
	healthcheck_report_checkinfo_modal_checkcode_howcanifix: healthcheck_report_checkinfo_modal_checkcode_howcanifix$2,
	healthcheck_report_checkinfo_modal_checkcode_title: healthcheck_report_checkinfo_modal_checkcode_title$2,
	healthcheck_report_checkinfo_modal_checkcode_whatitmeans: healthcheck_report_checkinfo_modal_checkcode_whatitmeans$2,
	healthcheck_report_checkinfo_modal_footer_link: healthcheck_report_checkinfo_modal_footer_link$2,
	healthcheck_report_checkinfo_modal_footer_title: healthcheck_report_checkinfo_modal_footer_title$2,
	healthcheck_report_checkinfo_modal_title: healthcheck_report_checkinfo_modal_title$2,
	healthcheck_report_context_picker: healthcheck_report_context_picker$2,
	healthcheck_report_customtarget_modal_area_label: healthcheck_report_customtarget_modal_area_label$2,
	healthcheck_report_customtarget_modal_area_small: healthcheck_report_customtarget_modal_area_small$2,
	healthcheck_report_customtarget_modal_failure_title: healthcheck_report_customtarget_modal_failure_title$2,
	healthcheck_report_customtarget_modal_nopremium_title: healthcheck_report_customtarget_modal_nopremium_title$2,
	healthcheck_report_customtarget_modal_premium_title: healthcheck_report_customtarget_modal_premium_title$2,
	healthcheck_report_customtarget_modal_save_action: healthcheck_report_customtarget_modal_save_action$2,
	healthcheck_report_customtarget_modal_tech_description: healthcheck_report_customtarget_modal_tech_description$2,
	healthcheck_report_customtarget_modal_tech_title: healthcheck_report_customtarget_modal_tech_title$2,
	healthcheck_report_customtarget_modal_title: healthcheck_report_customtarget_modal_title$2,
	healthcheck_report_emptystate: healthcheck_report_emptystate$2,
	healthcheck_report_emptystate_component_message: healthcheck_report_emptystate_component_message$2,
	healthcheck_report_emptystate_premium: healthcheck_report_emptystate_premium$2,
	healthcheck_report_geoloc_info: healthcheck_report_geoloc_info$2,
	healthcheck_report_geoloc_location: healthcheck_report_geoloc_location$2,
	healthcheck_report_geoloc_timezone: healthcheck_report_geoloc_timezone$2,
	healthcheck_report_isp_info_descr: healthcheck_report_isp_info_descr$2,
	healthcheck_report_isp_info_message: healthcheck_report_isp_info_message$2,
	healthcheck_report_isp_info_stats_message_download: healthcheck_report_isp_info_stats_message_download$2,
	healthcheck_report_isp_info_stats_message_share: healthcheck_report_isp_info_stats_message_share$2,
	healthcheck_report_isp_info_stats_message_upload: healthcheck_report_isp_info_stats_message_upload$2,
	healthcheck_report_mute_action: healthcheck_report_mute_action$2,
	healthcheck_report_mute_dialog_mutecheck: healthcheck_report_mute_dialog_mutecheck$2,
	healthcheck_report_mute_dialog_mutecheck_description: healthcheck_report_mute_dialog_mutecheck_description$2,
	healthcheck_report_mute_dialog_unmutecheck: healthcheck_report_mute_dialog_unmutecheck$2,
	healthcheck_report_mute_dialog_unmutecheck_description: healthcheck_report_mute_dialog_unmutecheck_description$2,
	healthcheck_report_nettype_eth: healthcheck_report_nettype_eth$2,
	healthcheck_report_nettype_ethwifi: healthcheck_report_nettype_ethwifi$2,
	healthcheck_report_nettype_wireless: healthcheck_report_nettype_wireless$2,
	healthcheck_report_network_gateway: healthcheck_report_network_gateway$2,
	healthcheck_report_networkinfo: healthcheck_report_networkinfo$2,
	healthcheck_report_nicinfo_connection_info: healthcheck_report_nicinfo_connection_info$2,
	healthcheck_report_nicinfo_connection_info_nostation: healthcheck_report_nicinfo_connection_info_nostation$2,
	healthcheck_report_nicinfo_connection_more_info: healthcheck_report_nicinfo_connection_more_info$2,
	healthcheck_report_qrcode_description: healthcheck_report_qrcode_description$2,
	healthcheck_report_qrcode_title: healthcheck_report_qrcode_title$2,
	healthcheck_report_qrcodemodal_title: healthcheck_report_qrcodemodal_title$2,
	healthcheck_report_radio_button_all: healthcheck_report_radio_button_all$2,
	healthcheck_report_radio_button_fail: healthcheck_report_radio_button_fail$2,
	healthcheck_report_radio_button_info: healthcheck_report_radio_button_info$2,
	healthcheck_report_radio_button_premium: healthcheck_report_radio_button_premium$2,
	healthcheck_report_radio_button_warn: healthcheck_report_radio_button_warn$2,
	healthcheck_report_table_header_state: healthcheck_report_table_header_state$2,
	healthcheck_report_table_header_what: healthcheck_report_table_header_what$2,
	healthcheck_report_table_header_where: healthcheck_report_table_header_where$2,
	healthcheck_report_ticket: healthcheck_report_ticket$2,
	healthcheck_report_unmute_action: healthcheck_report_unmute_action$2,
	healthcheck_status_check_running_subtitle: healthcheck_status_check_running_subtitle$2,
	healthcheck_status_check_running_title: healthcheck_status_check_running_title$2,
	healthcheck_status_code_subtitle: healthcheck_status_code_subtitle$2,
	healthcheck_status_ok_nopremium_subtitle: healthcheck_status_ok_nopremium_subtitle$2,
	healthcheck_status_ok_subtitle: healthcheck_status_ok_subtitle$2,
	healthcheck_status_ok_title: healthcheck_status_ok_title$2,
	healthcheck_status_problems_captive_subtitle: healthcheck_status_problems_captive_subtitle$2,
	healthcheck_status_problems_generic_subtitle: healthcheck_status_problems_generic_subtitle$2,
	healthcheck_status_problems_internet_subtitle: healthcheck_status_problems_internet_subtitle$2,
	healthcheck_status_problems_local_subtitle: healthcheck_status_problems_local_subtitle$2,
	healthcheck_status_problems_net_subtitle: healthcheck_status_problems_net_subtitle$2,
	healthcheck_status_problems_title: healthcheck_status_problems_title$2,
	healthcheck_status_warn_dhcp_subtitle: healthcheck_status_warn_dhcp_subtitle$2,
	healthcheck_status_warn_generic_subtitle: healthcheck_status_warn_generic_subtitle$2,
	healthcheck_status_warn_internet_subtitle: healthcheck_status_warn_internet_subtitle$2,
	healthcheck_status_warn_local_subtitle: healthcheck_status_warn_local_subtitle$2,
	healthcheck_status_warn_net_subtitle: healthcheck_status_warn_net_subtitle$2,
	healthcheck_status_warn_title: healthcheck_status_warn_title$2,
	healthcheck_statusbadge_fail: healthcheck_statusbadge_fail$2,
	healthcheck_statusbadge_info: healthcheck_statusbadge_info$2,
	healthcheck_statusbadge_skipped: healthcheck_statusbadge_skipped$2,
	healthcheck_statusbadge_success: healthcheck_statusbadge_success$2,
	healthcheck_statusbadge_warn: healthcheck_statusbadge_warn$2,
	healthcheck_v_gateway_I: healthcheck_v_gateway_I$2,
	healthcheck_v_gateway_easy: healthcheck_v_gateway_easy$2,
	healthcheck_v_gateway_tech: healthcheck_v_gateway_tech$2,
	healthcheck_v_geoloc_I: healthcheck_v_geoloc_I$2,
	healthcheck_v_geoloc_easy: healthcheck_v_geoloc_easy$2,
	healthcheck_v_geoloc_tech: healthcheck_v_geoloc_tech$2,
	healthcheck_v_isp_I: healthcheck_v_isp_I$2,
	healthcheck_v_isp_easy: healthcheck_v_isp_easy$2,
	healthcheck_v_isp_tech: healthcheck_v_isp_tech$2,
	healthcheck_v_network_I: healthcheck_v_network_I$2,
	healthcheck_v_network_easy: healthcheck_v_network_easy$2,
	healthcheck_v_network_tech: healthcheck_v_network_tech$2,
	healthcheck_v_nicinfo_I: healthcheck_v_nicinfo_I$2,
	healthcheck_v_nicinfo_easy: healthcheck_v_nicinfo_easy$2,
	healthcheck_v_nicinfo_tech: healthcheck_v_nicinfo_tech$2,
	healthcheck_v_self_I: healthcheck_v_self_I$2,
	healthcheck_v_self_easy: healthcheck_v_self_easy$2,
	healthcheck_v_self_tech: healthcheck_v_self_tech$2,
	home_health_check_discovery_running: home_health_check_discovery_running$2,
	home_network_subtitle_eth: home_network_subtitle_eth$2,
	home_network_subtitle_eth_usb: home_network_subtitle_eth_usb$2,
	internet_about: internet_about$2,
	internet_average_download: internet_average_download$2,
	internet_average_title: internet_average_title$2,
	internet_average_upload: internet_average_upload$2,
	internet_based_on: internet_based_on$2,
	internet_based_on_ratings: internet_based_on_ratings$2,
	internet_based_on_samples: internet_based_on_samples$2,
	internet_compare_providers: internet_compare_providers$2,
	internet_data_trend: internet_data_trend$2,
	internet_distribution: internet_distribution$2,
	internet_downtime: internet_downtime$2,
	internet_last_speed_test: internet_last_speed_test$2,
	internet_latency: internet_latency$2,
	internet_location_not_available: internet_location_not_available$2,
	internet_location_server_from: internet_location_server_from$2,
	internet_location_server_to: internet_location_server_to$2,
	internet_network: internet_network$2,
	internet_no_data: internet_no_data$2,
	internet_no_data_last_speed_test: internet_no_data_last_speed_test$2,
	internet_no_data_period_example: internet_no_data_period_example$2,
	internet_no_data_period_timeline: internet_no_data_period_timeline$2,
	internet_no_data_trend: internet_no_data_trend$2,
	internet_outages: internet_outages$2,
	internet_outages_summary: internet_outages_summary$2,
	internet_performance_score: internet_performance_score$2,
	internet_provider: internet_provider$2,
	internet_ratings: internet_ratings$2,
	internet_report: internet_report$2,
	internet_samples: internet_samples$2,
	internet_schedule: internet_schedule$2,
	internet_schedule_edit: internet_schedule_edit$2,
	internet_score: internet_score$2,
	internet_score_info: internet_score_info$2,
	internet_scoreboard: internet_scoreboard$2,
	internet_send_report_body: internet_send_report_body$2,
	internet_send_report_empty_caption: internet_send_report_empty_caption$2,
	internet_send_report_empty_subtitle: internet_send_report_empty_subtitle$2,
	internet_send_report_empty_title: internet_send_report_empty_title$2,
	internet_send_report_title: internet_send_report_title$2,
	internet_sentiment: internet_sentiment$2,
	internet_speed_average: internet_speed_average$2,
	internet_speed_performance: internet_speed_performance$2,
	internet_test_samples: internet_test_samples$2,
	internet_test_server_location: internet_test_server_location$2,
	internet_test_speed: internet_test_speed$2,
	internet_timeline: internet_timeline$2,
	internet_total_rating: internet_total_rating$2,
	internet_trend_in: internet_trend_in$2,
	internet_user_rating: internet_user_rating$2,
	internet_view_details: internet_view_details$2,
	internetinfo_your_isp_home: internetinfo_your_isp_home$2,
	isp_home: isp_home$2,
	isp_rank_summary_rankaverage: isp_rank_summary_rankaverage$2,
	isp_rank_summary_rankaverage_location: isp_rank_summary_rankaverage_location$2,
	isp_rank_summary_rankbottom: isp_rank_summary_rankbottom$2,
	isp_rank_summary_rankbottom_location: isp_rank_summary_rankbottom_location$2,
	isp_rank_summary_ranktop: isp_rank_summary_ranktop$2,
	isp_rank_summary_ranktop_location: isp_rank_summary_ranktop_location$2,
	isp_summary_card_nointernet: isp_summary_card_nointernet$2,
	last_month: last_month$2,
	maclookup_inforow_family: maclookup_inforow_family$2,
	maclookup_inforow_type: maclookup_inforow_type$2,
	model_not_recognized: model_not_recognized$2,
	netstats_infoprofile_other: netstats_infoprofile_other$2,
	netstats_type_personal: netstats_type_personal$2,
	notification_service_healthcheck_connectivity_problems_title: notification_service_healthcheck_connectivity_problems_title$2,
	notifications_page_manage_body: notifications_page_manage_body$2,
	notifications_page_manage_extra: notifications_page_manage_extra$2,
	notifications_page_manage_title: notifications_page_manage_title$2,
	notifications_page_notify_new: notifications_page_notify_new$2,
	notifications_page_title: notifications_page_title$2,
	notifications_set_title_recent: notifications_set_title_recent$2,
	num_mbps: num_mbps$2,
	num_ms: num_ms$2,
	outage_today: outage_today$2,
	placeholder_email: placeholder_email$2,
	portscan_port_action: portscan_port_action$2,
	portscan_port_description: portscan_port_description$2,
	portscan_port_name: portscan_port_name$2,
	portscan_scanmode_all: portscan_scanmode_all$2,
	premium_button: premium_button$2,
	premium_feature: premium_feature$2,
	premium_unlock_all: premium_unlock_all$2,
	presence_add_dialog_title: presence_add_dialog_title$2,
	presence_arrived_at_time: presence_arrived_at_time$2,
	presence_arrived_on_datetime: presence_arrived_on_datetime$2,
	presence_autofill_already_in_net: presence_autofill_already_in_net$2,
	presence_autofill_dialog_more_users: presence_autofill_dialog_more_users$2,
	presence_autofill_dialog_notfound_message: presence_autofill_dialog_notfound_message$2,
	presence_autofill_dialog_title: presence_autofill_dialog_title$2,
	presence_autofill_empty_caption: presence_autofill_empty_caption$2,
	presence_autofill_empty_subtitle: presence_autofill_empty_subtitle$2,
	presence_autofill_empty_title: presence_autofill_empty_title$2,
	presence_autofill_table_headerdevice: presence_autofill_table_headerdevice$2,
	presence_autofill_table_nameplaceholder: presence_autofill_table_nameplaceholder$2,
	presence_badge_other: presence_badge_other$2,
	presence_badge_tracking: presence_badge_tracking$2,
	presence_contact_type: presence_contact_type$2,
	presence_delete_dialog_body: presence_delete_dialog_body$2,
	presence_delete_dialog_title: presence_delete_dialog_title$2,
	presence_devices_dialog_title: presence_devices_dialog_title$2,
	presence_display_name: presence_display_name$2,
	presence_edit_already_assigned_devices: presence_edit_already_assigned_devices$2,
	presence_edit_at_least_one_device: presence_edit_at_least_one_device$2,
	presence_edit_dialog_title: presence_edit_dialog_title$2,
	presence_edit_multi_device: presence_edit_multi_device$2,
	presence_error_incomplete: presence_error_incomplete$2,
	presence_gender: presence_gender$2,
	presence_gender_explanation: presence_gender_explanation$2,
	presence_left_at_time: presence_left_at_time$2,
	presence_left_on_datetime: presence_left_on_datetime$2,
	presence_profile_photo: presence_profile_photo$2,
	presence_send_report_body: presence_send_report_body$2,
	presence_send_report_empty_caption: presence_send_report_empty_caption$2,
	presence_send_report_empty_subtitle: presence_send_report_empty_subtitle$2,
	presence_send_report_empty_title: presence_send_report_empty_title$2,
	presence_send_report_title: presence_send_report_title$2,
	presence_upload_profile_photo: presence_upload_profile_photo$2,
	rating_comments: rating_comments$2,
	rating_date: rating_date$2,
	rating_dislike_because: rating_dislike_because$2,
	rating_edit: rating_edit$2,
	rating_hate_because: rating_hate_because$2,
	rating_like_because: rating_like_because$2,
	rating_love_because: rating_love_because$2,
	rating_ok_because: rating_ok_because$2,
	rating_title: rating_title$2,
	recognize_missing_modal_footer_nochecked: recognize_missing_modal_footer_nochecked$2,
	recognize_missing_modal_form_typeheader: recognize_missing_modal_form_typeheader$2,
	recognize_userinput_form_os: recognize_userinput_form_os$2,
	recognize_userinput_form_typeheader: recognize_userinput_form_typeheader$2,
	recognize_userinput_osselection_form_description: recognize_userinput_osselection_form_description$2,
	relative_current_day: relative_current_day$2,
	relative_current_month: relative_current_month$2,
	relative_current_week: relative_current_week$2,
	relative_current_year: relative_current_year$2,
	relative_day_long: relative_day_long$2,
	relative_hour_long: relative_hour_long$2,
	relative_min_long: relative_min_long$2,
	relative_minute_long: relative_minute_long$2,
	relative_month_long: relative_month_long$2,
	relative_now: relative_now$2,
	relative_older: relative_older$2,
	relative_today: relative_today$2,
	relative_week_long: relative_week_long$2,
	relative_year_long: relative_year_long$2,
	relative_yesterday: relative_yesterday$2,
	routercheck_emptystate_subtitle: routercheck_emptystate_subtitle$2,
	routercheck_emptystate_title: routercheck_emptystate_title$2,
	routercheck_internet_address: routercheck_internet_address$2,
	routercheck_last_update: routercheck_last_update$2,
	routercheck_never_subtitle: routercheck_never_subtitle$2,
	routercheck_never_title: routercheck_never_title$2,
	routercheck_openports_action: routercheck_openports_action$2,
	routercheck_openports_title: routercheck_openports_title$2,
	routercheck_port_external: routercheck_port_external$2,
	routercheck_port_internal: routercheck_port_internal$2,
	routercheck_port_protocol: routercheck_port_protocol$2,
	routercheck_premium_subtitle: routercheck_premium_subtitle$2,
	routercheck_premium_title: routercheck_premium_title$2,
	routercheck_progress_caption: routercheck_progress_caption$2,
	routercheck_progress_subtitle: routercheck_progress_subtitle$2,
	routercheck_progress_title: routercheck_progress_title$2,
	routercheck_protected: routercheck_protected$2,
	routercheck_protected_description: routercheck_protected_description$2,
	routercheck_publicip: routercheck_publicip$2,
	routercheck_publicip_description: routercheck_publicip_description$2,
	routercheck_toolresult_danger_subtitle: routercheck_toolresult_danger_subtitle$2,
	routercheck_toolresult_danger_title: routercheck_toolresult_danger_title$2,
	routercheck_toolresult_success_subtitle: routercheck_toolresult_success_subtitle$2,
	routercheck_toolresult_success_title: routercheck_toolresult_success_title$2,
	routercheck_toolresult_sync_subtitle: routercheck_toolresult_sync_subtitle$2,
	routercheck_toolresult_sync_title: routercheck_toolresult_sync_title$2,
	routercheck_toolresult_warning_subtitle: routercheck_toolresult_warning_subtitle$2,
	routercheck_toolresult_warning_title: routercheck_toolresult_warning_title$2,
	routercheck_unknown: routercheck_unknown$2,
	routercheck_unknown_description: routercheck_unknown_description$2,
	routercheck_unprotectedboth: routercheck_unprotectedboth$2,
	routercheck_unprotectedboth_description: routercheck_unprotectedboth_description$2,
	routercheck_unprotectednatpmp: routercheck_unprotectednatpmp$2,
	routercheck_unprotectednatpmp_description: routercheck_unprotectednatpmp_description$2,
	routercheck_unprotectedupnp: routercheck_unprotectedupnp$2,
	routercheck_unprotectedupnp_description: routercheck_unprotectedupnp_description$2,
	routercheck_wan: routercheck_wan$2,
	routercheck_wan_description: routercheck_wan_description$2,
	routercheck_webinterface_link: routercheck_webinterface_link$2,
	routercheck_your_router_brand: routercheck_your_router_brand$2,
	routercheck_your_router_family: routercheck_your_router_family$2,
	routercheck_your_router_model: routercheck_your_router_model$2,
	routercheck_your_router_releasedate: routercheck_your_router_releasedate$2,
	routercheck_your_router_title: routercheck_your_router_title$2,
	routercheck_your_setup_title: routercheck_your_setup_title$2,
	schedule_hours: schedule_hours$2,
	schedule_max_run: schedule_max_run$2,
	security_confirm_all_dialog_body: security_confirm_all_dialog_body$2,
	security_confirm_all_dialog_title: security_confirm_all_dialog_title$2,
	security_network_vulnerabilities: security_network_vulnerabilities$2,
	security_score_access_point_subtitle_danger: security_score_access_point_subtitle_danger$2,
	security_score_access_point_subtitle_success: security_score_access_point_subtitle_success$2,
	security_score_access_point_subtitle_warning: security_score_access_point_subtitle_warning$2,
	security_score_access_point_title_danger: security_score_access_point_title_danger$2,
	security_score_access_point_title_success: security_score_access_point_title_success$2,
	security_score_access_point_title_warning: security_score_access_point_title_warning$2,
	security_score_alert_disabled_title: security_score_alert_disabled_title$2,
	security_score_alert_enabled_title: security_score_alert_enabled_title$2,
	security_score_alert_subtitle: security_score_alert_subtitle$2,
	security_score_alert_switch: security_score_alert_switch$2,
	security_score_all_confirmed_devices_title: security_score_all_confirmed_devices_title$2,
	security_score_automated_disabled_title: security_score_automated_disabled_title$2,
	security_score_automated_enabled_title: security_score_automated_enabled_title$2,
	security_score_automated_subtitle: security_score_automated_subtitle$2,
	security_score_confirm_devices: security_score_confirm_devices$2,
	security_score_score: security_score_score$2,
	security_score_secure: security_score_secure$2,
	security_score_state_change_disabled_title: security_score_state_change_disabled_title$2,
	security_score_state_change_enabled_title: security_score_state_change_enabled_title$2,
	security_score_state_change_subtitle: security_score_state_change_subtitle$2,
	security_score_unconfirmed_devices_subtitle: security_score_unconfirmed_devices_subtitle$2,
	security_score_unconfirmed_devices_title: security_score_unconfirmed_devices_title$2,
	security_score_unconfirmed_devices_titles: security_score_unconfirmed_devices_titles$2,
	security_score_unsecure: security_score_unsecure$2,
	security_score_upgrade_to_unlock: security_score_upgrade_to_unlock$2,
	sidebar_community: sidebar_community$2,
	sidebar_help: sidebar_help$2,
	sidebar_home: sidebar_home$2,
	sidebar_internet: sidebar_internet$2,
	sidebar_notifications: sidebar_notifications$2,
	sidebar_outages: sidebar_outages$2,
	sidebar_tools: sidebar_tools$2,
	speedtest_achievements: speedtest_achievements$2,
	speedtest_city: speedtest_city$2,
	speedtest_compare_location: speedtest_compare_location$2,
	speedtest_compare_performance: speedtest_compare_performance$2,
	speedtest_comparison_not_available: speedtest_comparison_not_available$2,
	speedtest_contact_support: speedtest_contact_support$2,
	speedtest_country: speedtest_country$2,
	speedtest_distribution_not_available: speedtest_distribution_not_available$2,
	speedtest_download: speedtest_download$2,
	speedtest_download_info: speedtest_download_info$2,
	speedtest_failed: speedtest_failed$2,
	speedtest_header_connection: speedtest_header_connection$2,
	speedtest_header_location: speedtest_header_location$2,
	speedtest_header_provider: speedtest_header_provider$2,
	speedtest_isp_info_location: speedtest_isp_info_location$2,
	speedtest_mlab_body: speedtest_mlab_body$2,
	speedtest_mlab_title: speedtest_mlab_title$2,
	speedtest_rate: speedtest_rate$2,
	speedtest_reviews: speedtest_reviews$2,
	speedtest_score_category_4k: speedtest_score_category_4k$2,
	speedtest_score_category_AudioStream: speedtest_score_category_AudioStream$2,
	speedtest_score_category_BasicStream: speedtest_score_category_BasicStream$2,
	speedtest_score_category_HDStream: speedtest_score_category_HDStream$2,
	speedtest_score_category_HDWebcam: speedtest_score_category_HDWebcam$2,
	"speedtest_score_category_HDvid&photo": "HD Video & Photo",
	speedtest_score_category_L_filetrans: speedtest_score_category_L_filetrans$2,
	speedtest_score_category_Messaging: speedtest_score_category_Messaging$2,
	speedtest_score_category_SDStream: speedtest_score_category_SDStream$2,
	speedtest_score_category_SDWebcam: speedtest_score_category_SDWebcam$2,
	speedtest_score_category_S_filetrans: speedtest_score_category_S_filetrans$2,
	speedtest_score_category_UHD4K: speedtest_score_category_UHD4K$2,
	speedtest_score_category_UHD8K: speedtest_score_category_UHD8K$2,
	speedtest_score_category_brows_emails: speedtest_score_category_brows_emails$2,
	speedtest_score_category_browsing: speedtest_score_category_browsing$2,
	speedtest_score_category_challenging: speedtest_score_category_challenging$2,
	speedtest_score_category_gameon: speedtest_score_category_gameon$2,
	speedtest_score_category_gameover: speedtest_score_category_gameover$2,
	speedtest_score_category_inthegame: speedtest_score_category_inthegame$2,
	speedtest_score_category_limited: speedtest_score_category_limited$2,
	speedtest_score_category_photo: speedtest_score_category_photo$2,
	speedtest_score_category_small_brows_email: speedtest_score_category_small_brows_email$2,
	"speedtest_score_category_vid&photo": "Video & Photo",
	speedtest_score_category_video: speedtest_score_category_video$2,
	speedtest_score_category_winning: speedtest_score_category_winning$2,
	speedtest_start_button: speedtest_start_button$2,
	speedtest_stats_jitter: speedtest_stats_jitter$2,
	speedtest_stats_jitter_info: speedtest_stats_jitter_info$2,
	speedtest_stats_loss: speedtest_stats_loss$2,
	speedtest_stats_loss_info: speedtest_stats_loss_info$2,
	speedtest_stats_ping: speedtest_stats_ping$2,
	speedtest_stats_ping_info: speedtest_stats_ping_info$2,
	speedtest_tested: speedtest_tested$2,
	speedtest_title: speedtest_title$2,
	speedtest_title_call: speedtest_title_call$2,
	speedtest_title_gaming: speedtest_title_gaming$2,
	speedtest_title_social: speedtest_title_social$2,
	speedtest_title_video: speedtest_title_video$2,
	speedtest_title_work: speedtest_title_work$2,
	speedtest_try_again: speedtest_try_again$2,
	speedtest_upload: speedtest_upload$2,
	speedtest_upload_info: speedtest_upload_info$2,
	status_for_duration: status_for_duration$2,
	this_month: this_month$2,
	time_current_day: time_current_day$2,
	time_current_month: time_current_month$2,
	time_current_week: time_current_week$2,
	time_current_year: time_current_year$2,
	time_older: time_older$2,
	time_today: time_today$2,
	time_yesterday: time_yesterday$2,
	timeline_no_event: timeline_no_event$2,
	timeline_no_notification: timeline_no_notification$2,
	timeline_no_sample: timeline_no_sample$2,
	timeline_table_header_details: timeline_table_header_details$2,
	timeline_table_header_port: timeline_table_header_port$2,
	timeline_table_header_state: timeline_table_header_state$2,
	timeline_table_header_subject: timeline_table_header_subject$2,
	timeline_table_header_type: timeline_table_header_type$2,
	timeline_table_header_when: timeline_table_header_when$2,
	tools_page_title: tools_page_title$2,
	tooltargetbar_ip_address: tooltargetbar_ip_address$2,
	tooltargetbar_location: tooltargetbar_location$2,
	tooltargetbar_mac_address: tooltargetbar_mac_address$2,
	tooltargetbar_no_open_ports: tooltargetbar_no_open_ports$2,
	tooltargetbar_open_ports: tooltargetbar_open_ports$2,
	tooltargetbar_provider: tooltargetbar_provider$2,
	view_timeline_button: view_timeline_button$2,
	waiting_rate: waiting_rate$2
};

var autoblock_card_action_enable$1 = "Permitir";
var autoblock_card_subtitle_disabled$1 = "Fing Desktop no bloquea automáticamente los nuevos dispositivos que se conectan a esta red, lo que podría dejarla insegura.";
var autoblock_card_subtitle_enabled$1 = "Los nuevos dispositivos que se conecten a la red {networkName} se bloquearán automáticamente. Deberá desbloquear manualmente estos dispositivos para permitirles usar la red.";
var autoblock_card_subtitle_permission_disabled$1 = "Bloquea automáticamente los nuevos dispositivos que se conectan a tu red doméstica.";
var autoblock_card_subtitle_validation_disabled$1 = "No es posible bloquear automáticamente nuevos dispositivos que se conectan a la red {networkName}. Esto puede deberse a la falta de permisos o a un contexto de red que no permite que los dispositivos se bloqueen automáticamente.";
var autoblock_card_title$1 = "Bloquear automáticamente nuevos dispositivos";
var autoblock_card_title_disabled$1 = "El bloqueo automático está deshabilitado";
var autoblock_card_title_enabled$1 = "El bloqueo automático está habilitado";
var back_button$1 = "Atrás";
var contacttype_colleague$1 = "Colega";
var contacttype_colleague_contractor$1 = "Contratista";
var contacttype_colleague_staff$1 = "Empleado";
var contacttype_colleague_visitor$1 = "Visitante";
var contacttype_family$1 = "Familia";
var contacttype_family_her$1 = "Ella";
var contacttype_family_him$1 = "Él";
var contacttype_family_kid$1 = "Niño";
var contacttype_family_pet$1 = "Mascota";
var contacttype_family_pet_cat$1 = "Gato";
var contacttype_family_pet_dog$1 = "Perro";
var contacttype_family_relative$1 = "Pariente";
var contacttype_friend$1 = "Amigo";
var contacttype_guest$1 = "Invitado";
var contacttype_help$1 = "Ayuda";
var contacttype_help_cleaning$1 = "Limpieza";
var contacttype_help_delivery$1 = "Entrega";
var contacttype_help_maintenance$1 = "Mantenimiento";
var contacttype_help_medical$1 = "Médico";
var contacttype_other$1 = "Otro";
var contacttype_others$1 = "Otros";
var copy_to_clipboard_copied$1 = "¡Copiado!";
var data_no_trend$1 = "Sin datos de tendencia";
var data_trend_down_1$1 = "Disminuyendo rápidamente";
var data_trend_down_2$1 = "Empeorando";
var data_trend_stable$1 = "Tendencia estable";
var data_trend_up_1$1 = "Mejorando rápido";
var data_trend_up_2$1 = "Mejorando";
var dateformat_day$1 = "día";
var dateformat_day_long$1 = "{amount} día";
var dateformat_day_short$1 = "{amount}d";
var dateformat_dayago$1 = "hace {amount} día";
var dateformat_days$1 = "días";
var dateformat_days_long$1 = "{amount} días";
var dateformat_daysago$1 = " hace {amount} días";
var dateformat_hour$1 = "hora";
var dateformat_hour_long$1 = "{amount} hora";
var dateformat_hour_short$1 = "{amount}h";
var dateformat_hourago$1 = "hace {amount} hora";
var dateformat_hours$1 = "horas";
var dateformat_hours_long$1 = "{amount} horas";
var dateformat_hoursago$1 = "hace {amount} horas";
var dateformat_min$1 = "min";
var dateformat_min_long$1 = "{amount} minuto";
var dateformat_min_short$1 = "{amount}m";
var dateformat_minago$1 = "hace {amount} minuto";
var dateformat_mins$1 = "min";
var dateformat_mins_long$1 = "{amount} minutos";
var dateformat_minsago$1 = "hace {amount} minutos";
var dateformat_minutes$1 = "minutos";
var dateformat_month$1 = "mes";
var dateformat_month_apr$1 = "Abr";
var dateformat_month_aug$1 = "Ago";
var dateformat_month_dec$1 = "Dic";
var dateformat_month_feb$1 = "Feb";
var dateformat_month_jan$1 = "Ene";
var dateformat_month_jul$1 = "Jul";
var dateformat_month_jun$1 = "Jun";
var dateformat_month_mar$1 = "Mar";
var dateformat_month_may$1 = "May";
var dateformat_month_nov$1 = "Nov";
var dateformat_month_oct$1 = "Oct";
var dateformat_month_sep$1 = "Sep";
var dateformat_monthago$1 = "hace {amount} mes";
var dateformat_months$1 = "meses";
var dateformat_monthsago$1 = "hace {amount} meses";
var dateformat_now$1 = "ahora";
var dateformat_week$1 = "semana";
var dateformat_week_long$1 = "{amount} semana";
var dateformat_week_short$1 = "{amount} sem";
var dateformat_weekago$1 = "hace {amount} semana";
var dateformat_weeks$1 = "semanas";
var dateformat_weeks_long$1 = "{amount} semanas";
var dateformat_weeksago$1 = "hace {amount} semanas";
var dateformat_year$1 = "año";
var dateformat_yearago$1 = "hace {amount} año";
var dateformat_years$1 = "años";
var dateformat_yearsago$1 = "hace {amount} años";
var device_alerts_dialog_body$1 = "Recibe notificaciones móviles y por correo electrónico cuando un dispositivo se conecta o desconecta desde esta red.";
var device_alerts_dialog_title$1 = "Notificación de dispositivos conocidos";
var device_confirm_dialog_body$1 = "Dispositivos vistos por primera vez en la red en los últimos {days} días";
var device_confirm_dialog_body_alt$1 = "Dispositivos en su red por confirmar";
var device_confirm_dialog_title$1 = "Confirmar dispositivos conocidos";
var device_detail_banner_choose_action$1 = "Editar modelo";
var device_detail_banner_choose_action_os$1 = "Editar sistema operativo";
var device_detail_banner_choose_subtitle$1 = "Este dispositivo ha sido reconocido por Fing.";
var device_detail_banner_choose_subtitle_model$1 = "Ayúdanos a hacerlo bien: abre nuestro catálogo de Fing y selecciona un modelo.";
var device_detail_banner_choose_subtitle_os$1 = "Ayúdanos a hacerlo bien: abre nuestro catálogo de Fing y selecciona un sistema operativo.";
var device_detail_banner_empty_state_action$1 = "Elegir modelo";
var device_detail_banner_empty_state_subtitle$1 = "Ayúdanos a hacerlo bien: abre nuestro catálogo de Fing y selecciona un modelo.";
var device_detail_banner_feedback_subtitle$1 = "Sus comentarios nos ayudan a mejorar los resultados del reconocimiento de dispositivos";
var device_detail_banner_feedback_title$1 = "¿Fing lo hizo bien?";
var device_detail_banner_revert_action$1 = "Volver al original";
var device_detail_banner_revert_subtitle$1 = "Actualice estos detalles si ya no se ven bien";
var device_detail_banner_thanks$1 = "Gracias, reconocimiento confirmado.";
var device_detail_clear_action$1 = "Borrar de la lista de dispositivos";
var device_detail_delete_modal_action$1 = "Eliminar de la lista";
var device_detail_delete_modal_body$1 = "¿Quieres eliminar este dispositivo de la lista?<br /> Un nuevo escaneo de la red lo añadirá de nuevo a la lista si el dispositivo se detecta en línea.";
var device_detail_delete_modal_body_small$1 = "Eliminar un dispositivo no le impide acceder a la red.";
var device_detail_delete_modal_title$1 = "Eliminar un dispositivo";
var device_detail_edit_action$1 = "Editar detalles del dispositivo";
var device_detail_edit_modal_nameinput_placeholder$1 = "Ingrese un nombre personalizado";
var device_detail_edit_modal_nameinput_small$1 = "Introduce un nombre que facilite la identificación de este dispositivo";
var device_detail_edit_modal_notesinput_label$1 = "Notas adicionales";
var device_detail_edit_modal_notesinput_placeholder$1 = "Máx. 1000 caracteres";
var device_detail_edit_modal_notesinput_small$1 = "Notas de texto libre relacionadas con este dispositivo. Máx. 1000 caracteres";
var device_detail_edit_modal_placementinput_label$1 = "¿Dónde se encuentra el dispositivo?";
var device_detail_edit_modal_placementinput_small$1 = "Introduce el espacio en el que has configurado el dispositivo";
var device_detail_edit_modal_title$1 = "Detalles personalizados adicionales";
var device_detail_family$1 = "Familia";
var device_detail_icon_picker_hint$1 = "Buscar tipos de dispositivos";
var device_detail_icon_picker_title$1 = "Seleccione su tipo de dispositivo";
var device_detail_internet_downtime_schedule$1 = "<b>{name}</b> activo desde {startTime} hasta {endTime}";
var device_detail_internet_downtime_schedule_manage$1 = "Administrar el horario";
var device_detail_kick_out_mode_blocked$1 = "Obstruido";
var device_detail_kick_out_mode_blocked_ago$1 = "Obstruido {time}";
var device_detail_kick_out_mode_blocked_ago_for$1 = "Obstruido {time} por {duration}";
var device_detail_kick_out_mode_blocked_for$1 = "Ha sido bloqueado por {duration}";
var device_detail_kick_out_mode_blocked_on$1 = "En bloque";
var device_detail_kick_out_mode_paused$1 = "En pausa";
var device_detail_kick_out_mode_paused_ago$1 = "En pausa desde {time}";
var device_detail_kick_out_mode_paused_ago_for$1 = "En pausa {time} por {duration}";
var device_detail_kick_out_mode_paused_for$1 = "Ha estado en descanso durante {duration}";
var device_detail_kick_out_mode_paused_on$1 = "En pausa";
var device_detail_kick_out_mode_resumed_immediately$1 = "Fue recogido casi de inmediato";
var device_detail_kick_out_mode_resumed_while$1 = "Ha sido revivido desde hace algún tiempo";
var device_detail_kick_out_mode_unblocked_immediately$1 = "Se desbloqueó casi de inmediato";
var device_detail_kick_out_mode_unblocked_while$1 = "Ha estado bloqueado por un tiempo";
var device_detail_notification_set_automatic$1 = "Automático (\"{time}\" min)";
var device_detail_notification_set_millis$1 = "Actual (\"{time}\" min)";
var device_detail_snmp_description$1 = "Descripción";
var device_detail_wol_failed$1 = "Fing no pudo enviar un paquete para encender este dispositivo.";
var device_detail_wol_modal_title_fail$1 = "Error al enviar, por favor, inténtalo de nuevo";
var device_detail_wol_modal_title_success$1 = "¡Paquete enviado!";
var device_detail_wol_success$1 = "Se ha enviado correctamente una señal a este dispositivo.";
var device_place_Basement$1 = "Sótano";
var device_place_Bathroom$1 = "Baño";
var device_place_Bedroom$1 = "Dormitorio";
var device_place_Cellar$1 = "Bodega";
var device_place_Closet$1 = "Armario";
var device_place_Default$1 = "Seleccione un lugar";
var device_place_Dining_Room$1 = "Comedor";
var device_place_Garage$1 = "Garaje";
var device_place_Garden$1 = "Jardín";
var device_place_Gym$1 = "Gimnasio";
var device_place_Hallway$1 = "Pasillo";
var device_place_Indoors$1 = "Espacios interiores";
var device_place_Kitchen$1 = "Cocina";
var device_place_Living_Room$1 = "Sala de estar";
var device_place_Lobby$1 = "Entrada";
var device_place_Office$1 = "Oficina";
var device_place_Outdoors$1 = "Espacios exteriores";
var device_place_Pool$1 = "Piscina";
var device_place_Study$1 = "Estudio";
var devicecategory_audio_and_video$1 = "Audio &amp; Video";
var devicecategory_engineering$1 = "Ingeniería";
var devicecategory_everything_else$1 = "Todo lo demas";
var devicecategory_home_and_office$1 = "Hogar &amp; Oficina";
var devicecategory_industry$1 = "Industry";
var devicecategory_mobile$1 = "Móvil";
var devicecategory_network$1 = "Red";
var devicecategory_offline$1 = "Dispositivos desconectados";
var devicecategory_personal$1 = "Personal";
var devicecategory_server$1 = "Servidor";
var devicecategory_smart_home$1 = "Smart Home";
var devicetype_alarm$1 = "Alarma";
var devicetype_appliance$1 = "Electrodomésticos";
var devicetype_arduino$1 = "Arduino";
var devicetype_automotive$1 = "Automotive";
var devicetype_baby_monitor$1 = "Monitor de bebé";
var devicetype_barcode$1 = "Escáner de código de barras";
var devicetype_battery$1 = "UPS";
var devicetype_bell$1 = "Timbre de la puerta";
var devicetype_car$1 = "Automóvil";
var devicetype_circuit_card$1 = "Placa de circuito";
var devicetype_cleaner$1 = "Aspiradora";
var devicetype_clock$1 = "Reloj";
var devicetype_cloud$1 = "Nube";
var devicetype_communication$1 = "Comunicación";
var devicetype_computer$1 = "Ordenador";
var devicetype_conferencing$1 = "Reunión";
var devicetype_control_panel$1 = "Panel táctil";
var devicetype_database$1 = "Base de datos";
var devicetype_desktop$1 = "Sobremesa";
var devicetype_disc_player$1 = "Reproductor de discos";
var devicetype_domain_server$1 = "Servidor de dominio";
var devicetype_domotz_box$1 = "Domotz Box";
var devicetype_electric$1 = "Eléctrico";
var devicetype_energy$1 = "Energy";
var devicetype_ereader$1 = "Lector de libros electrónicos";
var devicetype_file_server$1 = "Servidor de archivos";
var devicetype_fingbox$1 = "Fingbox";
var devicetype_firewall$1 = "Firewall";
var devicetype_fitness$1 = "Aptitud";
var devicetype_fridge$1 = "Nevera";
var devicetype_game_console$1 = "Videoconsola";
var devicetype_garage$1 = "Puerta de la cochera";
var devicetype_gateway$1 = "Puerta de enlace";
var devicetype_generic$1 = "Genérico";
var devicetype_health_monitor$1 = "Monitor de salud";
var devicetype_heating$1 = "Aire acondicionado";
var devicetype_humidity$1 = "Sensor de humedad";
var devicetype_industrial$1 = "Industrial Device";
var devicetype_ipod$1 = "Reproductor de MP3";
var devicetype_key_lock$1 = "Cerradura";
var devicetype_laptop$1 = "Portátil";
var devicetype_light$1 = "Luz";
var devicetype_loudspeaker$1 = "Altavoz";
var devicetype_mail_server$1 = "Servidor de correo";
var devicetype_media_player$1 = "Reproductor multimedia";
var devicetype_medical$1 = "Medical Device";
var devicetype_microphone$1 = "Micrófono";
var devicetype_mobile$1 = "Móvil";
var devicetype_modem$1 = "Módem";
var devicetype_motion_detector$1 = "Detector de movimiento";
var devicetype_music$1 = "Reproductor de música";
var devicetype_nas_storage$1 = "Almacenamiento en la red";
var devicetype_network_appliance$1 = "Aparato de red";
var devicetype_pet_monitor$1 = "Monitor de mascotas";
var devicetype_phone$1 = "Teléfono IP";
var devicetype_photo_camera$1 = "Cámara fotográfica";
var devicetype_photos$1 = "Exhibición de fotos";
var devicetype_poe_plug$1 = "Switch PoE";
var devicetype_pool$1 = "Piscina";
var devicetype_pos$1 = "Punto de venta";
var devicetype_power_system$1 = "Sistema de poder";
var devicetype_printer$1 = "Impresora";
var devicetype_processor$1 = "Procesador";
var devicetype_projector$1 = "Proyector";
var devicetype_proxy_server$1 = "Servidor proxy";
var devicetype_radio$1 = "Radio";
var devicetype_raspberry$1 = "Raspberry";
var devicetype_remote_control$1 = "Control remoto";
var devicetype_rfid$1 = "Etiqueta RFID";
var devicetype_robot$1 = "Robot";
var devicetype_router$1 = "Router";
var devicetype_satellite$1 = "Satélite";
var devicetype_scale$1 = "Balanza";
var devicetype_scanner$1 = "Escáner";
var devicetype_security_system$1 = "Sistema de Seguridad";
var devicetype_sensor$1 = "Sensor";
var devicetype_server$1 = "Servidor";
var devicetype_sleep$1 = "Sleep Tech";
var devicetype_small_cell$1 = "Antena celular pequeña";
var devicetype_smart_controller$1 = "Controlador";
var devicetype_smart_home$1 = "Dispositivo inteligente";
var devicetype_smart_meter$1 = "Medidor de inteligencia";
var devicetype_smart_plug$1 = "Enchufe inteligente";
var devicetype_smoke$1 = "Detector de humo";
var devicetype_solar_panel$1 = "Panel solar";
var devicetype_sound_system$1 = "Receptor AV";
var devicetype_sprinkler$1 = "Aspersor";
var devicetype_stb$1 = "Caja de cable";
var devicetype_streaming_dongle$1 = "Dongle de transmisión";
var devicetype_surveillance_camera$1 = "Cámara IP";
var devicetype_switch$1 = "Switch";
var devicetype_tablet$1 = "Tablet";
var devicetype_television$1 = "Televisión";
var devicetype_terminal$1 = "Terminal";
var devicetype_thermostat$1 = "Termostato";
var devicetype_toy$1 = "Juguete";
var devicetype_undefined$1 = "Icono predeterminado";
var devicetype_usb$1 = "USB";
var devicetype_virtual_machine$1 = "Máquina virtual";
var devicetype_voice_control$1 = "Asistente de voz";
var devicetype_voip$1 = "Dispositivo de VoIP";
var devicetype_vpn$1 = "VPN";
var devicetype_washer$1 = "Lavadora";
var devicetype_watch$1 = "Smart Watch";
var devicetype_wearable$1 = "Usable";
var devicetype_weather$1 = "Estación meteorológica";
var devicetype_web_server$1 = "Servidor web";
var devicetype_wifi$1 = "Wi-Fi";
var devicetype_wifi_extender$1 = "Amplificador Wi-Fi";
var dhcpdiscovery_result_domain$1 = "Dominio";
var discovery_action_edit$1 = "Editar";
var discovery_device_action_change$1 = "Cambiar";
var discovery_devices_filter_all$1 = "Todo";
var discovery_devices_filter_offline$1 = "Sin conexión";
var discovery_devices_filter_online$1 = "En línea";
var discovery_devices_sorted_name$1 = "Nombre";
var discovery_devices_sorted_state$1 = "Estado";
var discovery_events_change_state_briefly$1 = "brevemente";
var discovery_events_change_state_till$1 = "<span> hasta ahora</span> ";
var discovery_events_empty_state$1 = "No hay eventos para {time} ";
var discovery_events_heatmap_status$1 = "<span><strong>{distinct}</strong> dispositivos</span> ";
var discovery_events_no_in_this_period$1 = "No se encontraron eventos en este período";
var discovery_events_premium_banner_description$1 = "Actualice a Fing para ver una cronología completa de eventos en su red.";
var discovery_events_premium_banner_description_end$1 = "Ampliar para ver el historial completo.";
var discovery_events_show_next$1 = "Mostrar próximos eventos";
var discovery_events_show_previous$1 = "Mostrar eventos anteriores";
var discovery_events_timeline_more$1 = "Mostrar más eventos";
var discovery_events_timeline_new$1 = "Visto por primera vez en la red";
var discovery_events_timeline_new_blocked$1 = "Visto por primera vez en la red, bloqueado automáticamente";
var discovery_events_timeline_offline_briefly$1 = "Fuera de línea brevemente";
var discovery_events_timeline_offline_duration$1 = "Desconectado durante {duration}";
var discovery_events_timeline_offline_duration_immediately$1 = "Recientemente en linea";
var discovery_events_timeline_offline_duration_while$1 = "En línea por algún tiempo";
var discovery_events_timeline_offline_till_now$1 = "Desconectado hasta ahora";
var discovery_events_timeline_online_briefly$1 = "En línea brevemente";
var discovery_events_timeline_online_duration$1 = "En línea durante {duration}";
var discovery_events_timeline_online_duration_immediately$1 = "Recientemente desconectado";
var discovery_events_timeline_online_duration_while$1 = "Fuera de línea por algún tiempo";
var discovery_events_timeline_online_till_now$1 = "En línea hasta ahora";
var discovery_events_week_heatmap_header$1 = "Mapa de calor de los últimos 7 días";
var discovery_events_week_timeline_header$1 = "Cronología de los últimos 7 días";
var discovery_header_location$1 = "Ubicación";
var discovery_header_network$1 = "Red";
var discovery_network_internet_header$1 = "Configuración de Internet";
var discovery_network_internet_hostname$1 = "Nombre del «host»";
var discovery_network_internet_isp$1 = "ISP";
var discovery_network_internet_location$1 = "Ubicación";
var discovery_network_internet_provider$1 = "Proveedor";
var discovery_network_internet_pubaddress$1 = "Dirección pública";
var discovery_network_internet_timezone$1 = "Zona horaria";
var discovery_network_netinfo_gateway$1 = "Pasarela";
var discovery_security_newdevices_confirmall$1 = "Confirmar todo";
var discovery_security_newdevices_confirmed$1 = "Confirmado";
var discovery_security_newdevices_last30days$1 = "Últimos 30 días";
var discovery_security_newdevices_last7days$1 = "Últimos 7 días";
var discovery_security_newdevices_message$1 = "Fing realiza un seguimiento de cuándo se ha visto cada dispositivo por primera vez. Confirma todos los dispositivos que reconoces para detectar fácilmente a los intrusos.";
var discovery_security_newdevices_title$1 = "Nuevos dispositivos";
var discovery_security_newdevices_today$1 = "Hoy";
var dnslookup_info_local_title$1 = "Local";
var duration_day_long$1 = "{amount, plural, =1 {# dia} other {# dias}}";
var duration_day_short$1 = "{amount}d";
var duration_hour_long$1 = "{amount, plural, =1 {# hora} other {# horas}}";
var duration_hour_short$1 = "{amount}h";
var duration_min_long$1 = "{amount, plural, =1 {# min} other {# min}}";
var duration_min_short$1 = "{amount}m";
var duration_minute_long$1 = "{amount, plural, =1 {# minuto} other {# minutos}}";
var duration_month_long$1 = "{amount, plural, =1 {# mese} other {# meses}}";
var duration_month_short$1 = "{amount}mm";
var duration_week_long$1 = "{amount, plural, =1 {# semana} other {# semanas}}";
var duration_week_short$1 = "{amount} sem";
var duration_year_long$1 = "{amount, plural, =1 {# año} other {# años}}";
var duration_year_short$1 = "{amount}aa";
var empty_state_subtitle_fallback$1 = "No hay nada por el momento. Vuelve más tarde";
var empty_state_title_fallback$1 = "Nada que mostrar";
var every_day$1 = "Cada {num}d";
var every_hour$1 = "Cada {num}h";
var every_week$1 = "Cada {num}w";
var findhiddencameras_emptystate_subtitle$1 = "No se ha encontrado ninguna cámara.";
var findhiddencameras_emptystate_title$1 = "Todo está en orden.";
var findhiddencameras_foundcameras_title$1 = "Cámaras encontradas";
var findhiddencameras_helper_0found$1 = "Se han encontrado 0 dispositivos";
var findhiddencameras_helper_totdevice$1 = "{totDeviceString} encontrado";
var findhiddencameras_helper_totdevice_1found$1 = "1 dispositivo ";
var findhiddencameras_helper_totdevice_manyfound$1 = "{tot} dispositivos ";
var findhiddencameras_helper_totdevice_with_unknown$1 = "{totDeviceString} encontrados, de los cuales {countUnknown} desconocidos";
var findhiddencameras_helper_type_babymonitor$1 = "Monitor de bebé";
var findhiddencameras_helper_type_ipcamera$1 = "Cámara IP";
var findhiddencameras_helper_type_monitordetector$1 = "Detector de monitor";
var findhiddencameras_helper_type_photocamera$1 = "Cámara fotográfica";
var findhiddencameras_helper_type_securitysystem$1 = "Sistema de seguridad";
var findhiddencameras_progress_subtitle$1 = "Análisis en {progress}%. Espere mientras verificamos con nuestros sistemas para identificar cámaras";
var findhiddencameras_progress_title$1 = "Recopilando información de cámaras";
var findhiddencameras_summary_title$1 = "Resumen";
var findhiddencameras_toolresult_danger_subtitle$1 = "Detectadas {length} cámaras activas desconocidas. Si estos dispositivos te pertenecen, reconócelos manualmente y no aparecerán en el informe.";
var findhiddencameras_toolresult_danger_title$1 = "Cámaras desconocidas encontradas";
var findhiddencameras_toolresult_fingpedia_stats$1 = "Fing ha identificado {length} cámaras hasta la fecha.";
var findhiddencameras_toolresult_premium_subtitle$1 = "Proteja su privacidad a través de un escaneo avanzado para detectar dispositivos de grabación de video";
var findhiddencameras_toolresult_premium_title$1 = "Verificación de cámara oculta deshabilitada";
var findhiddencameras_toolresult_success_nofound_subtitle$1 = "El análisis encontró {length} dispositivos activos pero ninguna cámara.";
var findhiddencameras_toolresult_success_nofound_title$1 = "No se encontró ninguna cámara";
var findhiddencameras_toolresult_success_subtitle$1 = "Detectadas {length} cámaras activas conocidas. Asegúrate de que el acceso a las cámaras esté protegido contra intrusos y listo.";
var findhiddencameras_toolresult_success_title$1 = "Cámaras encontradas";
var findhiddencameras_toolresult_sync_subtitle$1 = "¡Tranquilo! Esto puede llevar un tiempo. La duración de la prueba depende del tamaño de su red y la cantidad de dispositivos conectados.";
var findhiddencameras_toolresult_sync_title$1 = "Buscando cámara oculta...";
var findhiddencameras_unrecognized_subtitle$1 = "Se han encontrado {length} dispositivos que Fing no ha podido reconocer. No podemos determinar si estos dispositivos son cámaras o no.";
var findhiddencameras_unrecognized_title$1 = "Dispositivos no reconocidos";
var format_speed$1 = "{dw} Mbps / {up} Mbps";
var gender_female$1 = "Mujer";
var gender_male$1 = "Masculino";
var gender_other$1 = "Otro";
var generic_VPN$1 = "VPN";
var generic_account$1 = "Cuenta";
var generic_actions$1 = "Acciones";
var generic_alert$1 = "Alerta";
var generic_am$1 = "AM";
var generic_auto$1 = "Automático";
var generic_automatic$1 = "Automático";
var generic_avg$1 = "Med.";
var generic_back$1 = "Atrás";
var generic_band$1 = "Banda";
var generic_best$1 = "Mejor";
var generic_brandandmodel$1 = "Marca e Modelo";
var generic_bssid$1 = "BSSID";
var generic_cancel$1 = "Cancelar";
var generic_change$1 = "Cambiar";
var generic_changed$1 = "Cambiado";
var generic_check$1 = "Cheque";
var generic_clear$1 = "Vaciar";
var generic_close$1 = "Cerrar";
var generic_completed$1 = "Completado";
var generic_confirm$1 = "Confirmar";
var generic_connected_to$1 = "Conectado a ";
var generic_continue$1 = "Continuar";
var generic_country$1 = "País";
var generic_data_not_available$1 = "Datos no disponibles";
var generic_delete$1 = "Eliminar";
var generic_description$1 = "Descripción";
var generic_details$1 = "Detalles";
var generic_device$1 = "Dispositivo";
var generic_dhcp$1 = "DHCP";
var generic_dhcp_proxy$1 = "Proxy DHCP WPAD";
var generic_disable_all$1 = "Desactivar todo";
var generic_disabled$1 = "Deshabilitado";
var generic_domain$1 = "Dominio";
var generic_download_speed$1 = "Velocidad de descarga";
var generic_edit$1 = "Editar";
var generic_edit_profile$1 = "Edita tu perfil";
var generic_email$1 = "Correo electrónico";
var generic_enable_all$1 = "Activar todo";
var generic_enabled$1 = "Habilitado";
var generic_error$1 = "Error";
var generic_example$1 = "Ejemplo";
var generic_failed$1 = "Error";
var generic_first_seen$1 = "Visto por primera vez";
var generic_for$1 = "para";
var generic_help$1 = "Ayuda";
var generic_help_on_fing$1 = "Ayuda en Fing";
var generic_home$1 = "Casa";
var generic_hotspot$1 = "Zona activa";
var generic_id$1 = "ID";
var generic_idle$1 = "Libre";
var generic_important$1 = "Importante";
var generic_inspect$1 = "Inspeccionar";
var generic_internet$1 = "Internet";
var generic_ip$1 = "IP";
var generic_lastchange$1 = "Última modificación";
var generic_link$1 = "Enlace";
var generic_link_speed$1 = "Velocidad del enlace";
var generic_live$1 = "En directo";
var generic_local$1 = "Local";
var generic_logo$1 = "Logotipo";
var generic_make$1 = "Hacer";
var generic_manage$1 = "Administrar";
var generic_manual$1 = "Manual";
var generic_map_gpudisabled_link$1 = "aquí";
var generic_map_gpudisabled_message$1 = "Los mapas requieren aceleración por GPU. Puedes habilitarlo";
var generic_max$1 = "Máx.";
var generic_mbps_download$1 = "Mbps download";
var generic_mbps_upload$1 = "Mbps upload";
var generic_min$1 = "Mín.";
var generic_ms$1 = "ms";
var generic_ms_latency$1 = "Millis latencia";
var generic_name$1 = "Nombre";
var generic_network$1 = "Red";
var generic_next$1 = "Siguiente";
var generic_no$1 = "No";
var generic_no_internet$1 = "Sin Internet";
var generic_no_name$1 = "Sin nombre";
var generic_not_available$1 = "N/A";
var generic_not_connected$1 = "No conectado";
var generic_not_in_network$1 = "No está en la red";
var generic_not_tracking$1 = "Sin rastreo";
var generic_notset$1 = "no definido";
var generic_office$1 = "Oficina";
var generic_offline$1 = "Sin conexión";
var generic_ok$1 = "Acepto";
var generic_online$1 = "En línea";
var generic_open$1 = "Abierto";
var generic_operatingsystem$1 = "Sistema Operativo";
var generic_optional$1 = "Opcional";
var generic_or$1 = "o";
var generic_order_by$1 = "Ordenar por";
var generic_os$1 = "SO";
var generic_outage$1 = "Interrupción";
var generic_outages$1 = "Interrupciones";
var generic_pm$1 = "PM";
var generic_public$1 = "Público";
var generic_recent$1 = "Reciente";
var generic_refresh$1 = "Actualizar";
var generic_related_articles$1 = "Artículos relacionados";
var generic_rental$1 = "Alquiler";
var generic_report$1 = "Informe";
var generic_result$1 = "Resultado";
var generic_running$1 = "Corriendo";
var generic_save$1 = "Guardar";
var generic_security$1 = "Seguridad";
var generic_see_result$1 = "Ver resultado";
var generic_seeall$1 = "Ver todo";
var generic_send$1 = "Enviar";
var generic_service$1 = "Servicio";
var generic_settings$1 = "Configuración";
var generic_share$1 = "Compartir";
var generic_show_data_for$1 = "Mostrar datos para";
var generic_signal$1 = "Señal";
var generic_size$1 = "Tamaño";
var generic_source$1 = "Origen";
var generic_ssid$1 = "SSID";
var generic_start$1 = "Empezar";
var generic_stop$1 = "Detener";
var generic_support$1 = "Soporte";
var generic_tracking$1 = "Rastreo";
var generic_type$1 = "Tipo";
var generic_unknown$1 = "Desconocido";
var generic_unrecognized$1 = "No reconocido";
var generic_updating$1 = "Actualizando";
var generic_upgrade$1 = "Ampliar";
var generic_upload_speed$1 = "Velocidad de subida";
var generic_view$1 = "Ver";
var generic_view_details$1 = "Ver detalles";
var generic_view_less$1 = "Ver menos";
var generic_view_more$1 = "Ver más";
var generic_website$1 = "Sitio web";
var generic_what_outage$1 = "Qué es una interrupción";
var generic_worst$1 = "Peor";
var generic_wps_enabled$1 = "WPS habilitado";
var generic_yes$1 = "Sí";
var generic_you$1 = "Tú";
var healtcheck_edit_dialog_placeholder$1 = "Ingrese la lista de hosts de destino";
var healthcheck_001_B$1 = "El dispositivo no está en la red: no hay dirección IP";
var healthcheck_001_G$1 = "El dispositivo está en la red: tiene una dirección IP válida";
var healthcheck_001_easy$1 = "Necesitas una dirección (IP) para que tu ordenador esté en una red. Tu ordenador/dispositivo debe estar en una red para comunicarse con otros dispositivos y acceder a Internet.";
var healthcheck_001_fix$1 = "Si no estás conectado a una red, debes verificar los cables, en caso de que sea por cable; si en cambio es inalámbrica, debes comprobar tu rúter inalámbrico. En Windows, puedes hacer clic en el icono de red y ejecutar la opción <i>Solucionar problemas</i>. En Mac, puedes ejecutar <i>la herramienta de diagnóstico inalámbrico</i>, disponible a través de Spotlight Search. En algunos casos, un reinicio del portátil puede solucionar la situación.";
var healthcheck_001_tech$1 = "La verificación enumera los adaptadores de red disponibles para encontrar una interfaz con una dirección IPv4 válida.";
var healthcheck_002_B$1 = "La dirección IP del dispositivo se asigna en modo estático, no por DHCP";
var healthcheck_002_G$1 = "La dirección IP del dispositivo se asigna en modo estático";
var healthcheck_002_easy$1 = "Tu rúter no asigna la dirección (IP) de tu ordenador dentro de la red, sino que se configura manualmente. Debes evitarlo a menos que comprendas el funcionamiento de las redes.";
var healthcheck_002_tech$1 = "La verificación emite una alerta si la dirección IP del dispositivo se asigna en modo estático y no se obtiene a través del DHCP.";
var healthcheck_003_B$1 = "El dispositivo no está en red: intentando obtener una dirección IP del DHCP";
var healthcheck_003_G$1 = "El dispositivo está en red: se ha obtenido correctamente una dirección IP del DHCP";
var healthcheck_003_easy$1 = "Necesitas una dirección IP para que tu ordenador esté en red y que así se pueda comunicar con otros dispositivos y acceder a Internet. En las redes locales actuales, wifi y Ethernet, las direcciones IP se asignan automáticamente a cada PC/dispositivo a medida que se unen a la red, sin necesidad de ninguna configuración manual previa. El proceso y servicio es el <b>DHCP</b>: Protocolo de configuración dinámica de «host».";
var healthcheck_003_fix$1 = "Si tu dispositivo no obtiene una dirección, no puedes acceder a la red. Debes intentar desconectarte y volver a conectarte a la red. Si el problema persiste, debes intentar reiniciar tu dispositivo. Si sigue sin solucionarse, puede que tu DHCP necesite un reinicio: puedes apagar y encender el rúter de tu hogar para asegurarte de que se reinicia por completo.";
var healthcheck_003_tech$1 = "La verificación garantiza que tu dirección IP actual esté asignada por un DHCP y no de forma manual.";
var healthcheck_004_B$1 = "El reloj del ordenador no está sincronizado";
var healthcheck_004_G$1 = "El reloj del ordenador está sincronizado";
var healthcheck_004_easy$1 = "Si el reloj de tu ordenador no está sincronizado se podrían ver afectadas varias funciones del PC. Incluso la navegación por las páginas web puede verse afectada, ya que los certificados de seguridad siempre se validan con fecha de vencimiento.";
var healthcheck_004_fix$1 = "Debes abrir las preferencias de fecha y hora en la configuración de tu sistema y asegurarte de que <i>el establecimiento automático de fecha y hora</i> esté habilitado.";
var healthcheck_004_tech$1 = "La verificación compara la hora local del PC con un servidor horario remoto.";
var healthcheck_005_B$1 = "No hay ningún servidor DNS configurado";
var healthcheck_005_G$1 = "El servidor DNS está configurado";
var healthcheck_005_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Tu PC debe tener al menos un DNS configurado para que pueda acceder y navegar por Internet.";
var healthcheck_005_fix$1 = "En una red segura y sólida, el rúter envía automáticamente los servidores DNS al PC. Debes comprobar la configuración de red de tu ordenador para asegurarte de que sea correcta. También puedes verificar la configuración de tu rúter para asegurarte de que tenga un DNS válido. A veces, los servidores DNS locales o del proveedor no funcionan correctamente y puedes omitirlos configurando manualmente en tu PC local servidores DNS estándar habituales como, p. ej., Google DNS: 8.8.8.8<br/>. Si estás intentando acceder a una <b>red wifi pública</b> que requiere un inicio de sesión, puede suceder que la página de inicio de sesión no aparezca y que no puedas acceder a Internet. Una buena solución es abrir el navegador y visitar manualmente la siguiente página, lo que obliga a que aparezca la llamada pantalla cautiva y que te permita iniciar sesión: <b>captive.apple.com</b> ";
var healthcheck_005_tech$1 = "La comprobación verifica que uno o más servidores DNS estén configurados en tu PC.";
var healthcheck_006_B$1 = "No hay ninguna pasarela de red configurada";
var healthcheck_006_G$1 = "La pasarela está configurada";
var healthcheck_006_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet.";
var healthcheck_006_fix$1 = "Las posibles causas para que una pasarela no esté configurada pueden ser muy diversas, por lo que no existe una solución específica para este problema. Debes abordar otros problemas indicados por otras comprobaciones y probar las soluciones que se sugieren.";
var healthcheck_006_tech$1 = "La comprobación verifica que una ruta predeterminada hacia Internet esté disponible en la interfaz de red habilitada, a través de un salto local próximo que será la pasarela a Internet.";
var healthcheck_007_B$1 = "La conexión wifi no es fiable";
var healthcheck_007_G$1 = "La conexión wifi es buena o aceptable";
var healthcheck_007_easy$1 = "La intensidad de la señal inalámbrica se mide en dBm (decibelios-milivatios), y de manera algo confusa, se expresa como valores negativos, por eso Fing lo traduce a un valor porcentual en una escala del 1 al 100 %. Si recibes una advertencia de señal débil, significa que tu PC, en el lugar concreto donde se encuentra, no está recibiendo una señal inalámbrica óptima, y eso afecta tanto el acceso a la red local como a la navegación por Internet.";
var healthcheck_007_fix$1 = "En primer lugar, asegúrate de que tu rúter u otros puntos de acceso inalámbricos estén ubicados en alto con una línea de visión despejada hacia las partes más amplias de tu hogar; no escondas tu punto de acceso detrás del televisor o dentro de un armario: libéralo tanto como sea posible. Otra posible causa de una mala señal son los conflictos de los canales wifi: si tú y un vecino estáis usando el mismo canal de red, las señales pueden interferirse entre sí y ralentizar la conexión. Puedes escanear el espectro en busca de actividad en cada canal, y si ves que tu red y otra distinta están en el mismo canal, intenta cambiar tu rúter a un canal diferente: inicia sesión en el panel de control del rúter, busca la configuración inalámbrica y modifica las propiedades del canal cambiando el canal seleccionado o configurándolo en selección automática de canal, si esta opción está disponible.";
var healthcheck_007_tech$1 = "La verificación alerta cuando la intensidad de la señal wifi está por debajo de los umbrales recomendados: la señal por encima de -60 dBm (66 %) es buena, hasta -75 dBm (40 %) no es fuerte pero sí aceptable, más allá de -75 dBm no es fiable.";
var healthcheck_008_B$1 = "La velocidad del enlace de Ethernet no es óptima";
var healthcheck_008_G$1 = "La velocidad del enlace de Ethernet es rápida";
var healthcheck_008_easy$1 = "La velocidad del enlace de la red por cable se mide en Mbps (megabits por segundo). Cuanto mayor sea el valor, más rápida y mejor será la conexión. En las redes modernas, debes alcanzar 1 Gbps (igual a 1000 Mbps), o incluso más en las redes corporativas.";
var healthcheck_008_fix$1 = "La tarjeta de red de un PC moderno admite 1 Gbps, por lo que, en primer lugar, debes verificar los cables y asegurarte de que sean <i>cables de Ethernet Gigabit</i>. También debes comprobar el rúter y los interruptores opcionales en posición intermedia, para asegurarte de que el cable esté conectado al puerto Gigabit.";
var healthcheck_008_tech$1 = "La comprobación alerta cuando la velocidad del enlace por cable es inferior a 1 Gbps.";
var healthcheck_009_B$1 = "El adaptador de red no está activo";
var healthcheck_009_G$1 = "El adaptador de red está activo";
var healthcheck_009_easy$1 = "Necesitas un adaptador de red activo en tu ordenador para acceder a una red. Puede ser por cable (Ethernet) o inalámbrico (wifi). Un adaptador activo obtiene una dirección (IP) para que tu ordenador acceda a una red. Tu ordenador/dispositivo debe estar en una red para comunicarse con otros dispositivos y acceder a Internet.";
var healthcheck_009_fix$1 = "Debes abrir los ajustes/configuración de red de tu portátil, p. ej., en Windows puedes hacer clic en el icono de red y asegurarte de que tu adaptador no esté desactivado. También puedes ejecutar la opción <i>Solucionar problemas</i>. En algunos casos, un reinicio del portátil puede solucionar la situación.";
var healthcheck_009_tech$1 = "La verificación enumera los adaptadores de red disponibles para encontrar la interfaz de red activa/habilitada.";
var healthcheck_00A_G$1 = "El DNS del ordenador anula la configuración de la red";
var healthcheck_00A_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Tu PC debe tener al menos un DNS configurado para que pueda acceder y navegar por Internet.<br/> La verificación te indica que la configuración del DNS de tu PC está anulando los valores predeterminados de la red.";
var healthcheck_00A_tech$1 = "La verificación informativa te indica si la configuración del DNS de tu ordenador anula los servidores DNS predeterminados de la red.";
var healthcheck_010_G$1 = "Antivirus instalado";
var healthcheck_010_easy$1 = "Hay un software antivirus instalado en el ordenador local.";
var healthcheck_010_tech$1 = "La verificación informativa te indica si hay un software antivirus instalado en su ordenador.";
var healthcheck_401_B$1 = "El dispositivo no está conectado a una red local";
var healthcheck_401_G$1 = "El dispositivo está en una red local";
var healthcheck_401_easy$1 = "Necesitas una dirección (IP) para que tu ordenador esté en una red. Tu ordenador/dispositivo debe estar en una red para comunicarse con otros dispositivos y acceder a Internet.";
var healthcheck_401_fix$1 = "Si no estás conectado a una red, debes verificar los cables, en caso de que sea por cable; si en cambio es inalámbrica, debes comprobar tu rúter inalámbrico. En Windows, puedes hacer clic en el icono de red y ejecutar la opción <i>Solucionar problemas</i>. En algunos casos, un reinicio del portátil puede solucionar la situación.";
var healthcheck_401_tech$1 = "La verificación enumera los adaptadores de red disponibles para encontrar una interfaz con una configuración de red IP válida: dirección IP, pasarela, DNS.";
var healthcheck_402_B$1 = "Debes proporcionar un contexto para la red actual y activar las comprobaciones avanzadas";
var healthcheck_402_G$1 = "Has proporcionado un contexto para la red actual";
var healthcheck_402_easy$1 = "Al proporcionar un contexto para la red actual, permites que Fing sea más certero en sus comprobaciones del estado de la conectividad.";
var healthcheck_402_fix$1 = "Indícale a Fing si la red actual es una red doméstica o por el contrario es una red comercial o pública. Esto hará que la advertencia desaparezca y permitirá además que las comprobaciones del estado de la conectividad contextual sean específicas para la red.";
var healthcheck_402_tech$1 = "Establecer un contexto para la red actual cambia y ajusta las comprobaciones que Fing realiza dentro de esta.";
var healthcheck_403_B$1 = "Sin ruta al servidor DNS";
var healthcheck_403_G$1 = "Existe una ruta válida al DNS";
var healthcheck_403_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Tu PC debe tener al menos un DNS configurado para que pueda acceder y navegar por Internet.";
var healthcheck_403_fix$1 = "En una red segura y sólida, los servidores DNS se envían automáticamente a tu PC por parte del rúter, por lo que el PC puede llegar a ellos a través de una ruta válida. Debes verificar la configuración de la red local para asegurarte de que sea correcta. También puedes verificar la configuración de tu rúter para asegurarte de que tenga un DNS válido. A veces, los servidores DNS locales o del proveedor no funcionan correctamente y puedes omitirlos configurando manualmente en tu PC local servidores DNS estándar habituales como, p. ej., Google DNS: 8.8.8.8.";
var healthcheck_403_tech$1 = "La comprobación verifica que el servidor DNS primario configurado sea accesible a través de una ruta válida.";
var healthcheck_404_B$1 = "Sin ruta al servidor DNS secundario";
var healthcheck_404_G$1 = "Existe una ruta válida al DNS secundario";
var healthcheck_404_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Tu PC debe tener al menos un DNS configurado para que pueda acceder y navegar por Internet. Opcionalmente, podría haber un DNS adicional configurado, llamado DNS secundario: cuando falla el DNS primario, el PC vuelve a intentarlo con el DNS secundario.";
var healthcheck_404_fix$1 = "En una red segura y sólida, los servidores DNS se envían automáticamente a tu PC por parte del rúter, por lo que el PC puede llegar a ellos a través de una ruta válida. Debes verificar la configuración de la red local para asegurarte de que sea correcta. También puedes verificar la configuración de tu rúter para asegurarte de que tenga un DNS válido. A veces, los servidores DNS locales o del proveedor no funcionan correctamente y puedes omitirlos configurando manualmente en tu PC local servidores DNS estándar habituales como, p. ej., Google DNS: 8.8.8.8.";
var healthcheck_404_tech$1 = "La comprobación verifica que los servidores DNS secundarios configurados sean accesibles a través de una ruta válida.";
var healthcheck_405_B$1 = "Sin ruta a la pasarela de red";
var healthcheck_405_G$1 = "Existe una ruta válida a la pasarela de red";
var healthcheck_405_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet. Fing te advierte en caso de que la configuración de red actual del PC no sea la correcta para acceder y comunicarse con la pasarela de red o el rúter.";
var healthcheck_405_tech$1 = "La comprobación verifica que la pasarela de red (es decir, el siguiente salto de la ruta predeterminada) sea accesible a través de una ruta válida (local o remota).";
var healthcheck_406_B$1 = "La máscara de red (longitud del prefijo) no está ajustada correctamente";
var healthcheck_406_G$1 = "La máscara de red (longitud del prefijo) está configurada correctamente";
var healthcheck_406_easy$1 = "Una máscara de subred es un número que define el rango de direcciones (IP) disponible dentro de una red. Utiliza el mismo formato que la dirección IP, pero en formato negativo, p. ej., 255.255.255.0 es una máscara de <i>clase C</i> habitual que incluye un rango de 256 direcciones. Una forma alternativa de expresarlo es como la longitud del prefijo de red, lo que indica cuántos bits de la dirección de red son estables: una red de clase C es /24, lo que significa que de 24 bits, los primeros 3 bytes de la dirección no varían.";
var healthcheck_406_fix$1 = "Una red sobredimensionada es mucho más lenta que una del tamaño correcto. Por ejemplo, una red doméstica con docenas de dispositivos que no son de Clase C evidentemente no está ajustada correctamente. Para solucionarlo, no tienes que cambiar la configuración de tu PC local, sino iniciar sesión en la configuración del rúter y modificarla. Para asegurarte de que todos los dispositivos reciban la nueva configuración actualizada, debes apagar y encender o volver a conectar todos los dispositivos conectados.";
var healthcheck_406_tech$1 = "La comprobación verifica que la máscara de subred de su red (o la longitud del prefijo de red) no esté sobredimensionada. Aunque los estándares de redes recomiendan elegir siempre la multidifusión y la transmisión al buscar dispositivos y servicios de red, muchos dispositivos modernos del Internet de las Cosas siguen utilizando barridos de unidifusión para encontrar emparejamientos: eso implica que para la búsqueda, la incorporación, el emparejamiento o el uso del servicio cuando se tiene una red de gran tamaño se comprobará una gran cantidad de dispositivos posibles, en lugar de solo 256/512. Un buen ejemplo de ello es el grupo de trabajo de Windows: la NetBIOS es de tipo unidifusión, por lo que la búsqueda de otros PC e impresoras en una red de gran tamaño tarda mucho más tiempo. Lo mismo sucede con los «softwares» de monitorización de redes, como Fing, Fingbox, etc.: estas aplicaciones aprovechan el barrido ARP, ping o similar, por lo que el tiempo que se tarda en descubrir una red es proporcional al tamaño de la misma.";
var healthcheck_407_B$1 = "La pasarela de red no es accesible";
var healthcheck_407_G$1 = "La pasarela de red es accesible";
var healthcheck_407_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet. Fing te advierte en caso de que la pasarela o el rúter no estén accesibles actualmente, lo que afectará a la conexión a Internet.";
var healthcheck_407_fix$1 = "Si no puedes comunicar con la pasarela, no podrás acceder a Internet. Debes comprobar los cables, en caso de que sea una conexión por cable; si en cambio es inalámbrica, debes comprobar tu rúter inalámbrico. En Windows, puedes hacer clic en el icono de red y ejecutar la opción <i>Solucionar problemas</i>. Si el problema persiste, debes comprobar si el rúter está encendido y funciona bien, por ejemplo, comprobando que todos los ledes estén en verde.";
var healthcheck_407_tech$1 = "La comprobación verifica que la pasarela de la red sea accesible y esté activa, es decir, que responda a las solicitudes de ARP.";
var healthcheck_408_B$1 = "No se puede acceder al DNS local";
var healthcheck_408_G$1 = "El DNS local es accesible";
var healthcheck_408_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Fing te advierte en caso de que tu red tenga un servidor DNS local configurado para responder consultas, aunque parezca que no responde correctamente a las solicitudes.";
var healthcheck_408_fix$1 = "Debes verificar la configuración de tu rúter para asegurarte de que tenga un conjunto de DNS válido, y si es él mismo, deberías probar a apagarlo y encenderlo de nuevo. Puedes intentar omitir el DNS de la red local configurando manualmente en el PC local servidores DNS estándar habituales como, p. ej., Google DNS: 8.8.8.8";
var healthcheck_408_tech$1 = "La comprobación verifica que el servidor DNS local configurado sea realmente accesible y esté activo, respondiendo a las consultas.";
var healthcheck_409_B$1 = "No se puede acceder al DNS secundario";
var healthcheck_409_G$1 = "El DNS local secundario es accesible";
var healthcheck_409_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Fing te advierte cuando tu red tiene un servidor DNS local secundario configurado para responder consultas, aunque parezca que no responde correctamente a las solicitudes.";
var healthcheck_409_tech$1 = "La comprobación verifica que el servidor DNS local secundario configurado sea realmente accesible y esté activo, respondiendo a las consultas.";
var healthcheck_40A_B$1 = "Algún dispositivo no puede conectarse a la red";
var healthcheck_40A_G$1 = "Los dispositivos están accediendo correctamente a la red";
var healthcheck_40A_easy$1 = "Los dispositivos necesitan una dirección (IP) para estar en red y así poder comunicarse con otros dispositivos y acceder a Internet. En las redes locales actuales, wifi y Ethernet, las direcciones IP se asignan automáticamente a cada PC/dispositivo a medida que se unen a la red, sin necesidad de ninguna configuración manual previa. El proceso y servicio es el <b>DHCP</b>: Protocolo de configuración dinámica de «host».";
var healthcheck_40A_fix$1 = "Primero debes verificar el dispositivo de destino que está teniendo problemas para acceder a la red: comprueba su configuración y asegúrate de que la configuración de red (nombre de red, contraseña, etc.) para tu wifi sea la correcta. Un apagado y encendido del dispositivo en cuestión puede ser útil en algunos casos, ya que al reiniciarse intentará acceder nuevamente a la red. En algunas situaciones, puede suceder que tu rúter/DHCP se quede sin direcciones para asignar a nuevos dispositivos. Por lo tanto, como último recurso, puedes verificar el estado del rúter y apagarlo y encenderlo: al reiniciarse, volverá a asignar direcciones a los dispositivos; ten en cuenta que reiniciar el rúter provocará una interrupción temporal de la red para todos los dispositivos.";
var healthcheck_40A_tech$1 = "La verificación monitoriza las solicitudes de DHCP de otros dispositivos que acceden a la red: se generará una advertencia si algún dispositivo envía múltiples solicitudes pero no obtiene una dirección válida para permanecer en la red local.";
var healthcheck_40B_B$1 = "El DNS de Google no está en uso";
var healthcheck_40B_G$1 = "El DNS de Google está en uso";
var healthcheck_40B_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Tu PC debe tener al menos un DNS configurado para que pueda acceder y navegar por Internet. Google proporciona un servicio de DNS gratuito en todo el mundo con direcciones DNS estables como: 8.8.8.8 y 8.8.4.4";
var healthcheck_40B_tech$1 = "La verificación informativa te indica si la configuración de tu DNS incluye Google DNS (8.8.8.8)";
var healthcheck_40C_B$1 = "El DNS Quad9 no está en uso";
var healthcheck_40C_G$1 = "El DNS Quad9 está en uso";
var healthcheck_40C_easy$1 = "Todo en Internet, incluidos los sitios web, se encuentra en una dirección IP numérica. El Sistema de Nombres de Dominio, o DNS, traduce estas direcciones IP numéricas en nombres de dominio legibles por el ser humano, para que podamos entenderlas y recordarlas. Si tu configuración de DNS no funciona correctamente, o aún usa los valores predeterminados, puedes estar en riesgo de sufrir problemas de rendimiento y ciberdelincuencia. Quad9 es una solución de seguridad gratuita que utiliza el DNS para proteger tus sistemas contra las amenazas cibernéticas más habituales. Mejora el rendimiento de tu sistema, y además, preserva y protege tu privacidad. Es como una inmunización para tu ordenador y tus dispositivos.";
var healthcheck_40C_tech$1 = "La verificación informativa te indica si la configuración de tu DNS incluye el DNS Quad9 (9.9.9.9)";
var healthcheck_40D_B$1 = "El DNS de DNSFilter no está en uso";
var healthcheck_40D_G$1 = "El DNS de DNSFilter está en uso";
var healthcheck_40D_easy$1 = "DNSFilter proporciona un DNS seguro de pago: protege fácilmente a toda tu organización de las amenazas de seguridad en línea y del contenido no deseado. Con una potente inteligencia artificial y una red global líder en el sector como las de DNSFilter, puedes estar seguro y protegido en cuestión de minutos.";
var healthcheck_40D_tech$1 = "La verificación informativa te indica si la configuración de tu DNS usa DNSFilter";
var healthcheck_40E_B$1 = "El DNS de Cloudflare no está en uso";
var healthcheck_40E_G$1 = "El DNS de Cloudflare está en uso";
var healthcheck_40E_easy$1 = "Cloudflare proporciona un DNS que se puede gestionar de manera rápida y segura como un servicio integrado en tu red; el DNS está disponible en todos los planes de suscripción gratuitos y de pago. Las consultas de nombres de dominio se procesan en milisegundos, y una sólida red «anycast» global garantiza la disponibilidad del DNS.";
var healthcheck_40E_tech$1 = "La verificación informativa te indica si la configuración de tu DNS usa Cloudflare DNS (1.1.1.1)";
var healthcheck_40F_B$1 = "La pasarela no funciona correctamente";
var healthcheck_40F_G$1 = "La pasarela funciona correctamente y reenvía el tráfico";
var healthcheck_40F_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet. Fing te advierte en caso de que el rúter o la pasarela no te permitan conectarte a Internet.";
var healthcheck_40F_fix$1 = "Debes comprobar si el rúter o la pasarela de red están encendidos y funcionan bien, por ejemplo, comprobando que todos los ledes estén en verde. Las interrupciones temporales de Internet pueden ocurrir por varias causas, pero si el problema persiste, debes ponerte en contacto con tu proveedor de servicios de Internet.";
var healthcheck_40F_tech$1 = "La comprobación verifica que la pasarela de red esté activa y que te permite conectarte a Internet: Fing intentará conectarse a algún servicio web de verificación de la conectividad.";
var healthcheck_410_B$1 = "No se puede descubrir la red local";
var healthcheck_410_G$1 = "Se ha podido descubrir una red local para enumerar dispositivos";
var healthcheck_410_easy$1 = "Además de la comprobación del estado de la conectividad, que te informa sobre posibles problemas de tu PC y en tu red, Fing lleva a cabo el descubrimiento de los dispositivos ubicados en tu red local, con una lista completa de dispositivos con información sobre el tipo, modelo, marca y mucho más que estará disponible en la sección de <i></i>conectividad.";
var healthcheck_410_tech$1 = "La comprobación verifica que el descubrimiento de la red local se pueda realizar correctamente.";
var healthcheck_411_G$1 = "Reconocimiento de la pasarela de red";
var healthcheck_411_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet. Fing te proporciona detalles relevantes acerca de tu rúter o pasarela, útiles para conocer su tipo, marca, modelo y versión específicos.";
var healthcheck_411_tech$1 = "La verificación informativa proporciona detalles sobre tu pasarela de red.";
var healthcheck_412_G$1 = "La red tiene nuevos dispositivos";
var healthcheck_412_easy$1 = "Saber si hay nuevos dispositivos en tu red, que se hayan unido a la misma recientemente o por primera vez, es relevante en cuanto a la seguridad: si eres el propietario de la red, asegúrate de que estos nuevos dispositivos no sean intrusos. En La sección de <i>conectividad</i> de Fing proporciona una lista de todos los dispositivos, en línea y sin conexión, con detalles relevantes como el tipo de dispositivo, la marca y el modelo. De este modo puedes verificar la lista y asegurarte de que todos sean los esperados. En caso de que recientemente hayas tenido problemas en tu red o de conectividad a Internet, conocer la lista de dispositivos añadidos recientemente puede ser una pista para investigar si el nuevo dispositivo está degradando el rendimiento de la red o causando conflictos con otros dispositivos.";
var healthcheck_412_tech$1 = "La verificación informativa te indica si los nuevos dispositivos se unieron recientemente a tu red por primera vez.";
var healthcheck_415_B$1 = "El DHCP no funciona correctamente";
var healthcheck_415_G$1 = "El DHCP funciona correctamente y permite que los dispositivos accedan a la red";
var healthcheck_415_easy$1 = "Los dispositivos necesitan una dirección (IP) para estar en red y así poder comunicarse con otros dispositivos y acceder a Internet. En las redes locales actuales, wifi y Ethernet, las direcciones IP se asignan automáticamente a cada PC/dispositivo a medida que se unen a la red, sin necesidad de ninguna configuración manual previa. El proceso y servicio es el <b>DHCP</b>: Protocolo de configuración dinámica de «host». Tu red debe tener un servidor de DHCP único y siempre en funcionamiento que asigne direcciones a los dispositivos que desean acceder a la red.";
var healthcheck_415_fix$1 = "En caso de que no haya un DHCP activo, puede haber ocurrido que tu rúter/DHCP se quedara sin direcciones para asignar a los nuevos dispositivos; como último recurso, puedes verificar el estado del rúter y apagarlo y encenderlo: al reiniciarse, volverá a asignar direcciones a los dispositivos; por favor, ten en cuenta que reiniciar el rúter provocará una interrupción temporal de la red para todos los dispositivos.<br/> En caso de que, en cambio, las comprobaciones informen de que hay más de un DHCP ejecutándose en la red, debes asegurarte de deshabilitar o apagar los DHCP hasta que haya uno solo. Debes buscar otros DHCP en ejecución en rúteres, «switches» y dispositivos de seguridad.";
var healthcheck_415_tech$1 = "La comprobación verifica que un solo servidor de DHCP esté activo: se generará una advertencia si no hay ningún DHCP o cuando haya más de un servidor de DHCP que ofrezca direcciones IP.";
var healthcheck_416_B$1 = "La configuración del DHCP no es óptima";
var healthcheck_416_G$1 = "La configuración del DHCP es buena";
var healthcheck_416_easy$1 = "Los dispositivos necesitan una dirección (IP) para estar en red y así poder comunicarse con otros dispositivos y acceder a Internet. En las redes locales actuales, wifi y Ethernet, las direcciones IP se asignan automáticamente a cada PC/dispositivo a medida que se unen a la red, sin necesidad de ninguna configuración manual previa. El proceso y servicio es el <b>DHCP</b>: Protocolo de configuración dinámica de «host». La comprobación verifica que la configuración de red enviada por el DHCP a los dispositivos esté bien formada y sea óptima.";
var healthcheck_416_fix$1 = "En caso de que la configuración del DHCP no sea óptima, es posible que desees verificar la configuración de tu rúter y ajustarla.";
var healthcheck_416_tech$1 = "La comprobación verifica que la configuración de los parámetros del DHCP sea correcta y óptima (MTU, DNS, tiempo de concesión).";
var healthcheck_417_G$1 = "La apertura de puertos está habilitada en la pasarela a través de UPnP";
var healthcheck_417_easy$1 = "Los dispositivos y programas pueden omitir automáticamente el cortafuegos para permitir conexiones entrantes sin control ni autorización adicional a través de UPnP. Las aplicaciones pueden exponer tus dispositivos sin ningún tipo de control. Esto puede resultar útil para las llamadas por Internet y los juegos en línea, pero es potencialmente peligroso.";
var healthcheck_417_fix$1 = "En caso de que quieras deshabilitarlo, debes consultar el manual o la página de administración de tu rúter/pasarela y averiguar si es posible deshabilitar la función UPnP.";
var healthcheck_417_tech$1 = "La pasarela permite la apertura de puertos UPnP sin comprobar";
var healthcheck_418_G$1 = "La apertura de puertos está habilitada en la pasarela a través de NAT-PMP";
var healthcheck_418_easy$1 = "Los dispositivos y programas pueden omitir automáticamente el cortafuegos para permitir conexiones entrantes sin control ni autorización adicional a través de NAT-PMP. Las aplicaciones pueden exponer tus dispositivos sin ningún tipo de control. Esto puede resultar útil para las llamadas por Internet y los juegos en línea, pero es potencialmente peligroso.";
var healthcheck_418_fix$1 = "En caso de que quieras deshabilitarlo, debes consultar el manual o la página de administración de tu rúter/pasarela y averiguar si es posible deshabilitar la función NAT-PMP.";
var healthcheck_418_tech$1 = "La pasarela permite la apertura de puertos NAT-PMP sin comprobar";
var healthcheck_419_G$1 = "la apertura de puertos UPnP no está activo en la pasarela";
var healthcheck_419_easy$1 = "Los dispositivos y programas no podrán omitir automáticamente el cortafuegos para permitir conexiones entrantes sin control ni autorización adicional a través de UPnP.";
var healthcheck_419_fix$1 = "En caso de que quieras habilitarlo, debes consultar el manual o la página de administración de tu rúter/pasarela y averiguar si es posible habilitar la función UPnP.";
var healthcheck_419_tech$1 = "La pasarela no permite la apertura de puertos UPnP sin comprobar";
var healthcheck_41A_G$1 = "La apertura de puertos NAT-PMP no está activo en la pasarela";
var healthcheck_41A_easy$1 = "Los dispositivos y programas no podrán omitir automáticamente el cortafuegos para permitir conexiones entrantes sin control ni autorización adicional a través de NAT-PMP.";
var healthcheck_41A_fix$1 = "En caso de que quieras habilitarlo, debes consultar el manual o la página de administración de tu rúter/pasarela y averiguar si es compatible con tu rúter, de forma que puedas habilitar manualmente la función NAT-PMP.";
var healthcheck_41A_tech$1 = "La pasarela no permite la apertura de puertos NAT-PMP sin comprobar";
var healthcheck_801_B$1 = "Sin conexión a Internet";
var healthcheck_801_G$1 = "Conectado a Internet";
var healthcheck_801_easy$1 = "Una verificación de la conectividad hacia Internet para comprobar si tu ordenador está conectado a Internet y, por lo tanto, puede acceder a sitios web, correo electrónico, navegar, etc.";
var healthcheck_801_fix$1 = "Si no estás conectado a Internet, debes verificar el estado y los cables de tu rúter. En algunos casos, un simple apagado y encendido del rúter puede solucionar la situación.";
var healthcheck_801_tech$1 = "La comprobación verifica que tu PC pueda conectarse a Internet: Fing se conecta a varios servicios web de verificación «ad hoc» de la conectividad.";
var healthcheck_802_B$1 = "La resolución del DNS no funciona";
var healthcheck_802_G$1 = "La resolución del DNS está funcionando";
var healthcheck_802_easy$1 = "DNS significa Sistema de nombres de dominio: en esencia, el DNS es una base de datos que vincula nombres significativos (nombres de «host»), como <i>www.fing.com</i>, a direcciones IP específicas a las que se puede acceder a través de Internet o mediante redes locales. Si tu DNS configurado no está procesando ni respondiendo a las consultas, no podrás utilizar Internet.";
var healthcheck_802_fix$1 = "En una red segura y sólida, el rúter envía automáticamente los servidores DNS al PC. Debes verificar la configuración de la red local para asegurarte de que sea correcta. También puedes verificar la configuración de tu rúter para asegurarte de que tenga un DNS válido. A veces, los servidores DNS locales o del proveedor no funcionan correctamente y puedes omitirlos configurando manualmente en tu PC local servidores DNS estándar habituales como, p. ej., Google DNS: 8.8.8.8.";
var healthcheck_802_tech$1 = "La comprobación verifica que el servidor DNS configurado sea realmente accesible y esté activo, respondiendo a las consultas del DNS.";
var healthcheck_803_B$1 = "No estás en una línea comercial";
var healthcheck_803_G$1 = "Estás en una línea comercial";
var healthcheck_803_easy$1 = "El Internet comercial tiene más funciones y beneficios que el residencial, y por ello tiene un coste más alto. El Internet residencial a menudo tiene velocidades de subida restringidas y solo se sirve con acuerdos de servicio mínimo, mientras que el Internet comercial exige velocidades de subida más rápidas para realizar distintas operaciones. Además, los PSI brindan un servicio garantizado y tiempos de actividad para el Internet comercial.";
var healthcheck_803_tech$1 = "La verificación informativa te indica si tu conexión es una línea de Internet comercial.";
var healthcheck_804_B$1 = "No se puede acceder a la web de Google";
var healthcheck_804_G$1 = "Se puede acceder a la web de Google";
var healthcheck_804_easy$1 = "Google te permite buscar información de todo el mundo, incluidas páginas web, imágenes, vídeos, etc. Google ofrece muchos servicios aparte del motor de búsqueda: correo electrónico, calendario, sistema operativo para «smartphones» (Android), asistente inteligente y mucho más.";
var healthcheck_804_tech$1 = "La comprobación verifica que se pueda navegar en www.google.com.";
var healthcheck_805_B$1 = "No se puede acceder a Amazon";
var healthcheck_805_G$1 = "Se puede acceder a Amazon";
var healthcheck_805_easy$1 = "El sitio web de Amazon es una tienda en línea de productos de todo tipo. Amazon también proporciona servicios de Internet conocidos como AWS, Servicios Web de Amazon, utilizados por muchas empresas de todo el mundo para crear servicios en la nube en un entorno virtualizado.";
var healthcheck_805_tech$1 = "La comprobación verifica que se pueda navegar en www.amazon.com.";
var healthcheck_806_B$1 = "No se puede acceder a Netflix";
var healthcheck_806_G$1 = "Se puede acceder a Netflix";
var healthcheck_806_easy$1 = "Netflix es un servicio de transmisión de vídeo en línea que permite a los suscriptores de pago ver series de televisión, películas, documentales, etc.";
var healthcheck_806_tech$1 = "La comprobación verifica que se pueda navegar en www.netflix.com.";
var healthcheck_807_B$1 = "No se puede acceder a Facebook";
var healthcheck_807_G$1 = "Se puede acceder a Facebook";
var healthcheck_807_easy$1 = "Facebook es una conocido red social gratuita que permite a los usuarios registrados crear perfiles, subir fotos y vídeos, enviar mensajes y mantenerse en contacto.";
var healthcheck_807_tech$1 = "La comprobación verifica que se pueda navegar en www.facebook.com.";
var healthcheck_808_B$1 = "No se puede acceder a WhatsApp";
var healthcheck_808_G$1 = "Se puede acceder a WhatsApp";
var healthcheck_808_easy$1 = "WhatsApp es el nombre de una aplicación de mensajería móvil para Android, iPhone, Windows Phone y ordenadores Mac o PC con Windows. WhatsApp permite a los usuarios realizar llamadas de voz gratuitas, videollamadas cara a cara y enviar mensajes de texto.";
var healthcheck_808_tech$1 = "La comprobación verifica que se pueda navegar en web.whatsapp.com.";
var healthcheck_809_G$1 = "El proveedor se ha mantenido estable durante los últimos 7 días";
var healthcheck_809_easy$1 = "La comprobación ha verificado con el Detector de Interrupciones de Internet de Fing que tu PSI no ha tenido interrupciones generalizadas en los últimos 7 días. La detección de interrupciones de Fing es un servicio gratuito que te permite conocer la calidad de tu conectividad en tiempo real, capaz de detectar e informar automáticamente de las interrupciones generalizadas de los proveedores de servicios de Internet en todo el mundo.";
var healthcheck_809_tech$1 = "La comprobación ha verificado que tu PSI se ha mantenido estable durante los últimos 7 días.";
var healthcheck_80A_G$1 = "El proveedor no ha estado exento de fallos durante los últimos 7 días";
var healthcheck_80A_easy$1 = "La comprobación ha verificado con Detector de Interrupciones de Internet de Fing que tu PSI no ha estado exento de fallos durante la semana pasada. La detección de interrupciones de Fing es un servicio gratuito que te permite conocer la calidad de tu conectividad en tiempo real, capaz de detectar e informar automáticamente de las interrupciones generalizadas de los proveedores de servicios de Internet en todo el mundo.";
var healthcheck_80A_tech$1 = "La comprobación te advierte de que tu PSI ha tenido interrupciones durante la semana pasada.";
var healthcheck_80B_G$1 = "Conexión a Internet VPN/túnel";
var healthcheck_80B_easy$1 = "Una VPN, o red privada virtual, te permite crear una conexión segura a otra red a través de Internet. Las VPN se pueden utilizar para acceder a sitios web restringidos por regiones, proteger tu actividad de navegación de miradas indiscretas en redes wifi públicas, etc.";
var healthcheck_80B_tech$1 = "La verificación informativa detecta si tu conexión está tunelizada, como por ejemplo con una VPN.";
var healthcheck_80C_B$1 = "Microsoft Outlook Office 365 no está disponible";
var healthcheck_80C_G$1 = "Microsoft Outlook Office 365 está disponible";
var healthcheck_80C_easy$1 = "Microsoft Outlook es un administrador de información personal de Microsoft, disponible como parte del paquete de Microsoft Office. Es principalmente una aplicación de correo electrónico, que también incluye calendario, administrador de tareas, administrador de contactos, bloc de notas, diario y navegación web.";
var healthcheck_80C_tech$1 = "La comprobación verifica que se puede acceder a outlook.office.com.";
var healthcheck_80D_G$1 = "Conexión a Internet a través de Hotspot";
var healthcheck_80D_easy$1 = "Los «smartphones» y dispositivos móviles modernos permiten compartir la conexión a Internet si se configura un punto de acceso móvil: una red wifi expuesta por el «smartphone» a la que se pueden conectar tus dispositivos, como un portátil para conectarse a Internet.";
var healthcheck_80D_tech$1 = "La comprobación informativa detecta si tu conexión a Internet es a través de Hotspot/tethering.";
var healthcheck_80E_G$1 = "Pasarela conectada directamente a un Internet público";
var healthcheck_80E_easy$1 = "Tu pasarela tiene una dirección de Internet pública y puede ser usada por cualquier persona en Internet.";
var healthcheck_80E_tech$1 = "La comprobación informativa detecta si tu pasarela está conectada directamente a un Internet público.";
var healthcheck_80F_G$1 = "Pasarela conectada a una red privada";
var healthcheck_80F_easy$1 = "La dirección IP externa de tu pasarela es privada. No se puede acceder directamente al rúter/pasarela desde un Internet público.";
var healthcheck_80F_tech$1 = "La comprobación informativa detecta si tu pasarela está conectada a una red privada.";
var healthcheck_810_B$1 = "No se puede acceder a los destinos personalizados";
var healthcheck_810_G$1 = "Se puede acceder a los destinos personalizados";
var healthcheck_810_tech$1 = "La comprobación verifica que se pueda acceder y navegar por tus destinos personalizados.";
var healthcheck_card_advice_link$1 = "Recibir consejos ahora";
var healthcheck_card_advice_subtitle$1 = "Para ayudarte a solucionar los problemas de conectividad, comparte los resultados de tu escaneo con tus amigos o con la comunidad de Fing. Si tu conexión wifi no funciona, puedes enviar los resultados del escaneo a través de tu «smartphone».";
var healthcheck_card_advice_title$1 = "¿Necesitas algún consejo?";
var healthcheck_card_connectivity_subtitle$1 = "Puede que tu red esté teniendo problemas para permitir la entrada de nuevos dispositivos. La solución habitual es apagar y encender el rúter.";
var healthcheck_card_connectivity_title$1 = "Conectividad de otros dispositivos";
var healthcheck_card_publicwifi_subtitle$1 = "No puedes conectarte a Internet y la causa más probable es que estés accediendo a una red wifi pública que requiere inicio de sesión.";
var healthcheck_card_publicwifi_title$1 = "¿Estás accediendo a una red wifi pública?";
var healthcheck_generic_code$1 = "Código {code}: ";
var healthcheck_healthsummary_fail_limitedconnectivity_subtitle$1 = "Tu dispositivo está conectado a la red, pero esta tiene una conectividad limitada. No puedes conectarte a Internet, comprueba el rúter.";
var healthcheck_healthsummary_fail_manyissue_subtitle$1 = "Tienes varios problemas que debes solucionar.";
var healthcheck_healthsummary_fail_networkissue_subtitle$1 = "Tu dispositivo está conectado a la red y puede acceder a Internet, pero la red tiene problemas.";
var healthcheck_healthsummary_fail_noconnection_subtitle$1 = "Tu dispositivo no está conectado a una red local. Por favor, asegúrate de que el wifi esté habilitado o comprueba los cables si estás utilizando Ethernet.";
var healthcheck_healthsummary_fail_title$1 = "Tienes problemas de conectividad";
var healthcheck_healthsummary_link_report$1 = "Ver informe";
var healthcheck_healthsummary_refresh_button_text_one$1 = "Las actualizaciones son automáticas, pero también puedes";
var healthcheck_healthsummary_refresh_button_text_two$1 = "forzar ahora una nueva comprobación";
var healthcheck_healthsummary_refresh_running$1 = "Por favor, espera mientras Fing verifica la configuración de la red";
var healthcheck_healthsummary_running_subtitle$1 = "Fing comprueba constantemente la configuración de la red y verifica tu conexión a Internet.";
var healthcheck_healthsummary_running_title$1 = "Comprobación de conectividad en curso";
var healthcheck_healthsummary_success_subtitle$1 = "Fing comprueba constantemente la configuración de la red y verifica tu conexión a Internet.";
var healthcheck_healthsummary_success_title$1 = "Estás conectado a Internet";
var healthcheck_healthsummary_warning_internet_subtitle$1 = "Accedes a Internet, pero debes comprobar algún posible problema. ";
var healthcheck_healthsummary_warning_local_subtitle$1 = "Tienes advertencias en la configuración de tu dispositivo.";
var healthcheck_healthsummary_warning_network_subtitle$1 = "Tu red está funcionando, pero algo necesita tu atención.";
var healthcheck_healthsummary_warning_title$1 = "Tienes advertencias";
var healthcheck_help_dialog_action$1 = "Recibir consejos ahora";
var healthcheck_help_dialog_failurebadge$1 = "En caso de falla";
var healthcheck_help_dialog_successbadge$1 = "En caso de exito";
var healthcheck_help_dialog_tab_howfix$1 = "¿Cómo puedo solucionar este problema?";
var healthcheck_help_dialog_tab_means$1 = "Qué significa para mí";
var healthcheck_help_dialog_tab_techdef$1 = "Definición técnica";
var healthcheck_internet$1 = "Verificación de Internet: se realiza para acceder a Internet desde la red actual";
var healthcheck_local$1 = "Verificación local: realizada localmente en tu ordenador";
var healthcheck_network$1 = "Verificación de red: la información se recopila a través de tu red actual";
var healthcheck_report_askhelp_description$1 = "Fing puede ayudarlo a resolver problemas con su conexión o la tecnología de su hogar tomando una instantánea de la configuración de su red que puede compartir con su departamento de TI.";
var healthcheck_report_askhelp_modal_share_action$1 = "Empezar a compartir";
var healthcheck_report_askhelp_privacy$1 = "Siempre puede controlar qué detalles compartir sobre el entorno de su hogar.";
var healthcheck_report_askhelp_processing_title$1 = "Estamos procesando tu solicitud";
var healthcheck_report_askhelp_title$1 = "Comparta este informe con su equipo de soporte";
var healthcheck_report_checkinfo_modal_checkcode_howcanifix$1 = "Cómo puedo solucionar esto";
var healthcheck_report_checkinfo_modal_checkcode_title$1 = "Información sobre la comprobación del estado: {code} ";
var healthcheck_report_checkinfo_modal_checkcode_whatitmeans$1 = "Qué significa para mí";
var healthcheck_report_checkinfo_modal_footer_link$1 = "Recibir consejos ahora";
var healthcheck_report_checkinfo_modal_footer_title$1 = "¿No has podido resolver tus problemas?";
var healthcheck_report_checkinfo_modal_title$1 = "Verificación informativa";
var healthcheck_report_context_picker$1 = "Selecciona a continuación el perfil de red para habilitar comprobaciones específicas";
var healthcheck_report_customtarget_modal_area_label$1 = "Destinos personalizados";
var healthcheck_report_customtarget_modal_area_small$1 = "Se acepta una línea por destino para destinos https y http; se aceptan puertos y URL personalizados.";
var healthcheck_report_customtarget_modal_failure_title$1 = "Casos de error: {fail} ";
var healthcheck_report_customtarget_modal_nopremium_title$1 = "Avanzado: disponible para suscriptores de Fing";
var healthcheck_report_customtarget_modal_premium_title$1 = "Avanzado: incluido en tu suscripción";
var healthcheck_report_customtarget_modal_save_action$1 = "Guardar destinos";
var healthcheck_report_customtarget_modal_tech_description$1 = "La comprobación verifica que tus destinos personalizados sean accesibles y navegables. Se admiten los destinos https y http, así como con un puerto y una URL específicos. La comprobación se aprueba si se resuelve el nombre del «host», se puede establecer la conexión y el estado HTTP es 200, 301 o 302.";
var healthcheck_report_customtarget_modal_tech_title$1 = "Definición técnica";
var healthcheck_report_customtarget_modal_title$1 = "Información sobre la comprobación del estado: {code} ";
var healthcheck_report_emptystate$1 = "¡Todo es correcto, aquí no hay ningún {filter}!";
var healthcheck_report_emptystate_component_message$1 = "Utiliza los botones de arriba para seleccionar un grupo diferente.";
var healthcheck_report_emptystate_premium$1 = "Por favor, espera mientras se realizan todas las comprobaciones";
var healthcheck_report_geoloc_info$1 = "Dirección de Internet ubicada en {name} {tz} ";
var healthcheck_report_geoloc_location$1 = "ubicación";
var healthcheck_report_geoloc_timezone$1 = ", con zona horaria ";
var healthcheck_report_isp_info_descr$1 = "EL PSI es {name} en {loc}, tu dirección pública es {address} ";
var healthcheck_report_isp_info_message$1 = "No hay estadísticas detalladas disponibles para este PSI";
var healthcheck_report_isp_info_stats_message_download$1 = "La velocidad media del PSI en la ubicación es {number} Mbps de bajada, ";
var healthcheck_report_isp_info_stats_message_share$1 = "cuota de mercado del {number}%";
var healthcheck_report_isp_info_stats_message_upload$1 = "{number} Mbps de subida, ";
var healthcheck_report_mute_action$1 = "Silenciar";
var healthcheck_report_mute_dialog_mutecheck$1 = "Verificación del silenciado";
var healthcheck_report_mute_dialog_mutecheck_description$1 = "Las advertencias de esta comprobación para la red actual se descartarán y se indicarán únicamente a nivel informativo.";
var healthcheck_report_mute_dialog_unmutecheck$1 = "Comprobación de la desactivación del silenciado";
var healthcheck_report_mute_dialog_unmutecheck_description$1 = "Se restaurarán las advertencias para esta comprobación de la red actual.";
var healthcheck_report_nettype_eth$1 = "Red por cable {address} ";
var healthcheck_report_nettype_ethwifi$1 = "Red inalámbrica {address} con {aps} BSSID: {bssid} ";
var healthcheck_report_nettype_wireless$1 = "Red inalámbrica {address} con {aps} BSSID: {bssid} ";
var healthcheck_report_network_gateway$1 = "Pasarela de red";
var healthcheck_report_networkinfo$1 = "{context} red";
var healthcheck_report_nicinfo_connection_info$1 = "Dirección IP {address}, velocidad del enlace {ethRate} ";
var healthcheck_report_nicinfo_connection_info_nostation$1 = "Dirección IP {address}, canal n.º{channel} con velocidad {speed} ";
var healthcheck_report_nicinfo_connection_more_info$1 = "Dirección IP {address}, estación wifi {apbssid} en el canal n.º{channel} con velocidad {speed} ";
var healthcheck_report_qrcode_description$1 = "Simplemente escanea este código QR desde tu «smartphone». Nuestra comunidad de expertos en tecnología recibirá tu solicitud para ayudarto con tus problemas de conectividad.";
var healthcheck_report_qrcode_title$1 = "¿Sin Internet?";
var healthcheck_report_qrcodemodal_title$1 = "Envía tu informe desde un «smartphone»";
var healthcheck_report_radio_button_all$1 = "Todo";
var healthcheck_report_radio_button_fail$1 = "Error";
var healthcheck_report_radio_button_info$1 = "Información";
var healthcheck_report_radio_button_premium$1 = "Funciones avanzadas";
var healthcheck_report_radio_button_warn$1 = "Advertencia";
var healthcheck_report_table_header_state$1 = "Estado";
var healthcheck_report_table_header_what$1 = "¿Qué comprueba Fing?";
var healthcheck_report_table_header_where$1 = "Dónde";
var healthcheck_report_ticket$1 = "Su tique";
var healthcheck_report_unmute_action$1 = "Desactivar el silenciado";
var healthcheck_status_check_running_subtitle$1 = "{completed} controles completados, {skipped} restantes.";
var healthcheck_status_check_running_title$1 = "Analizando tu configuración";
var healthcheck_status_code_subtitle$1 = "Código de comprobación del estado: {code}.";
var healthcheck_status_ok_nopremium_subtitle$1 = "{completed} comprobaciones completadas, {premium} comprobaciones avanzados omitidas.";
var healthcheck_status_ok_subtitle$1 = "{completed} comprobaciones completadas.";
var healthcheck_status_ok_title$1 = "Todo funciona correctamente en tu red";
var healthcheck_status_problems_captive_subtitle$1 = "No puedes conectarte a Internet y la causa más probable es que estés accediendo a una red wifi pública que requiere inicio de sesión.";
var healthcheck_status_problems_generic_subtitle$1 = "Tienes varios problemas que debes solucionar.";
var healthcheck_status_problems_internet_subtitle$1 = "Tu dispositivo está conectado a la red, pero esta tiene una conectividad limitada. No puedes conectarte a Internet, comprueba el rúter.";
var healthcheck_status_problems_local_subtitle$1 = "Tu dispositivo no está conectado a una red local. Asegúrate de que el wifi esté habilitado o comprueba los cables si estás utilizando Ethernet.";
var healthcheck_status_problems_net_subtitle$1 = "Tu dispositivo está conectado a la red y puede acceder a Internet, pero la red tiene problemas.";
var healthcheck_status_problems_title$1 = "Tienes problemas de conectividad";
var healthcheck_status_warn_dhcp_subtitle$1 = "Puede que tu red esté teniendo problemas para permitir la entrada de nuevos dispositivos. La solución habitual es apagar y encender el rúter.";
var healthcheck_status_warn_generic_subtitle$1 = "Tiene varios problemas que debes comprobar.";
var healthcheck_status_warn_internet_subtitle$1 = "Accedes a Internet, pero debes comprobar algún posible problema. ";
var healthcheck_status_warn_local_subtitle$1 = "Tienes advertencias en la configuración de tu dispositivo. ";
var healthcheck_status_warn_net_subtitle$1 = "Tu red está funcionando, pero algo necesita tu atención. ";
var healthcheck_status_warn_title$1 = "Tienes advertencias";
var healthcheck_statusbadge_fail$1 = "Error";
var healthcheck_statusbadge_info$1 = "Información";
var healthcheck_statusbadge_skipped$1 = "Omitido";
var healthcheck_statusbadge_success$1 = "Aprobado";
var healthcheck_statusbadge_warn$1 = "Advertencia";
var healthcheck_v_gateway_I$1 = "Información sobre tu rúter o pasarela";
var healthcheck_v_gateway_easy$1 = "Los rúteres y las pasarelas son dispositivos físicos que unen múltiples redes por cable o inalámbricas, lo que permite la intercomunicación: incluso en una pequeña red doméstica se necesita al menos un rúter para poder conectarse a Internet. Fing te proporciona detalles relevantes acerca de tu rúter o pasarela, útiles para conocer su tipo, marca, modelo y versión específicos.";
var healthcheck_v_gateway_tech$1 = "La verificación informativa proporciona detalles sobre tu pasarela de red.";
var healthcheck_v_geoloc_I$1 = "Información de geolocalización sobre tu dirección de Internet";
var healthcheck_v_geoloc_easy$1 = "Una forma de geolocalización: GeoIP se refiere al método de localizar la ubicación geográfica de un dispositivo identificando esa dirección de Internet y realizando una búsqueda de base de datos remota en nuestros servidores para identificar el país, la región, la ciudad y el proveedor de servicios de Internet.";
var healthcheck_v_geoloc_tech$1 = "Tu dirección de Internet se busca en una base de datos de direcciones de Internet para determinar su ubicación geográfica y el proveedor de servicios de Internet.";
var healthcheck_v_isp_I$1 = "Información sobre el proveedor de servicios de Internet (PSI)";
var healthcheck_v_isp_easy$1 = "El PSI (proveedor de servicios de Internet) es una empresa que proporciona a las personas y otras empresas acceso a Internet y otros servicios relacionados, como la creación de sitios web y el alojamiento virtual. Un PSI tiene los equipos y el acceso a las líneas de telecomunicaciones necesarios para tener un punto de presencia en Internet dentro del área geográfica que sirve. Los mayores PSI tienen alquiladas sus propias líneas de alta velocidad, de manera que sean menos dependientes de los proveedores de telecomunicaciones y puedan brindar un mejor servicio a sus clientes.<br/> Fing proporciona estadísticas sobre el PSI en la ubicación actual, como cuota de mercado y velocidades medias de subida y bajada.";
var healthcheck_v_isp_tech$1 = "La información sobre el PSI actual se recopila mediante una búsqueda GeoIP de tu dirección de Internet. Fing Internet proporciona estadísticas e información sobre el SIP en la ubicación actual.";
var healthcheck_v_network_I$1 = "Información sobre la red conectada";
var healthcheck_v_network_easy$1 = "Se recopila y muestra información detallada sobre tu red actualmente conectada. El rango de direcciones de red muestra el rango disponible de direcciones que los dispositivos pueden usar para acceder a la red y comunicarse entre sí. El tipo de red te indica si la red es por cable (ethernet), inalámbrica o ambas.<br/><b> Ethernet:</b> es un protocolo de comunicación de datos estándar que permite a los ordenadores y los dispositivos periféricos, como los portátiles, interactuar entre sí y a través de redes para el intercambio de información.<br/><b> Velocidad de enlace:</b> es la velocidad nominal de la conexión, medida en Mbps (megabits por segundo). Cuanto mayor sea el valor, más rápida y mejor será la conexión. En las redes por cable modernas, debes tener 1 Gbps (igual a 1000 Mbps), mientras que las buenas conexiones inalámbricas pueden alcanzar hasta 200-300 Mbps.<br/><b> Punto de acceso inalámbrico (PA):</b> una estación base inalámbrica que conecta una red por cable (como la conexión Ethernet por cable en un módem de banda ancha) a la red inalámbrica. El PA contiene un transmisor-receptor de radio (que transmite y recibe señales de radio en canales específicos). La mayoría de los PA contienen también un componente tipo rúter, que dirige los datos de tus dispositivos en red hacia y desde Internet.<br/><b> Banda/espectro inalámbrico:</b> los puntos de acceso inalámbricos usan una de las dos bandas de frecuencia wifi para la señal: 2,4 GHz o 5 GHz. Algunos son rúteres de doble banda y de malla, que pueden seleccionar y mezclar automáticamente canales y bandas para brindarte el mejor rendimiento.<br/><b> Canal inalámbrico:</b> dentro de las bandas de frecuencia inalámbrica hay bandas más pequeñas que se conocen como canales wifi. Un canal wifi es el medio a través del cual nuestros dispositivos inalámbricos pueden enviar y recibir datos.<br/><b> Identificadores de conjuntos de servicios básicos (BSSID):</b> un identificador único para cada punto de acceso inalámbrico físico.";
var healthcheck_v_network_tech$1 = "La comprobación informativa proporciona detalles sobre tu red activa: el contexto que le has asignado, su rango de direcciones IP, el tipo (por cableado o inalámbrica) y lista de BSSID (si es inalámbrica).";
var healthcheck_v_nicinfo_I$1 = "Tu conexión a la red";
var healthcheck_v_nicinfo_easy$1 = "Se recopila información detallada acerca de tu conexión actual a la red.<br/><b> Ethernet:</b> es un protocolo de comunicación de datos estándar que permite a los ordenadores y los dispositivos periféricos, como los portátiles, interactuar entre sí y a través de redes para el intercambio de información.<br/><b> Velocidad de enlace:</b> es la velocidad nominal de la conexión, medida en Mbps (megabits por segundo). Cuanto mayor sea el valor, más rápida y mejor será la conexión. En las redes por cable modernas, debes tener 1 Gbps (igual a 1000 Mbps), mientras que las buenas conexiones inalámbricas pueden alcanzar hasta 200-300 Mbps.<br/><b> Punto de acceso inalámbrico (PA):</b> una estación base inalámbrica que conecta una red por cable (como la conexión Ethernet por cable en un módem de banda ancha) a la red inalámbrica. El PA contiene un transmisor-receptor de radio (que transmite y recibe señales de radio en canales específicos). La mayoría de los PA contienen también un componente tipo rúter, que dirige los datos de tus dispositivos en red hacia y desde Internet.<br/><b> Banda/espectro inalámbrico:</b> los puntos de acceso inalámbricos usan una de las dos bandas de frecuencia wifi para la señal: 2,4 GHz o 5 GHz. Algunos son rúteres de doble banda y de malla, que pueden seleccionar y mezclar automáticamente canales y bandas para brindarte el mejor rendimiento.<br/><b> Canal inalámbrico:</b> dentro de las bandas de frecuencia inalámbrica hay bandas más pequeñas que se conocen como canales wifi. Un canal wifi es el medio a través del cual nuestros dispositivos inalámbricos pueden enviar y recibir datos.<br/><b> Identificadores de conjuntos de servicios básicos (BSSID):</b> un identificador único para cada punto de acceso inalámbrico físico.";
var healthcheck_v_nicinfo_tech$1 = "La comprobación informativa proporciona detalles sobre tu conexión activa a la red: dirección IP, velocidad de enlace nominal y tipo: ethernet o inalámbrica; en las conexiones wifi, información sobre el nombre del punto de acceso, los BSSID, el espectro y el canal actual.";
var healthcheck_v_self_I$1 = "Información sobre tu dispositivo";
var healthcheck_v_self_easy$1 = "Fing te proporciona detalles relevantes sobre tu PC o portátil, útiles para conocer su tipo específico, marca, modelo y detalles del sistema operativo. También se proporciona la dirección MAC (por ejemplo, 11:22:33:69:22:9F): la dirección MAC es una dirección global única de un dispositivo, asignada por el fabricante del mismo.";
var healthcheck_v_self_tech$1 = "La comprobación informativa recopila y muestra información sobre tu PC: MAC, nombre, marca, modelo y detalles del sistema operativo.";
var home_health_check_discovery_running$1 = "Por favor, espera mientras Fing verifica la configuración de la red";
var home_network_subtitle_eth$1 = "{rate} Ethernet";
var home_network_subtitle_eth_usb$1 = "{rate} Ethernet a través de USB";
var internet_about$1 = "Acerca de su proveedor de Internet";
var internet_average_download$1 = "Descarga promedio: {value} Mbps";
var internet_average_title$1 = "Rendimiento promedio del último {amount, plural, =1 {# día} other {# días}}";
var internet_average_upload$1 = "Carga promedio: {value} Mbps";
var internet_based_on$1 = "Según la velocidad, las opiniones de los usuarios y las interrupciones generalizadas";
var internet_based_on_ratings$1 = "{num} valoraciones";
var internet_based_on_samples$1 = "{num} muestras";
var internet_compare_providers$1 = "Comparar proveedores";
var internet_data_trend$1 = "Datos de tendencia";
var internet_distribution$1 = "Distribución";
var internet_downtime$1 = "Tiempo de inactividad";
var internet_last_speed_test$1 = "Última prueba de velocidad";
var internet_latency$1 = "Latencia";
var internet_location_not_available$1 = "Datos de ubicación no disponibles";
var internet_location_server_from$1 = "Desde {serverCity}, {serverCountry}";
var internet_location_server_to$1 = "A {serverCity}, {serverCountry}";
var internet_network$1 = "Su red";
var internet_no_data$1 = "No hay suficientes datos";
var internet_no_data_last_speed_test$1 = "No hay datos disponibles para la última prueba de velocidad realizada";
var internet_no_data_period_example$1 = "Vea una vista previa de un gráfico de datos de muestra a continuación";
var internet_no_data_period_timeline$1 = "No hay datos disponibles para este intervalo de tiempo";
var internet_no_data_trend$1 = "Datos de tendencia no disponibles";
var internet_outages$1 = "Interrupciones generalizadas";
var internet_outages_summary$1 = "{num} interrupción";
var internet_performance_score$1 = "Puntuación de rendimiento";
var internet_provider$1 = "Proveedor de Internet Wifi";
var internet_ratings$1 = "Calificaciones";
var internet_report$1 = "Informe";
var internet_samples$1 = "Muestras";
var internet_schedule$1 = "Programación";
var internet_schedule_edit$1 = "Editar programa";
var internet_score$1 = "Tu puntuación de Internet";
var internet_score_info$1 = "Fing clasifica tus velocidades medias de carga y descarga, comparando los resultados con otros proveedores de Internet de tu área para evaluar el rendimiento de tu conectividad a Internet.";
var internet_scoreboard$1 = "Cuadro de indicadores";
var internet_send_report_body$1 = "Recibirá un correo electrónico con su informe mensual de Internet generado por Fing.";
var internet_send_report_empty_caption$1 = "Correo electrónico enviado";
var internet_send_report_empty_subtitle$1 = "Fing está generando su informe de Internet, estará en su bandeja de entrada en unos minutos.";
var internet_send_report_empty_title$1 = "Recibirá su informe en breve";
var internet_send_report_title$1 = "Enviar informe mensual";
var internet_sentiment$1 = "Sentimiento";
var internet_speed_average$1 = "{avgDownload} Mbps / {avgUpload} Mbps";
var internet_speed_performance$1 = "Velocidad de rendimiento";
var internet_test_samples$1 = "Muestras de prueba";
var internet_test_server_location$1 = "Su servidor de prueba está en {location}";
var internet_test_speed$1 = "Velocidad de prueba";
var internet_timeline$1 = "Línea temporal";
var internet_total_rating$1 = "Puntuaciones totales";
var internet_trend_in$1 = "Tendencia de {isp} en {city}";
var internet_user_rating$1 = "Calificaciones de los usuarios";
var internet_view_details$1 = "Ver detalles";
var internetinfo_your_isp_home$1 = "Inicio";
var isp_home$1 = "Inicio";
var isp_rank_summary_rankaverage$1 = "De media en ";
var isp_rank_summary_rankaverage_location$1 = "En promedio en {location}";
var isp_rank_summary_rankbottom$1 = "{rank} % inferior en ";
var isp_rank_summary_rankbottom_location$1 = "El {rank}% inferior en {location}";
var isp_rank_summary_ranktop$1 = "{rank} % superior en ";
var isp_rank_summary_ranktop_location$1 = "El {rank}% superior en {location}";
var isp_summary_card_nointernet$1 = "Sin Internet";
var last_month$1 = "Último mes";
var maclookup_inforow_family$1 = "Familia";
var maclookup_inforow_type$1 = "Tipo";
var model_not_recognized$1 = "Modelo no reconocido";
var netstats_infoprofile_other$1 = "Otros";
var netstats_type_personal$1 = "Personal";
var notification_service_healthcheck_connectivity_problems_title$1 = "Tienes problemas de conectividad";
var notifications_page_manage_body$1 = "Reciba notificaciones cuando un dispositivo conocido se desconecte y se conecte";
var notifications_page_manage_extra$1 = "{alertedDevices} dispositivos tienen la notificación habilitada";
var notifications_page_manage_title$1 = "Administrar notificaciones de dispositivos";
var notifications_page_notify_new$1 = "Notificar sobre nuevos dispositivos";
var notifications_page_title$1 = "Notificaciones";
var notifications_set_title_recent$1 = "Reciente";
var num_mbps$1 = "{num} Mbps";
var num_ms$1 = "{num} ms";
var outage_today$1 = "Hoy";
var placeholder_email$1 = "Introduzca una dirección de correo electrónico válida";
var portscan_port_action$1 = "Abierto";
var portscan_port_description$1 = "Descripción";
var portscan_port_name$1 = "Nombre";
var portscan_scanmode_all$1 = "Todo";
var premium_button$1 = "Prémium";
var premium_feature$1 = "Mostrar {feature} es una función Premium";
var premium_unlock_all$1 = "Desbloquea todo con Premium";
var presence_add_dialog_title$1 = "Añadir usuario";
var presence_arrived_at_time$1 = "Llegó a las {time}";
var presence_arrived_on_datetime$1 = "Llegó a las {time}";
var presence_autofill_already_in_net$1 = "Ya en esta red";
var presence_autofill_dialog_more_users$1 = "+ {amount} usuarios más";
var presence_autofill_dialog_notfound_message$1 = "¿No puede encontrar al usuario que estaba esperando? Siempre puede agregar y editar usuarios y sus dispositivos personales más adelante.";
var presence_autofill_dialog_title$1 = "Usuarios detectados automáticamente";
var presence_autofill_empty_caption$1 = "No hay contactos";
var presence_autofill_empty_subtitle$1 = "Vuelva a intentarlo cuando nuevos dispositivos se unan a la red o agregue nuevos usuarios manualmente.";
var presence_autofill_empty_title$1 = "No hay ningún usuario nuevo para agregar en este momento";
var presence_autofill_table_headerdevice$1 = "Dispositivo personal";
var presence_autofill_table_nameplaceholder$1 = "Ingrese el nombre del usuario";
var presence_badge_other$1 = "Otros dispositivo";
var presence_badge_tracking$1 = "Dispositivo de presencia";
var presence_contact_type$1 = "Tipo de Contacto";
var presence_delete_dialog_body$1 = "¿Quiere eliminar al usuario {contactName} de la lista?<br />Ya no se enviarán notificaciones y se suspenderá el rastreo de los dispositivos.";
var presence_delete_dialog_title$1 = "Eliminar un contacto.";
var presence_devices_dialog_title$1 = "Seleccionar los dispositivos del usuario";
var presence_display_name$1 = "Nombre para mostrar";
var presence_edit_already_assigned_devices$1 = "Asignado a otros usuarios";
var presence_edit_at_least_one_device$1 = "Seleccione al menos un dispositivo";
var presence_edit_dialog_title$1 = "Editar usuario";
var presence_edit_multi_device$1 = "Fing usa un solo dispositivo para detectar cuando un usuario está presente en la red. Si selecciona varios dispositivos, haga clic en la insignia de la derecha para elegir el dispositivo de presencia.";
var presence_error_incomplete$1 = "Complete todos los elementos obligatorios";
var presence_gender$1 = "Género";
var presence_gender_explanation$1 = "Ayuda a usar los pronombres correctos en las notificaciones.";
var presence_left_at_time$1 = "Salió a las {time}";
var presence_left_on_datetime$1 = "Salió a las {time}";
var presence_profile_photo$1 = "Foto de perfil";
var presence_send_report_body$1 = "Fing generará un informe mensual sobre la presencia en la red y se lo enviará por correo electrónico.";
var presence_send_report_empty_caption$1 = "Correo enviado";
var presence_send_report_empty_subtitle$1 = "Fing está preparando el informe de presencia. Debería estar disponible en su bandeja de entrada en unos minutos.";
var presence_send_report_empty_title$1 = "Le estamos enviando el informe";
var presence_send_report_title$1 = "Enviar informe mensual";
var presence_upload_profile_photo$1 = "Subir foto";
var rating_comments$1 = "Comentarios";
var rating_date$1 = "Tu calificación el {date}";
var rating_dislike_because$1 = "No me gusta porque...";
var rating_edit$1 = "Editar calificación";
var rating_hate_because$1 = "No me gusta absolutamente nada porque...";
var rating_like_because$1 = "Me gusta porque...";
var rating_love_because$1 = "Me encanta porque...";
var rating_ok_because$1 = "Bah... Está bien porque...";
var rating_title$1 = "Calificar {ispName}";
var recognize_missing_modal_footer_nochecked$1 = "Comprobar";
var recognize_missing_modal_form_typeheader$1 = "Tipo";
var recognize_userinput_form_os$1 = "Sistema operativo";
var recognize_userinput_form_typeheader$1 = "Tipo";
var recognize_userinput_osselection_form_description$1 = "Sistema operativo";
var relative_current_day$1 = "Este día";
var relative_current_month$1 = "Este mes";
var relative_current_week$1 = "Esta semana";
var relative_current_year$1 = "Este año";
var relative_day_long$1 = "{amount, plural, =1 {hace # dia} other {hace # dias}}";
var relative_hour_long$1 = "{amount, plural, =1 {hace # hora} other {hace # horas}}";
var relative_min_long$1 = "{amount, plural, =1 {hace # minutos} other {hace # mins}}";
var relative_minute_long$1 = "{amount, plural, =1 {hace # minuto1} other {hace # minutos}}";
var relative_month_long$1 = "{amount, plural, =1 {hace # mese} other {hace # meses}}";
var relative_now$1 = "ahora";
var relative_older$1 = "Más antiguo";
var relative_today$1 = "Hoy";
var relative_week_long$1 = "{amount, plural, =1 {hace # semana} other {hace # semanas}}";
var relative_year_long$1 = "{amount, plural, =1 {hace # año} other {hace # años}}";
var relative_yesterday$1 = "Ayer";
var routercheck_emptystate_subtitle$1 = "No se ha encontrado ninguna vulnerabilidad con el escaneo.";
var routercheck_emptystate_title$1 = "Todo funciona correctamente, no se ha encontrado ningún puerto abierto";
var routercheck_internet_address$1 = "Dirección pública detectada: {address} ";
var routercheck_last_update$1 = "Última actualización {date}";
var routercheck_never_subtitle$1 = "No tenemos suficientes datos para esta sección.";
var routercheck_never_title$1 = "Aún no se han realizado comprobaciones de vulnerabilidad en esta red.";
var routercheck_openports_action$1 = "Cerrar {ports} puertos";
var routercheck_openports_title$1 = "Puertos abiertos en tu rúter";
var routercheck_port_external$1 = "Externo";
var routercheck_port_internal$1 = "Interno";
var routercheck_port_protocol$1 = "Protocolo";
var routercheck_premium_subtitle$1 = "Verifique y solucione las vulnerabilidades en la configuración de su enrutador que podrían conducir al acceso no autorizado a los dispositivos conectados.";
var routercheck_premium_title$1 = "La comprobación de vulnerabilidad del enrutador falló";
var routercheck_progress_caption$1 = "Analizando";
var routercheck_progress_subtitle$1 = "Espere mientras revisamos el enrutador en busca de puertos abiertos, buscamos los detalles y manuales del enrutador.";
var routercheck_progress_title$1 = "Recopilando información del rúter...";
var routercheck_protected$1 = "Tu rúter no admite la apertura automática de puertos";
var routercheck_protected_description$1 = "La apertura de puertos debe configurarse manualmente";
var routercheck_publicip$1 = "Directamente conectado al Internet público";
var routercheck_publicip_description$1 = "Tu rúter tiene una dirección de Internet pública y puede ser usado por cualquier persona en Internet.";
var routercheck_toolresult_danger_subtitle$1 = "El control de seguridad ha encontrado vulnerabilidades en la configuración de la red que podrían provocar un acceso no autorizado a los dispositivos conectados.";
var routercheck_toolresult_danger_title$1 = "Se ha detectado alguna vulnerabilidad";
var routercheck_toolresult_success_subtitle$1 = "La comprobación de seguridad ha detectado una configuración de red óptima para la seguridad de los dispositivos conectados.";
var routercheck_toolresult_success_title$1 = "No se ha detectado ninguna vulnerabilidad";
var routercheck_toolresult_sync_subtitle$1 = "¡Tranquilo! Esto puede llevar un tiempo. La duración de la prueba depende del tamaño de su red y la cantidad de dispositivos conectados.";
var routercheck_toolresult_sync_title$1 = "La comprobación de seguridad se está ejecutando...";
var routercheck_toolresult_warning_subtitle$1 = "El control de seguridad ha encontrado vulnerabilidades potenciales en la configuración de la red que podrían provocar un acceso no autorizado a los dispositivos conectados.";
var routercheck_toolresult_warning_title$1 = "Se ha detectado una vulnerabilidad moderada";
var routercheck_unknown$1 = "Tipo de acceso no detectado";
var routercheck_unknown_description$1 = "Sin direcciones IP UPnP y NATPMP, no hay ninguna indicación de cómo podrían coincidir la IP externa y la interna.";
var routercheck_unprotectedboth$1 = "Tu rúter permite UPnP y NAT-PMP sin verificar";
var routercheck_unprotectedboth_description$1 = "Las aplicaciones pueden exponer tus dispositivos sin ningún tipo de control. Esto puede resultar útil para las llamadas por Internet y los juegos en línea, pero es potencialmente peligroso.";
var routercheck_unprotectednatpmp$1 = "Tu rúter permite la apertura de puertos NAT-PMP sin verificar";
var routercheck_unprotectednatpmp_description$1 = "Las aplicaciones de la red pueden exponer tus dispositivos sin control alguno";
var routercheck_unprotectedupnp$1 = "Tu rúter permite la apertura de puertos UPnP sin verificar";
var routercheck_unprotectedupnp_description$1 = "Las aplicaciones pueden exponer tus dispositivos sin ningún tipo de control. Esto puede resultar útil para las llamadas por Internet y los juegos en línea, pero es potencialmente peligroso.";
var routercheck_wan$1 = "Conectado a una red privada";
var routercheck_wan_description$1 = "La dirección IP externa es privada. No se puede acceder directamente al rúter desde un Internet público";
var routercheck_webinterface_link$1 = "Interfaz web";
var routercheck_your_router_brand$1 = "Marca";
var routercheck_your_router_family$1 = "Familia";
var routercheck_your_router_model$1 = "Modelo";
var routercheck_your_router_releasedate$1 = "Producido";
var routercheck_your_router_title$1 = "Acerca de tu rúter";
var routercheck_your_setup_title$1 = "Acerca de tu configuración";
var schedule_hours$1 = "Programar horas";
var schedule_max_run$1 = "Puede ejecutar hasta {max} pruebas por día";
var security_confirm_all_dialog_body$1 = "Fing marcará todos los dispositivos {amount} como tuyos para reconocer fácilmente los dispositivos no identificados que se unan a tu red en el futuro.";
var security_confirm_all_dialog_title$1 = "Confirmar {amount} dispositivos";
var security_network_vulnerabilities$1 = "Vulnerabilidades de red";
var security_score_access_point_subtitle_danger$1 = "El punto de acceso es una red abierta. Todos pueden ver los datos que envías de forma inalámbrica.";
var security_score_access_point_subtitle_success$1 = "El punto de acceso está utilizando un protocolo seguro para enviar datos de forma inalámbrica.";
var security_score_access_point_subtitle_warning$1 = "El punto de acceso no garantiza una protección completa contra ataques.";
var security_score_access_point_title_danger$1 = "El punto de acceso no está protegido";
var security_score_access_point_title_success$1 = "El punto de acceso es seguro";
var security_score_access_point_title_warning$1 = "El punto de acceso tiene protección insuficiente";
var security_score_alert_disabled_title$1 = "Las notificaciones en nuevos dispositivos están deshabilitadas";
var security_score_alert_enabled_title$1 = "Las notificaciones en nuevos dispositivos están habilitadas";
var security_score_alert_subtitle$1 = "Reciba una notificación cuando un nuevo dispositivo se una a su red.";
var security_score_alert_switch$1 = "Habilitar notificaciones";
var security_score_all_confirmed_devices_title$1 = "Todos los dispositivos están confirmados";
var security_score_automated_disabled_title$1 = "La verificación automática de vulnerabilidades del enrutador está deshabilitada";
var security_score_automated_enabled_title$1 = "Vulnerabilidades del enrutador automatizado";
var security_score_automated_subtitle$1 = "Detecta vulnerabilidades automáticamente para monitorear posibles debilidades de seguridad que pueden conducir a un acceso no autorizado.";
var security_score_confirm_devices$1 = "Confirmar dispositivos";
var security_score_score$1 = "Puntaje de seguridad de la red";
var security_score_secure$1 = "Segura";
var security_score_state_change_disabled_title$1 = "Las notificaciones sobre la actividad en línea están deshabilitadas";
var security_score_state_change_enabled_title$1 = "Notificaciones de un solo dispositivo";
var security_score_state_change_subtitle$1 = "Recibe una notificación cada vez que un dispositivo conocido se desconecte y se conecte.";
var security_score_unconfirmed_devices_subtitle$1 = "Confirma tus dispositivos para detectar fácilmente quién está usando tu red.";
var security_score_unconfirmed_devices_title$1 = "{num} dispositivo no confirmado";
var security_score_unconfirmed_devices_titles$1 = "{num} dispositivos no confirmados";
var security_score_unsecure$1 = "No segura";
var security_score_upgrade_to_unlock$1 = "Ampliar para desbloquearlo";
var sidebar_community$1 = "Comunidad";
var sidebar_help$1 = "Ayuda";
var sidebar_home$1 = "Panorama";
var sidebar_internet$1 = "Internet";
var sidebar_notifications$1 = "Notificaciones";
var sidebar_outages$1 = "Interrupciones";
var sidebar_tools$1 = "Herramientas";
var speedtest_achievements$1 = "Que puedes conseguir";
var speedtest_city$1 = "Ciudad";
var speedtest_compare_location$1 = "{isp} en {location}";
var speedtest_compare_performance$1 = "Compare su rendimiento de velocidad";
var speedtest_comparison_not_available$1 = "No hay suficientes datos sobre {isp} para realizar una comparación";
var speedtest_contact_support$1 = "Ponte en contacto con soporte";
var speedtest_country$1 = "País";
var speedtest_distribution_not_available$1 = "No hay suficientes datos sobre {isp} para ver una distribución";
var speedtest_download$1 = "Descargar";
var speedtest_download_info$1 = "Velocidad media para recuperar datos de un servidor de prueba. Un valor más alto significa una velocidad más rápida.";
var speedtest_failed$1 = "Tu prueba de velocidad falló. Es posible que esté experimentando un problema de conectividad.";
var speedtest_header_connection$1 = "Conexión";
var speedtest_header_location$1 = "Ubicación";
var speedtest_header_provider$1 = "Proveedor";
var speedtest_isp_info_location$1 = "{isp} en {city}, {country}";
var speedtest_mlab_body$1 = "Esta prueba ofrece una medida realista de la velocidad que se puede alcanzar al conectarse a servicios de Internet auténticos, no se trata de una velocidad formal que solo se puede mantener en el último tramo de conexión de tu proveedor de Internet.";
var speedtest_mlab_title$1 = "¿Por qué nuestros resultados son diferentes?";
var speedtest_rate$1 = "Califica a tu proveedor";
var speedtest_reviews$1 = "{total} Reseñas";
var speedtest_score_category_4k$1 = "4K";
var speedtest_score_category_AudioStream$1 = "Transmisión de audio";
var speedtest_score_category_BasicStream$1 = "Transmisión básica";
var speedtest_score_category_HDStream$1 = "Transmisión HD";
var speedtest_score_category_HDWebcam$1 = "Cámara web HD";
var speedtest_score_category_L_filetrans$1 = "Transferencias de grandes archivos";
var speedtest_score_category_Messaging$1 = "Mensajería";
var speedtest_score_category_SDStream$1 = "Transmisión SD";
var speedtest_score_category_SDWebcam$1 = "Cámara web SD";
var speedtest_score_category_S_filetrans$1 = "Transferencias de archivos pequeños";
var speedtest_score_category_UHD4K$1 = "Ultra HD 4K";
var speedtest_score_category_UHD8K$1 = "Ultra HD 8K";
var speedtest_score_category_brows_emails$1 = "Navegación y correos electrónicos";
var speedtest_score_category_browsing$1 = "Navegación";
var speedtest_score_category_challenging$1 = "Desafiante";
var speedtest_score_category_gameon$1 = "¡A jugar!";
var speedtest_score_category_gameover$1 = "Fin del juego";
var speedtest_score_category_inthegame$1 = "En el juego";
var speedtest_score_category_limited$1 = "Limitado";
var speedtest_score_category_photo$1 = "Foto";
var speedtest_score_category_small_brows_email$1 = "Pequeña navegación y correos electrónicos";
var speedtest_score_category_video$1 = "Vídeo";
var speedtest_score_category_winning$1 = "Ganador";
var speedtest_start_button$1 = "Iniciar prueba";
var speedtest_stats_jitter$1 = "Fluctuación";
var speedtest_stats_jitter_info$1 = "La variación del retardo de paquetes. Un valor más bajo significa una conexión más estable.";
var speedtest_stats_loss$1 = "Pérdida de paquetes";
var speedtest_stats_loss_info$1 = "Cuántos paquetes se perdieron. Un valor más bajo significa conexiones más estables.";
var speedtest_stats_ping$1 = "Ping";
var speedtest_stats_ping_info$1 = "El tiempo para llegar a un servidor de prueba. Un valor más bajo significa que las respuestas se obtienen más rápido.";
var speedtest_tested$1 = "Probado por {tests}";
var speedtest_title$1 = "Tu prueba de velocidad";
var speedtest_title_call$1 = "LLamada";
var speedtest_title_gaming$1 = "Juegos";
var speedtest_title_social$1 = "Social";
var speedtest_title_video$1 = "Vídeo";
var speedtest_title_work$1 = "Trabajar";
var speedtest_try_again$1 = "Vuelva a intentarlo o compruebe su conexión.";
var speedtest_upload$1 = "Subir";
var speedtest_upload_info$1 = "Velocidad media para enviar datos a un servidor de prueba. Un valor más alto significa una velocidad más rápida.";
var status_for_duration$1 = "Ha estado {status} durante {duration}";
var this_month$1 = "Este mes";
var time_current_day$1 = "Este día";
var time_current_month$1 = "Este mes";
var time_current_week$1 = "Esta semana";
var time_current_year$1 = "Este año";
var time_older$1 = "Más antiguo";
var time_today$1 = "Hoy";
var time_yesterday$1 = "Ayer";
var timeline_no_event$1 = "No se registra ningún evento en este período";
var timeline_no_notification$1 = "No hay notificaciones disponibles en este período";
var timeline_no_sample$1 = "No se registró ninguna muestra en este período";
var timeline_table_header_details$1 = "Detalles";
var timeline_table_header_port$1 = "Reenvío de puertos";
var timeline_table_header_state$1 = "Estado";
var timeline_table_header_subject$1 = "Sujeto";
var timeline_table_header_type$1 = "Tipo";
var timeline_table_header_when$1 = "Cuándo";
var tools_page_title$1 = "Herramientas";
var tooltargetbar_ip_address$1 = "Dirección IP";
var tooltargetbar_location$1 = "Ubicación";
var tooltargetbar_mac_address$1 = "'Dirección Mac'";
var tooltargetbar_no_open_ports$1 = "No se encontraron puertos abiertos";
var tooltargetbar_open_ports$1 = "Puertos abiertos";
var tooltargetbar_provider$1 = "Proveedor";
var view_timeline_button$1 = "Ver línea de tiempo";
var waiting_rate$1 = "Proporcione su calificación";
var LocaleEsEs = {
	"#_ghz": "{num} Ghz",
	"#_mbit": "Mbit",
	"#_mbps": "Mbps",
	"#_ms": "ms",
	"100_mbit": "100 Mbit",
	"10_gbit": "10 Gbit",
	"10_mbit": "10 Mbit",
	"1_gbit": "1 Gbit",
	autoblock_card_action_enable: autoblock_card_action_enable$1,
	autoblock_card_subtitle_disabled: autoblock_card_subtitle_disabled$1,
	autoblock_card_subtitle_enabled: autoblock_card_subtitle_enabled$1,
	autoblock_card_subtitle_permission_disabled: autoblock_card_subtitle_permission_disabled$1,
	autoblock_card_subtitle_validation_disabled: autoblock_card_subtitle_validation_disabled$1,
	autoblock_card_title: autoblock_card_title$1,
	autoblock_card_title_disabled: autoblock_card_title_disabled$1,
	autoblock_card_title_enabled: autoblock_card_title_enabled$1,
	back_button: back_button$1,
	contacttype_colleague: contacttype_colleague$1,
	contacttype_colleague_contractor: contacttype_colleague_contractor$1,
	contacttype_colleague_staff: contacttype_colleague_staff$1,
	contacttype_colleague_visitor: contacttype_colleague_visitor$1,
	contacttype_family: contacttype_family$1,
	contacttype_family_her: contacttype_family_her$1,
	contacttype_family_him: contacttype_family_him$1,
	contacttype_family_kid: contacttype_family_kid$1,
	contacttype_family_pet: contacttype_family_pet$1,
	contacttype_family_pet_cat: contacttype_family_pet_cat$1,
	contacttype_family_pet_dog: contacttype_family_pet_dog$1,
	contacttype_family_relative: contacttype_family_relative$1,
	contacttype_friend: contacttype_friend$1,
	contacttype_guest: contacttype_guest$1,
	contacttype_help: contacttype_help$1,
	contacttype_help_cleaning: contacttype_help_cleaning$1,
	contacttype_help_delivery: contacttype_help_delivery$1,
	contacttype_help_maintenance: contacttype_help_maintenance$1,
	contacttype_help_medical: contacttype_help_medical$1,
	contacttype_other: contacttype_other$1,
	contacttype_others: contacttype_others$1,
	copy_to_clipboard_copied: copy_to_clipboard_copied$1,
	data_no_trend: data_no_trend$1,
	data_trend_down_1: data_trend_down_1$1,
	data_trend_down_2: data_trend_down_2$1,
	data_trend_stable: data_trend_stable$1,
	data_trend_up_1: data_trend_up_1$1,
	data_trend_up_2: data_trend_up_2$1,
	dateformat_day: dateformat_day$1,
	dateformat_day_long: dateformat_day_long$1,
	dateformat_day_short: dateformat_day_short$1,
	dateformat_dayago: dateformat_dayago$1,
	dateformat_days: dateformat_days$1,
	dateformat_days_long: dateformat_days_long$1,
	dateformat_daysago: dateformat_daysago$1,
	dateformat_hour: dateformat_hour$1,
	dateformat_hour_long: dateformat_hour_long$1,
	dateformat_hour_short: dateformat_hour_short$1,
	dateformat_hourago: dateformat_hourago$1,
	dateformat_hours: dateformat_hours$1,
	dateformat_hours_long: dateformat_hours_long$1,
	dateformat_hoursago: dateformat_hoursago$1,
	dateformat_min: dateformat_min$1,
	dateformat_min_long: dateformat_min_long$1,
	dateformat_min_short: dateformat_min_short$1,
	dateformat_minago: dateformat_minago$1,
	dateformat_mins: dateformat_mins$1,
	dateformat_mins_long: dateformat_mins_long$1,
	dateformat_minsago: dateformat_minsago$1,
	dateformat_minutes: dateformat_minutes$1,
	dateformat_month: dateformat_month$1,
	dateformat_month_apr: dateformat_month_apr$1,
	dateformat_month_aug: dateformat_month_aug$1,
	dateformat_month_dec: dateformat_month_dec$1,
	dateformat_month_feb: dateformat_month_feb$1,
	dateformat_month_jan: dateformat_month_jan$1,
	dateformat_month_jul: dateformat_month_jul$1,
	dateformat_month_jun: dateformat_month_jun$1,
	dateformat_month_mar: dateformat_month_mar$1,
	dateformat_month_may: dateformat_month_may$1,
	dateformat_month_nov: dateformat_month_nov$1,
	dateformat_month_oct: dateformat_month_oct$1,
	dateformat_month_sep: dateformat_month_sep$1,
	dateformat_monthago: dateformat_monthago$1,
	dateformat_months: dateformat_months$1,
	dateformat_monthsago: dateformat_monthsago$1,
	dateformat_now: dateformat_now$1,
	dateformat_week: dateformat_week$1,
	dateformat_week_long: dateformat_week_long$1,
	dateformat_week_short: dateformat_week_short$1,
	dateformat_weekago: dateformat_weekago$1,
	dateformat_weeks: dateformat_weeks$1,
	dateformat_weeks_long: dateformat_weeks_long$1,
	dateformat_weeksago: dateformat_weeksago$1,
	dateformat_year: dateformat_year$1,
	dateformat_yearago: dateformat_yearago$1,
	dateformat_years: dateformat_years$1,
	dateformat_yearsago: dateformat_yearsago$1,
	device_alerts_dialog_body: device_alerts_dialog_body$1,
	device_alerts_dialog_title: device_alerts_dialog_title$1,
	device_confirm_dialog_body: device_confirm_dialog_body$1,
	device_confirm_dialog_body_alt: device_confirm_dialog_body_alt$1,
	device_confirm_dialog_title: device_confirm_dialog_title$1,
	device_detail_banner_choose_action: device_detail_banner_choose_action$1,
	device_detail_banner_choose_action_os: device_detail_banner_choose_action_os$1,
	device_detail_banner_choose_subtitle: device_detail_banner_choose_subtitle$1,
	device_detail_banner_choose_subtitle_model: device_detail_banner_choose_subtitle_model$1,
	device_detail_banner_choose_subtitle_os: device_detail_banner_choose_subtitle_os$1,
	device_detail_banner_empty_state_action: device_detail_banner_empty_state_action$1,
	device_detail_banner_empty_state_subtitle: device_detail_banner_empty_state_subtitle$1,
	device_detail_banner_feedback_subtitle: device_detail_banner_feedback_subtitle$1,
	device_detail_banner_feedback_title: device_detail_banner_feedback_title$1,
	device_detail_banner_revert_action: device_detail_banner_revert_action$1,
	device_detail_banner_revert_subtitle: device_detail_banner_revert_subtitle$1,
	device_detail_banner_thanks: device_detail_banner_thanks$1,
	device_detail_clear_action: device_detail_clear_action$1,
	device_detail_delete_modal_action: device_detail_delete_modal_action$1,
	device_detail_delete_modal_body: device_detail_delete_modal_body$1,
	device_detail_delete_modal_body_small: device_detail_delete_modal_body_small$1,
	device_detail_delete_modal_title: device_detail_delete_modal_title$1,
	device_detail_edit_action: device_detail_edit_action$1,
	device_detail_edit_modal_nameinput_placeholder: device_detail_edit_modal_nameinput_placeholder$1,
	device_detail_edit_modal_nameinput_small: device_detail_edit_modal_nameinput_small$1,
	device_detail_edit_modal_notesinput_label: device_detail_edit_modal_notesinput_label$1,
	device_detail_edit_modal_notesinput_placeholder: device_detail_edit_modal_notesinput_placeholder$1,
	device_detail_edit_modal_notesinput_small: device_detail_edit_modal_notesinput_small$1,
	device_detail_edit_modal_placementinput_label: device_detail_edit_modal_placementinput_label$1,
	device_detail_edit_modal_placementinput_small: device_detail_edit_modal_placementinput_small$1,
	device_detail_edit_modal_title: device_detail_edit_modal_title$1,
	device_detail_family: device_detail_family$1,
	device_detail_icon_picker_hint: device_detail_icon_picker_hint$1,
	device_detail_icon_picker_title: device_detail_icon_picker_title$1,
	device_detail_internet_downtime_schedule: device_detail_internet_downtime_schedule$1,
	device_detail_internet_downtime_schedule_manage: device_detail_internet_downtime_schedule_manage$1,
	device_detail_kick_out_mode_blocked: device_detail_kick_out_mode_blocked$1,
	device_detail_kick_out_mode_blocked_ago: device_detail_kick_out_mode_blocked_ago$1,
	device_detail_kick_out_mode_blocked_ago_for: device_detail_kick_out_mode_blocked_ago_for$1,
	device_detail_kick_out_mode_blocked_for: device_detail_kick_out_mode_blocked_for$1,
	device_detail_kick_out_mode_blocked_on: device_detail_kick_out_mode_blocked_on$1,
	device_detail_kick_out_mode_paused: device_detail_kick_out_mode_paused$1,
	device_detail_kick_out_mode_paused_ago: device_detail_kick_out_mode_paused_ago$1,
	device_detail_kick_out_mode_paused_ago_for: device_detail_kick_out_mode_paused_ago_for$1,
	device_detail_kick_out_mode_paused_for: device_detail_kick_out_mode_paused_for$1,
	device_detail_kick_out_mode_paused_on: device_detail_kick_out_mode_paused_on$1,
	device_detail_kick_out_mode_resumed_immediately: device_detail_kick_out_mode_resumed_immediately$1,
	device_detail_kick_out_mode_resumed_while: device_detail_kick_out_mode_resumed_while$1,
	device_detail_kick_out_mode_unblocked_immediately: device_detail_kick_out_mode_unblocked_immediately$1,
	device_detail_kick_out_mode_unblocked_while: device_detail_kick_out_mode_unblocked_while$1,
	device_detail_notification_set_automatic: device_detail_notification_set_automatic$1,
	device_detail_notification_set_millis: device_detail_notification_set_millis$1,
	device_detail_snmp_description: device_detail_snmp_description$1,
	device_detail_wol_failed: device_detail_wol_failed$1,
	device_detail_wol_modal_title_fail: device_detail_wol_modal_title_fail$1,
	device_detail_wol_modal_title_success: device_detail_wol_modal_title_success$1,
	device_detail_wol_success: device_detail_wol_success$1,
	device_place_Basement: device_place_Basement$1,
	device_place_Bathroom: device_place_Bathroom$1,
	device_place_Bedroom: device_place_Bedroom$1,
	device_place_Cellar: device_place_Cellar$1,
	device_place_Closet: device_place_Closet$1,
	device_place_Default: device_place_Default$1,
	device_place_Dining_Room: device_place_Dining_Room$1,
	device_place_Garage: device_place_Garage$1,
	device_place_Garden: device_place_Garden$1,
	device_place_Gym: device_place_Gym$1,
	device_place_Hallway: device_place_Hallway$1,
	device_place_Indoors: device_place_Indoors$1,
	device_place_Kitchen: device_place_Kitchen$1,
	"device_place_Laundry Room": "Lavadero",
	device_place_Living_Room: device_place_Living_Room$1,
	device_place_Lobby: device_place_Lobby$1,
	device_place_Office: device_place_Office$1,
	device_place_Outdoors: device_place_Outdoors$1,
	device_place_Pool: device_place_Pool$1,
	"device_place_Recreation Room": "Sala de ocio",
	"device_place_Safe Room": "Habitación segura",
	device_place_Study: device_place_Study$1,
	"device_place_Utility Room": "Trastero",
	devicecategory_audio_and_video: devicecategory_audio_and_video$1,
	devicecategory_engineering: devicecategory_engineering$1,
	devicecategory_everything_else: devicecategory_everything_else$1,
	devicecategory_home_and_office: devicecategory_home_and_office$1,
	devicecategory_industry: devicecategory_industry$1,
	devicecategory_mobile: devicecategory_mobile$1,
	devicecategory_network: devicecategory_network$1,
	devicecategory_offline: devicecategory_offline$1,
	devicecategory_personal: devicecategory_personal$1,
	devicecategory_server: devicecategory_server$1,
	devicecategory_smart_home: devicecategory_smart_home$1,
	devicetype_alarm: devicetype_alarm$1,
	devicetype_appliance: devicetype_appliance$1,
	devicetype_arduino: devicetype_arduino$1,
	devicetype_automotive: devicetype_automotive$1,
	devicetype_baby_monitor: devicetype_baby_monitor$1,
	devicetype_barcode: devicetype_barcode$1,
	devicetype_battery: devicetype_battery$1,
	devicetype_bell: devicetype_bell$1,
	devicetype_car: devicetype_car$1,
	devicetype_circuit_card: devicetype_circuit_card$1,
	devicetype_cleaner: devicetype_cleaner$1,
	devicetype_clock: devicetype_clock$1,
	devicetype_cloud: devicetype_cloud$1,
	devicetype_communication: devicetype_communication$1,
	devicetype_computer: devicetype_computer$1,
	devicetype_conferencing: devicetype_conferencing$1,
	devicetype_control_panel: devicetype_control_panel$1,
	devicetype_database: devicetype_database$1,
	devicetype_desktop: devicetype_desktop$1,
	devicetype_disc_player: devicetype_disc_player$1,
	devicetype_domain_server: devicetype_domain_server$1,
	devicetype_domotz_box: devicetype_domotz_box$1,
	devicetype_electric: devicetype_electric$1,
	devicetype_energy: devicetype_energy$1,
	devicetype_ereader: devicetype_ereader$1,
	devicetype_file_server: devicetype_file_server$1,
	devicetype_fingbox: devicetype_fingbox$1,
	devicetype_firewall: devicetype_firewall$1,
	devicetype_fitness: devicetype_fitness$1,
	devicetype_fridge: devicetype_fridge$1,
	devicetype_game_console: devicetype_game_console$1,
	devicetype_garage: devicetype_garage$1,
	devicetype_gateway: devicetype_gateway$1,
	devicetype_generic: devicetype_generic$1,
	devicetype_health_monitor: devicetype_health_monitor$1,
	devicetype_heating: devicetype_heating$1,
	devicetype_humidity: devicetype_humidity$1,
	devicetype_industrial: devicetype_industrial$1,
	devicetype_ipod: devicetype_ipod$1,
	devicetype_key_lock: devicetype_key_lock$1,
	devicetype_laptop: devicetype_laptop$1,
	devicetype_light: devicetype_light$1,
	devicetype_loudspeaker: devicetype_loudspeaker$1,
	devicetype_mail_server: devicetype_mail_server$1,
	devicetype_media_player: devicetype_media_player$1,
	devicetype_medical: devicetype_medical$1,
	devicetype_microphone: devicetype_microphone$1,
	devicetype_mobile: devicetype_mobile$1,
	devicetype_modem: devicetype_modem$1,
	devicetype_motion_detector: devicetype_motion_detector$1,
	devicetype_music: devicetype_music$1,
	devicetype_nas_storage: devicetype_nas_storage$1,
	devicetype_network_appliance: devicetype_network_appliance$1,
	devicetype_pet_monitor: devicetype_pet_monitor$1,
	devicetype_phone: devicetype_phone$1,
	devicetype_photo_camera: devicetype_photo_camera$1,
	devicetype_photos: devicetype_photos$1,
	devicetype_poe_plug: devicetype_poe_plug$1,
	devicetype_pool: devicetype_pool$1,
	devicetype_pos: devicetype_pos$1,
	devicetype_power_system: devicetype_power_system$1,
	devicetype_printer: devicetype_printer$1,
	devicetype_processor: devicetype_processor$1,
	devicetype_projector: devicetype_projector$1,
	devicetype_proxy_server: devicetype_proxy_server$1,
	devicetype_radio: devicetype_radio$1,
	devicetype_raspberry: devicetype_raspberry$1,
	devicetype_remote_control: devicetype_remote_control$1,
	devicetype_rfid: devicetype_rfid$1,
	devicetype_robot: devicetype_robot$1,
	devicetype_router: devicetype_router$1,
	devicetype_satellite: devicetype_satellite$1,
	devicetype_scale: devicetype_scale$1,
	devicetype_scanner: devicetype_scanner$1,
	devicetype_security_system: devicetype_security_system$1,
	devicetype_sensor: devicetype_sensor$1,
	devicetype_server: devicetype_server$1,
	devicetype_sleep: devicetype_sleep$1,
	devicetype_small_cell: devicetype_small_cell$1,
	devicetype_smart_controller: devicetype_smart_controller$1,
	devicetype_smart_home: devicetype_smart_home$1,
	devicetype_smart_meter: devicetype_smart_meter$1,
	devicetype_smart_plug: devicetype_smart_plug$1,
	devicetype_smoke: devicetype_smoke$1,
	devicetype_solar_panel: devicetype_solar_panel$1,
	devicetype_sound_system: devicetype_sound_system$1,
	devicetype_sprinkler: devicetype_sprinkler$1,
	devicetype_stb: devicetype_stb$1,
	devicetype_streaming_dongle: devicetype_streaming_dongle$1,
	devicetype_surveillance_camera: devicetype_surveillance_camera$1,
	devicetype_switch: devicetype_switch$1,
	devicetype_tablet: devicetype_tablet$1,
	devicetype_television: devicetype_television$1,
	devicetype_terminal: devicetype_terminal$1,
	devicetype_thermostat: devicetype_thermostat$1,
	devicetype_toy: devicetype_toy$1,
	devicetype_undefined: devicetype_undefined$1,
	devicetype_usb: devicetype_usb$1,
	devicetype_virtual_machine: devicetype_virtual_machine$1,
	devicetype_voice_control: devicetype_voice_control$1,
	devicetype_voip: devicetype_voip$1,
	devicetype_vpn: devicetype_vpn$1,
	devicetype_washer: devicetype_washer$1,
	devicetype_watch: devicetype_watch$1,
	devicetype_wearable: devicetype_wearable$1,
	devicetype_weather: devicetype_weather$1,
	devicetype_web_server: devicetype_web_server$1,
	devicetype_wifi: devicetype_wifi$1,
	devicetype_wifi_extender: devicetype_wifi_extender$1,
	dhcpdiscovery_result_domain: dhcpdiscovery_result_domain$1,
	discovery_action_edit: discovery_action_edit$1,
	discovery_device_action_change: discovery_device_action_change$1,
	discovery_devices_filter_all: discovery_devices_filter_all$1,
	discovery_devices_filter_offline: discovery_devices_filter_offline$1,
	discovery_devices_filter_online: discovery_devices_filter_online$1,
	discovery_devices_sorted_name: discovery_devices_sorted_name$1,
	discovery_devices_sorted_state: discovery_devices_sorted_state$1,
	discovery_events_change_state_briefly: discovery_events_change_state_briefly$1,
	discovery_events_change_state_till: discovery_events_change_state_till$1,
	discovery_events_empty_state: discovery_events_empty_state$1,
	discovery_events_heatmap_status: discovery_events_heatmap_status$1,
	discovery_events_no_in_this_period: discovery_events_no_in_this_period$1,
	discovery_events_premium_banner_description: discovery_events_premium_banner_description$1,
	discovery_events_premium_banner_description_end: discovery_events_premium_banner_description_end$1,
	discovery_events_show_next: discovery_events_show_next$1,
	discovery_events_show_previous: discovery_events_show_previous$1,
	discovery_events_timeline_more: discovery_events_timeline_more$1,
	discovery_events_timeline_new: discovery_events_timeline_new$1,
	discovery_events_timeline_new_blocked: discovery_events_timeline_new_blocked$1,
	discovery_events_timeline_offline_briefly: discovery_events_timeline_offline_briefly$1,
	discovery_events_timeline_offline_duration: discovery_events_timeline_offline_duration$1,
	discovery_events_timeline_offline_duration_immediately: discovery_events_timeline_offline_duration_immediately$1,
	discovery_events_timeline_offline_duration_while: discovery_events_timeline_offline_duration_while$1,
	discovery_events_timeline_offline_till_now: discovery_events_timeline_offline_till_now$1,
	discovery_events_timeline_online_briefly: discovery_events_timeline_online_briefly$1,
	discovery_events_timeline_online_duration: discovery_events_timeline_online_duration$1,
	discovery_events_timeline_online_duration_immediately: discovery_events_timeline_online_duration_immediately$1,
	discovery_events_timeline_online_duration_while: discovery_events_timeline_online_duration_while$1,
	discovery_events_timeline_online_till_now: discovery_events_timeline_online_till_now$1,
	discovery_events_week_heatmap_header: discovery_events_week_heatmap_header$1,
	discovery_events_week_timeline_header: discovery_events_week_timeline_header$1,
	discovery_header_location: discovery_header_location$1,
	discovery_header_network: discovery_header_network$1,
	discovery_network_internet_header: discovery_network_internet_header$1,
	discovery_network_internet_hostname: discovery_network_internet_hostname$1,
	discovery_network_internet_isp: discovery_network_internet_isp$1,
	discovery_network_internet_location: discovery_network_internet_location$1,
	discovery_network_internet_provider: discovery_network_internet_provider$1,
	discovery_network_internet_pubaddress: discovery_network_internet_pubaddress$1,
	discovery_network_internet_timezone: discovery_network_internet_timezone$1,
	discovery_network_netinfo_gateway: discovery_network_netinfo_gateway$1,
	discovery_security_newdevices_confirmall: discovery_security_newdevices_confirmall$1,
	discovery_security_newdevices_confirmed: discovery_security_newdevices_confirmed$1,
	discovery_security_newdevices_last30days: discovery_security_newdevices_last30days$1,
	discovery_security_newdevices_last7days: discovery_security_newdevices_last7days$1,
	discovery_security_newdevices_message: discovery_security_newdevices_message$1,
	discovery_security_newdevices_title: discovery_security_newdevices_title$1,
	discovery_security_newdevices_today: discovery_security_newdevices_today$1,
	dnslookup_info_local_title: dnslookup_info_local_title$1,
	duration_day_long: duration_day_long$1,
	duration_day_short: duration_day_short$1,
	duration_hour_long: duration_hour_long$1,
	duration_hour_short: duration_hour_short$1,
	duration_min_long: duration_min_long$1,
	duration_min_short: duration_min_short$1,
	duration_minute_long: duration_minute_long$1,
	duration_month_long: duration_month_long$1,
	duration_month_short: duration_month_short$1,
	duration_week_long: duration_week_long$1,
	duration_week_short: duration_week_short$1,
	duration_year_long: duration_year_long$1,
	duration_year_short: duration_year_short$1,
	empty_state_subtitle_fallback: empty_state_subtitle_fallback$1,
	empty_state_title_fallback: empty_state_title_fallback$1,
	every_day: every_day$1,
	every_hour: every_hour$1,
	every_week: every_week$1,
	findhiddencameras_emptystate_subtitle: findhiddencameras_emptystate_subtitle$1,
	findhiddencameras_emptystate_title: findhiddencameras_emptystate_title$1,
	findhiddencameras_foundcameras_title: findhiddencameras_foundcameras_title$1,
	findhiddencameras_helper_0found: findhiddencameras_helper_0found$1,
	findhiddencameras_helper_totdevice: findhiddencameras_helper_totdevice$1,
	findhiddencameras_helper_totdevice_1found: findhiddencameras_helper_totdevice_1found$1,
	findhiddencameras_helper_totdevice_manyfound: findhiddencameras_helper_totdevice_manyfound$1,
	findhiddencameras_helper_totdevice_with_unknown: findhiddencameras_helper_totdevice_with_unknown$1,
	findhiddencameras_helper_type_babymonitor: findhiddencameras_helper_type_babymonitor$1,
	findhiddencameras_helper_type_ipcamera: findhiddencameras_helper_type_ipcamera$1,
	findhiddencameras_helper_type_monitordetector: findhiddencameras_helper_type_monitordetector$1,
	findhiddencameras_helper_type_photocamera: findhiddencameras_helper_type_photocamera$1,
	findhiddencameras_helper_type_securitysystem: findhiddencameras_helper_type_securitysystem$1,
	findhiddencameras_progress_subtitle: findhiddencameras_progress_subtitle$1,
	findhiddencameras_progress_title: findhiddencameras_progress_title$1,
	findhiddencameras_summary_title: findhiddencameras_summary_title$1,
	findhiddencameras_toolresult_danger_subtitle: findhiddencameras_toolresult_danger_subtitle$1,
	findhiddencameras_toolresult_danger_title: findhiddencameras_toolresult_danger_title$1,
	findhiddencameras_toolresult_fingpedia_stats: findhiddencameras_toolresult_fingpedia_stats$1,
	findhiddencameras_toolresult_premium_subtitle: findhiddencameras_toolresult_premium_subtitle$1,
	findhiddencameras_toolresult_premium_title: findhiddencameras_toolresult_premium_title$1,
	findhiddencameras_toolresult_success_nofound_subtitle: findhiddencameras_toolresult_success_nofound_subtitle$1,
	findhiddencameras_toolresult_success_nofound_title: findhiddencameras_toolresult_success_nofound_title$1,
	findhiddencameras_toolresult_success_subtitle: findhiddencameras_toolresult_success_subtitle$1,
	findhiddencameras_toolresult_success_title: findhiddencameras_toolresult_success_title$1,
	findhiddencameras_toolresult_sync_subtitle: findhiddencameras_toolresult_sync_subtitle$1,
	findhiddencameras_toolresult_sync_title: findhiddencameras_toolresult_sync_title$1,
	findhiddencameras_unrecognized_subtitle: findhiddencameras_unrecognized_subtitle$1,
	findhiddencameras_unrecognized_title: findhiddencameras_unrecognized_title$1,
	format_speed: format_speed$1,
	gender_female: gender_female$1,
	gender_male: gender_male$1,
	gender_other: gender_other$1,
	generic_VPN: generic_VPN$1,
	generic_account: generic_account$1,
	generic_actions: generic_actions$1,
	generic_alert: generic_alert$1,
	generic_am: generic_am$1,
	generic_auto: generic_auto$1,
	generic_automatic: generic_automatic$1,
	generic_avg: generic_avg$1,
	generic_back: generic_back$1,
	generic_band: generic_band$1,
	generic_best: generic_best$1,
	generic_brandandmodel: generic_brandandmodel$1,
	generic_bssid: generic_bssid$1,
	generic_cancel: generic_cancel$1,
	generic_change: generic_change$1,
	generic_changed: generic_changed$1,
	generic_check: generic_check$1,
	generic_clear: generic_clear$1,
	generic_close: generic_close$1,
	generic_completed: generic_completed$1,
	generic_confirm: generic_confirm$1,
	generic_connected_to: generic_connected_to$1,
	generic_continue: generic_continue$1,
	generic_country: generic_country$1,
	generic_data_not_available: generic_data_not_available$1,
	generic_delete: generic_delete$1,
	generic_description: generic_description$1,
	generic_details: generic_details$1,
	generic_device: generic_device$1,
	generic_dhcp: generic_dhcp$1,
	generic_dhcp_proxy: generic_dhcp_proxy$1,
	generic_disable_all: generic_disable_all$1,
	generic_disabled: generic_disabled$1,
	generic_domain: generic_domain$1,
	generic_download_speed: generic_download_speed$1,
	generic_edit: generic_edit$1,
	generic_edit_profile: generic_edit_profile$1,
	generic_email: generic_email$1,
	generic_enable_all: generic_enable_all$1,
	generic_enabled: generic_enabled$1,
	generic_error: generic_error$1,
	generic_example: generic_example$1,
	generic_failed: generic_failed$1,
	generic_first_seen: generic_first_seen$1,
	generic_for: generic_for$1,
	generic_help: generic_help$1,
	generic_help_on_fing: generic_help_on_fing$1,
	generic_home: generic_home$1,
	generic_hotspot: generic_hotspot$1,
	generic_id: generic_id$1,
	generic_idle: generic_idle$1,
	generic_important: generic_important$1,
	generic_inspect: generic_inspect$1,
	generic_internet: generic_internet$1,
	generic_ip: generic_ip$1,
	generic_lastchange: generic_lastchange$1,
	generic_link: generic_link$1,
	generic_link_speed: generic_link_speed$1,
	generic_live: generic_live$1,
	generic_local: generic_local$1,
	generic_logo: generic_logo$1,
	generic_make: generic_make$1,
	generic_manage: generic_manage$1,
	generic_manual: generic_manual$1,
	generic_map_gpudisabled_link: generic_map_gpudisabled_link$1,
	generic_map_gpudisabled_message: generic_map_gpudisabled_message$1,
	generic_max: generic_max$1,
	generic_mbps_download: generic_mbps_download$1,
	generic_mbps_upload: generic_mbps_upload$1,
	generic_min: generic_min$1,
	generic_ms: generic_ms$1,
	generic_ms_latency: generic_ms_latency$1,
	generic_name: generic_name$1,
	generic_network: generic_network$1,
	generic_next: generic_next$1,
	generic_no: generic_no$1,
	generic_no_internet: generic_no_internet$1,
	generic_no_name: generic_no_name$1,
	generic_not_available: generic_not_available$1,
	generic_not_connected: generic_not_connected$1,
	generic_not_in_network: generic_not_in_network$1,
	generic_not_tracking: generic_not_tracking$1,
	generic_notset: generic_notset$1,
	generic_office: generic_office$1,
	generic_offline: generic_offline$1,
	generic_ok: generic_ok$1,
	generic_online: generic_online$1,
	generic_open: generic_open$1,
	generic_operatingsystem: generic_operatingsystem$1,
	generic_optional: generic_optional$1,
	generic_or: generic_or$1,
	generic_order_by: generic_order_by$1,
	generic_os: generic_os$1,
	generic_outage: generic_outage$1,
	generic_outages: generic_outages$1,
	generic_pm: generic_pm$1,
	generic_public: generic_public$1,
	generic_recent: generic_recent$1,
	generic_refresh: generic_refresh$1,
	generic_related_articles: generic_related_articles$1,
	generic_rental: generic_rental$1,
	generic_report: generic_report$1,
	generic_result: generic_result$1,
	generic_running: generic_running$1,
	generic_save: generic_save$1,
	generic_security: generic_security$1,
	generic_see_result: generic_see_result$1,
	generic_seeall: generic_seeall$1,
	generic_send: generic_send$1,
	generic_service: generic_service$1,
	generic_settings: generic_settings$1,
	generic_share: generic_share$1,
	generic_show_data_for: generic_show_data_for$1,
	generic_signal: generic_signal$1,
	generic_size: generic_size$1,
	generic_source: generic_source$1,
	generic_ssid: generic_ssid$1,
	generic_start: generic_start$1,
	generic_stop: generic_stop$1,
	generic_support: generic_support$1,
	generic_tracking: generic_tracking$1,
	generic_type: generic_type$1,
	generic_unknown: generic_unknown$1,
	generic_unrecognized: generic_unrecognized$1,
	generic_updating: generic_updating$1,
	generic_upgrade: generic_upgrade$1,
	generic_upload_speed: generic_upload_speed$1,
	generic_view: generic_view$1,
	generic_view_details: generic_view_details$1,
	generic_view_less: generic_view_less$1,
	generic_view_more: generic_view_more$1,
	generic_website: generic_website$1,
	generic_what_outage: generic_what_outage$1,
	generic_worst: generic_worst$1,
	generic_wps_enabled: generic_wps_enabled$1,
	generic_yes: generic_yes$1,
	generic_you: generic_you$1,
	healtcheck_edit_dialog_placeholder: healtcheck_edit_dialog_placeholder$1,
	healthcheck_001_B: healthcheck_001_B$1,
	healthcheck_001_G: healthcheck_001_G$1,
	healthcheck_001_easy: healthcheck_001_easy$1,
	healthcheck_001_fix: healthcheck_001_fix$1,
	healthcheck_001_tech: healthcheck_001_tech$1,
	healthcheck_002_B: healthcheck_002_B$1,
	healthcheck_002_G: healthcheck_002_G$1,
	healthcheck_002_easy: healthcheck_002_easy$1,
	healthcheck_002_tech: healthcheck_002_tech$1,
	healthcheck_003_B: healthcheck_003_B$1,
	healthcheck_003_G: healthcheck_003_G$1,
	healthcheck_003_easy: healthcheck_003_easy$1,
	healthcheck_003_fix: healthcheck_003_fix$1,
	healthcheck_003_tech: healthcheck_003_tech$1,
	healthcheck_004_B: healthcheck_004_B$1,
	healthcheck_004_G: healthcheck_004_G$1,
	healthcheck_004_easy: healthcheck_004_easy$1,
	healthcheck_004_fix: healthcheck_004_fix$1,
	healthcheck_004_tech: healthcheck_004_tech$1,
	healthcheck_005_B: healthcheck_005_B$1,
	healthcheck_005_G: healthcheck_005_G$1,
	healthcheck_005_easy: healthcheck_005_easy$1,
	healthcheck_005_fix: healthcheck_005_fix$1,
	healthcheck_005_tech: healthcheck_005_tech$1,
	healthcheck_006_B: healthcheck_006_B$1,
	healthcheck_006_G: healthcheck_006_G$1,
	healthcheck_006_easy: healthcheck_006_easy$1,
	healthcheck_006_fix: healthcheck_006_fix$1,
	healthcheck_006_tech: healthcheck_006_tech$1,
	healthcheck_007_B: healthcheck_007_B$1,
	healthcheck_007_G: healthcheck_007_G$1,
	healthcheck_007_easy: healthcheck_007_easy$1,
	healthcheck_007_fix: healthcheck_007_fix$1,
	healthcheck_007_tech: healthcheck_007_tech$1,
	healthcheck_008_B: healthcheck_008_B$1,
	healthcheck_008_G: healthcheck_008_G$1,
	healthcheck_008_easy: healthcheck_008_easy$1,
	healthcheck_008_fix: healthcheck_008_fix$1,
	healthcheck_008_tech: healthcheck_008_tech$1,
	healthcheck_009_B: healthcheck_009_B$1,
	healthcheck_009_G: healthcheck_009_G$1,
	healthcheck_009_easy: healthcheck_009_easy$1,
	healthcheck_009_fix: healthcheck_009_fix$1,
	healthcheck_009_tech: healthcheck_009_tech$1,
	healthcheck_00A_G: healthcheck_00A_G$1,
	healthcheck_00A_easy: healthcheck_00A_easy$1,
	healthcheck_00A_tech: healthcheck_00A_tech$1,
	healthcheck_010_G: healthcheck_010_G$1,
	healthcheck_010_easy: healthcheck_010_easy$1,
	healthcheck_010_tech: healthcheck_010_tech$1,
	healthcheck_401_B: healthcheck_401_B$1,
	healthcheck_401_G: healthcheck_401_G$1,
	healthcheck_401_easy: healthcheck_401_easy$1,
	healthcheck_401_fix: healthcheck_401_fix$1,
	healthcheck_401_tech: healthcheck_401_tech$1,
	healthcheck_402_B: healthcheck_402_B$1,
	healthcheck_402_G: healthcheck_402_G$1,
	healthcheck_402_easy: healthcheck_402_easy$1,
	healthcheck_402_fix: healthcheck_402_fix$1,
	healthcheck_402_tech: healthcheck_402_tech$1,
	healthcheck_403_B: healthcheck_403_B$1,
	healthcheck_403_G: healthcheck_403_G$1,
	healthcheck_403_easy: healthcheck_403_easy$1,
	healthcheck_403_fix: healthcheck_403_fix$1,
	healthcheck_403_tech: healthcheck_403_tech$1,
	healthcheck_404_B: healthcheck_404_B$1,
	healthcheck_404_G: healthcheck_404_G$1,
	healthcheck_404_easy: healthcheck_404_easy$1,
	healthcheck_404_fix: healthcheck_404_fix$1,
	healthcheck_404_tech: healthcheck_404_tech$1,
	healthcheck_405_B: healthcheck_405_B$1,
	healthcheck_405_G: healthcheck_405_G$1,
	healthcheck_405_easy: healthcheck_405_easy$1,
	healthcheck_405_tech: healthcheck_405_tech$1,
	healthcheck_406_B: healthcheck_406_B$1,
	healthcheck_406_G: healthcheck_406_G$1,
	healthcheck_406_easy: healthcheck_406_easy$1,
	healthcheck_406_fix: healthcheck_406_fix$1,
	healthcheck_406_tech: healthcheck_406_tech$1,
	healthcheck_407_B: healthcheck_407_B$1,
	healthcheck_407_G: healthcheck_407_G$1,
	healthcheck_407_easy: healthcheck_407_easy$1,
	healthcheck_407_fix: healthcheck_407_fix$1,
	healthcheck_407_tech: healthcheck_407_tech$1,
	healthcheck_408_B: healthcheck_408_B$1,
	healthcheck_408_G: healthcheck_408_G$1,
	healthcheck_408_easy: healthcheck_408_easy$1,
	healthcheck_408_fix: healthcheck_408_fix$1,
	healthcheck_408_tech: healthcheck_408_tech$1,
	healthcheck_409_B: healthcheck_409_B$1,
	healthcheck_409_G: healthcheck_409_G$1,
	healthcheck_409_easy: healthcheck_409_easy$1,
	healthcheck_409_tech: healthcheck_409_tech$1,
	healthcheck_40A_B: healthcheck_40A_B$1,
	healthcheck_40A_G: healthcheck_40A_G$1,
	healthcheck_40A_easy: healthcheck_40A_easy$1,
	healthcheck_40A_fix: healthcheck_40A_fix$1,
	healthcheck_40A_tech: healthcheck_40A_tech$1,
	healthcheck_40B_B: healthcheck_40B_B$1,
	healthcheck_40B_G: healthcheck_40B_G$1,
	healthcheck_40B_easy: healthcheck_40B_easy$1,
	healthcheck_40B_tech: healthcheck_40B_tech$1,
	healthcheck_40C_B: healthcheck_40C_B$1,
	healthcheck_40C_G: healthcheck_40C_G$1,
	healthcheck_40C_easy: healthcheck_40C_easy$1,
	healthcheck_40C_tech: healthcheck_40C_tech$1,
	healthcheck_40D_B: healthcheck_40D_B$1,
	healthcheck_40D_G: healthcheck_40D_G$1,
	healthcheck_40D_easy: healthcheck_40D_easy$1,
	healthcheck_40D_tech: healthcheck_40D_tech$1,
	healthcheck_40E_B: healthcheck_40E_B$1,
	healthcheck_40E_G: healthcheck_40E_G$1,
	healthcheck_40E_easy: healthcheck_40E_easy$1,
	healthcheck_40E_tech: healthcheck_40E_tech$1,
	healthcheck_40F_B: healthcheck_40F_B$1,
	healthcheck_40F_G: healthcheck_40F_G$1,
	healthcheck_40F_easy: healthcheck_40F_easy$1,
	healthcheck_40F_fix: healthcheck_40F_fix$1,
	healthcheck_40F_tech: healthcheck_40F_tech$1,
	healthcheck_410_B: healthcheck_410_B$1,
	healthcheck_410_G: healthcheck_410_G$1,
	healthcheck_410_easy: healthcheck_410_easy$1,
	healthcheck_410_tech: healthcheck_410_tech$1,
	healthcheck_411_G: healthcheck_411_G$1,
	healthcheck_411_easy: healthcheck_411_easy$1,
	healthcheck_411_tech: healthcheck_411_tech$1,
	healthcheck_412_G: healthcheck_412_G$1,
	healthcheck_412_easy: healthcheck_412_easy$1,
	healthcheck_412_tech: healthcheck_412_tech$1,
	healthcheck_415_B: healthcheck_415_B$1,
	healthcheck_415_G: healthcheck_415_G$1,
	healthcheck_415_easy: healthcheck_415_easy$1,
	healthcheck_415_fix: healthcheck_415_fix$1,
	healthcheck_415_tech: healthcheck_415_tech$1,
	healthcheck_416_B: healthcheck_416_B$1,
	healthcheck_416_G: healthcheck_416_G$1,
	healthcheck_416_easy: healthcheck_416_easy$1,
	healthcheck_416_fix: healthcheck_416_fix$1,
	healthcheck_416_tech: healthcheck_416_tech$1,
	healthcheck_417_G: healthcheck_417_G$1,
	healthcheck_417_easy: healthcheck_417_easy$1,
	healthcheck_417_fix: healthcheck_417_fix$1,
	healthcheck_417_tech: healthcheck_417_tech$1,
	healthcheck_418_G: healthcheck_418_G$1,
	healthcheck_418_easy: healthcheck_418_easy$1,
	healthcheck_418_fix: healthcheck_418_fix$1,
	healthcheck_418_tech: healthcheck_418_tech$1,
	healthcheck_419_G: healthcheck_419_G$1,
	healthcheck_419_easy: healthcheck_419_easy$1,
	healthcheck_419_fix: healthcheck_419_fix$1,
	healthcheck_419_tech: healthcheck_419_tech$1,
	healthcheck_41A_G: healthcheck_41A_G$1,
	healthcheck_41A_easy: healthcheck_41A_easy$1,
	healthcheck_41A_fix: healthcheck_41A_fix$1,
	healthcheck_41A_tech: healthcheck_41A_tech$1,
	healthcheck_801_B: healthcheck_801_B$1,
	healthcheck_801_G: healthcheck_801_G$1,
	healthcheck_801_easy: healthcheck_801_easy$1,
	healthcheck_801_fix: healthcheck_801_fix$1,
	healthcheck_801_tech: healthcheck_801_tech$1,
	healthcheck_802_B: healthcheck_802_B$1,
	healthcheck_802_G: healthcheck_802_G$1,
	healthcheck_802_easy: healthcheck_802_easy$1,
	healthcheck_802_fix: healthcheck_802_fix$1,
	healthcheck_802_tech: healthcheck_802_tech$1,
	healthcheck_803_B: healthcheck_803_B$1,
	healthcheck_803_G: healthcheck_803_G$1,
	healthcheck_803_easy: healthcheck_803_easy$1,
	healthcheck_803_tech: healthcheck_803_tech$1,
	healthcheck_804_B: healthcheck_804_B$1,
	healthcheck_804_G: healthcheck_804_G$1,
	healthcheck_804_easy: healthcheck_804_easy$1,
	healthcheck_804_tech: healthcheck_804_tech$1,
	healthcheck_805_B: healthcheck_805_B$1,
	healthcheck_805_G: healthcheck_805_G$1,
	healthcheck_805_easy: healthcheck_805_easy$1,
	healthcheck_805_tech: healthcheck_805_tech$1,
	healthcheck_806_B: healthcheck_806_B$1,
	healthcheck_806_G: healthcheck_806_G$1,
	healthcheck_806_easy: healthcheck_806_easy$1,
	healthcheck_806_tech: healthcheck_806_tech$1,
	healthcheck_807_B: healthcheck_807_B$1,
	healthcheck_807_G: healthcheck_807_G$1,
	healthcheck_807_easy: healthcheck_807_easy$1,
	healthcheck_807_tech: healthcheck_807_tech$1,
	healthcheck_808_B: healthcheck_808_B$1,
	healthcheck_808_G: healthcheck_808_G$1,
	healthcheck_808_easy: healthcheck_808_easy$1,
	healthcheck_808_tech: healthcheck_808_tech$1,
	healthcheck_809_G: healthcheck_809_G$1,
	healthcheck_809_easy: healthcheck_809_easy$1,
	healthcheck_809_tech: healthcheck_809_tech$1,
	healthcheck_80A_G: healthcheck_80A_G$1,
	healthcheck_80A_easy: healthcheck_80A_easy$1,
	healthcheck_80A_tech: healthcheck_80A_tech$1,
	healthcheck_80B_G: healthcheck_80B_G$1,
	healthcheck_80B_easy: healthcheck_80B_easy$1,
	healthcheck_80B_tech: healthcheck_80B_tech$1,
	healthcheck_80C_B: healthcheck_80C_B$1,
	healthcheck_80C_G: healthcheck_80C_G$1,
	healthcheck_80C_easy: healthcheck_80C_easy$1,
	healthcheck_80C_tech: healthcheck_80C_tech$1,
	healthcheck_80D_G: healthcheck_80D_G$1,
	healthcheck_80D_easy: healthcheck_80D_easy$1,
	healthcheck_80D_tech: healthcheck_80D_tech$1,
	healthcheck_80E_G: healthcheck_80E_G$1,
	healthcheck_80E_easy: healthcheck_80E_easy$1,
	healthcheck_80E_tech: healthcheck_80E_tech$1,
	healthcheck_80F_G: healthcheck_80F_G$1,
	healthcheck_80F_easy: healthcheck_80F_easy$1,
	healthcheck_80F_tech: healthcheck_80F_tech$1,
	healthcheck_810_B: healthcheck_810_B$1,
	healthcheck_810_G: healthcheck_810_G$1,
	healthcheck_810_tech: healthcheck_810_tech$1,
	healthcheck_card_advice_link: healthcheck_card_advice_link$1,
	healthcheck_card_advice_subtitle: healthcheck_card_advice_subtitle$1,
	healthcheck_card_advice_title: healthcheck_card_advice_title$1,
	healthcheck_card_connectivity_subtitle: healthcheck_card_connectivity_subtitle$1,
	healthcheck_card_connectivity_title: healthcheck_card_connectivity_title$1,
	healthcheck_card_publicwifi_subtitle: healthcheck_card_publicwifi_subtitle$1,
	healthcheck_card_publicwifi_title: healthcheck_card_publicwifi_title$1,
	healthcheck_generic_code: healthcheck_generic_code$1,
	healthcheck_healthsummary_fail_limitedconnectivity_subtitle: healthcheck_healthsummary_fail_limitedconnectivity_subtitle$1,
	healthcheck_healthsummary_fail_manyissue_subtitle: healthcheck_healthsummary_fail_manyissue_subtitle$1,
	healthcheck_healthsummary_fail_networkissue_subtitle: healthcheck_healthsummary_fail_networkissue_subtitle$1,
	healthcheck_healthsummary_fail_noconnection_subtitle: healthcheck_healthsummary_fail_noconnection_subtitle$1,
	healthcheck_healthsummary_fail_title: healthcheck_healthsummary_fail_title$1,
	healthcheck_healthsummary_link_report: healthcheck_healthsummary_link_report$1,
	healthcheck_healthsummary_refresh_button_text_one: healthcheck_healthsummary_refresh_button_text_one$1,
	healthcheck_healthsummary_refresh_button_text_two: healthcheck_healthsummary_refresh_button_text_two$1,
	healthcheck_healthsummary_refresh_running: healthcheck_healthsummary_refresh_running$1,
	healthcheck_healthsummary_running_subtitle: healthcheck_healthsummary_running_subtitle$1,
	healthcheck_healthsummary_running_title: healthcheck_healthsummary_running_title$1,
	healthcheck_healthsummary_success_subtitle: healthcheck_healthsummary_success_subtitle$1,
	healthcheck_healthsummary_success_title: healthcheck_healthsummary_success_title$1,
	healthcheck_healthsummary_warning_internet_subtitle: healthcheck_healthsummary_warning_internet_subtitle$1,
	healthcheck_healthsummary_warning_local_subtitle: healthcheck_healthsummary_warning_local_subtitle$1,
	healthcheck_healthsummary_warning_network_subtitle: healthcheck_healthsummary_warning_network_subtitle$1,
	healthcheck_healthsummary_warning_title: healthcheck_healthsummary_warning_title$1,
	healthcheck_help_dialog_action: healthcheck_help_dialog_action$1,
	healthcheck_help_dialog_failurebadge: healthcheck_help_dialog_failurebadge$1,
	healthcheck_help_dialog_successbadge: healthcheck_help_dialog_successbadge$1,
	healthcheck_help_dialog_tab_howfix: healthcheck_help_dialog_tab_howfix$1,
	healthcheck_help_dialog_tab_means: healthcheck_help_dialog_tab_means$1,
	healthcheck_help_dialog_tab_techdef: healthcheck_help_dialog_tab_techdef$1,
	healthcheck_internet: healthcheck_internet$1,
	healthcheck_local: healthcheck_local$1,
	healthcheck_network: healthcheck_network$1,
	healthcheck_report_askhelp_description: healthcheck_report_askhelp_description$1,
	healthcheck_report_askhelp_modal_share_action: healthcheck_report_askhelp_modal_share_action$1,
	healthcheck_report_askhelp_privacy: healthcheck_report_askhelp_privacy$1,
	healthcheck_report_askhelp_processing_title: healthcheck_report_askhelp_processing_title$1,
	healthcheck_report_askhelp_title: healthcheck_report_askhelp_title$1,
	healthcheck_report_checkinfo_modal_checkcode_howcanifix: healthcheck_report_checkinfo_modal_checkcode_howcanifix$1,
	healthcheck_report_checkinfo_modal_checkcode_title: healthcheck_report_checkinfo_modal_checkcode_title$1,
	healthcheck_report_checkinfo_modal_checkcode_whatitmeans: healthcheck_report_checkinfo_modal_checkcode_whatitmeans$1,
	healthcheck_report_checkinfo_modal_footer_link: healthcheck_report_checkinfo_modal_footer_link$1,
	healthcheck_report_checkinfo_modal_footer_title: healthcheck_report_checkinfo_modal_footer_title$1,
	healthcheck_report_checkinfo_modal_title: healthcheck_report_checkinfo_modal_title$1,
	healthcheck_report_context_picker: healthcheck_report_context_picker$1,
	healthcheck_report_customtarget_modal_area_label: healthcheck_report_customtarget_modal_area_label$1,
	healthcheck_report_customtarget_modal_area_small: healthcheck_report_customtarget_modal_area_small$1,
	healthcheck_report_customtarget_modal_failure_title: healthcheck_report_customtarget_modal_failure_title$1,
	healthcheck_report_customtarget_modal_nopremium_title: healthcheck_report_customtarget_modal_nopremium_title$1,
	healthcheck_report_customtarget_modal_premium_title: healthcheck_report_customtarget_modal_premium_title$1,
	healthcheck_report_customtarget_modal_save_action: healthcheck_report_customtarget_modal_save_action$1,
	healthcheck_report_customtarget_modal_tech_description: healthcheck_report_customtarget_modal_tech_description$1,
	healthcheck_report_customtarget_modal_tech_title: healthcheck_report_customtarget_modal_tech_title$1,
	healthcheck_report_customtarget_modal_title: healthcheck_report_customtarget_modal_title$1,
	healthcheck_report_emptystate: healthcheck_report_emptystate$1,
	healthcheck_report_emptystate_component_message: healthcheck_report_emptystate_component_message$1,
	healthcheck_report_emptystate_premium: healthcheck_report_emptystate_premium$1,
	healthcheck_report_geoloc_info: healthcheck_report_geoloc_info$1,
	healthcheck_report_geoloc_location: healthcheck_report_geoloc_location$1,
	healthcheck_report_geoloc_timezone: healthcheck_report_geoloc_timezone$1,
	healthcheck_report_isp_info_descr: healthcheck_report_isp_info_descr$1,
	healthcheck_report_isp_info_message: healthcheck_report_isp_info_message$1,
	healthcheck_report_isp_info_stats_message_download: healthcheck_report_isp_info_stats_message_download$1,
	healthcheck_report_isp_info_stats_message_share: healthcheck_report_isp_info_stats_message_share$1,
	healthcheck_report_isp_info_stats_message_upload: healthcheck_report_isp_info_stats_message_upload$1,
	healthcheck_report_mute_action: healthcheck_report_mute_action$1,
	healthcheck_report_mute_dialog_mutecheck: healthcheck_report_mute_dialog_mutecheck$1,
	healthcheck_report_mute_dialog_mutecheck_description: healthcheck_report_mute_dialog_mutecheck_description$1,
	healthcheck_report_mute_dialog_unmutecheck: healthcheck_report_mute_dialog_unmutecheck$1,
	healthcheck_report_mute_dialog_unmutecheck_description: healthcheck_report_mute_dialog_unmutecheck_description$1,
	healthcheck_report_nettype_eth: healthcheck_report_nettype_eth$1,
	healthcheck_report_nettype_ethwifi: healthcheck_report_nettype_ethwifi$1,
	healthcheck_report_nettype_wireless: healthcheck_report_nettype_wireless$1,
	healthcheck_report_network_gateway: healthcheck_report_network_gateway$1,
	healthcheck_report_networkinfo: healthcheck_report_networkinfo$1,
	healthcheck_report_nicinfo_connection_info: healthcheck_report_nicinfo_connection_info$1,
	healthcheck_report_nicinfo_connection_info_nostation: healthcheck_report_nicinfo_connection_info_nostation$1,
	healthcheck_report_nicinfo_connection_more_info: healthcheck_report_nicinfo_connection_more_info$1,
	healthcheck_report_qrcode_description: healthcheck_report_qrcode_description$1,
	healthcheck_report_qrcode_title: healthcheck_report_qrcode_title$1,
	healthcheck_report_qrcodemodal_title: healthcheck_report_qrcodemodal_title$1,
	healthcheck_report_radio_button_all: healthcheck_report_radio_button_all$1,
	healthcheck_report_radio_button_fail: healthcheck_report_radio_button_fail$1,
	healthcheck_report_radio_button_info: healthcheck_report_radio_button_info$1,
	healthcheck_report_radio_button_premium: healthcheck_report_radio_button_premium$1,
	healthcheck_report_radio_button_warn: healthcheck_report_radio_button_warn$1,
	healthcheck_report_table_header_state: healthcheck_report_table_header_state$1,
	healthcheck_report_table_header_what: healthcheck_report_table_header_what$1,
	healthcheck_report_table_header_where: healthcheck_report_table_header_where$1,
	healthcheck_report_ticket: healthcheck_report_ticket$1,
	healthcheck_report_unmute_action: healthcheck_report_unmute_action$1,
	healthcheck_status_check_running_subtitle: healthcheck_status_check_running_subtitle$1,
	healthcheck_status_check_running_title: healthcheck_status_check_running_title$1,
	healthcheck_status_code_subtitle: healthcheck_status_code_subtitle$1,
	healthcheck_status_ok_nopremium_subtitle: healthcheck_status_ok_nopremium_subtitle$1,
	healthcheck_status_ok_subtitle: healthcheck_status_ok_subtitle$1,
	healthcheck_status_ok_title: healthcheck_status_ok_title$1,
	healthcheck_status_problems_captive_subtitle: healthcheck_status_problems_captive_subtitle$1,
	healthcheck_status_problems_generic_subtitle: healthcheck_status_problems_generic_subtitle$1,
	healthcheck_status_problems_internet_subtitle: healthcheck_status_problems_internet_subtitle$1,
	healthcheck_status_problems_local_subtitle: healthcheck_status_problems_local_subtitle$1,
	healthcheck_status_problems_net_subtitle: healthcheck_status_problems_net_subtitle$1,
	healthcheck_status_problems_title: healthcheck_status_problems_title$1,
	healthcheck_status_warn_dhcp_subtitle: healthcheck_status_warn_dhcp_subtitle$1,
	healthcheck_status_warn_generic_subtitle: healthcheck_status_warn_generic_subtitle$1,
	healthcheck_status_warn_internet_subtitle: healthcheck_status_warn_internet_subtitle$1,
	healthcheck_status_warn_local_subtitle: healthcheck_status_warn_local_subtitle$1,
	healthcheck_status_warn_net_subtitle: healthcheck_status_warn_net_subtitle$1,
	healthcheck_status_warn_title: healthcheck_status_warn_title$1,
	healthcheck_statusbadge_fail: healthcheck_statusbadge_fail$1,
	healthcheck_statusbadge_info: healthcheck_statusbadge_info$1,
	healthcheck_statusbadge_skipped: healthcheck_statusbadge_skipped$1,
	healthcheck_statusbadge_success: healthcheck_statusbadge_success$1,
	healthcheck_statusbadge_warn: healthcheck_statusbadge_warn$1,
	healthcheck_v_gateway_I: healthcheck_v_gateway_I$1,
	healthcheck_v_gateway_easy: healthcheck_v_gateway_easy$1,
	healthcheck_v_gateway_tech: healthcheck_v_gateway_tech$1,
	healthcheck_v_geoloc_I: healthcheck_v_geoloc_I$1,
	healthcheck_v_geoloc_easy: healthcheck_v_geoloc_easy$1,
	healthcheck_v_geoloc_tech: healthcheck_v_geoloc_tech$1,
	healthcheck_v_isp_I: healthcheck_v_isp_I$1,
	healthcheck_v_isp_easy: healthcheck_v_isp_easy$1,
	healthcheck_v_isp_tech: healthcheck_v_isp_tech$1,
	healthcheck_v_network_I: healthcheck_v_network_I$1,
	healthcheck_v_network_easy: healthcheck_v_network_easy$1,
	healthcheck_v_network_tech: healthcheck_v_network_tech$1,
	healthcheck_v_nicinfo_I: healthcheck_v_nicinfo_I$1,
	healthcheck_v_nicinfo_easy: healthcheck_v_nicinfo_easy$1,
	healthcheck_v_nicinfo_tech: healthcheck_v_nicinfo_tech$1,
	healthcheck_v_self_I: healthcheck_v_self_I$1,
	healthcheck_v_self_easy: healthcheck_v_self_easy$1,
	healthcheck_v_self_tech: healthcheck_v_self_tech$1,
	home_health_check_discovery_running: home_health_check_discovery_running$1,
	home_network_subtitle_eth: home_network_subtitle_eth$1,
	home_network_subtitle_eth_usb: home_network_subtitle_eth_usb$1,
	internet_about: internet_about$1,
	internet_average_download: internet_average_download$1,
	internet_average_title: internet_average_title$1,
	internet_average_upload: internet_average_upload$1,
	internet_based_on: internet_based_on$1,
	internet_based_on_ratings: internet_based_on_ratings$1,
	internet_based_on_samples: internet_based_on_samples$1,
	internet_compare_providers: internet_compare_providers$1,
	internet_data_trend: internet_data_trend$1,
	internet_distribution: internet_distribution$1,
	internet_downtime: internet_downtime$1,
	internet_last_speed_test: internet_last_speed_test$1,
	internet_latency: internet_latency$1,
	internet_location_not_available: internet_location_not_available$1,
	internet_location_server_from: internet_location_server_from$1,
	internet_location_server_to: internet_location_server_to$1,
	internet_network: internet_network$1,
	internet_no_data: internet_no_data$1,
	internet_no_data_last_speed_test: internet_no_data_last_speed_test$1,
	internet_no_data_period_example: internet_no_data_period_example$1,
	internet_no_data_period_timeline: internet_no_data_period_timeline$1,
	internet_no_data_trend: internet_no_data_trend$1,
	internet_outages: internet_outages$1,
	internet_outages_summary: internet_outages_summary$1,
	internet_performance_score: internet_performance_score$1,
	internet_provider: internet_provider$1,
	internet_ratings: internet_ratings$1,
	internet_report: internet_report$1,
	internet_samples: internet_samples$1,
	internet_schedule: internet_schedule$1,
	internet_schedule_edit: internet_schedule_edit$1,
	internet_score: internet_score$1,
	internet_score_info: internet_score_info$1,
	internet_scoreboard: internet_scoreboard$1,
	internet_send_report_body: internet_send_report_body$1,
	internet_send_report_empty_caption: internet_send_report_empty_caption$1,
	internet_send_report_empty_subtitle: internet_send_report_empty_subtitle$1,
	internet_send_report_empty_title: internet_send_report_empty_title$1,
	internet_send_report_title: internet_send_report_title$1,
	internet_sentiment: internet_sentiment$1,
	internet_speed_average: internet_speed_average$1,
	internet_speed_performance: internet_speed_performance$1,
	internet_test_samples: internet_test_samples$1,
	internet_test_server_location: internet_test_server_location$1,
	internet_test_speed: internet_test_speed$1,
	internet_timeline: internet_timeline$1,
	internet_total_rating: internet_total_rating$1,
	internet_trend_in: internet_trend_in$1,
	internet_user_rating: internet_user_rating$1,
	internet_view_details: internet_view_details$1,
	internetinfo_your_isp_home: internetinfo_your_isp_home$1,
	isp_home: isp_home$1,
	isp_rank_summary_rankaverage: isp_rank_summary_rankaverage$1,
	isp_rank_summary_rankaverage_location: isp_rank_summary_rankaverage_location$1,
	isp_rank_summary_rankbottom: isp_rank_summary_rankbottom$1,
	isp_rank_summary_rankbottom_location: isp_rank_summary_rankbottom_location$1,
	isp_rank_summary_ranktop: isp_rank_summary_ranktop$1,
	isp_rank_summary_ranktop_location: isp_rank_summary_ranktop_location$1,
	isp_summary_card_nointernet: isp_summary_card_nointernet$1,
	last_month: last_month$1,
	maclookup_inforow_family: maclookup_inforow_family$1,
	maclookup_inforow_type: maclookup_inforow_type$1,
	model_not_recognized: model_not_recognized$1,
	netstats_infoprofile_other: netstats_infoprofile_other$1,
	netstats_type_personal: netstats_type_personal$1,
	notification_service_healthcheck_connectivity_problems_title: notification_service_healthcheck_connectivity_problems_title$1,
	notifications_page_manage_body: notifications_page_manage_body$1,
	notifications_page_manage_extra: notifications_page_manage_extra$1,
	notifications_page_manage_title: notifications_page_manage_title$1,
	notifications_page_notify_new: notifications_page_notify_new$1,
	notifications_page_title: notifications_page_title$1,
	notifications_set_title_recent: notifications_set_title_recent$1,
	num_mbps: num_mbps$1,
	num_ms: num_ms$1,
	outage_today: outage_today$1,
	placeholder_email: placeholder_email$1,
	portscan_port_action: portscan_port_action$1,
	portscan_port_description: portscan_port_description$1,
	portscan_port_name: portscan_port_name$1,
	portscan_scanmode_all: portscan_scanmode_all$1,
	premium_button: premium_button$1,
	premium_feature: premium_feature$1,
	premium_unlock_all: premium_unlock_all$1,
	presence_add_dialog_title: presence_add_dialog_title$1,
	presence_arrived_at_time: presence_arrived_at_time$1,
	presence_arrived_on_datetime: presence_arrived_on_datetime$1,
	presence_autofill_already_in_net: presence_autofill_already_in_net$1,
	presence_autofill_dialog_more_users: presence_autofill_dialog_more_users$1,
	presence_autofill_dialog_notfound_message: presence_autofill_dialog_notfound_message$1,
	presence_autofill_dialog_title: presence_autofill_dialog_title$1,
	presence_autofill_empty_caption: presence_autofill_empty_caption$1,
	presence_autofill_empty_subtitle: presence_autofill_empty_subtitle$1,
	presence_autofill_empty_title: presence_autofill_empty_title$1,
	presence_autofill_table_headerdevice: presence_autofill_table_headerdevice$1,
	presence_autofill_table_nameplaceholder: presence_autofill_table_nameplaceholder$1,
	presence_badge_other: presence_badge_other$1,
	presence_badge_tracking: presence_badge_tracking$1,
	presence_contact_type: presence_contact_type$1,
	presence_delete_dialog_body: presence_delete_dialog_body$1,
	presence_delete_dialog_title: presence_delete_dialog_title$1,
	presence_devices_dialog_title: presence_devices_dialog_title$1,
	presence_display_name: presence_display_name$1,
	presence_edit_already_assigned_devices: presence_edit_already_assigned_devices$1,
	presence_edit_at_least_one_device: presence_edit_at_least_one_device$1,
	presence_edit_dialog_title: presence_edit_dialog_title$1,
	presence_edit_multi_device: presence_edit_multi_device$1,
	presence_error_incomplete: presence_error_incomplete$1,
	presence_gender: presence_gender$1,
	presence_gender_explanation: presence_gender_explanation$1,
	presence_left_at_time: presence_left_at_time$1,
	presence_left_on_datetime: presence_left_on_datetime$1,
	presence_profile_photo: presence_profile_photo$1,
	presence_send_report_body: presence_send_report_body$1,
	presence_send_report_empty_caption: presence_send_report_empty_caption$1,
	presence_send_report_empty_subtitle: presence_send_report_empty_subtitle$1,
	presence_send_report_empty_title: presence_send_report_empty_title$1,
	presence_send_report_title: presence_send_report_title$1,
	presence_upload_profile_photo: presence_upload_profile_photo$1,
	rating_comments: rating_comments$1,
	rating_date: rating_date$1,
	rating_dislike_because: rating_dislike_because$1,
	rating_edit: rating_edit$1,
	rating_hate_because: rating_hate_because$1,
	rating_like_because: rating_like_because$1,
	rating_love_because: rating_love_because$1,
	rating_ok_because: rating_ok_because$1,
	rating_title: rating_title$1,
	recognize_missing_modal_footer_nochecked: recognize_missing_modal_footer_nochecked$1,
	recognize_missing_modal_form_typeheader: recognize_missing_modal_form_typeheader$1,
	recognize_userinput_form_os: recognize_userinput_form_os$1,
	recognize_userinput_form_typeheader: recognize_userinput_form_typeheader$1,
	recognize_userinput_osselection_form_description: recognize_userinput_osselection_form_description$1,
	relative_current_day: relative_current_day$1,
	relative_current_month: relative_current_month$1,
	relative_current_week: relative_current_week$1,
	relative_current_year: relative_current_year$1,
	relative_day_long: relative_day_long$1,
	relative_hour_long: relative_hour_long$1,
	relative_min_long: relative_min_long$1,
	relative_minute_long: relative_minute_long$1,
	relative_month_long: relative_month_long$1,
	relative_now: relative_now$1,
	relative_older: relative_older$1,
	relative_today: relative_today$1,
	relative_week_long: relative_week_long$1,
	relative_year_long: relative_year_long$1,
	relative_yesterday: relative_yesterday$1,
	routercheck_emptystate_subtitle: routercheck_emptystate_subtitle$1,
	routercheck_emptystate_title: routercheck_emptystate_title$1,
	routercheck_internet_address: routercheck_internet_address$1,
	routercheck_last_update: routercheck_last_update$1,
	routercheck_never_subtitle: routercheck_never_subtitle$1,
	routercheck_never_title: routercheck_never_title$1,
	routercheck_openports_action: routercheck_openports_action$1,
	routercheck_openports_title: routercheck_openports_title$1,
	routercheck_port_external: routercheck_port_external$1,
	routercheck_port_internal: routercheck_port_internal$1,
	routercheck_port_protocol: routercheck_port_protocol$1,
	routercheck_premium_subtitle: routercheck_premium_subtitle$1,
	routercheck_premium_title: routercheck_premium_title$1,
	routercheck_progress_caption: routercheck_progress_caption$1,
	routercheck_progress_subtitle: routercheck_progress_subtitle$1,
	routercheck_progress_title: routercheck_progress_title$1,
	routercheck_protected: routercheck_protected$1,
	routercheck_protected_description: routercheck_protected_description$1,
	routercheck_publicip: routercheck_publicip$1,
	routercheck_publicip_description: routercheck_publicip_description$1,
	routercheck_toolresult_danger_subtitle: routercheck_toolresult_danger_subtitle$1,
	routercheck_toolresult_danger_title: routercheck_toolresult_danger_title$1,
	routercheck_toolresult_success_subtitle: routercheck_toolresult_success_subtitle$1,
	routercheck_toolresult_success_title: routercheck_toolresult_success_title$1,
	routercheck_toolresult_sync_subtitle: routercheck_toolresult_sync_subtitle$1,
	routercheck_toolresult_sync_title: routercheck_toolresult_sync_title$1,
	routercheck_toolresult_warning_subtitle: routercheck_toolresult_warning_subtitle$1,
	routercheck_toolresult_warning_title: routercheck_toolresult_warning_title$1,
	routercheck_unknown: routercheck_unknown$1,
	routercheck_unknown_description: routercheck_unknown_description$1,
	routercheck_unprotectedboth: routercheck_unprotectedboth$1,
	routercheck_unprotectedboth_description: routercheck_unprotectedboth_description$1,
	routercheck_unprotectednatpmp: routercheck_unprotectednatpmp$1,
	routercheck_unprotectednatpmp_description: routercheck_unprotectednatpmp_description$1,
	routercheck_unprotectedupnp: routercheck_unprotectedupnp$1,
	routercheck_unprotectedupnp_description: routercheck_unprotectedupnp_description$1,
	routercheck_wan: routercheck_wan$1,
	routercheck_wan_description: routercheck_wan_description$1,
	routercheck_webinterface_link: routercheck_webinterface_link$1,
	routercheck_your_router_brand: routercheck_your_router_brand$1,
	routercheck_your_router_family: routercheck_your_router_family$1,
	routercheck_your_router_model: routercheck_your_router_model$1,
	routercheck_your_router_releasedate: routercheck_your_router_releasedate$1,
	routercheck_your_router_title: routercheck_your_router_title$1,
	routercheck_your_setup_title: routercheck_your_setup_title$1,
	schedule_hours: schedule_hours$1,
	schedule_max_run: schedule_max_run$1,
	security_confirm_all_dialog_body: security_confirm_all_dialog_body$1,
	security_confirm_all_dialog_title: security_confirm_all_dialog_title$1,
	security_network_vulnerabilities: security_network_vulnerabilities$1,
	security_score_access_point_subtitle_danger: security_score_access_point_subtitle_danger$1,
	security_score_access_point_subtitle_success: security_score_access_point_subtitle_success$1,
	security_score_access_point_subtitle_warning: security_score_access_point_subtitle_warning$1,
	security_score_access_point_title_danger: security_score_access_point_title_danger$1,
	security_score_access_point_title_success: security_score_access_point_title_success$1,
	security_score_access_point_title_warning: security_score_access_point_title_warning$1,
	security_score_alert_disabled_title: security_score_alert_disabled_title$1,
	security_score_alert_enabled_title: security_score_alert_enabled_title$1,
	security_score_alert_subtitle: security_score_alert_subtitle$1,
	security_score_alert_switch: security_score_alert_switch$1,
	security_score_all_confirmed_devices_title: security_score_all_confirmed_devices_title$1,
	security_score_automated_disabled_title: security_score_automated_disabled_title$1,
	security_score_automated_enabled_title: security_score_automated_enabled_title$1,
	security_score_automated_subtitle: security_score_automated_subtitle$1,
	security_score_confirm_devices: security_score_confirm_devices$1,
	security_score_score: security_score_score$1,
	security_score_secure: security_score_secure$1,
	security_score_state_change_disabled_title: security_score_state_change_disabled_title$1,
	security_score_state_change_enabled_title: security_score_state_change_enabled_title$1,
	security_score_state_change_subtitle: security_score_state_change_subtitle$1,
	security_score_unconfirmed_devices_subtitle: security_score_unconfirmed_devices_subtitle$1,
	security_score_unconfirmed_devices_title: security_score_unconfirmed_devices_title$1,
	security_score_unconfirmed_devices_titles: security_score_unconfirmed_devices_titles$1,
	security_score_unsecure: security_score_unsecure$1,
	security_score_upgrade_to_unlock: security_score_upgrade_to_unlock$1,
	sidebar_community: sidebar_community$1,
	sidebar_help: sidebar_help$1,
	sidebar_home: sidebar_home$1,
	sidebar_internet: sidebar_internet$1,
	sidebar_notifications: sidebar_notifications$1,
	sidebar_outages: sidebar_outages$1,
	sidebar_tools: sidebar_tools$1,
	speedtest_achievements: speedtest_achievements$1,
	speedtest_city: speedtest_city$1,
	speedtest_compare_location: speedtest_compare_location$1,
	speedtest_compare_performance: speedtest_compare_performance$1,
	speedtest_comparison_not_available: speedtest_comparison_not_available$1,
	speedtest_contact_support: speedtest_contact_support$1,
	speedtest_country: speedtest_country$1,
	speedtest_distribution_not_available: speedtest_distribution_not_available$1,
	speedtest_download: speedtest_download$1,
	speedtest_download_info: speedtest_download_info$1,
	speedtest_failed: speedtest_failed$1,
	speedtest_header_connection: speedtest_header_connection$1,
	speedtest_header_location: speedtest_header_location$1,
	speedtest_header_provider: speedtest_header_provider$1,
	speedtest_isp_info_location: speedtest_isp_info_location$1,
	speedtest_mlab_body: speedtest_mlab_body$1,
	speedtest_mlab_title: speedtest_mlab_title$1,
	speedtest_rate: speedtest_rate$1,
	speedtest_reviews: speedtest_reviews$1,
	speedtest_score_category_4k: speedtest_score_category_4k$1,
	speedtest_score_category_AudioStream: speedtest_score_category_AudioStream$1,
	speedtest_score_category_BasicStream: speedtest_score_category_BasicStream$1,
	speedtest_score_category_HDStream: speedtest_score_category_HDStream$1,
	speedtest_score_category_HDWebcam: speedtest_score_category_HDWebcam$1,
	"speedtest_score_category_HDvid&photo": "Foto y vídeo HD",
	speedtest_score_category_L_filetrans: speedtest_score_category_L_filetrans$1,
	speedtest_score_category_Messaging: speedtest_score_category_Messaging$1,
	speedtest_score_category_SDStream: speedtest_score_category_SDStream$1,
	speedtest_score_category_SDWebcam: speedtest_score_category_SDWebcam$1,
	speedtest_score_category_S_filetrans: speedtest_score_category_S_filetrans$1,
	speedtest_score_category_UHD4K: speedtest_score_category_UHD4K$1,
	speedtest_score_category_UHD8K: speedtest_score_category_UHD8K$1,
	speedtest_score_category_brows_emails: speedtest_score_category_brows_emails$1,
	speedtest_score_category_browsing: speedtest_score_category_browsing$1,
	speedtest_score_category_challenging: speedtest_score_category_challenging$1,
	speedtest_score_category_gameon: speedtest_score_category_gameon$1,
	speedtest_score_category_gameover: speedtest_score_category_gameover$1,
	speedtest_score_category_inthegame: speedtest_score_category_inthegame$1,
	speedtest_score_category_limited: speedtest_score_category_limited$1,
	speedtest_score_category_photo: speedtest_score_category_photo$1,
	speedtest_score_category_small_brows_email: speedtest_score_category_small_brows_email$1,
	"speedtest_score_category_vid&photo": "Foto y vídeo",
	speedtest_score_category_video: speedtest_score_category_video$1,
	speedtest_score_category_winning: speedtest_score_category_winning$1,
	speedtest_start_button: speedtest_start_button$1,
	speedtest_stats_jitter: speedtest_stats_jitter$1,
	speedtest_stats_jitter_info: speedtest_stats_jitter_info$1,
	speedtest_stats_loss: speedtest_stats_loss$1,
	speedtest_stats_loss_info: speedtest_stats_loss_info$1,
	speedtest_stats_ping: speedtest_stats_ping$1,
	speedtest_stats_ping_info: speedtest_stats_ping_info$1,
	speedtest_tested: speedtest_tested$1,
	speedtest_title: speedtest_title$1,
	speedtest_title_call: speedtest_title_call$1,
	speedtest_title_gaming: speedtest_title_gaming$1,
	speedtest_title_social: speedtest_title_social$1,
	speedtest_title_video: speedtest_title_video$1,
	speedtest_title_work: speedtest_title_work$1,
	speedtest_try_again: speedtest_try_again$1,
	speedtest_upload: speedtest_upload$1,
	speedtest_upload_info: speedtest_upload_info$1,
	status_for_duration: status_for_duration$1,
	this_month: this_month$1,
	time_current_day: time_current_day$1,
	time_current_month: time_current_month$1,
	time_current_week: time_current_week$1,
	time_current_year: time_current_year$1,
	time_older: time_older$1,
	time_today: time_today$1,
	time_yesterday: time_yesterday$1,
	timeline_no_event: timeline_no_event$1,
	timeline_no_notification: timeline_no_notification$1,
	timeline_no_sample: timeline_no_sample$1,
	timeline_table_header_details: timeline_table_header_details$1,
	timeline_table_header_port: timeline_table_header_port$1,
	timeline_table_header_state: timeline_table_header_state$1,
	timeline_table_header_subject: timeline_table_header_subject$1,
	timeline_table_header_type: timeline_table_header_type$1,
	timeline_table_header_when: timeline_table_header_when$1,
	tools_page_title: tools_page_title$1,
	tooltargetbar_ip_address: tooltargetbar_ip_address$1,
	tooltargetbar_location: tooltargetbar_location$1,
	tooltargetbar_mac_address: tooltargetbar_mac_address$1,
	tooltargetbar_no_open_ports: tooltargetbar_no_open_ports$1,
	tooltargetbar_open_ports: tooltargetbar_open_ports$1,
	tooltargetbar_provider: tooltargetbar_provider$1,
	view_timeline_button: view_timeline_button$1,
	waiting_rate: waiting_rate$1
};

var autoblock_card_action_enable = "Abilita";
var autoblock_card_subtitle_disabled = "Fing Desktop non sta bloccando automaticamente i nuovi dispositivi che si connettono a questa rete, lasciandola potenzialmente insicura.";
var autoblock_card_subtitle_enabled = "I nuovi dispositivi che si connettono alla rete {networkName} verranno automaticamente bloccati. Dovrai sbloccare manualmente questi dispositivi per consentire loro di utilizzare la rete.";
var autoblock_card_subtitle_permission_disabled = "Blocca automaticamente i nuovi dispositivi che si connettono alla tua rete domestica.";
var autoblock_card_subtitle_validation_disabled = "Non è possibile bloccare automaticamente nuovi dispositivi che si connettono alla rete {networkName}. Ciò può essere dovuto alla mancanza di autorizzazioni o a un contesto di rete che non consente di bloccare automaticamente i dispositivi.";
var autoblock_card_title = "Blocca automaticamente i nuovi dispositivi";
var autoblock_card_title_disabled = "Il blocco automatico è disabilitato";
var autoblock_card_title_enabled = "Il blocco automatico è abilitato";
var back_button = "Indietro";
var contacttype_colleague = "Collega";
var contacttype_colleague_contractor = "Consulente";
var contacttype_colleague_staff = "Staff";
var contacttype_colleague_visitor = "Visitatore";
var contacttype_family = "Famiglia";
var contacttype_family_her = "Lei";
var contacttype_family_him = "Lui";
var contacttype_family_kid = "Ragazzo";
var contacttype_family_pet = "Animale";
var contacttype_family_pet_cat = "Gatto";
var contacttype_family_pet_dog = "Cane";
var contacttype_family_relative = "Parente";
var contacttype_friend = "Amico";
var contacttype_guest = "Ospite";
var contacttype_help = "Aiuto";
var contacttype_help_cleaning = "Pulizie";
var contacttype_help_delivery = "Consegne";
var contacttype_help_maintenance = "Manutenzione";
var contacttype_help_medical = "Medico";
var contacttype_other = "Altro";
var contacttype_others = "Altro";
var copy_to_clipboard_copied = "Copiato!";
var data_no_trend = "Nessun dato di tendenza";
var data_trend_down_1 = "Diminuzione rapida";
var data_trend_down_2 = "In peggioramento";
var data_trend_stable = "Trend stabile";
var data_trend_up_1 = "Miglioramento rapido";
var data_trend_up_2 = "In miglioramento";
var dateformat_day = "giorno";
var dateformat_day_long = "{amount} giorno";
var dateformat_day_short = "{amount}d";
var dateformat_dayago = "{amount} giorno fa";
var dateformat_days = "giorni";
var dateformat_days_long = "{amount} giorni";
var dateformat_daysago = "{amount} giorni fa";
var dateformat_hour = "ora";
var dateformat_hour_long = "{amount} ora";
var dateformat_hour_short = "{amount}h";
var dateformat_hourago = "{amount} ora fa";
var dateformat_hours = "ore";
var dateformat_hours_long = "{amount} ore";
var dateformat_hoursago = "{amount} ore fa";
var dateformat_min = "minuto";
var dateformat_min_long = "{amount} minuto";
var dateformat_min_short = "{amount}m";
var dateformat_minago = "{amount} minuto fa";
var dateformat_mins = "minuti";
var dateformat_mins_long = "{amount} minuti";
var dateformat_minsago = "{amount} minuti fa";
var dateformat_minutes = "minuti";
var dateformat_month = "mese";
var dateformat_month_apr = "Apr";
var dateformat_month_aug = "Ago";
var dateformat_month_dec = "Dec";
var dateformat_month_feb = "Feb";
var dateformat_month_jan = "Gen";
var dateformat_month_jul = "Lug";
var dateformat_month_jun = "Giu";
var dateformat_month_mar = "Mar";
var dateformat_month_may = "Mag";
var dateformat_month_nov = "Nov";
var dateformat_month_oct = "Ott";
var dateformat_month_sep = "Set";
var dateformat_monthago = "{amount} mese fa";
var dateformat_months = "mesi";
var dateformat_monthsago = "{amount} mesi fa";
var dateformat_now = "adesso";
var dateformat_week = "settimana";
var dateformat_week_long = "{amount} settimana";
var dateformat_week_short = "{amount}w";
var dateformat_weekago = "{amount} settimana fa";
var dateformat_weeks = "settimane";
var dateformat_weeks_long = "{amount} settimane";
var dateformat_weeksago = "{amount} settimane fa";
var dateformat_year = "anno";
var dateformat_yearago = "{amount} anno fa";
var dateformat_years = "anni";
var dateformat_yearsago = "{amount} anni fa";
var device_alerts_dialog_body = "Ricevi notifiche su smartphone ed email quando un device va online o offline.";
var device_alerts_dialog_title = "Notifiche di dispositivi conosciuti";
var device_confirm_dialog_body = "Dispositivi visti per la prima volta negli ultimi {days} giorni";
var device_confirm_dialog_body_alt = "Dispositivi nella tua rete non ancora confermati";
var device_confirm_dialog_title = "Conferma i tuoi dispositivi";
var device_detail_banner_choose_action = "Modifica modello";
var device_detail_banner_choose_action_os = "Modifica sistema operativo";
var device_detail_banner_choose_subtitle = "Questo dispositivo è stato riconosciuto da Fing.";
var device_detail_banner_choose_subtitle_model = "Aiutaci a migliorare: apri il nostro catalogo Fing e seleziona un modello.";
var device_detail_banner_choose_subtitle_os = "Aiutaci a migliorare: apri il nostro catalogo Fing e seleziona un sistema operativo.";
var device_detail_banner_empty_state_action = "Scegli modello";
var device_detail_banner_empty_state_subtitle = "Aiutaci a migliorare: apri il nostro catalogo Fing e seleziona un modello.";
var device_detail_banner_feedback_subtitle = "Il tuo feedback ci aiuta a migliorare i risultati di riconoscimento del dispositivo";
var device_detail_banner_feedback_title = "E' stato riconosiuto correttamente?";
var device_detail_banner_revert_action = "Ripristina l'originale";
var device_detail_banner_revert_subtitle = "Aggiorna questi dettagli se non sembrano più corretti";
var device_detail_banner_thanks = "Grazie, riconoscimento confermato.";
var device_detail_clear_action = "Cancella dall'elenco dei dispositivi";
var device_detail_delete_modal_action = "Rimuovi dalla lista";
var device_detail_delete_modal_body = "Vuoi rimuovere questo dispositivo dalla lista?<br /> Una nuova scansione della rete lo aggiungerà nuovamente alla lista, se il dispositivo è rivelato online.";
var device_detail_delete_modal_body_small = "Rimuovendo un dispositivo non impedisce ad esso di accedere alla rete.";
var device_detail_delete_modal_title = "Rimuovi un dispositivo";
var device_detail_edit_action = "Modifica dettagli dispositivo";
var device_detail_edit_modal_nameinput_placeholder = "Inserisci un nome personalizzato";
var device_detail_edit_modal_nameinput_small = "Inserisci un nome che renderà più facile identificare questo dispositivo";
var device_detail_edit_modal_notesinput_label = "Note aggiuntive";
var device_detail_edit_modal_notesinput_placeholder = "Massimo 1000 caratteri";
var device_detail_edit_modal_notesinput_small = "Note a testo libero relative a questo dispositivo. Massimo 1000 caratteri";
var device_detail_edit_modal_placementinput_label = "Dove si trova il dispositivo?";
var device_detail_edit_modal_placementinput_small = "Inserisci l'ambiente dove hai posizionato il tuo dispositivo";
var device_detail_edit_modal_title = "Dettagli personalizzati aggiuntivi";
var device_detail_family = "Famiglia";
var device_detail_icon_picker_hint = "Cerca tipi di dispositivi";
var device_detail_icon_picker_title = "Seleziona il tipo di dispositivo";
var device_detail_internet_downtime_schedule = "<b>{name}</b> attivo da {startTime} a {endTime}";
var device_detail_internet_downtime_schedule_manage = "Gestisci il programma";
var device_detail_kick_out_mode_blocked = "Bloccato";
var device_detail_kick_out_mode_blocked_ago = "Bloccato {time}";
var device_detail_kick_out_mode_blocked_ago_for = "Bloccato {time} per {duration}";
var device_detail_kick_out_mode_blocked_for = "E' stato bloccato per {duration}";
var device_detail_kick_out_mode_blocked_on = "Blocco";
var device_detail_kick_out_mode_paused = "Messo in pausa";
var device_detail_kick_out_mode_paused_ago = "In pausa da {time}";
var device_detail_kick_out_mode_paused_ago_for = "Messo in pausa {time} per {duration}";
var device_detail_kick_out_mode_paused_for = "È stato in pausa per {duration}";
var device_detail_kick_out_mode_paused_on = "In pausa";
var device_detail_kick_out_mode_resumed_immediately = "È stato ripreso quasi immediatamente";
var device_detail_kick_out_mode_resumed_while = "È stato ripreso da un po' di tempo";
var device_detail_kick_out_mode_unblocked_immediately = "È stato sbloccato quasi immediatamente";
var device_detail_kick_out_mode_unblocked_while = "È stato bloccato per un po'";
var device_detail_notification_set_automatic = "Automatico (\"{time}\" min)";
var device_detail_notification_set_millis = "Corrente (\"{time}\" min)";
var device_detail_snmp_description = "Descrizione";
var device_detail_wol_failed = "Fing non ha potuto inviare un pacchetto per accendere questo dispositivo.";
var device_detail_wol_modal_title_fail = "Invio non riuscito, riprova";
var device_detail_wol_modal_title_success = "Pacchetto inviato!";
var device_detail_wol_success = "Un segnale è stato inviato con successo a questo dispositivo.";
var device_place_Basement = "Seminterrato";
var device_place_Bathroom = "Bagno";
var device_place_Bedroom = "Stanza da letto";
var device_place_Cellar = "Cantina";
var device_place_Closet = "Guardaroba";
var device_place_Default = "Seleziona un luogo";
var device_place_Dining_Room = "Sala da pranzo";
var device_place_Garage = "Garage";
var device_place_Garden = "Giardino";
var device_place_Gym = "Palestra";
var device_place_Hallway = "Corridoio";
var device_place_Indoors = "Al chiuso";
var device_place_Kitchen = "Cucina";
var device_place_Living_Room = "Soggiorno";
var device_place_Lobby = "Atrio";
var device_place_Office = "Ufficio";
var device_place_Outdoors = "Fuori";
var device_place_Pool = "Piscina";
var device_place_Study = "Studio";
var devicecategory_audio_and_video = "Audio &amp; Video";
var devicecategory_engineering = "Ingegneria";
var devicecategory_everything_else = "Tutto il resto";
var devicecategory_home_and_office = "Home &amp; Office";
var devicecategory_industry = "Industry";
var devicecategory_mobile = "Dispositivi mobili";
var devicecategory_network = "Rete";
var devicecategory_offline = "Dispositivi offline";
var devicecategory_personal = "Personale";
var devicecategory_server = "Server";
var devicecategory_smart_home = "Smart home";
var devicetype_alarm = "Sveglia";
var devicetype_appliance = "Elettrodomestico";
var devicetype_arduino = "Arduino";
var devicetype_automotive = "Automotive";
var devicetype_baby_monitor = "Baby Monitor";
var devicetype_barcode = "Scanner codici a barre";
var devicetype_battery = "UPS";
var devicetype_bell = "Campanello";
var devicetype_car = "Automobile";
var devicetype_circuit_card = "Scheda di circuito";
var devicetype_cleaner = "Aspirapolvere";
var devicetype_clock = "Orologio";
var devicetype_cloud = "Cloud";
var devicetype_communication = "Comunicazione";
var devicetype_computer = "Computer";
var devicetype_conferencing = "Meeting";
var devicetype_control_panel = "Panello Touch";
var devicetype_database = "Database";
var devicetype_desktop = "Desktop";
var devicetype_disc_player = "Disc Player";
var devicetype_domain_server = "Domain Server";
var devicetype_domotz_box = "Domotz Box";
var devicetype_electric = "Elettrico";
var devicetype_energy = "Energy";
var devicetype_ereader = "Lettore di eBook";
var devicetype_file_server = "File Server";
var devicetype_fingbox = "Fingbox";
var devicetype_firewall = "Firewall";
var devicetype_fitness = "Fitness";
var devicetype_fridge = "Frigorifero";
var devicetype_game_console = "Console Gioco";
var devicetype_garage = "Porta del garage";
var devicetype_gateway = "Gateway";
var devicetype_generic = "Generico";
var devicetype_health_monitor = "Health Monitor";
var devicetype_heating = "Climatizzatore";
var devicetype_humidity = "Sensore di umidità";
var devicetype_industrial = "Industrial Device";
var devicetype_ipod = "Lettore MP3";
var devicetype_key_lock = "Serratura";
var devicetype_laptop = "Laptop";
var devicetype_light = "Luce";
var devicetype_loudspeaker = "Altoparlante";
var devicetype_mail_server = "Mail Server";
var devicetype_media_player = "Media Player";
var devicetype_medical = "Medical Device";
var devicetype_microphone = "Microfono";
var devicetype_mobile = "Mobile";
var devicetype_modem = "Modem";
var devicetype_motion_detector = "Rilevatore di movimento";
var devicetype_music = "Riproduttore musicale";
var devicetype_nas_storage = "NAS";
var devicetype_network_appliance = "Dispositivo di rete";
var devicetype_pet_monitor = "Pet Monitor";
var devicetype_phone = "Telefono IP";
var devicetype_photo_camera = "Foto Camera";
var devicetype_photos = "Cornice digitale";
var devicetype_poe_plug = "PoE Switch";
var devicetype_pool = "Piscina";
var devicetype_pos = "POS";
var devicetype_power_system = "Sistema di alimentazione";
var devicetype_printer = "Stampante";
var devicetype_processor = "Processore";
var devicetype_projector = "Proiettore";
var devicetype_proxy_server = "Proxy Server";
var devicetype_radio = "Radio";
var devicetype_raspberry = "Raspberry";
var devicetype_remote_control = "Telecomando";
var devicetype_rfid = "RFID Tag";
var devicetype_robot = "Robot";
var devicetype_router = "Router";
var devicetype_satellite = "Satellite";
var devicetype_scale = "Bilancia";
var devicetype_scanner = "Scanner";
var devicetype_security_system = "Sistema di Sicurezza";
var devicetype_sensor = "Sensore";
var devicetype_server = "Server";
var devicetype_sleep = "Sleep Tech";
var devicetype_small_cell = "Small Cell";
var devicetype_smart_controller = "Controller";
var devicetype_smart_home = "Smart Device";
var devicetype_smart_meter = "Smart Meter";
var devicetype_smart_plug = "Smart Plug";
var devicetype_smoke = "Rilevatore di fumo";
var devicetype_solar_panel = "Pannello solare";
var devicetype_sound_system = "Ricevitore AV";
var devicetype_sprinkler = "Innaffiatore";
var devicetype_stb = "TV via cavo";
var devicetype_streaming_dongle = "Streaming Dongle";
var devicetype_surveillance_camera = "IP Camera";
var devicetype_switch = "Switch";
var devicetype_tablet = "Tablet";
var devicetype_television = "Televisione";
var devicetype_terminal = "Terminale";
var devicetype_thermostat = "Termostato";
var devicetype_toy = "Giocattolo";
var devicetype_undefined = "Default";
var devicetype_usb = "USB";
var devicetype_virtual_machine = "Virtual Machine";
var devicetype_voice_control = "Assistente vocale";
var devicetype_voip = "Dispositivo VoIP";
var devicetype_vpn = "VPN";
var devicetype_washer = "Lavatrice";
var devicetype_watch = "Smart Watch";
var devicetype_wearable = "Gadget";
var devicetype_weather = "Stazione meteorologica";
var devicetype_web_server = "Server web";
var devicetype_wifi = "Wi-Fi";
var devicetype_wifi_extender = "Wi-Fi Extender";
var dhcpdiscovery_result_domain = "Dominio";
var discovery_action_edit = "Modifica";
var discovery_device_action_change = "Cambia";
var discovery_devices_filter_all = "Tutti";
var discovery_devices_filter_offline = "Offline";
var discovery_devices_filter_online = "Online";
var discovery_devices_sorted_name = "Nome";
var discovery_devices_sorted_state = "Stato";
var discovery_events_change_state_briefly = " brevemente";
var discovery_events_change_state_till = "<span> fino ad'ora</span>";
var discovery_events_empty_state = "Non ci sono eventi per {time}";
var discovery_events_heatmap_status = "<span><strong>{distinct}</strong> dispositivi</span>";
var discovery_events_no_in_this_period = "Nessun evento trovato in questo periodo";
var discovery_events_premium_banner_description = "Esegui l'upgrade di Fing per visualizzare una sequenza temporale completa dei tuoi eventi di rete.";
var discovery_events_premium_banner_description_end = "Fai l'upgrade per visualizzare la cronologia completa.";
var discovery_events_show_next = "Mostra i prossimi eventi";
var discovery_events_show_previous = "Mostra gli eventi precedenti";
var discovery_events_timeline_more = "Mostra più eventi";
var discovery_events_timeline_new = "Visto per la prima volta in rete";
var discovery_events_timeline_new_blocked = "Visto per la prima volta in rete, bloccato automaticamente";
var discovery_events_timeline_offline_briefly = "Connesso brevemente";
var discovery_events_timeline_offline_duration = "Disconnesso per {duration}";
var discovery_events_timeline_offline_duration_immediately = "Online per poco";
var discovery_events_timeline_offline_duration_while = "Online da un po' di tempo";
var discovery_events_timeline_offline_till_now = "Connesso fino ad ora";
var discovery_events_timeline_online_briefly = "Connesso brevemente";
var discovery_events_timeline_online_duration = "Connesso per {duration}";
var discovery_events_timeline_online_duration_immediately = "Offline per poco";
var discovery_events_timeline_online_duration_while = "Offline da un po' di tempo";
var discovery_events_timeline_online_till_now = "Disconnesso fino ad ora";
var discovery_events_week_heatmap_header = "Heatmap degli ultimi 7 giorni";
var discovery_events_week_timeline_header = "Timeline degli ultimi 7 giorni";
var discovery_header_location = "Località";
var discovery_header_network = "Rete";
var discovery_network_internet_header = "Internet Setup";
var discovery_network_internet_hostname = "Nome host";
var discovery_network_internet_isp = "ISP";
var discovery_network_internet_location = "Località";
var discovery_network_internet_provider = "Provider";
var discovery_network_internet_pubaddress = "Indirizzo pubblico";
var discovery_network_internet_timezone = "Fuso orario";
var discovery_network_netinfo_gateway = "Gateway";
var discovery_security_newdevices_confirmall = "Confirma tutti";
var discovery_security_newdevices_confirmed = "Confermato";
var discovery_security_newdevices_last30days = "Ultimi 30 giorni";
var discovery_security_newdevices_last7days = "Ultimi 7 giorni";
var discovery_security_newdevices_message = "Fing tiene traccia di quando ogni dispositivo è stato visto per la prima volta. Confirma tutti i dispositivi che riconosci, in modo da identificare facilmente un intruso.";
var discovery_security_newdevices_title = "Nuovi dispositivi";
var discovery_security_newdevices_today = "Oggi";
var dnslookup_info_local_title = "Locale";
var duration_day_long = "{amount, plural, =1 {# giorno} other {# giorni}}";
var duration_day_short = "{amount}d";
var duration_hour_long = "{amount, plural, =1 {# ora} other {# ore}}";
var duration_hour_short = "{amount}h";
var duration_min_long = "{amount, plural, =1 {# min} other {# min}}";
var duration_min_short = "{amount}m";
var duration_minute_long = "{amount, plural, =1 {# minuto} other {# minuti}}";
var duration_month_long = "{amount, plural, =1 {# mese} other {# mesi}}";
var duration_month_short = "{amount}mm";
var duration_week_long = "{amount, plural, =1 {# settimana} other {# settimane}}";
var duration_week_short = "{amount}w";
var duration_year_long = "{amount, plural, =1 {# anno} other {# anni}}";
var duration_year_short = "{amount}aa";
var empty_state_subtitle_fallback = "Non c'è nulla al momento. Tornare più tardi";
var empty_state_title_fallback = "Niente da mostrare";
var every_day = "Ogni {num}d";
var every_hour = "Ogni {num}h";
var every_week = "Ogni {num}w";
var findhiddencameras_emptystate_subtitle = "Nessuna fotocamera trovata.";
var findhiddencameras_emptystate_title = "È tutto ok.";
var findhiddencameras_foundcameras_title = "Fotocamere rivelate";
var findhiddencameras_helper_0found = "0 dispositivi trovati";
var findhiddencameras_helper_totdevice = "{totDeviceString} trovati";
var findhiddencameras_helper_totdevice_1found = "1 dispositivo ";
var findhiddencameras_helper_totdevice_manyfound = "{tot} dispositivi ";
var findhiddencameras_helper_totdevice_with_unknown = "{totDeviceString} trovati, di cui {countUnknown} sconosciuti";
var findhiddencameras_helper_type_babymonitor = "Baby monitor";
var findhiddencameras_helper_type_ipcamera = "IP camera";
var findhiddencameras_helper_type_monitordetector = "Monitor detector";
var findhiddencameras_helper_type_photocamera = "Photo camera";
var findhiddencameras_helper_type_securitysystem = "Sistema di sicurezza";
var findhiddencameras_progress_subtitle = "Analisi al {progress}%. Attendi mentre controlliamo con i nostri sistemi per identificare le telecamere";
var findhiddencameras_progress_title = "Raccolta informazioni sulle telecamere";
var findhiddencameras_summary_title = "Sommario";
var findhiddencameras_toolresult_danger_subtitle = "Rilevate {length} telecamere attive sconosciute. Se questi dispositivi appartengono a te, confermali manualmente e non verranno visualizzati nel rapporto.";
var findhiddencameras_toolresult_danger_title = "Sono state trovate telecamere sconosciute";
var findhiddencameras_toolresult_fingpedia_stats = " Fing ha identificato {length} telecamere fino ad oggi.";
var findhiddencameras_toolresult_premium_subtitle = "Proteggi la tua privacy attraverso una scansione avanzata per rilevare i dispositivi di registrazione video";
var findhiddencameras_toolresult_premium_title = "Controllo telecamere nascoste disabilitato";
var findhiddencameras_toolresult_success_nofound_subtitle = "L'analisi ha trovato {length} dispositivi attivi ma nessuna fotocamera.";
var findhiddencameras_toolresult_success_nofound_title = "Nessuna telecamera trovata";
var findhiddencameras_toolresult_success_subtitle = "Rilevate {length} telecamere attive note. Assicurati che l'accesso alle telecamere sia protetto contro le intrusioni e sei a posto.";
var findhiddencameras_toolresult_success_title = "Telecamere trovate";
var findhiddencameras_toolresult_sync_subtitle = "Potrebbe volerci un po'. La durata del test dipende dalle dimensioni della tua rete e dal numero di dispositivi collegati.";
var findhiddencameras_toolresult_sync_title = "Ricerca telecamere nascoste in corso...";
var findhiddencameras_unrecognized_subtitle = "Trovati {length} dispositivi che Fing non poteva riconoscere. Non possiamo stabilire se questi dispositivi siano telecamere o meno.";
var findhiddencameras_unrecognized_title = "Dispositivi non riconosciuti";
var format_speed = "{dw} Mbps / {up} Mbps";
var gender_female = "Femmina";
var gender_male = "Maschio";
var gender_other = "Altro";
var generic_VPN = "VPN";
var generic_account = "Account";
var generic_actions = "Azioni";
var generic_alert = "Allarme";
var generic_am = "Mattina";
var generic_auto = "Auto";
var generic_automatic = "Automatico";
var generic_avg = "Avg";
var generic_back = "Indietro";
var generic_band = "Band";
var generic_best = "Migliore";
var generic_brandandmodel = "Brand e Modello";
var generic_bssid = "BSSID";
var generic_cancel = "Cancella";
var generic_change = "Cambia";
var generic_changed = "Cambiato";
var generic_check = "Controlla";
var generic_clear = "Cancella";
var generic_close = "Chiudi";
var generic_completed = "Completato";
var generic_confirm = "Confirma";
var generic_connected_to = "Connesso a ";
var generic_continue = "Prosegui";
var generic_country = "Paese";
var generic_data_not_available = "Dati non disponibili";
var generic_delete = "Elimina";
var generic_description = "Descrizione";
var generic_details = "Dettagli";
var generic_device = "Dispositivo";
var generic_dhcp = "DHCP";
var generic_dhcp_proxy = "DHCP Proxy WPAD";
var generic_disable_all = "Disabilita tutti";
var generic_disabled = "Disabilitato";
var generic_domain = "Dominio";
var generic_download_speed = "Velocità di download";
var generic_edit = "Modifica";
var generic_edit_profile = "Modifica il tuo profilo";
var generic_email = "Email";
var generic_enable_all = "Abilita tutti";
var generic_enabled = "Abilitato";
var generic_error = "Errore";
var generic_example = "Esempio";
var generic_failed = "Fallito";
var generic_first_seen = "Visto per la prima volta";
var generic_for = "per";
var generic_help = "Aiuto";
var generic_help_on_fing = "Aiuto su FIng";
var generic_home = "Casa";
var generic_hotspot = "Hotspot";
var generic_id = "Id";
var generic_idle = "Idle";
var generic_important = "Importante";
var generic_inspect = "Ispeziona";
var generic_internet = "Internet";
var generic_ip = "IP";
var generic_lastchange = "Ultima modifica";
var generic_link = "Link";
var generic_link_speed = "Velocità collegamento";
var generic_live = "Live";
var generic_local = "Locale";
var generic_logo = "Logo";
var generic_make = "Make";
var generic_manage = "Gestisci";
var generic_manual = "Manuale";
var generic_map_gpudisabled_link = "qui";
var generic_map_gpudisabled_message = "Le mappe richiedono GPU acceleration. Puoi abilitarla ";
var generic_max = "Max";
var generic_mbps_download = "Mbps download";
var generic_mbps_upload = "Mbps upload";
var generic_min = "Min";
var generic_ms = "ms";
var generic_ms_latency = "Millis di latenza";
var generic_name = "Nome";
var generic_network = "Rete";
var generic_next = "Prossimo";
var generic_no = "No";
var generic_no_internet = "No Internet";
var generic_no_name = "Nessun nome";
var generic_not_available = "N/A";
var generic_not_connected = "Non connesso";
var generic_not_in_network = "Non in rete";
var generic_not_tracking = "Non sta tracciando";
var generic_notset = "non impostata";
var generic_office = "Ufficio";
var generic_offline = "Offline";
var generic_ok = "Ok";
var generic_online = "Online";
var generic_open = "Aperto";
var generic_operatingsystem = "Sistema operativo";
var generic_optional = "Opzionale";
var generic_or = "0";
var generic_order_by = "Ordina per";
var generic_os = "OS";
var generic_outage = "Disservizio";
var generic_outages = "Disservizi";
var generic_pm = "Pomeriggio";
var generic_public = "Pubblico";
var generic_recent = "Recente";
var generic_refresh = "Aggiorna";
var generic_related_articles = "Articoli correlati";
var generic_rental = "Affitto";
var generic_report = "Report";
var generic_result = "Risultato";
var generic_running = "In corso";
var generic_save = "Salva";
var generic_security = "Sicurezza";
var generic_see_result = "Vedi risultato";
var generic_seeall = "Vedi tutti";
var generic_send = "Invia";
var generic_service = "Service";
var generic_settings = "Impostazioni";
var generic_share = "Condividi";
var generic_show_data_for = "Mostra dati per";
var generic_signal = "Segnale";
var generic_size = "Grandezza";
var generic_source = "Sorgente";
var generic_ssid = "SSID";
var generic_start = "Avvia";
var generic_stop = "Interrompi";
var generic_support = "Supporto";
var generic_tracking = "Sta tracciando";
var generic_type = "Tipo";
var generic_unknown = "Sconosciuto";
var generic_unrecognized = "Non riconosciuti";
var generic_updating = "Aggiornamento in corso";
var generic_upgrade = "Upgrade";
var generic_upload_speed = "Velocità di upload";
var generic_view = "Visualizza";
var generic_view_details = "Visualizza dettagli";
var generic_view_less = "Mostra meno";
var generic_view_more = "Mostra di più";
var generic_website = "Website";
var generic_what_outage = "Cos'è un disservizio";
var generic_worst = "Peggiore";
var generic_wps_enabled = "WPS Abilitato";
var generic_yes = "Sì";
var generic_you = "Tu";
var healtcheck_edit_dialog_placeholder = "Iserisci una lista di hosts";
var healthcheck_001_B = "Il dispositivo non è in rete: nessun indirizzo IP";
var healthcheck_001_G = "Il dispositivo è in rete: ha un indirizzo IP valido";
var healthcheck_001_easy = "È necessario un indirizzo (IP) affinché il computer si trovi in ​​una rete. Il tuo computer / dispositivo deve essere in una rete per comunicare con altri dispositivi e raggiungere Internet.";
var healthcheck_001_fix = "Se non stai entrando in rete dovresti controllare i cavi, nel caso siano cablati; se invece è Wireless dovresti controllare il tuo router Wireless. Su Windows puoi fare clic sull'icona Rete ed eseguire l'opzione <i> Risoluzione dei problemi </i>. Su Mac puoi eseguire lo strumento <i> Diagnostica wireless </i>, disponibile tramite Spotlight Search. In alcuni casi anche un riavvio del laptop può risolvere la situazione.";
var healthcheck_001_tech = "Il controllo enumera gli adattatori di rete disponibili per trovare un'interfaccia con un indirizzo IPv4 valido.";
var healthcheck_002_B = "L'indirizzo IP del dispositivo viene assegnato statico, non da DHCP";
var healthcheck_002_G = "L'indirizzo IP del dispositivo viene assegnato statico";
var healthcheck_002_easy = "Il tuo indirizzo (IP) per il tuo computer nella tua rete non è assegnato dal tuo router, ma è invece configurato manualmente. Dovresti evitarlo a meno che tu non comprenda il networking.";
var healthcheck_002_tech = "Il controllo avvisa quando l'indirizzo IP del dispositivo è assegnato staticamente e non è stato ottenuto dal DHCP.";
var healthcheck_003_B = "Il dispositivo non è in rete: tentativo di ottenere un indirizzo IP da DHCP";
var healthcheck_003_G = "Il dispositivo è in rete: è stato ottenuto correttamente un indirizzo IP dal DHCP";
var healthcheck_003_easy = "È necessario un indirizzo IP affinché il computer si trovi in ​​una rete e quindi sia in grado di comunicare con altri dispositivi e raggiungere Internet. Nelle reti locali odierne, Wi-Fi ed Ethernet, gli indirizzi IP vengono assegnati a ciascun PC / dispositivo quando si collega automaticamente alla rete, senza alcuna preconfigurazione manuale. Il processo e il servizio sono <b> DHCP </b>: Dynamic Host Configuration Protocol.";
var healthcheck_003_fix = "Se il tuo dispositivo non riceve un indirizzo, non puoi accedere alla rete. Dovresti provare a disconnetterti e riconnetterti alla rete. Se il problema persiste, dovresti provare a riavviare il dispositivo. Se il problema persiste, il tuo DHCP potrebbe aver bisogno di un riavvio: potresti spegnere e riaccendere il router di casa, per assicurarti che si avvii da zero.";
var healthcheck_003_tech = "Il controllo garantisce che il tuo indirizzo IP corrente sia assegnato da un DHCP e non sia manuale.";
var healthcheck_004_B = "L'orologio del computer non è sincronizzato";
var healthcheck_004_G = "L'orologio del computer è sincronizzato";
var healthcheck_004_easy = "Se l'orologio del computer non è sincronizzato, potrebbe influire su diverse funzionalità del PC. Anche la navigazione sul sito web può essere influenzata poiché i certificati di sicurezza sono sempre convalidati rispetto alla data di scadenza.";
var healthcheck_004_fix = "Dovresti aprire le preferenze Data e ora nelle impostazioni di sistema e assicurarti che <i> Imposta data e ora automaticamente </i> sia abilitato.";
var healthcheck_004_tech = "Il controllo confronta l'ora locale del PC con un time server remoto.";
var healthcheck_005_B = "Nessun server DNS è configurato";
var healthcheck_005_G = "Il DNS server è configurato";
var healthcheck_005_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in locale reti. Il tuo PC deve avere almeno un DNS configurato per poter raggiungere e navigare in Internet.";
var healthcheck_005_fix = "In una rete integra i server DNS vengono automaticamente inviati al PC dal router. Dovresti controllare la configurazione di rete del tuo computer per assicurarti che sia OK. Puoi anche controllare la configurazione del tuo router per assicurarti che abbia un DNS valido. A volte i server DNS locali o del provider non funzionano correttamente e puoi aggirarli configurando manualmente i server DNS standard comuni del PC locale come ad es. Google DNS: 8.8.8.8 <br/> Se stai accedendo a un <b> Wi-Fi pubblico </b> che necessita di login, potrebbe accadere che la pagina di login non venga visualizzata e non riesci ad accedere a Internet. Una buona soluzione è aprire il browser e visitare manualmente la pagina seguente, che forza la visualizzazione della cosiddetta schermata captive e ti consente di accedere: <b> captive.apple.com </b>";
var healthcheck_005_tech = "Il controllo verifica che uno o più server DNS siano configurati nel PC.";
var healthcheck_006_B = "Nessun gateway di rete è configurato";
var healthcheck_006_G = "Il Gateway di rete è configurato";
var healthcheck_006_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet.";
var healthcheck_006_fix = "Se il gateway non è configurato, le possibili cause potrebbero essere molto diffuse, quindi non esiste una soluzione specifica per questo problema. È necessario risolvere altri problemi segnalati da altri controlli e provare le soluzioni suggerite.";
var healthcheck_006_tech = "Il controllo verifica che un percorso predefinito per Internet sia disponibile sull'interfaccia di rete abilitata, tramite un next hop locale che sarà il gateway per Internet.";
var healthcheck_007_B = "La potenza del Wi-Fi non è affidabile";
var healthcheck_007_G = "La potenza del Wi-Fi è buona o accettabile";
var healthcheck_007_easy = "L'intensità del segnale wireless è misurata in dBm (decibel milliwatt) ed è, in qualche modo confusa, espressa come valori negativi, ecco perché Fing la traduce in un valore percentuale in una scala 1-100%. Se ricevi un segnale di avviso debole, significa che il tuo PC nel punto particolare in cui ti trovi non sta ricevendo un segnale wireless ottimale e questo influisce sia sull'accesso alla rete locale che sulla navigazione in Internet.";
var healthcheck_007_fix = "Prima di tutto assicurati che il tuo router o altri punti di accesso wireless siano posizionati in alto con una visuale libera verso le parti più ampie possibile della tua casa; non nascondere il tuo punto di accesso dietro la TV o all'interno di un mobile: liberalo il più possibile. Un'altra possibile causa di scarso segnale sono i conflitti tra i canali Wi-Fi: se tu e un vicino state utilizzando entrambi lo stesso canale di rete, i segnali possono interferire tra loro e rallentare la connessione. Puoi eseguire la scansione dello spettro per l'attività su ciascun canale e se noti che la tua rete e un'altra rete sono sullo stesso canale, prova a cambiare il tuo router su un canale diverso: accedi al pannello di amministrazione del router, trova la configurazione wireless e modifica le proprietà del canale cambiare il canale selezionato o impostarlo sulla selezione automatica del canale, se disponibile.";
var healthcheck_007_tech = "Il controllo avvisa quando la potenza del segnale Wi-Fi è inferiore alle soglie: il segnale superiore a -60 dBm (66%) è buono, fino a -75 dBm (40%) non è forte ma accettabile, oltre -75 dBm è inaffidabile.";
var healthcheck_008_B = "La velocità del collegamento Ethernet non è ottimale";
var healthcheck_008_G = "La velocità del collegamento Ethernet è elevata";
var healthcheck_008_easy = "La velocità del collegamento alla rete cablata è misurata in Mbps (Megabit al secondo). Un valore più alto è più veloce, migliore. Nelle reti moderne dovresti puntare a 1 Gbps (pari a 1000 Mbps) o anche di più nelle reti aziendali.";
var healthcheck_008_fix = "La scheda di rete del PC moderno supporta 1 Gbps, quindi prima di tutto dovresti controllare i cavi e assicurarti che siano <i> Cavo Gigabit Ethernet </i>. Dovresti anche controllare il router e gli interruttori opzionali al centro, per assicurarti che il cavo sia collegato alla porta Gigabit.";
var healthcheck_008_tech = "Il controllo avvisa quando la velocità del collegamento cablato è inferiore a 1 Gbps.";
var healthcheck_009_B = "L'adattatore di rete non è attivo";
var healthcheck_009_G = "L'adattatore di rete è attivo";
var healthcheck_009_easy = "È necessario un adattatore di rete attivo nel computer per essere in una rete. Può essere cablato (Ethernet) o wireless (Wi-Fi). Un adattatore attivo ottiene un indirizzo (IP) affinché il computer si trovi in ​​una rete. Il tuo computer / dispositivo deve essere in una rete per comunicare con altri dispositivi e raggiungere Internet.";
var healthcheck_009_fix = "Dovresti aprire le impostazioni / configurazione di rete sul tuo laptop, ad es. su Windows puoi fare clic sull'icona Rete e assicurarti che l'adattatore non sia disabilitato. Puoi anche eseguire l'opzione <i> Risoluzione dei problemi </i>. In alcuni casi, il riavvio del laptop può risolvere la situazione.";
var healthcheck_009_tech = "Il controllo enumera gli adattatori di rete disponibili per trovare l'interfaccia di rete attiva / abilitata.";
var healthcheck_00A_G = "Il DNS del computer ha la precedenza sulla configurazione di rete";
var healthcheck_00A_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locale. Il tuo PC deve avere almeno un DNS configurato per poter raggiungere e navigare in Internet. <br/> Il segno di spunta ti informa che la configurazione DNS del tuo PC ha la precedenza sui valori di rete predefiniti.";
var healthcheck_00A_tech = "Il controllo informativo indica se la configurazione DNS del computer ha la precedenza sui server DNS predefiniti di rete.";
var healthcheck_010_G = "Antivirus installato";
var healthcheck_010_easy = "Un antivirus è installato nel computer.";
var healthcheck_010_tech = "Il controllo informativo indica se nel computer locale sia installato un programma di protezione antivirus.";
var healthcheck_401_B = "Il dispositivo non è connesso a una rete locale";
var healthcheck_401_G = "Il dispositivo è connesso a una rete locale";
var healthcheck_401_easy = "È necessario un indirizzo (IP) affinché il computer si trovi in ​​una rete. Il tuo computer / dispositivo deve essere in una rete per comunicare con altri dispositivi e raggiungere Internet.";
var healthcheck_401_fix = "Se non stai entrando in rete dovresti controllare i cavi, nel caso siano cablati; se invece è Wireless dovresti controllare il tuo router Wireless. Su Windows puoi fare clic sull'icona Rete ed eseguire l'opzione <i> Risoluzione dei problemi </i>. In alcuni casi anche un riavvio del laptop può risolvere la situazione.";
var healthcheck_401_tech = "Il controllo enumera gli adattatori di rete disponibili per trovare un'interfaccia con una configurazione di rete IP valida: indirizzo IP, gateway, DNS.";
var healthcheck_402_B = "È necessario fornire un contesto per la rete corrente per attivare i controlli avanzati";
var healthcheck_402_G = "Hai fornito un contesto per la rete corrente";
var healthcheck_402_easy = "Fornendo il contesto per la rete corrente, consenti a Fing di essere più preciso nei suoi controlli di integrità della connettività.";
var healthcheck_402_fix = "Di 'a Fing se la rete attuale è una rete domestica o piuttosto una rete aziendale o pubblica. Ciò farà scomparire l'avviso e abiliterà anche controlli di integrità della connettività contestuale specifici sulla rete.";
var healthcheck_402_tech = "L'impostazione di un contesto per la rete corrente cambia e ottimizza i controlli che Fing esegue su di essa.";
var healthcheck_403_B = "Nessun percorso al server DNS limita e ottimizza i controlli che Fing esegue su di esso.";
var healthcheck_403_G = "Esiste un percorso valido per DNS";
var healthcheck_403_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Il tuo PC deve avere almeno un DNS configurato per poter raggiungere e navigare in Internet.";
var healthcheck_403_fix = "In una rete integra i server DNS vengono automaticamente inviati al tuo PC dal tuo router e il tuo PC è in grado di raggiungerli tramite un percorso valido. Dovresti controllare la configurazione della tua rete locale per assicurarti che sia OK. Puoi anche controllare la configurazione del tuo router per assicurarti che abbia un DNS valido. A volte i server DNS locali o del provider non funzionano correttamente e puoi aggirarli configurando manualmente i server DNS standard comuni del PC locale come ad es. Google DNS: 8.8.8.8";
var healthcheck_403_tech = "Il controllo verifica che il server DNS primario configurato sia raggiungibile tramite un percorso valido.";
var healthcheck_404_B = "Nessun percorso al server DNS secondario";
var healthcheck_404_G = "Esiste un percorso valido per il DNS secondario";
var healthcheck_404_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Il tuo PC deve avere almeno un DNS configurato per poter raggiungere e navigare in Internet. Opzionalmente potrebbe essere configurato un DNS aggiuntivo, chiamato DNS secondario: quando il DNS primario fallisce, il PC riprova sul DNS secondario.";
var healthcheck_404_fix = "In una rete integra i server DNS vengono automaticamente inviati al tuo PC dal tuo router e il tuo PC è in grado di raggiungerli tramite un percorso valido. Dovresti controllare la configurazione della tua rete locale per assicurarti che sia OK. Puoi anche controllare la configurazione del tuo router per assicurarti che abbia un DNS valido. A volte i server DNS locali o del provider non funzionano correttamente e puoi aggirarli configurando manualmente i server DNS standard comuni del PC locale come ad es. Google DNS: 8.8.8.8";
var healthcheck_404_tech = "Il controllo verifica che i server DNS secondari configurati siano raggiungibili tramite un percorso valido.";
var healthcheck_405_B = "Nessun percorso al gateway di rete";
var healthcheck_405_G = "Esiste un percorso valido per il gateway di rete";
var healthcheck_405_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet. Fing ti avverte nel caso in cui l'attuale configurazione di rete del PC non sia corretta per raggiungere e parlare con il gateway di rete o il router.";
var healthcheck_405_tech = "Il controllo verifica che il gateway di rete (ovvero il prossimo hop del percorso predefinito) sia raggiungibile tramite un percorso valido (locale o remoto).";
var healthcheck_406_B = "La netmask di rete (lunghezza del prefisso) non è regolata correttamente";
var healthcheck_406_G = "La netmask di rete (lunghezza del prefisso) è configurata correttamente";
var healthcheck_406_easy = "Una subnet mask è un numero che definisce l'intervallo di indirizzi (IP) disponibili all'interno di una rete. Utilizza lo stesso formato dell'indirizzo IP, ma in formato negativo, ad es. 255.255.255.0 è una tipica maschera di <i> Classe C </i> che include un intervallo di 256 indirizzi. Una forma alternativa per esprimerlo è come lunghezza del prefisso di rete, che significa quanti bit dell'indirizzo di rete sono stabili: una rete di classe C è / 24, il che significa che 24 bit, i primi 3 byte dell'indirizzo, non variano.";
var healthcheck_406_fix = "Una rete troppo grande è molto più lenta di una di giuste dimensioni. Per esempio, una rete domestica con dozzine di dispositivi non di Classe C sicuramente non sarà sintonizzata correttamente. Per risolvere il problema non è necessario modificare la configurazione del PC locale, ma basta accedere alla configurazione del router e modificarla. Per assicurarti che ogni dispositivo riceva la nuova configurazione aggiornata, dovresti anche spegnere e riaccendere il router o ricollegare tutti i dispositivi collegati.";
var healthcheck_406_tech = "Il controllo verifica che la subnet mask di rete (o la lunghezza del prefisso di rete) non sia sovradimensionata. Sebbene gli standard di rete raccomandino di preferire sempre il multicast e la trasmissione durante la ricerca di dispositivi e servizi di rete, molti dispositivi IoT moderni utilizzano ancora gli sweep unicast per trovare i peer: ciò significa che la ricerca, l'onboarding, l'accoppiamento o l'utilizzo del servizio quando si dispone di una grande rete lo faranno fare in modo che il dispositivo cerchi il servizio su un numero molto elevato di dispositivi possibili, anziché solo 256/512. Un buon esempio di questo è anche il gruppo di lavoro Windows: NetBIOS è unicast, quindi la ricerca di altri PC e stampanti in una grande rete richiede molto più tempo. Lo stesso accade anche per i software di monitoraggio della rete come Fing, Fingbox e così via: queste app sfruttano ARP-sweep o ping o simili, quindi il tempo impiegato da una scoperta di rete è proporzionale alla dimensione della rete.";
var healthcheck_407_B = "Il gateway di rete non è raggiungibile";
var healthcheck_407_G = "Il gateway di rete è raggiungibile";
var healthcheck_407_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet. Fing ti avvisa nel caso in cui il gateway o il router non sia attualmente raggiungibile, influendo così sull'accesso a Internet.";
var healthcheck_407_fix = "Se il gateway non è raggiungibile, non puoi accedere a Internet. Dovresti controllare i cavi, nel caso si tratti di una connessione cablata; se invece è Wireless dovresti controllare il tuo router Wireless. Su Windows puoi fare clic sull'icona Rete ed eseguire l'opzione <i> Risoluzione dei problemi </i>. Se il problema persiste, dovresti controllare se il router è acceso e funzionante, ad es. controllando se i suoi LED sono tutti verdi.";
var healthcheck_407_tech = "Il controllo verifica che il gateway di rete sia raggiungibile e attivo, ovvero rispondendo alle richieste ARP.";
var healthcheck_408_B = "Impossibile raggiungere il DNS locale";
var healthcheck_408_G = "Il DNS locale è raggiungibile";
var healthcheck_408_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Fing ti avverte nel caso in cui la tua rete abbia un server DNS locale configurato per rispondere alle domande, ma sembra che non stia rispondendo correttamente alle richieste.";
var healthcheck_408_fix = "Dovresti controllare la configurazione del tuo router per assicurarti che abbia un set DNS valido e se è esso stesso potresti pensare di spegnerlo e spegnerlo. Puoi provare a bypassare il DNS della rete locale configurando manualmente nel tuo PC locale server DNS standard comuni come ad es. Google DNS: 8.8.8.8";
var healthcheck_408_tech = "Il controllo verifica che il server DNS locale configurato sia effettivamente raggiungibile e attivo, rispondendo alle domande.";
var healthcheck_409_B = "Il DNS secondario non è raggiungibile";
var healthcheck_409_G = "Il DNS locale secondario è raggiungibile";
var healthcheck_409_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Fing ti avverte quando la tua rete ha un server DNS locale secondario configurato per rispondere alle domande, ma sembra che non stia rispondendo correttamente alle richieste.";
var healthcheck_409_tech = "Il controllo verifica che il server DNS locale secondario configurato sia effettivamente raggiungibile e attivo, rispondendo alle domande.";
var healthcheck_40A_B = "Alcuni dispositivi non sono in grado di entrare in rete";
var healthcheck_40A_G = "I dispositivi stanno entrando con successo nella rete";
var healthcheck_40A_easy = "I dispositivi necessitano di un indirizzo (IP) per essere in rete e quindi essere in grado di comunicare con altri dispositivi e raggiungere Internet. Nelle reti locali odierne, Wi-Fi ed Ethernet, gli indirizzi IP vengono assegnati a ciascun PC / dispositivo quando si collega automaticamente alla rete, senza alcuna preconfigurazione manuale. Il processo e il servizio sono <b> DHCP </b>: Dynamic Host Configuration Protocol.";
var healthcheck_40A_fix = "Il primo controllo dovrebbe essere sul dispositivo di destinazione che sta riscontrando problemi nell'accesso alla rete: controlla la configurazione di rete (nome di rete, password, ecc.) del tuo Wi-Fi e assicurati che sia corretta. Un ciclo di accensione e spegnimento del dispositivo specifico può essere di aiuto in alcuni casi, poiché all'avvio tenterà di nuovo di entrare in rete. In alcune situazioni potrebbe accadere che il tuo router / DHCP abbia esaurito gli indirizzi da assegnare a nuovi dispositivi. Quindi, come ultima risorsa, puoi spegnere e riaccendere il router: si riavvierà assegnando gli indirizzi ai dispositivi; tieni presente che il riavvio del router causerà un'interruzione temporanea di qualsiasi rete per tutti i dispositivi.";
var healthcheck_40A_tech = "Il controllo monitora le richieste DHCP di altri dispositivi che entrano nella rete: viene generato un avviso se alcuni dispositivi inviano più richieste ma non ottengono alcun indirizzo valido per rimanere nella rete locale.";
var healthcheck_40B_B = "Google DNS non è in uso";
var healthcheck_40B_G = "Google DNS è in uso";
var healthcheck_40B_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Il tuo PC deve avere almeno un DNS configurato per poter raggiungere e navigare in Internet. Google fornisce un servizio DNS gratuito in tutto il mondo con indirizzi DNS stabili come: 8.8.8.8 e 8.8.4.4";
var healthcheck_40B_tech = "Il controllo informativo ti dice se la tua configurazione DNS include Google DNS (8.8.8.8)";
var healthcheck_40C_B = "Quad9 DNS non è in uso";
var healthcheck_40C_G = "Quad9 DNS è in uso";
var healthcheck_40C_easy = "Tutto su Internet, compresi i siti Web, risiede su un indirizzo IP numerico. Il Domain Name System, o DNS, traduce questi indirizzi IP numerici in nomi di dominio leggibili dall'uomo che tutti conosciamo e ricordiamo. Se le tue impostazioni DNS non funzionano correttamente o stai ancora utilizzando le impostazioni predefinite, potresti essere a rischio di crimini informatici e problemi di prestazioni. Quad9 è una soluzione di sicurezza gratuita che utilizza il DNS per proteggere il tuo sistema dalle minacce informatiche più comuni. Migliora le prestazioni del tuo sistema, inoltre preserva e protegge la tua privacy. È come un'immunizzazione per il tuo computer e i tuoi dispositivi.";
var healthcheck_40C_tech = "Il controllo informativo ti dice se la tua configurazione DNS include Quad9 DNS (9.9.9.9)";
var healthcheck_40D_B = "DNSFilter DNS non è in uso";
var healthcheck_40D_G = "DNSFilter DNS è in uso";
var healthcheck_40D_easy = "DNSFilter fornisce DNS sicuri a pagamento: protegge facilmente l'intera organizzazione da minacce alla sicurezza online e contenuti indesiderati. Con una potente intelligenza artificiale e una rete globale leader del settore dietro DNSFilter, puoi essere sicuro e protetto in pochi minuti.";
var healthcheck_40D_tech = "Il controllo informativo ti dice se la tua configurazione DNS utilizza DNSFilter";
var healthcheck_40E_B = "Cloudflare DNS non è in uso";
var healthcheck_40E_G = "Cloudflare DNS è in uso";
var healthcheck_40E_easy = "Cloudflare fornisce un DNS veloce e sicuro come servizio integrato nella sua rete; il DNS è disponibile su tutti i piani di abbonamento gratuiti e a pagamento. Le query sui nomi di dominio vengono elaborate in millisecondi e una solida rete Anycast globale garantisce la disponibilità del DNS.";
var healthcheck_40E_tech = "Il controllo informativo ti dice se la tua configurazione DNS utilizza Cloudflare DNS (1.1.1.1)";
var healthcheck_40F_B = "Gateway non è integro";
var healthcheck_40F_G = "Gateway è integro e inoltra il traffico";
var healthcheck_40F_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet. Fing ti avverte nel caso in cui il router o il gateway non ti stia attualmente consentendo di raggiungere Internet.";
var healthcheck_40F_fix = "È necessario verificare se il router o il gateway di rete è acceso e funziona correttamente, ad es. controllando se i suoi LED sono tutti verdi. Potrebbero verificarsi interruzioni temporanee di Internet per diverse cause, ma se il problema persiste, contatta il tuo provider di servizi Internet.";
var healthcheck_40F_tech = "Il controllo verifica che il gateway di rete sia attivo e ti consenta di raggiungere Internet: Fing prova a connettersi a un servizio web di controllo della connettività.";
var healthcheck_410_B = "La rete locale non può essere rilevata";
var healthcheck_410_G = "È possibile rilevare la rete locale per elencare i dispositivi";
var healthcheck_410_easy = "Oltre al controllo dell'integrità della connessione, che ti informa su possibili problemi del tuo PC e della tua rete, Fing esegue anche il rilevamento dei dispositivi nella tua rete locale, l'elenco completo dei dispositivi con informazioni su tipo, modello, marca e molto altro è disponibile in sezione <i> Dispositivi </i>.";
var healthcheck_410_tech = "Il controllo verifica che il rilevamento della rete locale possa essere eseguito correttamente.";
var healthcheck_411_G = "Riconoscimento del gateway di rete";
var healthcheck_411_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet. Fing ti fornisce dettagli rilevanti sul tuo router o gateway, utili per conoscerne il tipo, la marca, il modello e la versione specifici.";
var healthcheck_411_tech = "Il controllo informativo fornisce dettagli sul gateway di rete.";
var healthcheck_412_G = "La rete ha nuovi dispositivi";
var healthcheck_412_easy = "Sapere se ci sono nuovi dispositivi nella tua rete, che si sono uniti di recente per la prima volta, è rilevante per l'aspetto della sicurezza: se sei il proprietario di questa rete, assicurati che questi nuovi dispositivi non siano intrusi. Nella sezione <i> Dispositivi </i> Fing fornisce l'elenco di tutti i dispositivi, online e offline, con dettagli rilevanti come il tipo di dispositivo, la marca e il modello. Quindi puoi controllare l'elenco e assicurarti che siano tutti previsti. Nel caso in cui recentemente si siano verificati problemi nella rete o nella connettività Internet, conoscere l'elenco dei dispositivi aggiunti di recente può essere un modo per verificare se uno di essi stia degradando le prestazioni della rete o causando conflitti con altri dispositivi.";
var healthcheck_412_tech = "Il controllo informativo ti dice se nuovi dispositivi si sono aggiunti di recente alla tua rete per la prima volta.";
var healthcheck_415_B = "DHCP non è integro";
var healthcheck_415_G = "DHCP è integro e consente ai dispositivi di accedere alla rete";
var healthcheck_415_easy = "I dispositivi necessitano di un indirizzo (IP) per essere in rete e quindi essere in grado di comunicare con altri dispositivi e raggiungere Internet. Nelle reti locali odierne, Wi-Fi ed Ethernet, gli indirizzi IP vengono assegnati a ciascun PC / dispositivo quando si collega automaticamente alla rete, senza alcuna preconfigurazione manuale. Il processo e il servizio sono <b> DHCP </b>: Dynamic Host Configuration Protocol. La tua rete deve avere un server DHCP sempre attivo e unico che assegni indirizzi ai dispositivi che vogliono entrare nella rete.";
var healthcheck_415_fix = "Nel caso in cui non sia attivo alcun DHCP, potrebbe essere che il router / DHCP abbia esaurito gli indirizzi da assegnare ai nuovi dispositivi; come ultima risorsa, puoi controllare lo stato del router provando a spegnerlo e riaccenderlo: si riavvierà assegnando gli indirizzi ai dispositivi; tieni presente che il riavvio del router causerà un'interruzione temporanea di qualsiasi rete per tutti i dispositivi. <br/> Nel caso in cui invece i controlli riportino più di un DHCP in esecuzione nella rete, assicurati di disattivare i DHCP finché non ne rimane uno solo. Dovresti cercare i DHCP in esecuzione in altri router, switch e dispositivi di sicurezza.";
var healthcheck_415_tech = "Il controllo verifica che un singolo server DHCP sia attivo: viene generato un avviso se non è presente alcun DHCP o quando è presente più di un server DHCP che offre indirizzi IP.";
var healthcheck_416_B = "La configurazione del DHCP non è ottimale";
var healthcheck_416_G = "La configurazione del DHCP è buona";
var healthcheck_416_easy = "I dispositivi necessitano di un indirizzo (IP) per essere in rete e quindi essere in grado di comunicare con altri dispositivi e raggiungere Internet. Nelle reti locali odierne, Wi-Fi ed Ethernet, gli indirizzi IP vengono assegnati a ciascun PC / dispositivo quando si collega automaticamente alla rete, senza alcuna preconfigurazione manuale. Il processo e il servizio sono <b> DHCP </b>: Dynamic Host Configuration Protocol. Il controllo verifica che la configurazione di rete inviata dal DHCP ai dispositivi sia corretta e ottimale.";
var healthcheck_416_fix = "Nel caso in cui la configurazione DHCP non sia ottimale, potresti voler controllare la configurazione del tuo router e regolarla.";
var healthcheck_416_tech = "Il controllo verifica che la configurazione dei parametri DHCP sia buona e ottimale (MTU, DNS, lease time).";
var healthcheck_417_G = "Il port forwarding è abilitato nel gateway tramite UPnP";
var healthcheck_417_easy = "Dispositivi e programmi possono bypassare automaticamente il firewall per consentire le connessioni in entrata senza ulteriori controlli o autorizzazioni tramite UPnP. Le applicazioni possono esporre i tuoi dispositivi senza controllo. Può essere utile per le chiamate Internet e per i giochi online, ma potenzialmente pericoloso.";
var healthcheck_417_fix = "Nel caso in cui desideri disabilitarlo, dovresti controllare il manuale del router / gateway o la pagina amministrativa e scoprire se è possibile disabilitare la funzione UPnP.";
var healthcheck_417_tech = "Il tuo gateway consente il port forwarding UPnP non controllato";
var healthcheck_418_G = "Il port forwarding è abilitato nel gateway tramite NAT-PMP";
var healthcheck_418_easy = "Dispositivi e programmi possono bypassare automaticamente il firewall per consentire le connessioni in entrata senza ulteriori controlli o autorizzazioni tramite NAT-PMP. Le applicazioni possono esporre i tuoi dispositivi senza controllo. Può essere utile per le chiamate Internet e per i giochi online, ma potenzialmente pericoloso.";
var healthcheck_418_fix = "Nel caso in cui desideri disabilitarlo, dovresti controllare il manuale del router / gateway o la pagina di amministrazione e scoprire se è possibile disabilitare la funzione NAT-PMP.";
var healthcheck_418_tech = "Il tuo gateway consente il port forwarding NAT-PMP non controllato";
var healthcheck_419_G = "Il port forwarding UPnP non è attivo nel gateway";
var healthcheck_419_easy = "Dispositivi e programmi non saranno in grado di aggirare automaticamente il firewall per consentire le connessioni in entrata senza ulteriori controlli o autorizzazioni tramite UPnP.";
var healthcheck_419_fix = "Nel caso in cui desideri abilitarlo, dovresti controllare il manuale del router / gateway o la pagina amministrativa e scoprire se è possibile abilitare la funzione UPnP.";
var healthcheck_419_tech = "Il tuo gateway non consente il port forwarding UPnP non controllato";
var healthcheck_41A_G = "Il port forwarding NAT-PMP non è attivo nel gateway";
var healthcheck_41A_easy = "Dispositivi e programmi non saranno in grado di aggirare automaticamente il firewall per consentire le connessioni in entrata senza alcun controllo o autorizzazione aggiuntivi tramite NAT-PMP.";
var healthcheck_41A_fix = "Nel caso in cui desideri abilitarlo, dovresti controllare il manuale del router / gateway o la pagina amministrativa e scoprire se è supportato dal tuo router in modo da poter abilitare manualmente la funzione NAT-PMP.";
var healthcheck_41A_tech = "Il tuo gateway non consente il port forwarding NAT-PMP non controllato";
var healthcheck_801_B = "Non connesso a Internet";
var healthcheck_801_G = "Connesso a Internet";
var healthcheck_801_easy = "Un controllo della connettività verso Internet per verificare se il tuo computer è connesso a Internet e quindi in grado di accedere a siti Web, posta elettronica, navigazione, ecc.";
var healthcheck_801_fix = "Se non sei connesso a Internet dovresti controllare lo stato del router e i cavi. In alcuni casi anche un ciclo di alimentazione del router può risolvere la situazione.";
var healthcheck_801_tech = "Il controllo verifica che il tuo PC possa raggiungere Internet: Fing si connette a diversi servizi web di controllo della connettività ad-hoc.";
var healthcheck_802_B = "La risoluzione del DNS non sta funzionando";
var healthcheck_802_G = "La risoluzione del DNS sta funzionando";
var healthcheck_802_easy = "DNS sta per Domain Name Resolution: in sostanza DNS è un database che collega nomi di dominio (nomi host), come <i> www.fing.com </i>, a indirizzi IP specifici che possono essere raggiunti su Internet o in reti locali. Se il DNS configurato non elabora e non risponde alle domande, non è possibile utilizzare Internet.";
var healthcheck_802_fix = "In una rete integra i server DNS vengono automaticamente inviati al PC dal router. Dovresti controllare la configurazione della tua rete locale per assicurarti che sia OK. Puoi anche controllare la configurazione del tuo router per assicurarti che abbia un DNS valido. A volte i server DNS locali o del provider non funzionano correttamente e puoi aggirarli configurando manualmente i server DNS standard comuni del PC locale come ad es. Google DNS: 8.8.8.8";
var healthcheck_802_tech = "Il controllo verifica che il server DNS configurato sia effettivamente raggiungibile e attivo, rispondendo alle query DNS.";
var healthcheck_803_B = "Non sei su una linea aziendale";
var healthcheck_803_G = "Sei su una linea aziendale";
var healthcheck_803_easy = "Internet aziendale ha più caratteristiche e vantaggi rispetto al residenziale e vale il costo più elevato. L'Internet residenziale ha spesso velocità di caricamento limitate e viene fornito solo con contratti di servizio di massimo impegno, mentre Internet aziendale richiede velocità di caricamento più elevate per eseguire le operazioni. Inoltre, gli ISP forniscono servizi e tempi di attività garantiti per Internet aziendale.";
var healthcheck_803_tech = "Il controllo informativo ti dice se la tua connessione è una linea Internet aziendale.";
var healthcheck_804_B = "Non è possibile raggiungere Google web";
var healthcheck_804_G = "È possibile raggiungere Google web";
var healthcheck_804_easy = "Google ti consente di cercare informazioni in tutto il mondo, comprese pagine web, immagini, video e altro ancora. Google fornisce molti servizi oltre al motore di ricerca: e-mail, calendario, sistema operativo per smartphone (Android), assistente intelligente e molto altro.";
var healthcheck_804_tech = "Il controllo verifica che www.google.com sia navigabile.";
var healthcheck_805_B = "Non è possibile raggiungere Amazon";
var healthcheck_805_G = "È possibile raggiungere Amazon";
var healthcheck_805_easy = "Il sito web di Amazon è un negozio online di prodotti di tutti i tipi. Amazon fornisce anche servizi Internet noti come AWS, Amazon Web Services, utilizzati da molte aziende in tutto il mondo per creare servizi cloud in un ambiente virtualizzato.";
var healthcheck_805_tech = "Il controllo verifica che www.amazon.com sia navigabile.";
var healthcheck_806_B = "Non è possibile raggiungere Netflix";
var healthcheck_806_G = "È possibile raggiungere Netflix";
var healthcheck_806_easy = "Netflix è un servizio di streaming video online che consente agli abbonati paganti di guardare servizi TV, film, documentari e molto altro.";
var healthcheck_806_tech = "Il controllo verifica che www.netflix.com sia navigabile.";
var healthcheck_807_B = "Non è possibile raggiungere Facebook";
var healthcheck_807_G = "È possibile raggiungere Facebook";
var healthcheck_807_easy = "Facebook è un popolare sito di social networking gratuito che consente agli utenti registrati di creare profili, caricare foto e video, inviare messaggi e tenersi in contatto.";
var healthcheck_807_tech = "Il controllo verifica che www.facebook.com sia navigabile.";
var healthcheck_808_B = "WhatsApp non è disponibile";
var healthcheck_808_G = "WhatsApp è disponibile";
var healthcheck_808_easy = "WhatsApp è il nome di un'app di messaggistica mobile per Android, iPhone, Windows Phone o per Mac o PC Windows. WhatsApp consente agli utenti di effettuare chiamate vocali gratuite, videochiamate faccia a faccia o messaggi di testo.";
var healthcheck_808_tech = "Il controllo verifica che web.whatsapp.com sia navigabile.";
var healthcheck_809_G = "Internet Provider è rimasto stabile negli ultimi 7 giorni";
var healthcheck_809_easy = "Il controllo ha verificato con Fing Internet Outage Detector che il tuo ISP non ha avuto interruzioni diffuse negli ultimi 7 giorni. Fing rilevamento disservizi è un servizio gratuito che ti fornisce la consapevolezza della tua qualità di connettività in tempo reale, in grado di rilevare e segnalare automaticamente interruzioni diffuse degli Internet Service Provider, in tutto il mondo.";
var healthcheck_809_tech = "Il controllo ha verificato che il tuo ISP è stato stabile negli ultimi 7 giorni.";
var healthcheck_80A_G = "Internet Provider non è stato impeccabile negli ultimi 7 giorni";
var healthcheck_80A_easy = "Il controllo ha verificato con Fing Internet Outage Detector che il tuo ISP non è stato impeccabile nell'ultima settimana. Fing rilevamento disservizi è un servizio gratuito che ti fornisce la consapevolezza della tua qualità di connettività in tempo reale, in grado di rilevare e segnalare automaticamente interruzioni diffuse degli Internet Service Provider, in tutto il mondo.";
var healthcheck_80A_tech = "Il controllo ti avverte che il tuo ISP ha avuto interruzioni nell'ultima settimana.";
var healthcheck_80B_G = "Connessione VPN / Internet con tunnel";
var healthcheck_80B_easy = "Una VPN, o rete privata virtuale, ti consente di creare una connessione sicura a un'altra rete su Internet. Le VPN possono essere utilizzate per accedere a siti Web con restrizioni regionali, proteggere la tua attività di navigazione da occhi indiscreti sul Wi-Fi pubblico e altro ancora.";
var healthcheck_80B_tech = "Il controllo informativo rileva se la tua connessione è sottoposta a tunneling, come ad es. con una VPN.";
var healthcheck_80C_B = "Microsoft Outlook Office 365 non è disponibile";
var healthcheck_80C_G = "Microsoft Outlook Office 365 è disponibile";
var healthcheck_80C_easy = "Microsoft Outlook è un gestore di informazioni personali di Microsoft, disponibile come parte della suite Microsoft Office. Principalmente un'applicazione di posta elettronica, include anche un calendario, task manager, contact manager, note, diario e navigazione web.";
var healthcheck_80C_tech = "Il controllo verifica che outlook.office.com sia raggiungibile.";
var healthcheck_80D_G = "Connessione a Internet tramite Hotspot";
var healthcheck_80D_easy = "I moderni smartphone e dispositivi mobili consentono di condividere la connessione Internet configurando un hotspot mobile: una rete Wi-Fi esposta dallo smartphone e dove puoi connettere i tuoi dispositivi come un laptop per raggiungere Internet.";
var healthcheck_80D_tech = "Il controllo delle informazioni rileva se la tua connessione Internet è tramite Hotspot / tethering.";
var healthcheck_80E_G = "Il Gateway è direttamente connesso a Internet pubblico";
var healthcheck_80E_easy = "Il tuo gateway ha un indirizzo Internet pubblico e può essere rilevato da chiunque su Internet";
var healthcheck_80E_tech = "Il controllo informativo rileva se il gateway è connesso direttamente a Internet pubblico.";
var healthcheck_80F_G = "Il Gateway è connesso a una rete privata";
var healthcheck_80F_easy = "L'indirizzo IP esterno del tuo gateway è privato. Il router / gateway non è direttamente raggiungibile dalla rete Internet pubblica.";
var healthcheck_80F_tech = "Il controllo delle informazioni rileva se il gateway è connesso a una rete privata.";
var healthcheck_810_B = "I target personalizzati non sono raggiungibili";
var healthcheck_810_G = "I target personalizzati sono raggiungibili";
var healthcheck_810_tech = "Il controllo verifica che i tuoi target personalizzati siano raggiungibili e navigabili.";
var healthcheck_card_advice_link = "Ricevi consigli ora";
var healthcheck_card_advice_subtitle = "Per risolvere i problemi di connettività, condividi i risultati della scansione con gli amici o con la comunità Fing. Se la tua connessione Wifi non funziona, puoi comunque inviare i risultati della scansione utilizzando il tuo smartphone.";
var healthcheck_card_advice_title = "Hai bisogno di un consiglio?";
var healthcheck_card_connectivity_subtitle = "La rete potrebbe riscontrare problemi con l'accesso di nuovi dispositivi. Una soluzione tipica è spegnere e riaccendere il router.";
var healthcheck_card_connectivity_title = "Connettività di altri dispositivi";
var healthcheck_card_publicwifi_subtitle = "Non sei in grado di accedere a Internet e la causa più probabile è che stai entrando in una rete Wi-Fi pubblica che richiede l'accesso.";
var healthcheck_card_publicwifi_title = "Accesso a una rete Wi-Fi pubblica?";
var healthcheck_generic_code = "Codice {code}: ";
var healthcheck_healthsummary_fail_limitedconnectivity_subtitle = "Il tuo device è connesso alla rete, ma la rete ha connettività limitata. Non puoi navigare in Internet, controlla cortesemente il tuo router.";
var healthcheck_healthsummary_fail_manyissue_subtitle = "Hai una serie di problemi da risolvere.";
var healthcheck_healthsummary_fail_networkissue_subtitle = "Il tuo dispositivo è connesso alla rete e puoi accedere a Internet, ma la rete presenta problemi.";
var healthcheck_healthsummary_fail_noconnection_subtitle = "Il tuo dispositivo non è connesso a una rete. Assicurati che il tuo Wi-Fi sia abilitato o controlla i cavi se stai usando Ethernet.";
var healthcheck_healthsummary_fail_title = "Hai problemi di connettività";
var healthcheck_healthsummary_link_report = "Vedi il report";
var healthcheck_healthsummary_refresh_button_text_one = "Gli aggiornamenti sono automatici, ma puoi anche";
var healthcheck_healthsummary_refresh_button_text_two = "per forzare un nuovo controllo adesso";
var healthcheck_healthsummary_refresh_running = "Attendi mentre Fing verifica la configurazione della rete";
var healthcheck_healthsummary_running_subtitle = "Fing controlla costantemente la configurazione della rete e verifica la connessione a Internet.";
var healthcheck_healthsummary_running_title = "Controllo della connettività in corso";
var healthcheck_healthsummary_success_subtitle = "Fing controlla costantemente la configurazione della rete e verifica la connessione a Internet.";
var healthcheck_healthsummary_success_title = "Sei connesso a Internet";
var healthcheck_healthsummary_warning_internet_subtitle = "Raggiungi Internet ma dovresti verificare qualche possibile problema. ";
var healthcheck_healthsummary_warning_local_subtitle = "Sono presenti avvisi nella configurazione del dispositivo.";
var healthcheck_healthsummary_warning_network_subtitle = "La tua rete è funzionante ma qualcosa ha bisogno d'attenzione";
var healthcheck_healthsummary_warning_title = "Hai degli avvisi";
var healthcheck_help_dialog_action = "Fatti consigliare";
var healthcheck_help_dialog_failurebadge = "In caso di fallimento";
var healthcheck_help_dialog_successbadge = "In caso di successo";
var healthcheck_help_dialog_tab_howfix = "Come posso sistemarlo";
var healthcheck_help_dialog_tab_means = "Cosa significa per me";
var healthcheck_help_dialog_tab_techdef = "Definizione tecnica";
var healthcheck_internet = "Controllo Internet: eseguito raggiungendo Internet dalla rete corrente";
var healthcheck_local = "Controllo locale: eseguito localmente sul tuo computer";
var healthcheck_network = "Controllo della rete: le informazioni vengono raccolte dalla rete corrente";
var healthcheck_report_askhelp_description = "Fing può aiutarti a risolvere i problemi con la tua connessione o la tua tecnologia domestica scattando un'istantanea della tua configurazione di rete che puoi condividere con il tuo dipartimento IT.";
var healthcheck_report_askhelp_modal_share_action = "Inizia a condividere";
var healthcheck_report_askhelp_privacy = "Puoi sempre controllare quali dettagli condividere sul tuo ambiente domestico.";
var healthcheck_report_askhelp_processing_title = "Stiamo elaborando la tua richiesta";
var healthcheck_report_askhelp_title = "Condividi questo resoconto con il tuo team di supporto";
var healthcheck_report_checkinfo_modal_checkcode_howcanifix = "Come posso risolvere questo problema";
var healthcheck_report_checkinfo_modal_checkcode_title = "Informazioni riguardo l'health check: {code}";
var healthcheck_report_checkinfo_modal_checkcode_whatitmeans = "Cosa significa per me";
var healthcheck_report_checkinfo_modal_footer_link = "Chiedi consiglio adesso";
var healthcheck_report_checkinfo_modal_footer_title = "Non sei riuscito a risolvere i tuoi problemi?";
var healthcheck_report_checkinfo_modal_title = "Controllo informativo";
var healthcheck_report_context_picker = "Seleziona il profilo di rete di seguito per abilitare controlli specifici";
var healthcheck_report_customtarget_modal_area_label = "Target personalizzati";
var healthcheck_report_customtarget_modal_area_small = "Una riga per destinazione, sono accettate destinazioni https e http; porta personalizzata e URL accettati.";
var healthcheck_report_customtarget_modal_failure_title = "Caso di fallimento: {fail}";
var healthcheck_report_customtarget_modal_nopremium_title = "Avanzato: disponibile per gli abbonati Fing";
var healthcheck_report_customtarget_modal_premium_title = "Avanzato: incluso nel tuo abbonamento";
var healthcheck_report_customtarget_modal_save_action = "Salva target";
var healthcheck_report_customtarget_modal_tech_description = "Il controllo verifica che i tuoi target personalizzati siano raggiungibili e navigabili. Sono supportati target https e http, anche con porta e URL specifici. Il controllo viene superato se il nome host viene risolto, è possibile stabilire la connessione e lo stato HTTP è 200, 301 o 302.";
var healthcheck_report_customtarget_modal_tech_title = "Definizione tecnica";
var healthcheck_report_customtarget_modal_title = "Informazioni riguardo health check: {code}";
var healthcheck_report_emptystate = "Tutto ok, no {filter} here!";
var healthcheck_report_emptystate_component_message = "Usa i pulsanti in alto per selezionare un gruppo diverso.";
var healthcheck_report_emptystate_premium = "Attendi mentre esegui tutti i controlli";
var healthcheck_report_geoloc_info = "Indirizzo Internet situato in {name} {tz}";
var healthcheck_report_geoloc_location = "Località";
var healthcheck_report_geoloc_timezone = ", con time zone ";
var healthcheck_report_isp_info_descr = "ISP è {name} in {loc}, il tuo indirizzo pubblico è {address}";
var healthcheck_report_isp_info_message = "Nessuna statistica dettagliata disponibile per questo ISP";
var healthcheck_report_isp_info_stats_message_download = "La velocità media dell'ISP nella località è di download {number} Mbps,";
var healthcheck_report_isp_info_stats_message_share = " quota di mercato del {number}%";
var healthcheck_report_isp_info_stats_message_upload = " upload {number} Mbps, ";
var healthcheck_report_mute_action = "Silenzia";
var healthcheck_report_mute_dialog_mutecheck = "Controllo check mutati";
var healthcheck_report_mute_dialog_mutecheck_description = "Gli avvisi di questo controllo sulla rete corrente verranno ignorati e segnalati solo a livello di informazioni.";
var healthcheck_report_mute_dialog_unmutecheck = "Riattiva il controllo";
var healthcheck_report_mute_dialog_unmutecheck_description = "Gli avvisi verranno ripristinati per questo controllo sulla rete corrente.";
var healthcheck_report_nettype_eth = "Rete cablata {address}";
var healthcheck_report_nettype_ethwifi = "Rete cablata e wireless {address} con {aps} BSSID: {bssid}";
var healthcheck_report_nettype_wireless = "Rete wireless {address} con {aps} BSSID: {bssid}";
var healthcheck_report_network_gateway = "Gateway di rete";
var healthcheck_report_networkinfo = "Rete {context}";
var healthcheck_report_nicinfo_connection_info = "Indirizzo IP {address}, velocità di collegamento {ethRate}";
var healthcheck_report_nicinfo_connection_info_nostation = "Indirizzo IP {address}, canale #{channel} alla velocità {speed}";
var healthcheck_report_nicinfo_connection_more_info = "Indirizzo IP {address}, stazione Wi-Fi {apbssid} sul canale #{channel} alla velocità {speed}";
var healthcheck_report_qrcode_description = "Basta scansionare questo codice QR dal tuo smartphone. La nostra comunità di esperti tecnici riceverà la tua richiesta per aiutarti con i tuoi problemi di connettività.";
var healthcheck_report_qrcode_title = "Senza internet?";
var healthcheck_report_qrcodemodal_title = "Invia il tuo resoconto da uno smartphone";
var healthcheck_report_radio_button_all = "Tutti";
var healthcheck_report_radio_button_fail = "Falliti";
var healthcheck_report_radio_button_info = "Info";
var healthcheck_report_radio_button_premium = "Feature avanzate";
var healthcheck_report_radio_button_warn = "Avvisi";
var healthcheck_report_table_header_state = "Stato";
var healthcheck_report_table_header_what = "Cosa controlla Fing?";
var healthcheck_report_table_header_where = "Dove";
var healthcheck_report_ticket = "Il tuo ticket";
var healthcheck_report_unmute_action = "Riattiva";
var healthcheck_status_check_running_subtitle = "{completed} controlli completati, {skipped} rimanenti.";
var healthcheck_status_check_running_title = "Analisi della configurazione in corso";
var healthcheck_status_code_subtitle = "Codice health check: {code}.";
var healthcheck_status_ok_nopremium_subtitle = "{completed} controlli completati, {premium} controlli avanzati saltati.";
var healthcheck_status_ok_subtitle = "{completed} controlli completati.";
var healthcheck_status_ok_title = "Tutto ok nella tua rete";
var healthcheck_status_problems_captive_subtitle = "Non sei in grado di accedere a Internet e la causa più probabile è che stai entrando in una rete Wi-Fi pubblica che richiede l'accesso.";
var healthcheck_status_problems_generic_subtitle = "Hai una serie di problemi da risolvere.";
var healthcheck_status_problems_internet_subtitle = "Il tuo dispositivo è connesso alla rete, ma la rete ha una connettività limitata. Non riesci a raggiungere Internet, controlla il tuo router.";
var healthcheck_status_problems_local_subtitle = "Il tuo dispositivo non è connesso a una rete. Assicurati che il tuo Wi-Fi sia abilitato o controlla i cavi se stai usando Ethernet.";
var healthcheck_status_problems_net_subtitle = "Il tuo dispositivo è connesso alla rete e puoi accedere a Internet, ma la rete presenta problemi.";
var healthcheck_status_problems_title = "Hai problemi di connettività";
var healthcheck_status_warn_dhcp_subtitle = "La tua rete potrebbe avere problemi con l'accesso a nuovi dispositivi. Una soluzione tipica è spegnere e riaccendere il router.";
var healthcheck_status_warn_generic_subtitle = "Hai una serie di problemi da verificare.";
var healthcheck_status_warn_internet_subtitle = "Raggiungi Internet, ma dovresti verificare alcuni potenziali problemi. ";
var healthcheck_status_warn_local_subtitle = "Hai degli avvisi nella configurazione del tuo dispositivo. ";
var healthcheck_status_warn_net_subtitle = "La tua rete funziona, ma qualcosa richiede attenzione. ";
var healthcheck_status_warn_title = "Hai degli avvisi";
var healthcheck_statusbadge_fail = "Fallito";
var healthcheck_statusbadge_info = "Info";
var healthcheck_statusbadge_skipped = "Saltato";
var healthcheck_statusbadge_success = "Superato";
var healthcheck_statusbadge_warn = "Avviso";
var healthcheck_v_gateway_I = "Informazioni sul router o sul gateway";
var healthcheck_v_gateway_easy = "Router e gateway sono dispositivi fisici che uniscono più reti cablate o wireless insieme per consentire l'intercomunicazione: anche in una piccola rete domestica è necessario almeno un router per connettersi a Internet. Fing ti fornisce dettagli rilevanti sul tuo router o gateway, utili per conoscerne il tipo, la marca, il modello e la versione specifici.";
var healthcheck_v_gateway_tech = "Il controllo informativo fornisce dettagli sul gateway di rete.";
var healthcheck_v_geoloc_I = "Informazioni di geolocalizzazione sul tuo indirizzo Internet";
var healthcheck_v_geoloc_easy = "Una forma di geolocalizzazione: GeoIP si riferisce al metodo di localizzazione della posizione geografica di un dispositivo identificando quell'indirizzo Internet ed eseguendo una ricerca remota nel database nei nostri server per individuare il paese, la regione, la città e il provider di servizi Internet.";
var healthcheck_v_geoloc_tech = "Il tuo indirizzo Internet viene cercato in un database di indirizzi Internet per determinarne la posizione geografica e il provider di servizi Internet.";
var healthcheck_v_isp_I = "Informazioni riguardo l'Internet Service Provider (ISP)";
var healthcheck_v_isp_easy = "ISP (Internet Service Provider) è una società che fornisce a privati ​​e altre società l'accesso a Internet e ad altri servizi correlati come la creazione di siti Web e l'hosting virtuale. Un ISP dispone delle apparecchiature e dell'accesso alla linea di telecomunicazione necessari per avere un punto di presenza su Internet per l'area geografica servita. Gli ISP più grandi hanno le proprie linee affittate ad alta velocità in modo che siano meno dipendenti dai fornitori di telecomunicazioni e possano fornire un servizio migliore ai propri clienti. <br/> Fing fornisce statistiche sull'ISP nella posizione corrente, come quota di mercato, download medio e velocità di caricamento.";
var healthcheck_v_isp_tech = "Le informazioni sull'ISP corrente vengono raccolte da una ricerca GeoIP del tuo indirizzo Internet. Fing Internet fornisce statistiche e approfondimenti sull'ISP nella posizione corrente.";
var healthcheck_v_network_I = "Informazioni sulla rete connessa ";
var healthcheck_v_network_easy = "Vengono raccolte e visualizzate informazioni dettagliate sulla rete attualmente connessa. L'intervallo di indirizzi di rete mostra l'intervallo di indirizzi disponibile che i dispositivi possono utilizzare per accedere alla rete e comunicare tra loro. Il tipo di rete indica se la rete è cablata (ethernet) o wireless o entrambe. <br/> <b> Ethernet: </b> un protocollo di comunicazione dati standard che consente a computer e periferiche, come i laptop, di interfacciarsi con uno un altro e attraverso le reti per lo scambio di informazioni. <br/> <b> Velocità di collegamento: </b> è la velocità nominale della connessione, misurata in Mbps (Megabit al secondo). Un valore più alto è più veloce, migliore. Nelle moderne reti cablate dovresti mirare a 1 Gbps (pari a 1000 Mbps), mentre buone connessioni wireless possono raggiungere fino a 200-300 Mbps. <br/> <b> Punto di accesso wireless (AP): </b> Una stazione base wireless che collega una rete cablata (come la connessione Ethernet cablata su un modem a banda larga) alla rete wireless. L'AP contiene un ricetrasmettitore radio (che trasmette e riceve segnali radio su canali specifici). La maggior parte degli AP contiene anche un componente router, che indirizza i dati dei dispositivi in ​​rete da e verso Internet. <br/> <b> Banda / spettro wireless: </b> i punti di accesso wireless utilizzano una delle due bande di frequenza Wi-Fi per il segnale: 2,4 GHz o 5 GHz. Alcuni sono router dual-band e router mesh sono in grado di selezionare e mixare automaticamente canali e bande per offrirti le migliori prestazioni. <br/> <b> Canale wireless: </b> all'interno delle bande di frequenza wireless ci sono bande più piccole che sono indicati come canali Wi-Fi. Un canale Wi-Fi è il mezzo attraverso il quale i nostri dispositivi wireless possono inviare e ricevere dati. <br/> <b> Basic Service Set Identifier (BSSID): </b> un identificatore univoco per ogni punto di accesso wireless fisico.";
var healthcheck_v_network_tech = "Il controllo informativo fornisce dettagli sulla tua rete attiva: il contesto che hai assegnato, il suo intervallo di indirizzi IP, il tipo (cablato e / o wireless), l'elenco dei BSSID (se wireless).";
var healthcheck_v_nicinfo_I = "La tua connessione alla rete";
var healthcheck_v_nicinfo_easy = "Vengono raccolte informazioni dettagliate sulla connessione corrente alla rete. <br/> <b> Ethernet: </b> un protocollo di comunicazione dati standard che consente a computer e periferiche di computer, come i laptop, di interfacciarsi tra loro e attraverso le reti per lo scambio di informazioni. <br/> <b> Velocità di collegamento: </b> è la velocità nominale della connessione, misurata in Mbps (Megabit al secondo). Un valore più alto è più veloce, migliore. Nelle moderne reti cablate dovresti mirare a 1 Gbps (pari a 1000 Mbps), mentre buone connessioni wireless possono raggiungere fino a 200-300 Mbps. <br/> <b> Punto di accesso wireless (AP): </b> Una stazione base wireless che collega una rete cablata (come la connessione Ethernet cablata su un modem a banda larga) alla rete wireless. L'AP contiene un ricetrasmettitore radio (che trasmette e riceve segnali radio su canali specifici). La maggior parte degli AP contiene anche un componente router, che indirizza i dati dei dispositivi in ​​rete da e verso Internet. <br/> <b> Banda / spettro wireless: </b> i punti di accesso wireless utilizzano una delle due bande di frequenza Wi-Fi per il segnale: 2,4 GHz o 5 GHz. Alcuni sono router dual-band e router mesh sono in grado di selezionare e mixare automaticamente canali e bande per offrirti le migliori prestazioni. <br/> <b> Canale wireless: </b> all'interno delle bande di frequenza wireless ci sono bande più piccole che sono indicati come canali Wi-Fi. Un canale Wi-Fi è il mezzo attraverso il quale i nostri dispositivi wireless possono inviare e ricevere dati. <br/> <b> Basic Service Set Identifier (BSSID): </b> un identificatore univoco per ogni punto di accesso wireless fisico.";
var healthcheck_v_nicinfo_tech = "Il controllo informativo fornisce dettagli sulla connessione attiva alla rete: indirizzo IP, velocità di collegamento nominale, tipo: ethernet o wireless; sulle connessioni Wi-Fi informazioni su nome punto di accesso, BSSID, spettro e canale corrente.";
var healthcheck_v_self_I = "Informazioni sul tuo dispositivo";
var healthcheck_v_self_easy = "Fing ti fornisce dettagli rilevanti sul tuo PC o laptop, utili per conoscere il suo tipo specifico, marca, modello e dettagli del sistema operativo. Viene fornito anche l'indirizzo MAC (ad esempio 11: 22: 33: 69: 22: 9F): l'indirizzo MAC è un indirizzo univoco globale di un dispositivo, assegnato dal produttore del dispositivo.";
var healthcheck_v_self_tech = "Il controllo informativo raccoglie e mostra le informazioni sul PC: MAC, nome, marca, modello e dettagli del sistema operativo.";
var home_health_check_discovery_running = "Attendi mentre Fing verifica la configurazione della rete";
var home_network_subtitle_eth = "{rate} Ethernet";
var home_network_subtitle_eth_usb = "{rate} Ethernet via USB";
var internet_about = "Informazioni sul tuo provider Internet";
var internet_average_download = "Download medio: {value} Mbps";
var internet_average_title = "Rendimento medio {amount, plural, =1 {nell'ultimo giorno} other {negli ultimi # giorni}}";
var internet_average_upload = "Caricamento medio: {value} Mbps";
var internet_based_on = "In base a velocità, recensioni degli utenti e interruzioni diffuse";
var internet_based_on_ratings = "{num} valutazioni";
var internet_based_on_samples = "{num} campioni";
var internet_compare_providers = "Compara i providers";
var internet_data_trend = "Dati di tendenza";
var internet_distribution = "Distribuzione";
var internet_downtime = "Tempo di inattività";
var internet_last_speed_test = "Ultimo test di velocità";
var internet_latency = "Latenza";
var internet_location_not_available = "Dati sulla posizione non disponibili";
var internet_location_server_from = "Da {serverCity}, {serverCountry}";
var internet_location_server_to = "A {serverCity}, {serverCountry}";
var internet_network = "La tua rete";
var internet_no_data = "Dati insufficienti";
var internet_no_data_last_speed_test = "Nessun dato disponibile per l'ultimo test di velocità eseguito";
var internet_no_data_period_example = "Guarda un esempio di grafico-dati";
var internet_no_data_period_timeline = "Nessun dato disponibile per questo intervallo di tempo";
var internet_no_data_trend = "Dati di tendenza non disponibili";
var internet_outages = "Interruzioni diffuse";
var internet_outages_summary = "{num} interruzione";
var internet_performance_score = "Punteggio prestazioni";
var internet_provider = "Provider Internet Wi-Fi";
var internet_ratings = "Valutazioni";
var internet_report = "Rapporto";
var internet_samples = "Campioni";
var internet_schedule = "Programma";
var internet_schedule_edit = "Modifica pianificazione";
var internet_score = "Il tuo punteggio Internet";
var internet_score_info = "Fing verifica la tua velocità media di upload e download, confrontando i risultati con altri Internet Provider nella tua area per valutare la performance della tua connessione ad internet.";
var internet_scoreboard = "Classifica";
var internet_send_report_body = "Riceverai un'email con il tuo resoconto Internet mensile generato da Fing.";
var internet_send_report_empty_caption = "Email inviata";
var internet_send_report_empty_subtitle = "Fing sta generando il tuo resoconto Internet, sarà nella tua casella di posta in pochi minuti.";
var internet_send_report_empty_title = "Riceverai il tuo resoconto a breve";
var internet_send_report_title = "Invia resoconto mensile";
var internet_sentiment = "Sentimento";
var internet_speed_average = "{avgDownload} Mbps / {avgUpload} Mbps";
var internet_speed_performance = "Prestazioni di velocità";
var internet_test_samples = "Campioni di prova";
var internet_test_server_location = "Il tuo server di prova si trova in {location}";
var internet_test_speed = "Test della velocità";
var internet_timeline = "Cronologia";
var internet_total_rating = "Valutazioni totali";
var internet_trend_in = "tendenza {isp} in {city}";
var internet_user_rating = "Valutazioni degli utenti";
var internet_view_details = "Visualizza dettagli";
var internetinfo_your_isp_home = "Home";
var isp_home = "Home";
var isp_rank_summary_rankaverage = "In media in ";
var isp_rank_summary_rankaverage_location = "In media in {location}";
var isp_rank_summary_rankbottom = "Ultimi {rank}% in ";
var isp_rank_summary_rankbottom_location = "In basso {rank}% in {location}";
var isp_rank_summary_ranktop = "Top {rank}% in ";
var isp_rank_summary_ranktop_location = "Primo {rank}% in {location}";
var isp_summary_card_nointernet = "Internet assente";
var last_month = "Ultimo mese";
var maclookup_inforow_family = "Famiglia";
var maclookup_inforow_type = "Tipo";
var model_not_recognized = "Modello non riconosciuto";
var netstats_infoprofile_other = "Altro";
var netstats_type_personal = "Personali";
var notification_service_healthcheck_connectivity_problems_title = "Hai problemi di connettività";
var notifications_page_manage_body = "Ricevi notifiche quando un device già conosciuto va online e offline";
var notifications_page_manage_extra = "{alertedDevices} dispositivi con notifiche attive";
var notifications_page_manage_title = "Gestisci notifiche dei dispositivi";
var notifications_page_notify_new = "Notifica nuovi dispositivi";
var notifications_page_title = "Notifiche";
var notifications_set_title_recent = "Recenti";
var num_mbps = "{num} Mbps";
var num_ms = "{num} ms";
var outage_today = "Oggi";
var placeholder_email = "Inserisci un indirizzo di posta valido";
var portscan_port_action = "Apri";
var portscan_port_description = "Descrizione";
var portscan_port_name = "Nome";
var portscan_scanmode_all = "Tutte";
var premium_button = "Premium";
var premium_feature = "La visualizzazione di {feature} è una funzionalità Premium";
var premium_unlock_all = "Abilita tutti con Premium";
var presence_add_dialog_title = "Aggiungi utente";
var presence_arrived_at_time = "Arrivato alle {time}";
var presence_arrived_on_datetime = "Arrivato il {time}";
var presence_autofill_already_in_net = "Già in rete";
var presence_autofill_dialog_more_users = "+{amount} altri utenti";
var presence_autofill_dialog_notfound_message = "Non riesci a trovare l'utente che ti stavi aspettando? Puoi sempre aggiungere e modificare gli utenti e i loro dispositivi personali in un secondo momento.";
var presence_autofill_dialog_title = "Utenti riconosciuti";
var presence_autofill_empty_caption = "Nessun utente";
var presence_autofill_empty_subtitle = "Riprova quando nuovi dispositivi si collegano alla rete o aggiungi nuovi utenti manualmente.";
var presence_autofill_empty_title = "Nessun utente da aggiungere in questo momento";
var presence_autofill_table_headerdevice = "Dispositivo Personale";
var presence_autofill_table_nameplaceholder = "Inserisci il nome dell'utente";
var presence_badge_other = "Altro dispositivo";
var presence_badge_tracking = "Dispositivo di presenza";
var presence_contact_type = "Tipo di contatto";
var presence_delete_dialog_body = "Vuoi cancellare l'utente {contactName} dalla lista?<br />Le notifiche non saranno più inviate, ed il tracciamento sarà sospeso.";
var presence_delete_dialog_title = "Cancella utente";
var presence_devices_dialog_title = "Seleziona i device dell'utente";
var presence_display_name = "Nome da mostrare";
var presence_edit_already_assigned_devices = "Assegnati ad altri utenti";
var presence_edit_at_least_one_device = "Prego selezionare almeno un dispositivo";
var presence_edit_dialog_title = "Modifica utente";
var presence_edit_multi_device = "Fing utilizza un unico dispositivo per rilevare quando un utente è presente nella rete. Se selezioni più dispositivi, fai clic sul badge a destra per selezionare il dispositivo di presenza.";
var presence_error_incomplete = "Prego riempire tutti i campi obbligatori";
var presence_gender = "Genere";
var presence_gender_explanation = "Migliora la scelta dei pronomi giusti nelle notifiche";
var presence_left_at_time = "Uscito alle {time}";
var presence_left_on_datetime = "Uscito il {time}";
var presence_profile_photo = "Foto profilo";
var presence_send_report_body = "Fing genererà un report mensile sulla presenza in rete e te lo invierà via email.";
var presence_send_report_empty_caption = "Email inviata";
var presence_send_report_empty_subtitle = "Fing sta preparando il riassunto di presenza. Dovrebbe essere disponibile nella tua casella di posta in pochi minuti.";
var presence_send_report_empty_title = "Ti stiamo inviando il resoconto";
var presence_send_report_title = "Invia resoconto mensile";
var presence_upload_profile_photo = "Carica foto";
var rating_comments = "Commenti";
var rating_date = "Recensito il {date}";
var rating_dislike_because = "Non mi piace perchè...";
var rating_edit = "Modifica recensione";
var rating_hate_because = "Lo odio perchè...";
var rating_like_because = "Mi piace perchè...";
var rating_love_because = "Lo amo perchè...";
var rating_ok_because = "Mh. E' Ok perchè...";
var rating_title = "Recensisci {ispName}";
var recognize_missing_modal_footer_nochecked = "Controlla";
var recognize_missing_modal_form_typeheader = "Tipo";
var recognize_userinput_form_os = "Sistema Operativo";
var recognize_userinput_form_typeheader = "Tipo";
var recognize_userinput_osselection_form_description = "Sistema Operativo";
var relative_current_day = "Questo giorno";
var relative_current_month = "Questo mese";
var relative_current_week = "Questa settimana";
var relative_current_year = "Questo anno";
var relative_day_long = "{amount, plural, =1 {# giorno fa} other {# giorno fa}}";
var relative_hour_long = "{amount, plural, =1 {# ora fa} other {# ore fa}}";
var relative_min_long = "{amount, plural, =1 {# min fa} other {# min fa}}";
var relative_minute_long = "{amount, plural, =1 {# minuto fa} other {# minuti fa}}";
var relative_month_long = "{amount, plural, =1 {# mese fa} other {# mesi fa}}";
var relative_now = "adesso";
var relative_older = "Precedenti";
var relative_today = "Oggi";
var relative_week_long = "{amount, plural, =1 {# settimana fa} other {# settimane fa}}";
var relative_year_long = "{amount, plural, =1 {# anno fa} other {# anni fa}}";
var relative_yesterday = "Ieri";
var routercheck_emptystate_subtitle = "Nessuna vulnerabilità rilevata con la scansione.";
var routercheck_emptystate_title = "Tutto ok, nessuna porta aperta trovata";
var routercheck_internet_address = "Indirizzo pubblico rilevato: {address}";
var routercheck_last_update = "Ultimo aggiornamento {date}";
var routercheck_never_subtitle = "Non disponiamo di dati sufficienti per questa sezione.";
var routercheck_never_title = "I controlli di vulnerabilità non sono ancora stati eseguiti su questa rete.";
var routercheck_openports_action = "Chiudi {ports} porte";
var routercheck_openports_title = "Porte aperte sul tuo router";
var routercheck_port_external = "Esterne";
var routercheck_port_internal = "Interne";
var routercheck_port_protocol = "Protocollo";
var routercheck_premium_subtitle = "Verifica e correggi le vulnerabilità nella configurazione del router che potrebbero causare l'accesso non autorizzato ai dispositivi connessi.";
var routercheck_premium_title = "Controllo della vulnerabilità del router non eseguito";
var routercheck_progress_caption = "Analisi";
var routercheck_progress_subtitle = "Attendi: stiamo controllando le porte aperte, i dettagli ed il manuale del router.";
var routercheck_progress_title = "Raccolta informazioni dal router in corso...";
var routercheck_protected = "Il router non supporta il port forwarding automatico";
var routercheck_protected_description = "Il port forwarding deve essere configurato manualmente";
var routercheck_publicip = "Collegato direttamente a Internet pubblico";
var routercheck_publicip_description = "Il tuo router ha un indirizzo Internet pubblico e può essere rilevato da chiunque su Internet";
var routercheck_toolresult_danger_subtitle = "Il controllo di sicurezza ha rilevato vulnerabilità nella configurazione di rete che potrebbero causare l'accesso non autorizzato ai dispositivi collegati.";
var routercheck_toolresult_danger_title = "Rilevata qualche vulnerabilità";
var routercheck_toolresult_success_subtitle = "Il controllo di sicurezza ha rilevato una configurazione di rete ottimale per la sicurezza dei dispositivi collegati.";
var routercheck_toolresult_success_title = "Nessuna vulnerabilità rilevata";
var routercheck_toolresult_sync_subtitle = "Potrebbe volerci un po'. La durata del test dipende dalle dimensioni della tua rete e dal numero di dispositivi collegati.";
var routercheck_toolresult_sync_title = "Controllo di sicurezza in corso...";
var routercheck_toolresult_warning_subtitle = "Il controllo di sicurezza ha rilevato potenziali vulnerabilità nella configurazione di rete che potrebbero causare l'accesso non autorizzato ai dispositivi collegati.";
var routercheck_toolresult_warning_title = "Rilevata vulnerabilità moderata";
var routercheck_unknown = "Tipo di accesso non rilevato";
var routercheck_unknown_description = "Senza gli indirizzi IP UPnP e NATPMP, non vi è alcuna indicazione di come l'indirizzo IP esterno e quello interno potrebbero corrispondere.";
var routercheck_unprotectedboth = "Il router consente UPnP e NAT-PMP non selezionati";
var routercheck_unprotectedboth_description = "Le applicazioni possono esporre i tuoi dispositivi senza controllo. Questo può essere utile per le chiamate Internet e per i giochi online, ma potenzialmente pericoloso";
var routercheck_unprotectednatpmp = "Il router consente il port forwarding NAT-PMP non controllato";
var routercheck_unprotectednatpmp_description = "Le applicazioni sulla rete possono esporre i tuoi dispositivi senza controllo";
var routercheck_unprotectedupnp = "Il router consente il port forwarding UPnP non controllato";
var routercheck_unprotectedupnp_description = "Le applicazioni possono esporre i tuoi dispositivi senza controllo. Questo può essere utile per le chiamate Internet e per i giochi online, ma potenzialmente pericoloso";
var routercheck_wan = "Connesso a una rete privata";
var routercheck_wan_description = "L'indirizzo IP esterno è privato. Il router non è direttamente raggiungibile dalla rete Internet pubblica";
var routercheck_webinterface_link = "Interfaccia Web";
var routercheck_your_router_brand = "Brand";
var routercheck_your_router_family = "Famiglia";
var routercheck_your_router_model = "Modello";
var routercheck_your_router_releasedate = "Prodotto";
var routercheck_your_router_title = "Informazioni sul router";
var routercheck_your_setup_title = "Informazioni sulla tua configurazione";
var schedule_hours = "Programma orario";
var schedule_max_run = "Puoi eseguire fino a {max} test al giorno";
var security_confirm_all_dialog_body = "Fing segnerà tutti i {amount} dispositivi come tuoi, per facilitare il riconoscimento di nuovi dispsitivi sconosciuti che potrebbero entrare nella tua rete in futuro.";
var security_confirm_all_dialog_title = "Confirma {amount} dispositivi";
var security_network_vulnerabilities = "Vulnerabilità della rete";
var security_score_access_point_subtitle_danger = "Il punto di accesso è una rete aperta. I dati che invii in modalità wireless possono essere visti da tutti.";
var security_score_access_point_subtitle_success = "Il punto di accesso utilizza un protocollo sicuro per inviare dati in modalità wireless.";
var security_score_access_point_subtitle_warning = "Il punto di accesso non garantisce una protezione completa dagli attacchi.";
var security_score_access_point_title_danger = "Il punto di accesso non è protetto";
var security_score_access_point_title_success = "Il punto di accesso è sicuro";
var security_score_access_point_title_warning = "Il punto di accesso ha una protezione insufficiente";
var security_score_alert_disabled_title = "Le notifiche sui nuovi dispositivi sono disabilitate";
var security_score_alert_enabled_title = "Le notifiche sui nuovi dispositivi sono abilitate";
var security_score_alert_subtitle = "Ricevi una notifica quando un nuovo dispositivo si collega alla tua rete.";
var security_score_alert_switch = "Abilita notifiche";
var security_score_all_confirmed_devices_title = "Tutti i dispositivi sono confermati";
var security_score_automated_disabled_title = "Il controllo automatico della vulnerabilità del router è disabilitato";
var security_score_automated_enabled_title = "Vulnerabilità del router automatizzato";
var security_score_automated_subtitle = "Rileva automaticamente le vulnerabilità per monitorare potenziali debolezze di sicurezza che potrebbero portare ad accessi non autorizzati.";
var security_score_confirm_devices = "Conferma dispositivi";
var security_score_score = "Punteggio di sicurezza della rete";
var security_score_secure = "Sicura";
var security_score_state_change_disabled_title = "Le notifiche sull'attività online sono disabilitate";
var security_score_state_change_enabled_title = "Notifiche di un singolo dispositivo";
var security_score_state_change_subtitle = "Ricevi una notifica ogni volta che un dispositivo noto va offline e online.";
var security_score_unconfirmed_devices_subtitle = "Conferma i tuoi dispositivi per individuare facilmente chi sta usando la tua rete.";
var security_score_unconfirmed_devices_title = "{num} dispositivo non confermato";
var security_score_unconfirmed_devices_titles = "{num} dispositivi non confermati";
var security_score_unsecure = "Non sicura";
var security_score_upgrade_to_unlock = "Fai l'upgrade per sbloccarlo";
var sidebar_community = "Community";
var sidebar_help = "Aiuto";
var sidebar_home = "Panoramica";
var sidebar_internet = "Internet";
var sidebar_notifications = "Notifiche";
var sidebar_outages = "Disservizi";
var sidebar_tools = "Strumenti";
var speedtest_achievements = "Cosa puoi ottenere";
var speedtest_city = "Città";
var speedtest_compare_location = "{isp} in {location}";
var speedtest_compare_performance = "Valuta le prestazioni di velocità";
var speedtest_comparison_not_available = "Non ci sono abbastanza data su {isp} per valutare le prestazioni";
var speedtest_contact_support = "Contatta il supporto";
var speedtest_country = "Paese";
var speedtest_distribution_not_available = "Non ci sono abbastanza data su {isp} per mostrare le recensioni";
var speedtest_download = "Download";
var speedtest_download_info = "Velocità media per scaricare dati da un server di test. Valori più alti indicano velocità maggiore.";
var speedtest_failed = "Il tuo test di velocità è fallito. Potrebbe esserci un problema di connettività.";
var speedtest_header_connection = "Connessione";
var speedtest_header_location = "Località";
var speedtest_header_provider = "Provider";
var speedtest_isp_info_location = "{isp} in {city}, {country}";
var speedtest_mlab_body = "Questo test fornisce una misura realistica della velocità raggiungibile quando ci si collega a servizi Internet autentici, non una velocità formale sostenibile solo nell' ultimo miglio del proprio provider Internet.";
var speedtest_mlab_title = "Perché i nostri risultati sono diversi?";
var speedtest_rate = "Valuta il tuo provider";
var speedtest_reviews = "{total} Recensioni";
var speedtest_score_category_4k = "4K";
var speedtest_score_category_AudioStream = "Audio Stream";
var speedtest_score_category_BasicStream = "Basic Streaming";
var speedtest_score_category_HDStream = "HD Streaming";
var speedtest_score_category_HDWebcam = "HD Webcam";
var speedtest_score_category_L_filetrans = "Trasferimento grandi file";
var speedtest_score_category_Messaging = "Messaggistica";
var speedtest_score_category_SDStream = "SD Streaming";
var speedtest_score_category_SDWebcam = "SD Webcam";
var speedtest_score_category_S_filetrans = "Trasferimento piccoli file";
var speedtest_score_category_UHD4K = "Ultra HD 4K";
var speedtest_score_category_UHD8K = "Ultra HD 8K";
var speedtest_score_category_brows_emails = "Navigazione & emails";
var speedtest_score_category_browsing = "Navigazione";
var speedtest_score_category_challenging = "Challenging";
var speedtest_score_category_gameon = "Game on!";
var speedtest_score_category_gameover = "Game over";
var speedtest_score_category_inthegame = "Nel gioco";
var speedtest_score_category_limited = "Limitata";
var speedtest_score_category_photo = "Foto";
var speedtest_score_category_small_brows_email = "Poca navigazione & emails";
var speedtest_score_category_video = "Video";
var speedtest_score_category_winning = "Winning";
var speedtest_start_button = "Avvia test";
var speedtest_stats_jitter = "Jitter";
var speedtest_stats_jitter_info = "Variazione del ritardo nella consegna dei dati. Valori più bassi indicano una connessione più stabile.";
var speedtest_stats_loss = "Perdita";
var speedtest_stats_loss_info = "Quanti pacchetti vengono persi. Valori più bassi indicano una connessione più stabile.";
var speedtest_stats_ping = "Ping";
var speedtest_stats_ping_info = "Tempo per connettersi ad un server di test. Valori più bassi indicano risposte più rapide.";
var speedtest_tested = "Testato da {tests}";
var speedtest_title = "Il tuo test di velocità";
var speedtest_title_call = "Chiamate";
var speedtest_title_gaming = "Gaming";
var speedtest_title_social = "Social";
var speedtest_title_video = "Video";
var speedtest_title_work = "Lavoro";
var speedtest_try_again = "Prova di nuovo o controlla la tua connessione.";
var speedtest_upload = "Upload";
var speedtest_upload_info = "Velocità media per inviare dati al server di test. Valori più alti indicano velocità maggiore.";
var status_for_duration = "Sei stato {status} per {duration}";
var this_month = "Questo mese";
var time_current_day = "Questo giorno";
var time_current_month = "Questo mese";
var time_current_week = "Questa settimana";
var time_current_year = "Questo anno";
var time_older = "Precedenti";
var time_today = "Oggi";
var time_yesterday = "Ieri";
var timeline_no_event = "Non sono stati trovati eventi in questo periodo";
var timeline_no_notification = "Notifiche non disponibili in questo periodo";
var timeline_no_sample = "Non sono stati trovati dati in questo periodo";
var timeline_table_header_details = "Dettagli";
var timeline_table_header_port = "Apertura delle porte";
var timeline_table_header_state = "Stato";
var timeline_table_header_subject = "Soggetto";
var timeline_table_header_type = "Tipo";
var timeline_table_header_when = "Quando";
var tools_page_title = "Strumenti";
var tooltargetbar_ip_address = "Indirizzo IP";
var tooltargetbar_location = "Località";
var tooltargetbar_mac_address = "Indirizzo MAC";
var tooltargetbar_no_open_ports = "Nessuna porta aperta trovata";
var tooltargetbar_open_ports = "Apri porte";
var tooltargetbar_provider = "Provider";
var view_timeline_button = "Vedi cronologia";
var waiting_rate = "Inserisci il tuo voto";
var LocaleItIt = {
	"#_ghz": "{num} Ghz",
	"#_mbit": " Mbit",
	"#_mbps": "Mbps",
	"#_ms": "ms",
	"100_mbit": "100 Mbit",
	"10_gbit": "10 Gbit",
	"10_mbit": "10 Mbit",
	"1_gbit": "1 Gbit",
	autoblock_card_action_enable: autoblock_card_action_enable,
	autoblock_card_subtitle_disabled: autoblock_card_subtitle_disabled,
	autoblock_card_subtitle_enabled: autoblock_card_subtitle_enabled,
	autoblock_card_subtitle_permission_disabled: autoblock_card_subtitle_permission_disabled,
	autoblock_card_subtitle_validation_disabled: autoblock_card_subtitle_validation_disabled,
	autoblock_card_title: autoblock_card_title,
	autoblock_card_title_disabled: autoblock_card_title_disabled,
	autoblock_card_title_enabled: autoblock_card_title_enabled,
	back_button: back_button,
	contacttype_colleague: contacttype_colleague,
	contacttype_colleague_contractor: contacttype_colleague_contractor,
	contacttype_colleague_staff: contacttype_colleague_staff,
	contacttype_colleague_visitor: contacttype_colleague_visitor,
	contacttype_family: contacttype_family,
	contacttype_family_her: contacttype_family_her,
	contacttype_family_him: contacttype_family_him,
	contacttype_family_kid: contacttype_family_kid,
	contacttype_family_pet: contacttype_family_pet,
	contacttype_family_pet_cat: contacttype_family_pet_cat,
	contacttype_family_pet_dog: contacttype_family_pet_dog,
	contacttype_family_relative: contacttype_family_relative,
	contacttype_friend: contacttype_friend,
	contacttype_guest: contacttype_guest,
	contacttype_help: contacttype_help,
	contacttype_help_cleaning: contacttype_help_cleaning,
	contacttype_help_delivery: contacttype_help_delivery,
	contacttype_help_maintenance: contacttype_help_maintenance,
	contacttype_help_medical: contacttype_help_medical,
	contacttype_other: contacttype_other,
	contacttype_others: contacttype_others,
	copy_to_clipboard_copied: copy_to_clipboard_copied,
	data_no_trend: data_no_trend,
	data_trend_down_1: data_trend_down_1,
	data_trend_down_2: data_trend_down_2,
	data_trend_stable: data_trend_stable,
	data_trend_up_1: data_trend_up_1,
	data_trend_up_2: data_trend_up_2,
	dateformat_day: dateformat_day,
	dateformat_day_long: dateformat_day_long,
	dateformat_day_short: dateformat_day_short,
	dateformat_dayago: dateformat_dayago,
	dateformat_days: dateformat_days,
	dateformat_days_long: dateformat_days_long,
	dateformat_daysago: dateformat_daysago,
	dateformat_hour: dateformat_hour,
	dateformat_hour_long: dateformat_hour_long,
	dateformat_hour_short: dateformat_hour_short,
	dateformat_hourago: dateformat_hourago,
	dateformat_hours: dateformat_hours,
	dateformat_hours_long: dateformat_hours_long,
	dateformat_hoursago: dateformat_hoursago,
	dateformat_min: dateformat_min,
	dateformat_min_long: dateformat_min_long,
	dateformat_min_short: dateformat_min_short,
	dateformat_minago: dateformat_minago,
	dateformat_mins: dateformat_mins,
	dateformat_mins_long: dateformat_mins_long,
	dateformat_minsago: dateformat_minsago,
	dateformat_minutes: dateformat_minutes,
	dateformat_month: dateformat_month,
	dateformat_month_apr: dateformat_month_apr,
	dateformat_month_aug: dateformat_month_aug,
	dateformat_month_dec: dateformat_month_dec,
	dateformat_month_feb: dateformat_month_feb,
	dateformat_month_jan: dateformat_month_jan,
	dateformat_month_jul: dateformat_month_jul,
	dateformat_month_jun: dateformat_month_jun,
	dateformat_month_mar: dateformat_month_mar,
	dateformat_month_may: dateformat_month_may,
	dateformat_month_nov: dateformat_month_nov,
	dateformat_month_oct: dateformat_month_oct,
	dateformat_month_sep: dateformat_month_sep,
	dateformat_monthago: dateformat_monthago,
	dateformat_months: dateformat_months,
	dateformat_monthsago: dateformat_monthsago,
	dateformat_now: dateformat_now,
	dateformat_week: dateformat_week,
	dateformat_week_long: dateformat_week_long,
	dateformat_week_short: dateformat_week_short,
	dateformat_weekago: dateformat_weekago,
	dateformat_weeks: dateformat_weeks,
	dateformat_weeks_long: dateformat_weeks_long,
	dateformat_weeksago: dateformat_weeksago,
	dateformat_year: dateformat_year,
	dateformat_yearago: dateformat_yearago,
	dateformat_years: dateformat_years,
	dateformat_yearsago: dateformat_yearsago,
	device_alerts_dialog_body: device_alerts_dialog_body,
	device_alerts_dialog_title: device_alerts_dialog_title,
	device_confirm_dialog_body: device_confirm_dialog_body,
	device_confirm_dialog_body_alt: device_confirm_dialog_body_alt,
	device_confirm_dialog_title: device_confirm_dialog_title,
	device_detail_banner_choose_action: device_detail_banner_choose_action,
	device_detail_banner_choose_action_os: device_detail_banner_choose_action_os,
	device_detail_banner_choose_subtitle: device_detail_banner_choose_subtitle,
	device_detail_banner_choose_subtitle_model: device_detail_banner_choose_subtitle_model,
	device_detail_banner_choose_subtitle_os: device_detail_banner_choose_subtitle_os,
	device_detail_banner_empty_state_action: device_detail_banner_empty_state_action,
	device_detail_banner_empty_state_subtitle: device_detail_banner_empty_state_subtitle,
	device_detail_banner_feedback_subtitle: device_detail_banner_feedback_subtitle,
	device_detail_banner_feedback_title: device_detail_banner_feedback_title,
	device_detail_banner_revert_action: device_detail_banner_revert_action,
	device_detail_banner_revert_subtitle: device_detail_banner_revert_subtitle,
	device_detail_banner_thanks: device_detail_banner_thanks,
	device_detail_clear_action: device_detail_clear_action,
	device_detail_delete_modal_action: device_detail_delete_modal_action,
	device_detail_delete_modal_body: device_detail_delete_modal_body,
	device_detail_delete_modal_body_small: device_detail_delete_modal_body_small,
	device_detail_delete_modal_title: device_detail_delete_modal_title,
	device_detail_edit_action: device_detail_edit_action,
	device_detail_edit_modal_nameinput_placeholder: device_detail_edit_modal_nameinput_placeholder,
	device_detail_edit_modal_nameinput_small: device_detail_edit_modal_nameinput_small,
	device_detail_edit_modal_notesinput_label: device_detail_edit_modal_notesinput_label,
	device_detail_edit_modal_notesinput_placeholder: device_detail_edit_modal_notesinput_placeholder,
	device_detail_edit_modal_notesinput_small: device_detail_edit_modal_notesinput_small,
	device_detail_edit_modal_placementinput_label: device_detail_edit_modal_placementinput_label,
	device_detail_edit_modal_placementinput_small: device_detail_edit_modal_placementinput_small,
	device_detail_edit_modal_title: device_detail_edit_modal_title,
	device_detail_family: device_detail_family,
	device_detail_icon_picker_hint: device_detail_icon_picker_hint,
	device_detail_icon_picker_title: device_detail_icon_picker_title,
	device_detail_internet_downtime_schedule: device_detail_internet_downtime_schedule,
	device_detail_internet_downtime_schedule_manage: device_detail_internet_downtime_schedule_manage,
	device_detail_kick_out_mode_blocked: device_detail_kick_out_mode_blocked,
	device_detail_kick_out_mode_blocked_ago: device_detail_kick_out_mode_blocked_ago,
	device_detail_kick_out_mode_blocked_ago_for: device_detail_kick_out_mode_blocked_ago_for,
	device_detail_kick_out_mode_blocked_for: device_detail_kick_out_mode_blocked_for,
	device_detail_kick_out_mode_blocked_on: device_detail_kick_out_mode_blocked_on,
	device_detail_kick_out_mode_paused: device_detail_kick_out_mode_paused,
	device_detail_kick_out_mode_paused_ago: device_detail_kick_out_mode_paused_ago,
	device_detail_kick_out_mode_paused_ago_for: device_detail_kick_out_mode_paused_ago_for,
	device_detail_kick_out_mode_paused_for: device_detail_kick_out_mode_paused_for,
	device_detail_kick_out_mode_paused_on: device_detail_kick_out_mode_paused_on,
	device_detail_kick_out_mode_resumed_immediately: device_detail_kick_out_mode_resumed_immediately,
	device_detail_kick_out_mode_resumed_while: device_detail_kick_out_mode_resumed_while,
	device_detail_kick_out_mode_unblocked_immediately: device_detail_kick_out_mode_unblocked_immediately,
	device_detail_kick_out_mode_unblocked_while: device_detail_kick_out_mode_unblocked_while,
	device_detail_notification_set_automatic: device_detail_notification_set_automatic,
	device_detail_notification_set_millis: device_detail_notification_set_millis,
	device_detail_snmp_description: device_detail_snmp_description,
	device_detail_wol_failed: device_detail_wol_failed,
	device_detail_wol_modal_title_fail: device_detail_wol_modal_title_fail,
	device_detail_wol_modal_title_success: device_detail_wol_modal_title_success,
	device_detail_wol_success: device_detail_wol_success,
	device_place_Basement: device_place_Basement,
	device_place_Bathroom: device_place_Bathroom,
	device_place_Bedroom: device_place_Bedroom,
	device_place_Cellar: device_place_Cellar,
	device_place_Closet: device_place_Closet,
	device_place_Default: device_place_Default,
	device_place_Dining_Room: device_place_Dining_Room,
	device_place_Garage: device_place_Garage,
	device_place_Garden: device_place_Garden,
	device_place_Gym: device_place_Gym,
	device_place_Hallway: device_place_Hallway,
	device_place_Indoors: device_place_Indoors,
	device_place_Kitchen: device_place_Kitchen,
	"device_place_Laundry Room": "Lavanderia",
	device_place_Living_Room: device_place_Living_Room,
	device_place_Lobby: device_place_Lobby,
	device_place_Office: device_place_Office,
	device_place_Outdoors: device_place_Outdoors,
	device_place_Pool: device_place_Pool,
	"device_place_Recreation Room": "Sala ricreativa",
	"device_place_Safe Room": "Stanza della sicurezza",
	device_place_Study: device_place_Study,
	"device_place_Utility Room": "Stanza per le utilità",
	devicecategory_audio_and_video: devicecategory_audio_and_video,
	devicecategory_engineering: devicecategory_engineering,
	devicecategory_everything_else: devicecategory_everything_else,
	devicecategory_home_and_office: devicecategory_home_and_office,
	devicecategory_industry: devicecategory_industry,
	devicecategory_mobile: devicecategory_mobile,
	devicecategory_network: devicecategory_network,
	devicecategory_offline: devicecategory_offline,
	devicecategory_personal: devicecategory_personal,
	devicecategory_server: devicecategory_server,
	devicecategory_smart_home: devicecategory_smart_home,
	devicetype_alarm: devicetype_alarm,
	devicetype_appliance: devicetype_appliance,
	devicetype_arduino: devicetype_arduino,
	devicetype_automotive: devicetype_automotive,
	devicetype_baby_monitor: devicetype_baby_monitor,
	devicetype_barcode: devicetype_barcode,
	devicetype_battery: devicetype_battery,
	devicetype_bell: devicetype_bell,
	devicetype_car: devicetype_car,
	devicetype_circuit_card: devicetype_circuit_card,
	devicetype_cleaner: devicetype_cleaner,
	devicetype_clock: devicetype_clock,
	devicetype_cloud: devicetype_cloud,
	devicetype_communication: devicetype_communication,
	devicetype_computer: devicetype_computer,
	devicetype_conferencing: devicetype_conferencing,
	devicetype_control_panel: devicetype_control_panel,
	devicetype_database: devicetype_database,
	devicetype_desktop: devicetype_desktop,
	devicetype_disc_player: devicetype_disc_player,
	devicetype_domain_server: devicetype_domain_server,
	devicetype_domotz_box: devicetype_domotz_box,
	devicetype_electric: devicetype_electric,
	devicetype_energy: devicetype_energy,
	devicetype_ereader: devicetype_ereader,
	devicetype_file_server: devicetype_file_server,
	devicetype_fingbox: devicetype_fingbox,
	devicetype_firewall: devicetype_firewall,
	devicetype_fitness: devicetype_fitness,
	devicetype_fridge: devicetype_fridge,
	devicetype_game_console: devicetype_game_console,
	devicetype_garage: devicetype_garage,
	devicetype_gateway: devicetype_gateway,
	devicetype_generic: devicetype_generic,
	devicetype_health_monitor: devicetype_health_monitor,
	devicetype_heating: devicetype_heating,
	devicetype_humidity: devicetype_humidity,
	devicetype_industrial: devicetype_industrial,
	devicetype_ipod: devicetype_ipod,
	devicetype_key_lock: devicetype_key_lock,
	devicetype_laptop: devicetype_laptop,
	devicetype_light: devicetype_light,
	devicetype_loudspeaker: devicetype_loudspeaker,
	devicetype_mail_server: devicetype_mail_server,
	devicetype_media_player: devicetype_media_player,
	devicetype_medical: devicetype_medical,
	devicetype_microphone: devicetype_microphone,
	devicetype_mobile: devicetype_mobile,
	devicetype_modem: devicetype_modem,
	devicetype_motion_detector: devicetype_motion_detector,
	devicetype_music: devicetype_music,
	devicetype_nas_storage: devicetype_nas_storage,
	devicetype_network_appliance: devicetype_network_appliance,
	devicetype_pet_monitor: devicetype_pet_monitor,
	devicetype_phone: devicetype_phone,
	devicetype_photo_camera: devicetype_photo_camera,
	devicetype_photos: devicetype_photos,
	devicetype_poe_plug: devicetype_poe_plug,
	devicetype_pool: devicetype_pool,
	devicetype_pos: devicetype_pos,
	devicetype_power_system: devicetype_power_system,
	devicetype_printer: devicetype_printer,
	devicetype_processor: devicetype_processor,
	devicetype_projector: devicetype_projector,
	devicetype_proxy_server: devicetype_proxy_server,
	devicetype_radio: devicetype_radio,
	devicetype_raspberry: devicetype_raspberry,
	devicetype_remote_control: devicetype_remote_control,
	devicetype_rfid: devicetype_rfid,
	devicetype_robot: devicetype_robot,
	devicetype_router: devicetype_router,
	devicetype_satellite: devicetype_satellite,
	devicetype_scale: devicetype_scale,
	devicetype_scanner: devicetype_scanner,
	devicetype_security_system: devicetype_security_system,
	devicetype_sensor: devicetype_sensor,
	devicetype_server: devicetype_server,
	devicetype_sleep: devicetype_sleep,
	devicetype_small_cell: devicetype_small_cell,
	devicetype_smart_controller: devicetype_smart_controller,
	devicetype_smart_home: devicetype_smart_home,
	devicetype_smart_meter: devicetype_smart_meter,
	devicetype_smart_plug: devicetype_smart_plug,
	devicetype_smoke: devicetype_smoke,
	devicetype_solar_panel: devicetype_solar_panel,
	devicetype_sound_system: devicetype_sound_system,
	devicetype_sprinkler: devicetype_sprinkler,
	devicetype_stb: devicetype_stb,
	devicetype_streaming_dongle: devicetype_streaming_dongle,
	devicetype_surveillance_camera: devicetype_surveillance_camera,
	devicetype_switch: devicetype_switch,
	devicetype_tablet: devicetype_tablet,
	devicetype_television: devicetype_television,
	devicetype_terminal: devicetype_terminal,
	devicetype_thermostat: devicetype_thermostat,
	devicetype_toy: devicetype_toy,
	devicetype_undefined: devicetype_undefined,
	devicetype_usb: devicetype_usb,
	devicetype_virtual_machine: devicetype_virtual_machine,
	devicetype_voice_control: devicetype_voice_control,
	devicetype_voip: devicetype_voip,
	devicetype_vpn: devicetype_vpn,
	devicetype_washer: devicetype_washer,
	devicetype_watch: devicetype_watch,
	devicetype_wearable: devicetype_wearable,
	devicetype_weather: devicetype_weather,
	devicetype_web_server: devicetype_web_server,
	devicetype_wifi: devicetype_wifi,
	devicetype_wifi_extender: devicetype_wifi_extender,
	dhcpdiscovery_result_domain: dhcpdiscovery_result_domain,
	discovery_action_edit: discovery_action_edit,
	discovery_device_action_change: discovery_device_action_change,
	discovery_devices_filter_all: discovery_devices_filter_all,
	discovery_devices_filter_offline: discovery_devices_filter_offline,
	discovery_devices_filter_online: discovery_devices_filter_online,
	discovery_devices_sorted_name: discovery_devices_sorted_name,
	discovery_devices_sorted_state: discovery_devices_sorted_state,
	discovery_events_change_state_briefly: discovery_events_change_state_briefly,
	discovery_events_change_state_till: discovery_events_change_state_till,
	discovery_events_empty_state: discovery_events_empty_state,
	discovery_events_heatmap_status: discovery_events_heatmap_status,
	discovery_events_no_in_this_period: discovery_events_no_in_this_period,
	discovery_events_premium_banner_description: discovery_events_premium_banner_description,
	discovery_events_premium_banner_description_end: discovery_events_premium_banner_description_end,
	discovery_events_show_next: discovery_events_show_next,
	discovery_events_show_previous: discovery_events_show_previous,
	discovery_events_timeline_more: discovery_events_timeline_more,
	discovery_events_timeline_new: discovery_events_timeline_new,
	discovery_events_timeline_new_blocked: discovery_events_timeline_new_blocked,
	discovery_events_timeline_offline_briefly: discovery_events_timeline_offline_briefly,
	discovery_events_timeline_offline_duration: discovery_events_timeline_offline_duration,
	discovery_events_timeline_offline_duration_immediately: discovery_events_timeline_offline_duration_immediately,
	discovery_events_timeline_offline_duration_while: discovery_events_timeline_offline_duration_while,
	discovery_events_timeline_offline_till_now: discovery_events_timeline_offline_till_now,
	discovery_events_timeline_online_briefly: discovery_events_timeline_online_briefly,
	discovery_events_timeline_online_duration: discovery_events_timeline_online_duration,
	discovery_events_timeline_online_duration_immediately: discovery_events_timeline_online_duration_immediately,
	discovery_events_timeline_online_duration_while: discovery_events_timeline_online_duration_while,
	discovery_events_timeline_online_till_now: discovery_events_timeline_online_till_now,
	discovery_events_week_heatmap_header: discovery_events_week_heatmap_header,
	discovery_events_week_timeline_header: discovery_events_week_timeline_header,
	discovery_header_location: discovery_header_location,
	discovery_header_network: discovery_header_network,
	discovery_network_internet_header: discovery_network_internet_header,
	discovery_network_internet_hostname: discovery_network_internet_hostname,
	discovery_network_internet_isp: discovery_network_internet_isp,
	discovery_network_internet_location: discovery_network_internet_location,
	discovery_network_internet_provider: discovery_network_internet_provider,
	discovery_network_internet_pubaddress: discovery_network_internet_pubaddress,
	discovery_network_internet_timezone: discovery_network_internet_timezone,
	discovery_network_netinfo_gateway: discovery_network_netinfo_gateway,
	discovery_security_newdevices_confirmall: discovery_security_newdevices_confirmall,
	discovery_security_newdevices_confirmed: discovery_security_newdevices_confirmed,
	discovery_security_newdevices_last30days: discovery_security_newdevices_last30days,
	discovery_security_newdevices_last7days: discovery_security_newdevices_last7days,
	discovery_security_newdevices_message: discovery_security_newdevices_message,
	discovery_security_newdevices_title: discovery_security_newdevices_title,
	discovery_security_newdevices_today: discovery_security_newdevices_today,
	dnslookup_info_local_title: dnslookup_info_local_title,
	duration_day_long: duration_day_long,
	duration_day_short: duration_day_short,
	duration_hour_long: duration_hour_long,
	duration_hour_short: duration_hour_short,
	duration_min_long: duration_min_long,
	duration_min_short: duration_min_short,
	duration_minute_long: duration_minute_long,
	duration_month_long: duration_month_long,
	duration_month_short: duration_month_short,
	duration_week_long: duration_week_long,
	duration_week_short: duration_week_short,
	duration_year_long: duration_year_long,
	duration_year_short: duration_year_short,
	empty_state_subtitle_fallback: empty_state_subtitle_fallback,
	empty_state_title_fallback: empty_state_title_fallback,
	every_day: every_day,
	every_hour: every_hour,
	every_week: every_week,
	findhiddencameras_emptystate_subtitle: findhiddencameras_emptystate_subtitle,
	findhiddencameras_emptystate_title: findhiddencameras_emptystate_title,
	findhiddencameras_foundcameras_title: findhiddencameras_foundcameras_title,
	findhiddencameras_helper_0found: findhiddencameras_helper_0found,
	findhiddencameras_helper_totdevice: findhiddencameras_helper_totdevice,
	findhiddencameras_helper_totdevice_1found: findhiddencameras_helper_totdevice_1found,
	findhiddencameras_helper_totdevice_manyfound: findhiddencameras_helper_totdevice_manyfound,
	findhiddencameras_helper_totdevice_with_unknown: findhiddencameras_helper_totdevice_with_unknown,
	findhiddencameras_helper_type_babymonitor: findhiddencameras_helper_type_babymonitor,
	findhiddencameras_helper_type_ipcamera: findhiddencameras_helper_type_ipcamera,
	findhiddencameras_helper_type_monitordetector: findhiddencameras_helper_type_monitordetector,
	findhiddencameras_helper_type_photocamera: findhiddencameras_helper_type_photocamera,
	findhiddencameras_helper_type_securitysystem: findhiddencameras_helper_type_securitysystem,
	findhiddencameras_progress_subtitle: findhiddencameras_progress_subtitle,
	findhiddencameras_progress_title: findhiddencameras_progress_title,
	findhiddencameras_summary_title: findhiddencameras_summary_title,
	findhiddencameras_toolresult_danger_subtitle: findhiddencameras_toolresult_danger_subtitle,
	findhiddencameras_toolresult_danger_title: findhiddencameras_toolresult_danger_title,
	findhiddencameras_toolresult_fingpedia_stats: findhiddencameras_toolresult_fingpedia_stats,
	findhiddencameras_toolresult_premium_subtitle: findhiddencameras_toolresult_premium_subtitle,
	findhiddencameras_toolresult_premium_title: findhiddencameras_toolresult_premium_title,
	findhiddencameras_toolresult_success_nofound_subtitle: findhiddencameras_toolresult_success_nofound_subtitle,
	findhiddencameras_toolresult_success_nofound_title: findhiddencameras_toolresult_success_nofound_title,
	findhiddencameras_toolresult_success_subtitle: findhiddencameras_toolresult_success_subtitle,
	findhiddencameras_toolresult_success_title: findhiddencameras_toolresult_success_title,
	findhiddencameras_toolresult_sync_subtitle: findhiddencameras_toolresult_sync_subtitle,
	findhiddencameras_toolresult_sync_title: findhiddencameras_toolresult_sync_title,
	findhiddencameras_unrecognized_subtitle: findhiddencameras_unrecognized_subtitle,
	findhiddencameras_unrecognized_title: findhiddencameras_unrecognized_title,
	format_speed: format_speed,
	gender_female: gender_female,
	gender_male: gender_male,
	gender_other: gender_other,
	generic_VPN: generic_VPN,
	generic_account: generic_account,
	generic_actions: generic_actions,
	generic_alert: generic_alert,
	generic_am: generic_am,
	generic_auto: generic_auto,
	generic_automatic: generic_automatic,
	generic_avg: generic_avg,
	generic_back: generic_back,
	generic_band: generic_band,
	generic_best: generic_best,
	generic_brandandmodel: generic_brandandmodel,
	generic_bssid: generic_bssid,
	generic_cancel: generic_cancel,
	generic_change: generic_change,
	generic_changed: generic_changed,
	generic_check: generic_check,
	generic_clear: generic_clear,
	generic_close: generic_close,
	generic_completed: generic_completed,
	generic_confirm: generic_confirm,
	generic_connected_to: generic_connected_to,
	generic_continue: generic_continue,
	generic_country: generic_country,
	generic_data_not_available: generic_data_not_available,
	generic_delete: generic_delete,
	generic_description: generic_description,
	generic_details: generic_details,
	generic_device: generic_device,
	generic_dhcp: generic_dhcp,
	generic_dhcp_proxy: generic_dhcp_proxy,
	generic_disable_all: generic_disable_all,
	generic_disabled: generic_disabled,
	generic_domain: generic_domain,
	generic_download_speed: generic_download_speed,
	generic_edit: generic_edit,
	generic_edit_profile: generic_edit_profile,
	generic_email: generic_email,
	generic_enable_all: generic_enable_all,
	generic_enabled: generic_enabled,
	generic_error: generic_error,
	generic_example: generic_example,
	generic_failed: generic_failed,
	generic_first_seen: generic_first_seen,
	generic_for: generic_for,
	generic_help: generic_help,
	generic_help_on_fing: generic_help_on_fing,
	generic_home: generic_home,
	generic_hotspot: generic_hotspot,
	generic_id: generic_id,
	generic_idle: generic_idle,
	generic_important: generic_important,
	generic_inspect: generic_inspect,
	generic_internet: generic_internet,
	generic_ip: generic_ip,
	generic_lastchange: generic_lastchange,
	generic_link: generic_link,
	generic_link_speed: generic_link_speed,
	generic_live: generic_live,
	generic_local: generic_local,
	generic_logo: generic_logo,
	generic_make: generic_make,
	generic_manage: generic_manage,
	generic_manual: generic_manual,
	generic_map_gpudisabled_link: generic_map_gpudisabled_link,
	generic_map_gpudisabled_message: generic_map_gpudisabled_message,
	generic_max: generic_max,
	generic_mbps_download: generic_mbps_download,
	generic_mbps_upload: generic_mbps_upload,
	generic_min: generic_min,
	generic_ms: generic_ms,
	generic_ms_latency: generic_ms_latency,
	generic_name: generic_name,
	generic_network: generic_network,
	generic_next: generic_next,
	generic_no: generic_no,
	generic_no_internet: generic_no_internet,
	generic_no_name: generic_no_name,
	generic_not_available: generic_not_available,
	generic_not_connected: generic_not_connected,
	generic_not_in_network: generic_not_in_network,
	generic_not_tracking: generic_not_tracking,
	generic_notset: generic_notset,
	generic_office: generic_office,
	generic_offline: generic_offline,
	generic_ok: generic_ok,
	generic_online: generic_online,
	generic_open: generic_open,
	generic_operatingsystem: generic_operatingsystem,
	generic_optional: generic_optional,
	generic_or: generic_or,
	generic_order_by: generic_order_by,
	generic_os: generic_os,
	generic_outage: generic_outage,
	generic_outages: generic_outages,
	generic_pm: generic_pm,
	generic_public: generic_public,
	generic_recent: generic_recent,
	generic_refresh: generic_refresh,
	generic_related_articles: generic_related_articles,
	generic_rental: generic_rental,
	generic_report: generic_report,
	generic_result: generic_result,
	generic_running: generic_running,
	generic_save: generic_save,
	generic_security: generic_security,
	generic_see_result: generic_see_result,
	generic_seeall: generic_seeall,
	generic_send: generic_send,
	generic_service: generic_service,
	generic_settings: generic_settings,
	generic_share: generic_share,
	generic_show_data_for: generic_show_data_for,
	generic_signal: generic_signal,
	generic_size: generic_size,
	generic_source: generic_source,
	generic_ssid: generic_ssid,
	generic_start: generic_start,
	generic_stop: generic_stop,
	generic_support: generic_support,
	generic_tracking: generic_tracking,
	generic_type: generic_type,
	generic_unknown: generic_unknown,
	generic_unrecognized: generic_unrecognized,
	generic_updating: generic_updating,
	generic_upgrade: generic_upgrade,
	generic_upload_speed: generic_upload_speed,
	generic_view: generic_view,
	generic_view_details: generic_view_details,
	generic_view_less: generic_view_less,
	generic_view_more: generic_view_more,
	generic_website: generic_website,
	generic_what_outage: generic_what_outage,
	generic_worst: generic_worst,
	generic_wps_enabled: generic_wps_enabled,
	generic_yes: generic_yes,
	generic_you: generic_you,
	healtcheck_edit_dialog_placeholder: healtcheck_edit_dialog_placeholder,
	healthcheck_001_B: healthcheck_001_B,
	healthcheck_001_G: healthcheck_001_G,
	healthcheck_001_easy: healthcheck_001_easy,
	healthcheck_001_fix: healthcheck_001_fix,
	healthcheck_001_tech: healthcheck_001_tech,
	healthcheck_002_B: healthcheck_002_B,
	healthcheck_002_G: healthcheck_002_G,
	healthcheck_002_easy: healthcheck_002_easy,
	healthcheck_002_tech: healthcheck_002_tech,
	healthcheck_003_B: healthcheck_003_B,
	healthcheck_003_G: healthcheck_003_G,
	healthcheck_003_easy: healthcheck_003_easy,
	healthcheck_003_fix: healthcheck_003_fix,
	healthcheck_003_tech: healthcheck_003_tech,
	healthcheck_004_B: healthcheck_004_B,
	healthcheck_004_G: healthcheck_004_G,
	healthcheck_004_easy: healthcheck_004_easy,
	healthcheck_004_fix: healthcheck_004_fix,
	healthcheck_004_tech: healthcheck_004_tech,
	healthcheck_005_B: healthcheck_005_B,
	healthcheck_005_G: healthcheck_005_G,
	healthcheck_005_easy: healthcheck_005_easy,
	healthcheck_005_fix: healthcheck_005_fix,
	healthcheck_005_tech: healthcheck_005_tech,
	healthcheck_006_B: healthcheck_006_B,
	healthcheck_006_G: healthcheck_006_G,
	healthcheck_006_easy: healthcheck_006_easy,
	healthcheck_006_fix: healthcheck_006_fix,
	healthcheck_006_tech: healthcheck_006_tech,
	healthcheck_007_B: healthcheck_007_B,
	healthcheck_007_G: healthcheck_007_G,
	healthcheck_007_easy: healthcheck_007_easy,
	healthcheck_007_fix: healthcheck_007_fix,
	healthcheck_007_tech: healthcheck_007_tech,
	healthcheck_008_B: healthcheck_008_B,
	healthcheck_008_G: healthcheck_008_G,
	healthcheck_008_easy: healthcheck_008_easy,
	healthcheck_008_fix: healthcheck_008_fix,
	healthcheck_008_tech: healthcheck_008_tech,
	healthcheck_009_B: healthcheck_009_B,
	healthcheck_009_G: healthcheck_009_G,
	healthcheck_009_easy: healthcheck_009_easy,
	healthcheck_009_fix: healthcheck_009_fix,
	healthcheck_009_tech: healthcheck_009_tech,
	healthcheck_00A_G: healthcheck_00A_G,
	healthcheck_00A_easy: healthcheck_00A_easy,
	healthcheck_00A_tech: healthcheck_00A_tech,
	healthcheck_010_G: healthcheck_010_G,
	healthcheck_010_easy: healthcheck_010_easy,
	healthcheck_010_tech: healthcheck_010_tech,
	healthcheck_401_B: healthcheck_401_B,
	healthcheck_401_G: healthcheck_401_G,
	healthcheck_401_easy: healthcheck_401_easy,
	healthcheck_401_fix: healthcheck_401_fix,
	healthcheck_401_tech: healthcheck_401_tech,
	healthcheck_402_B: healthcheck_402_B,
	healthcheck_402_G: healthcheck_402_G,
	healthcheck_402_easy: healthcheck_402_easy,
	healthcheck_402_fix: healthcheck_402_fix,
	healthcheck_402_tech: healthcheck_402_tech,
	healthcheck_403_B: healthcheck_403_B,
	healthcheck_403_G: healthcheck_403_G,
	healthcheck_403_easy: healthcheck_403_easy,
	healthcheck_403_fix: healthcheck_403_fix,
	healthcheck_403_tech: healthcheck_403_tech,
	healthcheck_404_B: healthcheck_404_B,
	healthcheck_404_G: healthcheck_404_G,
	healthcheck_404_easy: healthcheck_404_easy,
	healthcheck_404_fix: healthcheck_404_fix,
	healthcheck_404_tech: healthcheck_404_tech,
	healthcheck_405_B: healthcheck_405_B,
	healthcheck_405_G: healthcheck_405_G,
	healthcheck_405_easy: healthcheck_405_easy,
	healthcheck_405_tech: healthcheck_405_tech,
	healthcheck_406_B: healthcheck_406_B,
	healthcheck_406_G: healthcheck_406_G,
	healthcheck_406_easy: healthcheck_406_easy,
	healthcheck_406_fix: healthcheck_406_fix,
	healthcheck_406_tech: healthcheck_406_tech,
	healthcheck_407_B: healthcheck_407_B,
	healthcheck_407_G: healthcheck_407_G,
	healthcheck_407_easy: healthcheck_407_easy,
	healthcheck_407_fix: healthcheck_407_fix,
	healthcheck_407_tech: healthcheck_407_tech,
	healthcheck_408_B: healthcheck_408_B,
	healthcheck_408_G: healthcheck_408_G,
	healthcheck_408_easy: healthcheck_408_easy,
	healthcheck_408_fix: healthcheck_408_fix,
	healthcheck_408_tech: healthcheck_408_tech,
	healthcheck_409_B: healthcheck_409_B,
	healthcheck_409_G: healthcheck_409_G,
	healthcheck_409_easy: healthcheck_409_easy,
	healthcheck_409_tech: healthcheck_409_tech,
	healthcheck_40A_B: healthcheck_40A_B,
	healthcheck_40A_G: healthcheck_40A_G,
	healthcheck_40A_easy: healthcheck_40A_easy,
	healthcheck_40A_fix: healthcheck_40A_fix,
	healthcheck_40A_tech: healthcheck_40A_tech,
	healthcheck_40B_B: healthcheck_40B_B,
	healthcheck_40B_G: healthcheck_40B_G,
	healthcheck_40B_easy: healthcheck_40B_easy,
	healthcheck_40B_tech: healthcheck_40B_tech,
	healthcheck_40C_B: healthcheck_40C_B,
	healthcheck_40C_G: healthcheck_40C_G,
	healthcheck_40C_easy: healthcheck_40C_easy,
	healthcheck_40C_tech: healthcheck_40C_tech,
	healthcheck_40D_B: healthcheck_40D_B,
	healthcheck_40D_G: healthcheck_40D_G,
	healthcheck_40D_easy: healthcheck_40D_easy,
	healthcheck_40D_tech: healthcheck_40D_tech,
	healthcheck_40E_B: healthcheck_40E_B,
	healthcheck_40E_G: healthcheck_40E_G,
	healthcheck_40E_easy: healthcheck_40E_easy,
	healthcheck_40E_tech: healthcheck_40E_tech,
	healthcheck_40F_B: healthcheck_40F_B,
	healthcheck_40F_G: healthcheck_40F_G,
	healthcheck_40F_easy: healthcheck_40F_easy,
	healthcheck_40F_fix: healthcheck_40F_fix,
	healthcheck_40F_tech: healthcheck_40F_tech,
	healthcheck_410_B: healthcheck_410_B,
	healthcheck_410_G: healthcheck_410_G,
	healthcheck_410_easy: healthcheck_410_easy,
	healthcheck_410_tech: healthcheck_410_tech,
	healthcheck_411_G: healthcheck_411_G,
	healthcheck_411_easy: healthcheck_411_easy,
	healthcheck_411_tech: healthcheck_411_tech,
	healthcheck_412_G: healthcheck_412_G,
	healthcheck_412_easy: healthcheck_412_easy,
	healthcheck_412_tech: healthcheck_412_tech,
	healthcheck_415_B: healthcheck_415_B,
	healthcheck_415_G: healthcheck_415_G,
	healthcheck_415_easy: healthcheck_415_easy,
	healthcheck_415_fix: healthcheck_415_fix,
	healthcheck_415_tech: healthcheck_415_tech,
	healthcheck_416_B: healthcheck_416_B,
	healthcheck_416_G: healthcheck_416_G,
	healthcheck_416_easy: healthcheck_416_easy,
	healthcheck_416_fix: healthcheck_416_fix,
	healthcheck_416_tech: healthcheck_416_tech,
	healthcheck_417_G: healthcheck_417_G,
	healthcheck_417_easy: healthcheck_417_easy,
	healthcheck_417_fix: healthcheck_417_fix,
	healthcheck_417_tech: healthcheck_417_tech,
	healthcheck_418_G: healthcheck_418_G,
	healthcheck_418_easy: healthcheck_418_easy,
	healthcheck_418_fix: healthcheck_418_fix,
	healthcheck_418_tech: healthcheck_418_tech,
	healthcheck_419_G: healthcheck_419_G,
	healthcheck_419_easy: healthcheck_419_easy,
	healthcheck_419_fix: healthcheck_419_fix,
	healthcheck_419_tech: healthcheck_419_tech,
	healthcheck_41A_G: healthcheck_41A_G,
	healthcheck_41A_easy: healthcheck_41A_easy,
	healthcheck_41A_fix: healthcheck_41A_fix,
	healthcheck_41A_tech: healthcheck_41A_tech,
	healthcheck_801_B: healthcheck_801_B,
	healthcheck_801_G: healthcheck_801_G,
	healthcheck_801_easy: healthcheck_801_easy,
	healthcheck_801_fix: healthcheck_801_fix,
	healthcheck_801_tech: healthcheck_801_tech,
	healthcheck_802_B: healthcheck_802_B,
	healthcheck_802_G: healthcheck_802_G,
	healthcheck_802_easy: healthcheck_802_easy,
	healthcheck_802_fix: healthcheck_802_fix,
	healthcheck_802_tech: healthcheck_802_tech,
	healthcheck_803_B: healthcheck_803_B,
	healthcheck_803_G: healthcheck_803_G,
	healthcheck_803_easy: healthcheck_803_easy,
	healthcheck_803_tech: healthcheck_803_tech,
	healthcheck_804_B: healthcheck_804_B,
	healthcheck_804_G: healthcheck_804_G,
	healthcheck_804_easy: healthcheck_804_easy,
	healthcheck_804_tech: healthcheck_804_tech,
	healthcheck_805_B: healthcheck_805_B,
	healthcheck_805_G: healthcheck_805_G,
	healthcheck_805_easy: healthcheck_805_easy,
	healthcheck_805_tech: healthcheck_805_tech,
	healthcheck_806_B: healthcheck_806_B,
	healthcheck_806_G: healthcheck_806_G,
	healthcheck_806_easy: healthcheck_806_easy,
	healthcheck_806_tech: healthcheck_806_tech,
	healthcheck_807_B: healthcheck_807_B,
	healthcheck_807_G: healthcheck_807_G,
	healthcheck_807_easy: healthcheck_807_easy,
	healthcheck_807_tech: healthcheck_807_tech,
	healthcheck_808_B: healthcheck_808_B,
	healthcheck_808_G: healthcheck_808_G,
	healthcheck_808_easy: healthcheck_808_easy,
	healthcheck_808_tech: healthcheck_808_tech,
	healthcheck_809_G: healthcheck_809_G,
	healthcheck_809_easy: healthcheck_809_easy,
	healthcheck_809_tech: healthcheck_809_tech,
	healthcheck_80A_G: healthcheck_80A_G,
	healthcheck_80A_easy: healthcheck_80A_easy,
	healthcheck_80A_tech: healthcheck_80A_tech,
	healthcheck_80B_G: healthcheck_80B_G,
	healthcheck_80B_easy: healthcheck_80B_easy,
	healthcheck_80B_tech: healthcheck_80B_tech,
	healthcheck_80C_B: healthcheck_80C_B,
	healthcheck_80C_G: healthcheck_80C_G,
	healthcheck_80C_easy: healthcheck_80C_easy,
	healthcheck_80C_tech: healthcheck_80C_tech,
	healthcheck_80D_G: healthcheck_80D_G,
	healthcheck_80D_easy: healthcheck_80D_easy,
	healthcheck_80D_tech: healthcheck_80D_tech,
	healthcheck_80E_G: healthcheck_80E_G,
	healthcheck_80E_easy: healthcheck_80E_easy,
	healthcheck_80E_tech: healthcheck_80E_tech,
	healthcheck_80F_G: healthcheck_80F_G,
	healthcheck_80F_easy: healthcheck_80F_easy,
	healthcheck_80F_tech: healthcheck_80F_tech,
	healthcheck_810_B: healthcheck_810_B,
	healthcheck_810_G: healthcheck_810_G,
	healthcheck_810_tech: healthcheck_810_tech,
	healthcheck_card_advice_link: healthcheck_card_advice_link,
	healthcheck_card_advice_subtitle: healthcheck_card_advice_subtitle,
	healthcheck_card_advice_title: healthcheck_card_advice_title,
	healthcheck_card_connectivity_subtitle: healthcheck_card_connectivity_subtitle,
	healthcheck_card_connectivity_title: healthcheck_card_connectivity_title,
	healthcheck_card_publicwifi_subtitle: healthcheck_card_publicwifi_subtitle,
	healthcheck_card_publicwifi_title: healthcheck_card_publicwifi_title,
	healthcheck_generic_code: healthcheck_generic_code,
	healthcheck_healthsummary_fail_limitedconnectivity_subtitle: healthcheck_healthsummary_fail_limitedconnectivity_subtitle,
	healthcheck_healthsummary_fail_manyissue_subtitle: healthcheck_healthsummary_fail_manyissue_subtitle,
	healthcheck_healthsummary_fail_networkissue_subtitle: healthcheck_healthsummary_fail_networkissue_subtitle,
	healthcheck_healthsummary_fail_noconnection_subtitle: healthcheck_healthsummary_fail_noconnection_subtitle,
	healthcheck_healthsummary_fail_title: healthcheck_healthsummary_fail_title,
	healthcheck_healthsummary_link_report: healthcheck_healthsummary_link_report,
	healthcheck_healthsummary_refresh_button_text_one: healthcheck_healthsummary_refresh_button_text_one,
	healthcheck_healthsummary_refresh_button_text_two: healthcheck_healthsummary_refresh_button_text_two,
	healthcheck_healthsummary_refresh_running: healthcheck_healthsummary_refresh_running,
	healthcheck_healthsummary_running_subtitle: healthcheck_healthsummary_running_subtitle,
	healthcheck_healthsummary_running_title: healthcheck_healthsummary_running_title,
	healthcheck_healthsummary_success_subtitle: healthcheck_healthsummary_success_subtitle,
	healthcheck_healthsummary_success_title: healthcheck_healthsummary_success_title,
	healthcheck_healthsummary_warning_internet_subtitle: healthcheck_healthsummary_warning_internet_subtitle,
	healthcheck_healthsummary_warning_local_subtitle: healthcheck_healthsummary_warning_local_subtitle,
	healthcheck_healthsummary_warning_network_subtitle: healthcheck_healthsummary_warning_network_subtitle,
	healthcheck_healthsummary_warning_title: healthcheck_healthsummary_warning_title,
	healthcheck_help_dialog_action: healthcheck_help_dialog_action,
	healthcheck_help_dialog_failurebadge: healthcheck_help_dialog_failurebadge,
	healthcheck_help_dialog_successbadge: healthcheck_help_dialog_successbadge,
	healthcheck_help_dialog_tab_howfix: healthcheck_help_dialog_tab_howfix,
	healthcheck_help_dialog_tab_means: healthcheck_help_dialog_tab_means,
	healthcheck_help_dialog_tab_techdef: healthcheck_help_dialog_tab_techdef,
	healthcheck_internet: healthcheck_internet,
	healthcheck_local: healthcheck_local,
	healthcheck_network: healthcheck_network,
	healthcheck_report_askhelp_description: healthcheck_report_askhelp_description,
	healthcheck_report_askhelp_modal_share_action: healthcheck_report_askhelp_modal_share_action,
	healthcheck_report_askhelp_privacy: healthcheck_report_askhelp_privacy,
	healthcheck_report_askhelp_processing_title: healthcheck_report_askhelp_processing_title,
	healthcheck_report_askhelp_title: healthcheck_report_askhelp_title,
	healthcheck_report_checkinfo_modal_checkcode_howcanifix: healthcheck_report_checkinfo_modal_checkcode_howcanifix,
	healthcheck_report_checkinfo_modal_checkcode_title: healthcheck_report_checkinfo_modal_checkcode_title,
	healthcheck_report_checkinfo_modal_checkcode_whatitmeans: healthcheck_report_checkinfo_modal_checkcode_whatitmeans,
	healthcheck_report_checkinfo_modal_footer_link: healthcheck_report_checkinfo_modal_footer_link,
	healthcheck_report_checkinfo_modal_footer_title: healthcheck_report_checkinfo_modal_footer_title,
	healthcheck_report_checkinfo_modal_title: healthcheck_report_checkinfo_modal_title,
	healthcheck_report_context_picker: healthcheck_report_context_picker,
	healthcheck_report_customtarget_modal_area_label: healthcheck_report_customtarget_modal_area_label,
	healthcheck_report_customtarget_modal_area_small: healthcheck_report_customtarget_modal_area_small,
	healthcheck_report_customtarget_modal_failure_title: healthcheck_report_customtarget_modal_failure_title,
	healthcheck_report_customtarget_modal_nopremium_title: healthcheck_report_customtarget_modal_nopremium_title,
	healthcheck_report_customtarget_modal_premium_title: healthcheck_report_customtarget_modal_premium_title,
	healthcheck_report_customtarget_modal_save_action: healthcheck_report_customtarget_modal_save_action,
	healthcheck_report_customtarget_modal_tech_description: healthcheck_report_customtarget_modal_tech_description,
	healthcheck_report_customtarget_modal_tech_title: healthcheck_report_customtarget_modal_tech_title,
	healthcheck_report_customtarget_modal_title: healthcheck_report_customtarget_modal_title,
	healthcheck_report_emptystate: healthcheck_report_emptystate,
	healthcheck_report_emptystate_component_message: healthcheck_report_emptystate_component_message,
	healthcheck_report_emptystate_premium: healthcheck_report_emptystate_premium,
	healthcheck_report_geoloc_info: healthcheck_report_geoloc_info,
	healthcheck_report_geoloc_location: healthcheck_report_geoloc_location,
	healthcheck_report_geoloc_timezone: healthcheck_report_geoloc_timezone,
	healthcheck_report_isp_info_descr: healthcheck_report_isp_info_descr,
	healthcheck_report_isp_info_message: healthcheck_report_isp_info_message,
	healthcheck_report_isp_info_stats_message_download: healthcheck_report_isp_info_stats_message_download,
	healthcheck_report_isp_info_stats_message_share: healthcheck_report_isp_info_stats_message_share,
	healthcheck_report_isp_info_stats_message_upload: healthcheck_report_isp_info_stats_message_upload,
	healthcheck_report_mute_action: healthcheck_report_mute_action,
	healthcheck_report_mute_dialog_mutecheck: healthcheck_report_mute_dialog_mutecheck,
	healthcheck_report_mute_dialog_mutecheck_description: healthcheck_report_mute_dialog_mutecheck_description,
	healthcheck_report_mute_dialog_unmutecheck: healthcheck_report_mute_dialog_unmutecheck,
	healthcheck_report_mute_dialog_unmutecheck_description: healthcheck_report_mute_dialog_unmutecheck_description,
	healthcheck_report_nettype_eth: healthcheck_report_nettype_eth,
	healthcheck_report_nettype_ethwifi: healthcheck_report_nettype_ethwifi,
	healthcheck_report_nettype_wireless: healthcheck_report_nettype_wireless,
	healthcheck_report_network_gateway: healthcheck_report_network_gateway,
	healthcheck_report_networkinfo: healthcheck_report_networkinfo,
	healthcheck_report_nicinfo_connection_info: healthcheck_report_nicinfo_connection_info,
	healthcheck_report_nicinfo_connection_info_nostation: healthcheck_report_nicinfo_connection_info_nostation,
	healthcheck_report_nicinfo_connection_more_info: healthcheck_report_nicinfo_connection_more_info,
	healthcheck_report_qrcode_description: healthcheck_report_qrcode_description,
	healthcheck_report_qrcode_title: healthcheck_report_qrcode_title,
	healthcheck_report_qrcodemodal_title: healthcheck_report_qrcodemodal_title,
	healthcheck_report_radio_button_all: healthcheck_report_radio_button_all,
	healthcheck_report_radio_button_fail: healthcheck_report_radio_button_fail,
	healthcheck_report_radio_button_info: healthcheck_report_radio_button_info,
	healthcheck_report_radio_button_premium: healthcheck_report_radio_button_premium,
	healthcheck_report_radio_button_warn: healthcheck_report_radio_button_warn,
	healthcheck_report_table_header_state: healthcheck_report_table_header_state,
	healthcheck_report_table_header_what: healthcheck_report_table_header_what,
	healthcheck_report_table_header_where: healthcheck_report_table_header_where,
	healthcheck_report_ticket: healthcheck_report_ticket,
	healthcheck_report_unmute_action: healthcheck_report_unmute_action,
	healthcheck_status_check_running_subtitle: healthcheck_status_check_running_subtitle,
	healthcheck_status_check_running_title: healthcheck_status_check_running_title,
	healthcheck_status_code_subtitle: healthcheck_status_code_subtitle,
	healthcheck_status_ok_nopremium_subtitle: healthcheck_status_ok_nopremium_subtitle,
	healthcheck_status_ok_subtitle: healthcheck_status_ok_subtitle,
	healthcheck_status_ok_title: healthcheck_status_ok_title,
	healthcheck_status_problems_captive_subtitle: healthcheck_status_problems_captive_subtitle,
	healthcheck_status_problems_generic_subtitle: healthcheck_status_problems_generic_subtitle,
	healthcheck_status_problems_internet_subtitle: healthcheck_status_problems_internet_subtitle,
	healthcheck_status_problems_local_subtitle: healthcheck_status_problems_local_subtitle,
	healthcheck_status_problems_net_subtitle: healthcheck_status_problems_net_subtitle,
	healthcheck_status_problems_title: healthcheck_status_problems_title,
	healthcheck_status_warn_dhcp_subtitle: healthcheck_status_warn_dhcp_subtitle,
	healthcheck_status_warn_generic_subtitle: healthcheck_status_warn_generic_subtitle,
	healthcheck_status_warn_internet_subtitle: healthcheck_status_warn_internet_subtitle,
	healthcheck_status_warn_local_subtitle: healthcheck_status_warn_local_subtitle,
	healthcheck_status_warn_net_subtitle: healthcheck_status_warn_net_subtitle,
	healthcheck_status_warn_title: healthcheck_status_warn_title,
	healthcheck_statusbadge_fail: healthcheck_statusbadge_fail,
	healthcheck_statusbadge_info: healthcheck_statusbadge_info,
	healthcheck_statusbadge_skipped: healthcheck_statusbadge_skipped,
	healthcheck_statusbadge_success: healthcheck_statusbadge_success,
	healthcheck_statusbadge_warn: healthcheck_statusbadge_warn,
	healthcheck_v_gateway_I: healthcheck_v_gateway_I,
	healthcheck_v_gateway_easy: healthcheck_v_gateway_easy,
	healthcheck_v_gateway_tech: healthcheck_v_gateway_tech,
	healthcheck_v_geoloc_I: healthcheck_v_geoloc_I,
	healthcheck_v_geoloc_easy: healthcheck_v_geoloc_easy,
	healthcheck_v_geoloc_tech: healthcheck_v_geoloc_tech,
	healthcheck_v_isp_I: healthcheck_v_isp_I,
	healthcheck_v_isp_easy: healthcheck_v_isp_easy,
	healthcheck_v_isp_tech: healthcheck_v_isp_tech,
	healthcheck_v_network_I: healthcheck_v_network_I,
	healthcheck_v_network_easy: healthcheck_v_network_easy,
	healthcheck_v_network_tech: healthcheck_v_network_tech,
	healthcheck_v_nicinfo_I: healthcheck_v_nicinfo_I,
	healthcheck_v_nicinfo_easy: healthcheck_v_nicinfo_easy,
	healthcheck_v_nicinfo_tech: healthcheck_v_nicinfo_tech,
	healthcheck_v_self_I: healthcheck_v_self_I,
	healthcheck_v_self_easy: healthcheck_v_self_easy,
	healthcheck_v_self_tech: healthcheck_v_self_tech,
	home_health_check_discovery_running: home_health_check_discovery_running,
	home_network_subtitle_eth: home_network_subtitle_eth,
	home_network_subtitle_eth_usb: home_network_subtitle_eth_usb,
	internet_about: internet_about,
	internet_average_download: internet_average_download,
	internet_average_title: internet_average_title,
	internet_average_upload: internet_average_upload,
	internet_based_on: internet_based_on,
	internet_based_on_ratings: internet_based_on_ratings,
	internet_based_on_samples: internet_based_on_samples,
	internet_compare_providers: internet_compare_providers,
	internet_data_trend: internet_data_trend,
	internet_distribution: internet_distribution,
	internet_downtime: internet_downtime,
	internet_last_speed_test: internet_last_speed_test,
	internet_latency: internet_latency,
	internet_location_not_available: internet_location_not_available,
	internet_location_server_from: internet_location_server_from,
	internet_location_server_to: internet_location_server_to,
	internet_network: internet_network,
	internet_no_data: internet_no_data,
	internet_no_data_last_speed_test: internet_no_data_last_speed_test,
	internet_no_data_period_example: internet_no_data_period_example,
	internet_no_data_period_timeline: internet_no_data_period_timeline,
	internet_no_data_trend: internet_no_data_trend,
	internet_outages: internet_outages,
	internet_outages_summary: internet_outages_summary,
	internet_performance_score: internet_performance_score,
	internet_provider: internet_provider,
	internet_ratings: internet_ratings,
	internet_report: internet_report,
	internet_samples: internet_samples,
	internet_schedule: internet_schedule,
	internet_schedule_edit: internet_schedule_edit,
	internet_score: internet_score,
	internet_score_info: internet_score_info,
	internet_scoreboard: internet_scoreboard,
	internet_send_report_body: internet_send_report_body,
	internet_send_report_empty_caption: internet_send_report_empty_caption,
	internet_send_report_empty_subtitle: internet_send_report_empty_subtitle,
	internet_send_report_empty_title: internet_send_report_empty_title,
	internet_send_report_title: internet_send_report_title,
	internet_sentiment: internet_sentiment,
	internet_speed_average: internet_speed_average,
	internet_speed_performance: internet_speed_performance,
	internet_test_samples: internet_test_samples,
	internet_test_server_location: internet_test_server_location,
	internet_test_speed: internet_test_speed,
	internet_timeline: internet_timeline,
	internet_total_rating: internet_total_rating,
	internet_trend_in: internet_trend_in,
	internet_user_rating: internet_user_rating,
	internet_view_details: internet_view_details,
	internetinfo_your_isp_home: internetinfo_your_isp_home,
	isp_home: isp_home,
	isp_rank_summary_rankaverage: isp_rank_summary_rankaverage,
	isp_rank_summary_rankaverage_location: isp_rank_summary_rankaverage_location,
	isp_rank_summary_rankbottom: isp_rank_summary_rankbottom,
	isp_rank_summary_rankbottom_location: isp_rank_summary_rankbottom_location,
	isp_rank_summary_ranktop: isp_rank_summary_ranktop,
	isp_rank_summary_ranktop_location: isp_rank_summary_ranktop_location,
	isp_summary_card_nointernet: isp_summary_card_nointernet,
	last_month: last_month,
	maclookup_inforow_family: maclookup_inforow_family,
	maclookup_inforow_type: maclookup_inforow_type,
	model_not_recognized: model_not_recognized,
	netstats_infoprofile_other: netstats_infoprofile_other,
	netstats_type_personal: netstats_type_personal,
	notification_service_healthcheck_connectivity_problems_title: notification_service_healthcheck_connectivity_problems_title,
	notifications_page_manage_body: notifications_page_manage_body,
	notifications_page_manage_extra: notifications_page_manage_extra,
	notifications_page_manage_title: notifications_page_manage_title,
	notifications_page_notify_new: notifications_page_notify_new,
	notifications_page_title: notifications_page_title,
	notifications_set_title_recent: notifications_set_title_recent,
	num_mbps: num_mbps,
	num_ms: num_ms,
	outage_today: outage_today,
	placeholder_email: placeholder_email,
	portscan_port_action: portscan_port_action,
	portscan_port_description: portscan_port_description,
	portscan_port_name: portscan_port_name,
	portscan_scanmode_all: portscan_scanmode_all,
	premium_button: premium_button,
	premium_feature: premium_feature,
	premium_unlock_all: premium_unlock_all,
	presence_add_dialog_title: presence_add_dialog_title,
	presence_arrived_at_time: presence_arrived_at_time,
	presence_arrived_on_datetime: presence_arrived_on_datetime,
	presence_autofill_already_in_net: presence_autofill_already_in_net,
	presence_autofill_dialog_more_users: presence_autofill_dialog_more_users,
	presence_autofill_dialog_notfound_message: presence_autofill_dialog_notfound_message,
	presence_autofill_dialog_title: presence_autofill_dialog_title,
	presence_autofill_empty_caption: presence_autofill_empty_caption,
	presence_autofill_empty_subtitle: presence_autofill_empty_subtitle,
	presence_autofill_empty_title: presence_autofill_empty_title,
	presence_autofill_table_headerdevice: presence_autofill_table_headerdevice,
	presence_autofill_table_nameplaceholder: presence_autofill_table_nameplaceholder,
	presence_badge_other: presence_badge_other,
	presence_badge_tracking: presence_badge_tracking,
	presence_contact_type: presence_contact_type,
	presence_delete_dialog_body: presence_delete_dialog_body,
	presence_delete_dialog_title: presence_delete_dialog_title,
	presence_devices_dialog_title: presence_devices_dialog_title,
	presence_display_name: presence_display_name,
	presence_edit_already_assigned_devices: presence_edit_already_assigned_devices,
	presence_edit_at_least_one_device: presence_edit_at_least_one_device,
	presence_edit_dialog_title: presence_edit_dialog_title,
	presence_edit_multi_device: presence_edit_multi_device,
	presence_error_incomplete: presence_error_incomplete,
	presence_gender: presence_gender,
	presence_gender_explanation: presence_gender_explanation,
	presence_left_at_time: presence_left_at_time,
	presence_left_on_datetime: presence_left_on_datetime,
	presence_profile_photo: presence_profile_photo,
	presence_send_report_body: presence_send_report_body,
	presence_send_report_empty_caption: presence_send_report_empty_caption,
	presence_send_report_empty_subtitle: presence_send_report_empty_subtitle,
	presence_send_report_empty_title: presence_send_report_empty_title,
	presence_send_report_title: presence_send_report_title,
	presence_upload_profile_photo: presence_upload_profile_photo,
	rating_comments: rating_comments,
	rating_date: rating_date,
	rating_dislike_because: rating_dislike_because,
	rating_edit: rating_edit,
	rating_hate_because: rating_hate_because,
	rating_like_because: rating_like_because,
	rating_love_because: rating_love_because,
	rating_ok_because: rating_ok_because,
	rating_title: rating_title,
	recognize_missing_modal_footer_nochecked: recognize_missing_modal_footer_nochecked,
	recognize_missing_modal_form_typeheader: recognize_missing_modal_form_typeheader,
	recognize_userinput_form_os: recognize_userinput_form_os,
	recognize_userinput_form_typeheader: recognize_userinput_form_typeheader,
	recognize_userinput_osselection_form_description: recognize_userinput_osselection_form_description,
	relative_current_day: relative_current_day,
	relative_current_month: relative_current_month,
	relative_current_week: relative_current_week,
	relative_current_year: relative_current_year,
	relative_day_long: relative_day_long,
	relative_hour_long: relative_hour_long,
	relative_min_long: relative_min_long,
	relative_minute_long: relative_minute_long,
	relative_month_long: relative_month_long,
	relative_now: relative_now,
	relative_older: relative_older,
	relative_today: relative_today,
	relative_week_long: relative_week_long,
	relative_year_long: relative_year_long,
	relative_yesterday: relative_yesterday,
	routercheck_emptystate_subtitle: routercheck_emptystate_subtitle,
	routercheck_emptystate_title: routercheck_emptystate_title,
	routercheck_internet_address: routercheck_internet_address,
	routercheck_last_update: routercheck_last_update,
	routercheck_never_subtitle: routercheck_never_subtitle,
	routercheck_never_title: routercheck_never_title,
	routercheck_openports_action: routercheck_openports_action,
	routercheck_openports_title: routercheck_openports_title,
	routercheck_port_external: routercheck_port_external,
	routercheck_port_internal: routercheck_port_internal,
	routercheck_port_protocol: routercheck_port_protocol,
	routercheck_premium_subtitle: routercheck_premium_subtitle,
	routercheck_premium_title: routercheck_premium_title,
	routercheck_progress_caption: routercheck_progress_caption,
	routercheck_progress_subtitle: routercheck_progress_subtitle,
	routercheck_progress_title: routercheck_progress_title,
	routercheck_protected: routercheck_protected,
	routercheck_protected_description: routercheck_protected_description,
	routercheck_publicip: routercheck_publicip,
	routercheck_publicip_description: routercheck_publicip_description,
	routercheck_toolresult_danger_subtitle: routercheck_toolresult_danger_subtitle,
	routercheck_toolresult_danger_title: routercheck_toolresult_danger_title,
	routercheck_toolresult_success_subtitle: routercheck_toolresult_success_subtitle,
	routercheck_toolresult_success_title: routercheck_toolresult_success_title,
	routercheck_toolresult_sync_subtitle: routercheck_toolresult_sync_subtitle,
	routercheck_toolresult_sync_title: routercheck_toolresult_sync_title,
	routercheck_toolresult_warning_subtitle: routercheck_toolresult_warning_subtitle,
	routercheck_toolresult_warning_title: routercheck_toolresult_warning_title,
	routercheck_unknown: routercheck_unknown,
	routercheck_unknown_description: routercheck_unknown_description,
	routercheck_unprotectedboth: routercheck_unprotectedboth,
	routercheck_unprotectedboth_description: routercheck_unprotectedboth_description,
	routercheck_unprotectednatpmp: routercheck_unprotectednatpmp,
	routercheck_unprotectednatpmp_description: routercheck_unprotectednatpmp_description,
	routercheck_unprotectedupnp: routercheck_unprotectedupnp,
	routercheck_unprotectedupnp_description: routercheck_unprotectedupnp_description,
	routercheck_wan: routercheck_wan,
	routercheck_wan_description: routercheck_wan_description,
	routercheck_webinterface_link: routercheck_webinterface_link,
	routercheck_your_router_brand: routercheck_your_router_brand,
	routercheck_your_router_family: routercheck_your_router_family,
	routercheck_your_router_model: routercheck_your_router_model,
	routercheck_your_router_releasedate: routercheck_your_router_releasedate,
	routercheck_your_router_title: routercheck_your_router_title,
	routercheck_your_setup_title: routercheck_your_setup_title,
	schedule_hours: schedule_hours,
	schedule_max_run: schedule_max_run,
	security_confirm_all_dialog_body: security_confirm_all_dialog_body,
	security_confirm_all_dialog_title: security_confirm_all_dialog_title,
	security_network_vulnerabilities: security_network_vulnerabilities,
	security_score_access_point_subtitle_danger: security_score_access_point_subtitle_danger,
	security_score_access_point_subtitle_success: security_score_access_point_subtitle_success,
	security_score_access_point_subtitle_warning: security_score_access_point_subtitle_warning,
	security_score_access_point_title_danger: security_score_access_point_title_danger,
	security_score_access_point_title_success: security_score_access_point_title_success,
	security_score_access_point_title_warning: security_score_access_point_title_warning,
	security_score_alert_disabled_title: security_score_alert_disabled_title,
	security_score_alert_enabled_title: security_score_alert_enabled_title,
	security_score_alert_subtitle: security_score_alert_subtitle,
	security_score_alert_switch: security_score_alert_switch,
	security_score_all_confirmed_devices_title: security_score_all_confirmed_devices_title,
	security_score_automated_disabled_title: security_score_automated_disabled_title,
	security_score_automated_enabled_title: security_score_automated_enabled_title,
	security_score_automated_subtitle: security_score_automated_subtitle,
	security_score_confirm_devices: security_score_confirm_devices,
	security_score_score: security_score_score,
	security_score_secure: security_score_secure,
	security_score_state_change_disabled_title: security_score_state_change_disabled_title,
	security_score_state_change_enabled_title: security_score_state_change_enabled_title,
	security_score_state_change_subtitle: security_score_state_change_subtitle,
	security_score_unconfirmed_devices_subtitle: security_score_unconfirmed_devices_subtitle,
	security_score_unconfirmed_devices_title: security_score_unconfirmed_devices_title,
	security_score_unconfirmed_devices_titles: security_score_unconfirmed_devices_titles,
	security_score_unsecure: security_score_unsecure,
	security_score_upgrade_to_unlock: security_score_upgrade_to_unlock,
	sidebar_community: sidebar_community,
	sidebar_help: sidebar_help,
	sidebar_home: sidebar_home,
	sidebar_internet: sidebar_internet,
	sidebar_notifications: sidebar_notifications,
	sidebar_outages: sidebar_outages,
	sidebar_tools: sidebar_tools,
	speedtest_achievements: speedtest_achievements,
	speedtest_city: speedtest_city,
	speedtest_compare_location: speedtest_compare_location,
	speedtest_compare_performance: speedtest_compare_performance,
	speedtest_comparison_not_available: speedtest_comparison_not_available,
	speedtest_contact_support: speedtest_contact_support,
	speedtest_country: speedtest_country,
	speedtest_distribution_not_available: speedtest_distribution_not_available,
	speedtest_download: speedtest_download,
	speedtest_download_info: speedtest_download_info,
	speedtest_failed: speedtest_failed,
	speedtest_header_connection: speedtest_header_connection,
	speedtest_header_location: speedtest_header_location,
	speedtest_header_provider: speedtest_header_provider,
	speedtest_isp_info_location: speedtest_isp_info_location,
	speedtest_mlab_body: speedtest_mlab_body,
	speedtest_mlab_title: speedtest_mlab_title,
	speedtest_rate: speedtest_rate,
	speedtest_reviews: speedtest_reviews,
	speedtest_score_category_4k: speedtest_score_category_4k,
	speedtest_score_category_AudioStream: speedtest_score_category_AudioStream,
	speedtest_score_category_BasicStream: speedtest_score_category_BasicStream,
	speedtest_score_category_HDStream: speedtest_score_category_HDStream,
	speedtest_score_category_HDWebcam: speedtest_score_category_HDWebcam,
	"speedtest_score_category_HDvid&photo": "HD Video & Photo",
	speedtest_score_category_L_filetrans: speedtest_score_category_L_filetrans,
	speedtest_score_category_Messaging: speedtest_score_category_Messaging,
	speedtest_score_category_SDStream: speedtest_score_category_SDStream,
	speedtest_score_category_SDWebcam: speedtest_score_category_SDWebcam,
	speedtest_score_category_S_filetrans: speedtest_score_category_S_filetrans,
	speedtest_score_category_UHD4K: speedtest_score_category_UHD4K,
	speedtest_score_category_UHD8K: speedtest_score_category_UHD8K,
	speedtest_score_category_brows_emails: speedtest_score_category_brows_emails,
	speedtest_score_category_browsing: speedtest_score_category_browsing,
	speedtest_score_category_challenging: speedtest_score_category_challenging,
	speedtest_score_category_gameon: speedtest_score_category_gameon,
	speedtest_score_category_gameover: speedtest_score_category_gameover,
	speedtest_score_category_inthegame: speedtest_score_category_inthegame,
	speedtest_score_category_limited: speedtest_score_category_limited,
	speedtest_score_category_photo: speedtest_score_category_photo,
	speedtest_score_category_small_brows_email: speedtest_score_category_small_brows_email,
	"speedtest_score_category_vid&photo": "Video & Photo",
	speedtest_score_category_video: speedtest_score_category_video,
	speedtest_score_category_winning: speedtest_score_category_winning,
	speedtest_start_button: speedtest_start_button,
	speedtest_stats_jitter: speedtest_stats_jitter,
	speedtest_stats_jitter_info: speedtest_stats_jitter_info,
	speedtest_stats_loss: speedtest_stats_loss,
	speedtest_stats_loss_info: speedtest_stats_loss_info,
	speedtest_stats_ping: speedtest_stats_ping,
	speedtest_stats_ping_info: speedtest_stats_ping_info,
	speedtest_tested: speedtest_tested,
	speedtest_title: speedtest_title,
	speedtest_title_call: speedtest_title_call,
	speedtest_title_gaming: speedtest_title_gaming,
	speedtest_title_social: speedtest_title_social,
	speedtest_title_video: speedtest_title_video,
	speedtest_title_work: speedtest_title_work,
	speedtest_try_again: speedtest_try_again,
	speedtest_upload: speedtest_upload,
	speedtest_upload_info: speedtest_upload_info,
	status_for_duration: status_for_duration,
	this_month: this_month,
	time_current_day: time_current_day,
	time_current_month: time_current_month,
	time_current_week: time_current_week,
	time_current_year: time_current_year,
	time_older: time_older,
	time_today: time_today,
	time_yesterday: time_yesterday,
	timeline_no_event: timeline_no_event,
	timeline_no_notification: timeline_no_notification,
	timeline_no_sample: timeline_no_sample,
	timeline_table_header_details: timeline_table_header_details,
	timeline_table_header_port: timeline_table_header_port,
	timeline_table_header_state: timeline_table_header_state,
	timeline_table_header_subject: timeline_table_header_subject,
	timeline_table_header_type: timeline_table_header_type,
	timeline_table_header_when: timeline_table_header_when,
	tools_page_title: tools_page_title,
	tooltargetbar_ip_address: tooltargetbar_ip_address,
	tooltargetbar_location: tooltargetbar_location,
	tooltargetbar_mac_address: tooltargetbar_mac_address,
	tooltargetbar_no_open_ports: tooltargetbar_no_open_ports,
	tooltargetbar_open_ports: tooltargetbar_open_ports,
	tooltargetbar_provider: tooltargetbar_provider,
	view_timeline_button: view_timeline_button,
	waiting_rate: waiting_rate
};

var LOCALE_EN_US = "en-US";
var LOCALE_ES_ES = "es-ES";
var LOCALE_IT_IT = "it-IT";
var LOCALE_DEFAULT = LOCALE_EN_US;
var LOCALE_PSEUDO = "pseudo.locale";
/**
 * Returns the locale to be used to format strings, dates, and numbers in localized form using Javascript standard
 * formatting methods like toLocaleTimeString and toLocaleDateString.
 *
 * @return {string}
 */

function getCurrentLocale() {
  var initOptions = intl__default["default"].getInitOptions();
  if (!initOptions || !initOptions.currentLocale) return LOCALE_DEFAULT;
  var currentLocale = initOptions.currentLocale;
  return currentLocale === LOCALE_PSEUDO || !currentLocale ? LOCALE_DEFAULT : currentLocale;
}
/**
 * Returns an object whose keys are locale names and whose values are Javascript Objects mapping keys into messages.
 *
 * @return {Object} The list of supported locales
 */

function getAvailableLocales() {
  var locales = {};
  locales[LOCALE_EN_US] = LocaleEnUs;
  locales[LOCALE_ES_ES] = LocaleEsEs;
  locales[LOCALE_IT_IT] = LocaleItIt;
  return locales;
}
function currentLocaleUsers24Hours() {
  return new Intl.DateTimeFormat(getCurrentLocale(), {
    hour: 'numeric'
  }).formatToParts(new Date(2020, 0, 1, 13)).find(function (part) {
    return part.type === 'hour';
  }).value.length === 2;
}

/*
 * Copyright (c) Fing. All rights reserved.
 */
var DATE_FORMAT_RECENT = "recent";
var DATE_FORMAT_SHORT = "short";
var DATE_FORMAT_LONG = "long";
var DATE_FORMAT_SMART = "smart";
var MS_ONE_MINUTE = 60000;
var MS_ONE_HOUR = MS_ONE_MINUTE * 60;
var MS_ONE_DAY = MS_ONE_HOUR * 24;
var MS_ONE_WEEK = MS_ONE_DAY * 7;
var MS_ONE_MONTH = MS_ONE_DAY * 30;
var MS_FIVE_WEEK = MS_ONE_WEEK * 5;
var MS_ONE_YEAR = 365 * MS_ONE_DAY;
var TIME_DISTANCE_TODAY = "TODAY";
var TIME_DISTANCE_YESTERDAY = "YESTERDAY";
var TIME_DISTANCE_7D = "7D";
var TIME_DISTANCE_14D = "14D";
var TIME_DISTANCE_21D = "32D";
var TIME_DISTANCE_OLDER = "OLDER";
/**
 * Formats the given amount as a duration.
 *
 * @param timeInMillis The amount of time elapsed, in millis. Can be a string or a number
 * @param size The size, either DATE_FORMAT_SHORT or DATE_FORMAT_LONG
 * @param approx A boolean to flag if the amount should be rounded
 * @return {string} The formatted string
 */

function formatDuration(timeInMillis, size, approx) {
  if (typeof timeInMillis === 'string') {
    timeInMillis = parseInt(timeInMillis, 10);
  } else if (typeof timeInMillis !== 'number') {
    return "NaN";
  }

  var secs = Math.floor(timeInMillis / 1000);
  var days = Math.floor(secs / 86400);
  secs -= days * 86400;
  var hours = Math.floor(secs / 3600);
  secs -= hours * 3600;
  var minutes = Math.floor(secs / 60);

  if (approx) {
    if (minutes > 45) {
      ++hours;
      minutes = 0;
    } else if ((days > 0 || hours > 0) && minutes < 15) {
      minutes = 0;
    }

    if (days > 0) {
      minutes = 0;

      if (hours <= 3) {
        hours = 0;
      } else if (hours >= 18) {
        hours = 0;
        ++days;
      }
    }

    if (hours >= 24) {
      days += hours / 24;
      hours = hours % 24;
    }
  }

  if (size === DATE_FORMAT_SHORT) {
    var elements = [];

    if (days > 0) {
      elements.push(intl__default["default"].get("duration_day_short", {
        amount: days
      }));
    }

    if (hours > 0
    /*|| (days > 0)*/
    ) {
      elements.push(intl__default["default"].get("duration_hour_short", {
        amount: hours
      }));
    }

    if (minutes > 0 || elements.length === 0) {
      elements.push(intl__default["default"].get("duration_min_short", {
        amount: minutes
      }));
    }

    return elements.join(" ");
  } else {
    var _elements = [];

    if (days > 0) {
      _elements.push(intl__default["default"].get("duration_day_long", {
        amount: days
      }));
    }

    if (hours > 0
    /*|| (days > 0)*/
    ) {
      _elements.push(intl__default["default"].get("duration_hour_long", {
        amount: hours
      }));
    }

    if (minutes > 0 || _elements.length === 0) {
      if (_elements.length > 0) {
        _elements.push(intl__default["default"].get('duration_min_long', {
          amount: minutes
        }));
      } else {
        _elements.push(intl__default["default"].get('duration_minute_long', {
          amount: minutes
        }));
      }
    }

    return _elements.join(", ");
  }
}
/**
 * Formats an absolute time.
 *
 * @param timestamp The amount of time. Can be a string, a number or a Date
 * @param size The size, either DATE_FORMAT_SHORT, DATE_FORMAT_LONG or DATE_FORMAT_SMART
 * @return {string}
 */

function formatAbsoluteDate(timestamp, size) {
  if (!timestamp) return "";

  if (timestamp instanceof Date) {
    timestamp = fixTimestampMillis(timestamp.getTime());
  } else if (typeof timestamp === 'string') {
    timestamp = fixTimestampMillis(parseInt(timestamp, 10));
  } else if (typeof timestamp === 'number') {
    timestamp = fixTimestampMillis(timestamp);
  } else {
    return "NaN";
  }

  var startDate = new Date(timestamp);
  var locale = getCurrentLocale();
  var options = {
    month: 'short',
    year: 'numeric'
  };

  if (size === DATE_FORMAT_RECENT) {
    options = {
      month: 'short',
      day: 'numeric'
    };
  } else if (size === DATE_FORMAT_SHORT) {
    options = {
      month: 'short',
      year: 'numeric'
    };
  } else if (size === DATE_FORMAT_LONG) {
    options = {
      day: "numeric",
      month: 'short',
      year: 'numeric'
    };
  } else if (size === DATE_FORMAT_SMART) {
    var nowDate = new Date();
    var within180d = nowDate.getFullYear() === startDate.getFullYear();
    var within30d = within180d && nowDate.getMonth() === startDate.getMonth();
    var within24h = within30d && nowDate.getDate() === startDate.getDate(); // Just print the time if it's too close

    if (within24h) {
      return startDate.toLocaleTimeString(locale, {
        hour: 'numeric',
        minute: 'numeric'
      });
    }

    options = within30d ? {
      weekday: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    } : within180d ? {
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    } : {
      month: 'short',
      year: 'numeric',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    };
  }

  return startDate.toLocaleDateString(locale, options);
}
function formatSmartAbsoluteDate(timestamp) {
  var nowDate = new Date();

  if (typeof timestamp === 'string') {
    timestamp = parseInt(timestamp, 10);
  }

  var startDate = new Date(timestamp);
  var within180d = nowDate.getFullYear() == startDate.getFullYear();
  var within30d = within180d && nowDate.getMonth() == startDate.getMonth();
  var within24h = within30d && nowDate.getDate() == startDate.getDate();
  var options = within24h ? {
    hour: 'numeric',
    minute: 'numeric'
  } : within30d ? {
    weekday: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  } : within180d ? {
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  } : {
    month: 'short',
    year: 'numeric',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  };
  var locale = intl__default["default"].getInitOptions().currentLocale === "pseudo.locale" || !intl__default["default"].getInitOptions().currentLocale ? "en-US" : intl__default["default"].getInitOptions().currentLocale;
  return within24h ? startDate.toLocaleTimeString(locale, options) : startDate.toLocaleDateString(locale, options);
}
function formatRelativeDate(timestamp, size) {
  if (!timestamp) return "";

  if (timestamp instanceof Date) {
    timestamp = fixTimestampMillis(timestamp.getTime());
  } else if (typeof timestamp === 'string') {
    timestamp = fixTimestampMillis(parseInt(timestamp, 10));
  } else if (typeof timestamp === 'number') {
    timestamp = fixTimestampMillis(timestamp);
  } else {
    return "NaN";
  }

  var locale = getCurrentLocale();
  var now = new Date().getTime();
  var oneMinAgo = now - MS_ONE_MINUTE;
  var oneHourAgo = now - MS_ONE_HOUR;
  var oneDayAgo = now - MS_ONE_DAY;
  var oneWeekAgo = now - MS_ONE_WEEK;
  var oneMonthAgo = now - MS_ONE_MONTH;
  var oneYearAgo = now - MS_ONE_YEAR;
  var fiveWeekAgo = now - MS_FIVE_WEEK;

  if (size === DATE_FORMAT_SHORT) {
    if (timestamp <= 0) return "";
    if (timestamp > oneMinAgo) return intl__default["default"].get('relative_now');

    if (timestamp > oneHourAgo) {
      var v = Math.floor((now - timestamp) / MS_ONE_MINUTE + 0.5);
      return intl__default["default"].get('duration_min_short', {
        amount: v
      });
    }

    if (timestamp > oneDayAgo) {
      var _v = Math.floor((now - timestamp) / MS_ONE_HOUR + 0.5);

      return intl__default["default"].get('duration_hour_short', {
        amount: _v
      });
    }

    if (timestamp > oneMonthAgo) {
      var _v2 = Math.floor((now - timestamp) / MS_ONE_DAY + 0.5);

      return intl__default["default"].get('duration_day_short', {
        amount: _v2
      });
    } // Print the localized name of the month, e.g. "Jan"


    return new Date(timestamp).toLocaleString(locale, {
      month: "short"
    });
  } else {
    if (timestamp > oneMinAgo) {
      return intl__default["default"].get("relative_now");
    } else if (timestamp > oneHourAgo) {
      var _v3 = Math.floor((now - timestamp) / MS_ONE_MINUTE + 0.5);

      return intl__default["default"].get("relative_minute_long", {
        amount: _v3
      });
    } else if (timestamp > oneDayAgo) {
      var _v4 = Math.floor((now - timestamp) / MS_ONE_HOUR + 0.5);

      return intl__default["default"].get("relative_hour_long", {
        amount: _v4
      });
    } else if (timestamp > oneWeekAgo) {
      var _v5 = Math.floor((now - timestamp) / MS_ONE_DAY + 0.5);

      return intl__default["default"].get("relative_day_long", {
        amount: _v5
      });
    } else if (timestamp > fiveWeekAgo) {
      var _v6 = Math.floor((now - timestamp) / MS_ONE_WEEK + 0.5);

      return intl__default["default"].get("relative_week_long", {
        amount: _v6
      });
    } else if (timestamp > oneYearAgo) {
      var _v7 = Math.floor((now - timestamp) / MS_ONE_MONTH + 0.5);

      return intl__default["default"].get("relative_month_long", {
        amount: _v7
      });
    } else {
      var _v8 = Math.floor((now - timestamp) / MS_ONE_YEAR + 0.5);

      return intl__default["default"].get("relative_year_long", {
        amount: _v8
      });
    }
  }
}
/**
 * Checks if the given timestamp is within a given number of days
 * from the reference date.
 * The function checks in ranges of 24h from midnight, therefore:
 * days=0: timestamp is within [Day,Day]
 * days=1: timestamp is within [Day, Day-1]
 * days=7: timestamp is within [Day, Day-7]
 *
 * @param {number} timestamp A timestamp to check
 * @param {number} reference A reference timestamp to check against
 * @param {number} days The distance from the reference date
 * @return {boolean} TRUE if timestamp is in the specified range
 */

function isWithinDays(timestamp, reference, days) {
  var refDate = new Date(reference);
  var endMillis = refDate.setHours(0, 0, 0, 0) + 24 * 3600 * 1000;
  var startMillis = refDate.setHours(-days * 24, 0, 0, 0);
  return timestamp >= startMillis && timestamp < endMillis;
}
/**
 * Returns the standard time distance enum, based on the distance between the
 * timestamp and the reference date.
 *
 * @param {number} timestamp The timestamp to map
 * @param {number} reference The timestamp of the reference time (usually, now)
 */

function standardTimeDistance(timestamp, reference) {
  if (isWithinDays(timestamp, reference, 0)) {
    return TIME_DISTANCE_TODAY;
  } else if (isWithinDays(timestamp, reference, 1)) {
    return TIME_DISTANCE_YESTERDAY;
  } else if (isWithinDays(timestamp, reference, 7)) {
    return TIME_DISTANCE_7D;
  } else if (isWithinDays(timestamp, reference, 14)) {
    return TIME_DISTANCE_14D;
  } else if (isWithinDays(timestamp, reference, 21)) {
    return TIME_DISTANCE_21D;
  } else {
    return TIME_DISTANCE_OLDER;
  }
}
function standardTimeDistanceForNotification(timestamp, reference) {
  if (isWithinDays(timestamp, reference, 0)) {
    return TIME_DISTANCE_TODAY;
  } else if (isWithinDays(timestamp, reference, 1)) {
    return TIME_DISTANCE_YESTERDAY;
  } else {
    return TIME_DISTANCE_OLDER;
  }
}

function fixTimestampMillis(ts) {
  if (Math.abs(Date.now() - ts) > 15 * MS_ONE_YEAR) ts *= 1000;
  return ts;
}
/**
 * Returns the number of difference's days from startDate to endDate.
 *
 * @param {Date} startDate The initial date
 * @param {Date} endDate The end date
 */


function daysDifferenceBetween(startDate, endDate) {
  return Math.floor((endDate.getTime() - startDate.getTime()) / 86400000);
}
function daysDifferenceBetweenUsingTime(endTime, startTime) {
  return Math.floor((endTime - startTime) / 86400000);
}
function daysDifferenceFromNow(difference) {
  return new Date().getTime() - difference * 24 * 3600 * 1000;
}
function formatShortAbsoluteDate(timestamp) {

  if (typeof timestamp === 'string') {
    timestamp = parseInt(timestamp, 10);
  }

  var startDate = new Date(timestamp);
  var options = {
    month: 'short',
    year: 'numeric'
  };
  var locale = intl__default["default"].getInitOptions().currentLocale === "pseudo.locale" || !intl__default["default"].getInitOptions().currentLocale ? "en-US" : intl__default["default"].getInitOptions().currentLocale;
  return startDate.toLocaleDateString(locale, options);
}
function formatHourShort(date) {
  var locale = intl__default["default"].getInitOptions().currentLocale === "pseudo.locale" || !intl__default["default"].getInitOptions().currentLocale ? "en-US" : intl__default["default"].getInitOptions().currentLocale;
  return date.toLocaleTimeString(locale, {
    hour: 'numeric'
  });
}
function getDayName(date, locale) {
  return date.toLocaleDateString(locale, {
    weekday: 'long'
  });
}
function isWithinDaysString(timestamp, days) {
  var now = new Date().getTime();
  var xAgo = now - days * MS_ONE_DAY;

  if (typeof timestamp === 'string') {
    timestamp = parseInt(timestamp, 10);
  }

  return timestamp > xAgo;
}
function isInTodayOrYesterday(inputTs, isYesterday) {
  var now = new Date();
  var today = new Date().setHours(0, 0, 0, 0);
  var yesterday = new Date(now.getTime() - 86400000).setHours(0, 0, 0, 0); // is the only way

  var inputDate = new Date(parseInt(inputTs, 10)).setHours(0, 0, 0, 0);

  if (isYesterday) {
    if (yesterday === inputDate) return true;
  } else if (today === inputDate) {
    return true;
  }

  return false;
}
/**
 * Groups events by time, extracting the timestamp of each event using the extraction function.
 *
 * @param events The Array of events
 * @param extractionFn A function (event)=>(number)
 * @returns {*}
 */

function groupEventsByTimeDistance(events, extractionFn) {
  var now = new Date().getTime();
  return events.reduce(function (acc, evt) {
    var timeGroup = standardTimeDistance(extractionFn(evt), now);
    var list = acc[timeGroup];

    if (!list) {
      list = [];
      acc[timeGroup] = list;
    }

    list.push(evt);
    return acc;
  }, {});
}
function groupOldNotificationsByTimeDistance(events, extractionFn) {
  var now = new Date().getTime();
  return events.reduce(function (acc, evt) {
    var timeGroup = standardTimeDistanceForNotification(extractionFn(evt), now);
    var list = acc[timeGroup];

    if (!list) {
      list = [];
      acc[timeGroup] = list;
    }

    list.push(evt);
    return acc;
  }, {});
}

/*
 * Copyright (c) Fing. All rights reserved.
 */
function getContactTypeName(type) {
  if (!type) return null;

  switch (type.toUpperCase()) {
    case CT_FAMILY:
      return intl__default["default"].get("contacttype_family");

    case CT_FAMILY_HIM:
      return intl__default["default"].get("contacttype_family_him");

    case CT_FAMILY_HER:
      return intl__default["default"].get("contacttype_family_her");

    case CT_FAMILY_KID:
      return intl__default["default"].get("contacttype_family_kid");

    case CT_FAMILY_RELATIVE:
      return intl__default["default"].get("contacttype_family_relative");

    case CT_FAMILY_PET:
      return intl__default["default"].get("contacttype_family_pet");

    case CT_FAMILY_PET_CAT:
      return intl__default["default"].get("contacttype_family_pet_cat");

    case CT_FAMILY_PET_DOG:
      return intl__default["default"].get("contacttype_family_pet_dog");

    case CT_COLLEAGUE:
      return intl__default["default"].get("contacttype_colleague");

    case CT_COLLEAGUE_STAFF:
      return intl__default["default"].get("contacttype_colleague_staff");

    case CT_COLLEAGUE_CONTRACTOR:
      return intl__default["default"].get("contacttype_colleague_contractor");

    case CT_COLLEAGUE_VISITOR:
      return intl__default["default"].get("contacttype_colleague_visitor");

    case CT_HELP:
      return intl__default["default"].get("contacttype_help");

    case CT_HELP_CLEANING:
      return intl__default["default"].get("contacttype_help_cleaning");

    case CT_HELP_MEDICAL:
      return intl__default["default"].get("contacttype_help_medical");

    case CT_HELP_MAINTENANCE:
      return intl__default["default"].get("contacttype_help_maintenance");

    case CT_HELP_DELIVERY:
      return intl__default["default"].get("contacttype_help_delivery");

    case CT_FRIEND:
      return intl__default["default"].get("contacttype_friend");

    case CT_GUEST:
      return intl__default["default"].get("contacttype_guest");

    case CT_OTHERS:
      return intl__default["default"].get("contacttype_others");

    default:
      return type;
  }
}
function getContactTypeParent(type) {
  if (!type) return null;

  switch (type) {
    case CT_FAMILY_HIM:
    case CT_FAMILY_HER:
    case CT_FAMILY_KID:
    case CT_FAMILY_RELATIVE:
    case CT_FAMILY_PET:
      return CT_FAMILY;

    case CT_FAMILY_PET_CAT:
    case CT_FAMILY_PET_DOG:
      return CT_FAMILY_PET;

    case CT_COLLEAGUE_STAFF:
    case CT_COLLEAGUE_CONTRACTOR:
    case CT_COLLEAGUE_VISITOR:
      return CT_COLLEAGUE;

    case CT_HELP_CLEANING:
    case CT_HELP_MEDICAL:
    case CT_HELP_MAINTENANCE:
    case CT_HELP_DELIVERY:
      return CT_HELP;

    default:
      return null;
  }
}
function getContactTypeDepth(type) {
  if (!type) return 0;
  return getContactHierarchy(type).length - 1;
}
/**
 * Returns an array of elements making the hierarchy.
 *
 * @param type
 * @return {*[]}
 */

function getContactHierarchy(type) {
  if (!type) return [];
  var hierarchy = [];

  do {
    hierarchy.push(type);
    type = getContactTypeParent(type);
  } while (type);

  return hierarchy.reverse();
}
function getStatusContact(contact, genericStatus) {
  var status;

  if (contact && contact.lastChange) {
    var inLast24h = new Date().getTime() - contact.lastChange < 24 * 3600 * 1000;
    var time = formatAbsoluteDate(contact.lastChange, DATE_FORMAT_SMART);
    if (inLast24h) status = intl__default["default"].get(contact.online ? "presence_arrived_at_time" : "presence_left_at_time", {
      time: time
    });else status = intl__default["default"].get(contact.online ? "presence_arrived_on_datetime" : "presence_left_on_datetime", {
      time: time
    });
  } else if (isTracking(contact)) {
    status = contact.online ? intl__default["default"].get("generic_online") : intl__default["default"].get("generic_offline");
  } else if (genericStatus) {
    status = genericStatus;
  } else {
    status = intl__default["default"].get("generic_not_tracking");
  }

  return status;
}
function isTracking(contact) {
  return contact.presenceDevices && contact.presenceDevices.length > 0;
}

var ContactCard = /*#__PURE__*/function (_Component) {
  _inherits(ContactCard, _Component);

  var _super = _createSuper(ContactCard);

  function ContactCard() {
    _classCallCheck(this, ContactCard);

    return _super.apply(this, arguments);
  }

  _createClass(ContactCard, [{
    key: "render",
    value: function render() {
      if (!this.props.contact) return "";
      return this.renderContactCard();
    }
  }, {
    key: "renderContactCard",
    value: function renderContactCard() {
      var _this$props = this.props,
          contact = _this$props.contact,
          width = _this$props.width,
          genericStatus = _this$props.genericStatus,
          activeClass = _this$props.activeClass;
      var status = getStatusContact(contact, genericStatus);
      return /*#__PURE__*/React__default["default"].createElement("div", {
        key: "contact_card_".concat(contact.id),
        className: "card card-frame-s mb-2 mr-2 border " + activeClass,
        style: {
          width: width || "8rem",
          height: "100%"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body p-2 py-3 text-center"
      }, /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
        className: "mb-2",
        size: AVT_SIZE_SMALL,
        contact: contact
      }), /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "text-lh-sm mb-0 text-nowrap overflow-hidden"
      }, contact.contactName), status && /*#__PURE__*/React__default["default"].createElement("small", null, status)));
    }
  }]);

  return ContactCard;
}(React.Component);

var _excluded = ["children"];

var OptionRenderer = function OptionRenderer(props) {
  var type = props.data.value;
  var label = props.data.label;
  var depth = getContactTypeDepth(type);
  var color = props.isSelected ? "fill-white" : "";
  var lMargin = depth > 0 ? "ml-" + 3 * depth : "";
  var rMargin = "mr-2";
  return /*#__PURE__*/React__default["default"].createElement(Select.components.Option, props, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "d-flex align-items-start"
  }, /*#__PURE__*/React__default["default"].createElement(ContactTypeIcon, {
    type: type,
    size: "16px",
    className: "".concat(color, " ").concat(lMargin, " ").concat(rMargin)
  }), /*#__PURE__*/React__default["default"].createElement("div", null, label)));
};

var SelectedValueRendered = function SelectedValueRendered(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React__default["default"].createElement(Select.components.SingleValue, props, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "d-flex align-items-start"
  }, /*#__PURE__*/React__default["default"].createElement(ContactTypeIcon, {
    type: props.data.value,
    size: "16px",
    className: "mr-2"
  }), children));
}; // I don't want/like the vertical separator


var SeparatorRenderer = function SeparatorRenderer() {
  return null;
}; // SVG are by default aligned to the baseline, misplacing the dropdown indicator. We need to add a class to center them


var DropdownRenderer = function DropdownRenderer(props) {
  return /*#__PURE__*/React__default["default"].createElement(Select.components.DropdownIndicator, _extends$3d({}, props, {
    className: "svg-icon"
  }));
};

var styles = {
  control: function control(provided, state) {
    return _objectSpread2(_objectSpread2({}, provided), {}, {
      border: "0.0625rem solid #e7eaf3"
    });
  }
};
var selectComponents = {
  Option: OptionRenderer,
  IndicatorSeparator: SeparatorRenderer,
  DropdownIndicator: DropdownRenderer,
  SingleValue: SelectedValueRendered
};

var ContactTypePicker = /*#__PURE__*/function (_Component) {
  _inherits(ContactTypePicker, _Component);

  var _super = _createSuper(ContactTypePicker);

  function ContactTypePicker(props) {
    var _this;

    _classCallCheck(this, ContactTypePicker);

    _this = _super.call(this, props);
    var options = props.allowedContexts ? props.allowedContexts : CT_ALL_TYPES;
    _this.selectOptions = options.map(function (type) {
      return {
        value: type,
        label: getContactTypeName(type)
      };
    });
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ContactTypePicker, [{
    key: "render",
    value: function render() {
      var defaultContactType = this.props.contactType;
      var selectedValue = this.selectOptions.find(function (opt) {
        return opt.value === defaultContactType;
      });
      return /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        className: "min-w-15rem ".concat(this.props.className || ""),
        components: selectComponents,
        options: this.selectOptions,
        value: selectedValue ? selectedValue : null,
        onChange: this.onChange,
        styles: styles
      });
    }
  }, {
    key: "onChange",
    value: function onChange(selected) {
      if (this.props.onContactTypePicked) this.props.onContactTypePicked(selected.value);
    }
  }]);

  return ContactTypePicker;
}(React.Component);

var PresenceAutoFillTable = /*#__PURE__*/function (_Component) {
  _inherits(PresenceAutoFillTable, _Component);

  var _super = _createSuper(PresenceAutoFillTable);

  function PresenceAutoFillTable(props, context) {
    var _this;

    _classCallCheck(this, PresenceAutoFillTable);

    _this = _super.call(this, props, context);
    _this.selectOptions = CT_ALL_TYPES.map(function (type) {
      return {
        value: type,
        label: getContactTypeName(type)
      };
    });
    return _this;
  }

  _createClass(PresenceAutoFillTable, [{
    key: "render",
    value: function render() {
      var items = this.props.detectedContacts;
      return items && items.length > 0 ? this.renderTable(items) : this.renderNoContacts();
    }
  }, {
    key: "renderNoContacts",
    value: function renderNoContacts() {
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(EmptyState, {
        className: "my-2 w-60 mx-auto",
        image: this.props.emptyStateImage,
        caption: intl__default["default"].get("presence_autofill_empty_caption"),
        title: intl__default["default"].get("presence_autofill_empty_title"),
        subtitle: intl__default["default"].get("presence_autofill_empty_subtitle")
      }));
    }
  }, {
    key: "renderTable",
    value: function renderTable(items) {
      var _this2 = this;

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-borderless table-thead-bordered table-nowrap table-responsive-flip"
      }, /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", null, this.headerForColumn(0)), /*#__PURE__*/React__default["default"].createElement("th", null, this.headerForColumn(1)), /*#__PURE__*/React__default["default"].createElement("th", null, this.headerForColumn(2)), /*#__PURE__*/React__default["default"].createElement("th", {
        style: {
          width: "3em"
        }
      }))), /*#__PURE__*/React__default["default"].createElement("tbody", null, items.map(function (item, idx) {
        return _this2.renderTableRow(item, idx);
      }))));
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get('generic_name');
      if (idx === 1) return intl__default["default"].get('generic_type');
      if (idx === 2) return intl__default["default"].get('presence_autofill_table_headerdevice');
      if (idx === 3) return intl__default["default"].get('generic_actions');
      return '';
    }
  }, {
    key: "renderTableRow",
    value: function renderTableRow(item, index) {
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: item.contactId
      }, /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, this.renderNameEditor(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, this.renderContactType(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, this.renderPresenceDevices(item)), /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3)
      }, this.renderActions(item, index)));
    }
  }, {
    key: "renderNameEditor",
    value: function renderNameEditor(contact) {
      return /*#__PURE__*/React__default["default"].createElement("input", {
        type: "text",
        className: "form-control form-control-sm",
        defaultValue: contact.contactName,
        placeholder: intl__default["default"].get('presence_autofill_table_nameplaceholder')
      });
    }
  }, {
    key: "renderContactType",
    value: function renderContactType(contact) {
      return /*#__PURE__*/React__default["default"].createElement(ContactTypePicker, {
        contactType: contact ? contact.contactType : null
      });
    }
  }, {
    key: "renderPresenceDevices",
    value: function renderPresenceDevices(contact) {
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, contact.presenceDevices && contact.presenceDevices.map(function (device, index) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-block my-1",
          key: "presence_device_".concat(index)
        }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
          type: device.bestType,
          className: "d-inline-block mr-2"
        }), /*#__PURE__*/React__default["default"].createElement("span", null, device.bestName));
      }), contact.otherDevices && contact.otherDevices.map(function (device, index) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-block my-1",
          key: "presence_device_".concat(index)
        }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
          type: device.bestType,
          className: "d-inline-block mr-2"
        }), /*#__PURE__*/React__default["default"].createElement("span", null, device.bestName));
      }));
    }
  }, {
    key: "renderActions",
    value: function renderActions(contact, index) {
      var _this3 = this;

      // Upon click, the previous list is taken, item removed from the array and update sent to the caller via onUpdate
      var onDelete = function onDelete() {
        _this3.props.detectedContacts.splice(index, 1);

        if (_this3.props.onUpdate) {
          _this3.props.onUpdate(_this3.props.detectedContacts);
        }
      };

      return /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onDelete,
        icon: "fa-trash",
        type: BTN_TYPE_SOFT,
        rounded: true,
        title: intl__default["default"].get("generic_delete"),
        titleClass: "d-md-none"
      });
    }
  }]);

  return PresenceAutoFillTable;
}(React.Component);
PresenceAutoFillTable.propTypes = {
  detectedContacts: PropTypes__default["default"].array
};

var PresenceAvatarStrip = /*#__PURE__*/function (_Component) {
  _inherits(PresenceAvatarStrip, _Component);

  var _super = _createSuper(PresenceAvatarStrip);

  function PresenceAvatarStrip() {
    _classCallCheck(this, PresenceAvatarStrip);

    return _super.apply(this, arguments);
  }

  _createClass(PresenceAvatarStrip, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          title = _this$props.title,
          contacts = _this$props.contacts;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: className || ""
      }, this.renderExistingAvatars(title, contacts));
    }
  }, {
    key: "renderExistingAvatars",
    value: function renderExistingAvatars(title, contacts) {
      if (!contacts || contacts.length === 0) return "";
      var moreUserCount = contacts.length - 3;
      var moreUserLabel = intl__default["default"].get("presence_autofill_dialog_more_users", {
        amount: moreUserCount
      });
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "avatar-group mb-1 align-items-center"
      }, title && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mr-2 small"
      }, /*#__PURE__*/React__default["default"].createElement("title", null)), contacts.slice(0, 3).map(function (contact) {
        return /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
          key: "contact_thumbnail_".concat(contact.contactId),
          size: AVT_SIZE_MINI,
          contact: contact
        });
      }), contacts.length > 3 && /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
        key: "contact_thumbnail_more",
        size: AVT_SIZE_MINI,
        name: moreUserLabel,
        tooltip: moreUserLabel,
        initials: "+".concat(moreUserCount)
      }));
    }
  }]);

  return PresenceAvatarStrip;
}(React.Component);

var PresenceAutoFillDialog = /*#__PURE__*/function (_Component) {
  _inherits(PresenceAutoFillDialog, _Component);

  var _super = _createSuper(PresenceAutoFillDialog);

  function PresenceAutoFillDialog(props, context) {
    var _this;

    _classCallCheck(this, PresenceAutoFillDialog);

    _this = _super.call(this, props, context);
    _this.state = {
      contacts: _this.props.detectedContacts.slice(0)
    };
    return _this;
  }

  _createClass(PresenceAutoFillDialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.initTooltips();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (prevProps.detectedContacts.length !== this.props.detectedContacts.length || prevProps.detectedContacts.map(function (c) {
        return c.contactId;
      }).join(",") !== this.props.detectedContacts.map(function (c) {
        return c.contactId;
      }).join(",")) {
        this.setState({
          contacts: this.props.detectedContacts.slice(0)
        }, function () {
          window.initTooltips();
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          id = _this$props.id,
          emptyStateImage = _this$props.emptyStateImage,
          onClose = _this$props.onClose,
          onConfirm = _this$props.onConfirm;
      var contacts = this.state.contacts;

      var onTableUpdate = function onTableUpdate(newContacts) {
        _this2.setState({
          contacts: newContacts
        });
      };

      var onSave = function onSave() {
        if (onConfirm) onConfirm(contacts);
      };

      var title = intl__default["default"].get('presence_autofill_dialog_title');
      var hasContacts = contacts && contacts.length > 0;
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title,
        size: "modal-lg",
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement(PresenceAutoFillTable, {
        detectedContacts: contacts,
        emptyStateImage: emptyStateImage,
        onUpdate: onTableUpdate
      }), hasContacts && /*#__PURE__*/React__default["default"].createElement(ModalDialogInfoNote, {
        icon: "fa-info-circle",
        text: intl__default["default"].get('presence_autofill_dialog_notfound_message')
      })), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, this.renderExistingAvatars(), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onClose,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), hasContacts && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onSave,
        title: intl__default["default"].get('generic_save')
      })));
    }
  }, {
    key: "renderExistingAvatars",
    value: function renderExistingAvatars() {
      var existingContacts = this.props.existingContacts;
      return /*#__PURE__*/React__default["default"].createElement(PresenceAvatarStrip, {
        className: "mr-auto",
        title: intl__default["default"].get("presence_autofill_already_in_net"),
        contacts: existingContacts
      });
    }
  }]);

  return PresenceAutoFillDialog;
}(React.Component);

var WIZARD_STEP_USER_FORM = 0;
var WIZARD_STEP_SELECT_DEVICES = 1;

var PresenceProfileEditDialog = /*#__PURE__*/function (_Component) {
  _inherits(PresenceProfileEditDialog, _Component);

  var _super = _createSuper(PresenceProfileEditDialog);

  function PresenceProfileEditDialog(props, context) {
    var _this;

    _classCallCheck(this, PresenceProfileEditDialog);

    _this = _super.call(this, props, context);
    _this.saveContactWithNetNode = _this.saveContactWithNetNode.bind(_assertThisInitialized(_this));
    _this.onContactNameInputChanged = _this.onContactNameInputChanged.bind(_assertThisInitialized(_this));
    _this.onContactTypePicked = _this.onContactTypePicked.bind(_assertThisInitialized(_this));
    _this.onMaleGenderSelected = _this.onMaleGenderSelected.bind(_assertThisInitialized(_this));
    _this.onFemaleGenderSelected = _this.onFemaleGenderSelected.bind(_assertThisInitialized(_this));
    _this.onOtherGenderSelected = _this.onOtherGenderSelected.bind(_assertThisInitialized(_this));
    _this.dialogGoToDeviceStep = _this.dialogGoToDeviceStep.bind(_assertThisInitialized(_this));
    _this.dialogSaveContact = _this.dialogSaveContact.bind(_assertThisInitialized(_this));
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onClearPicture = _this.onClearPicture.bind(_assertThisInitialized(_this));
    _this.onDeviceSelected = _this.onDeviceSelected.bind(_assertThisInitialized(_this));
    _this.onDeviceTogglePresence = _this.onDeviceTogglePresence.bind(_assertThisInitialized(_this));
    _this.onUserProvidedImage = _this.onUserProvidedImage.bind(_assertThisInitialized(_this));

    var contact = _this.createContactFromProps();

    _this.state = {
      contact: contact,
      wizardStep: WIZARD_STEP_USER_FORM,
      formIncomplete: false,
      devicesIncomplete: false
    };
    return _this;
  }

  _createClass(PresenceProfileEditDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      var currentContactId = this.props.defaultContact && this.props.defaultContact.contactId;
      var prevContactId = prevProps.defaultContact && prevProps.defaultContact.contactId;

      if (currentContactId !== prevContactId) {
        var contact = this.createContactFromProps();
        this.setState({
          contact: contact,
          wizardStep: WIZARD_STEP_USER_FORM
        });
      }
    } // --------------------------------------------------------------------------------
    // Convert PROPS into current state
    // --------------------------------------------------------------------------------

  }, {
    key: "createContactFromProps",
    value: function createContactFromProps() {
      if (this.props.defaultContact) {
        return Object.assign(new Contact(), this.props.defaultContact);
      } else {
        return newContactWithId();
      }
    } // --------------------------------------------------------------------------------
    // Handle Form changes
    // --------------------------------------------------------------------------------

  }, {
    key: "onContactNameInputChanged",
    value: function onContactNameInputChanged(evt) {
      if (!evt.currentTarget) return;
      var newName = evt.currentTarget.value;
      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);
        newContact.contactName = newName;
        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onContactTypePicked",
    value: function onContactTypePicked(newContactType) {
      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);
        newContact.contactType = newContactType;
        if (newContactType === CT_FAMILY_HIM) newContact.gender = GND_MALE;
        if (newContactType === CT_FAMILY_HER) newContact.gender = GND_FEMALE;
        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onMaleGenderSelected",
    value: function onMaleGenderSelected() {
      this.onGenderSelected(GND_MALE);
    }
  }, {
    key: "onFemaleGenderSelected",
    value: function onFemaleGenderSelected() {
      this.onGenderSelected(GND_FEMALE);
    }
  }, {
    key: "onOtherGenderSelected",
    value: function onOtherGenderSelected() {
      this.onGenderSelected(null);
    }
  }, {
    key: "onGenderSelected",
    value: function onGenderSelected(newGender) {
      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);
        newContact.gender = newGender;
        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onClearPicture",
    value: function onClearPicture() {
      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);
        newContact.imageURL = null;
        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      } // Reset dialog for next show()


      this.setState({
        wizardStep: WIZARD_STEP_USER_FORM,
        formIncomplete: false,
        devicesIncomplete: false
      });
    }
  }, {
    key: "onDeviceSelected",
    value: function onDeviceSelected(evt) {
      if (!evt.currentTarget) return; // This corresponds to "data-hwaddress" property of the input

      var hwAddress = evt.currentTarget.dataset.hwaddress;
      if (!hwAddress) return;
      var netNode = this.props.netNodes.find(function (netNode) {
        return netNode.hwAddress === hwAddress;
      });
      if (!netNode) return;
      var selected = evt.currentTarget.checked;

      var isPresence = function isPresence(dev) {
        return DT_PRESENCE_TYPES.includes(dev.bestType);
      };

      var appendToArray = function appendToArray(arr, val) {
        return arr ? arr.concat([val]) : [val];
      };

      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);

        if (selected) {
          if (isPresence(netNode)) {
            if (newContact.presenceDevices && newContact.presenceDevices.length > 0) {
              newContact.otherDevices = appendToArray(newContact.otherDevices, netNode);
            } else {
              newContact.presenceDevices = [netNode];
            }
          } else {
            newContact.otherDevices = appendToArray(newContact.otherDevices, netNode);
          }
        } else {
          if (newContact.presenceDevices && newContact.presenceDevices.length > 0) {
            newContact.presenceDevices = newContact.presenceDevices.filter(function (dev) {
              return dev.hwAddress !== hwAddress;
            }); // If we're left without presence device, see if any of the other devices can be
            // promoted to presence. At most ONE!

            if (newContact.presenceDevices.length === 0 && newContact.otherDevices && newContact.otherDevices.length > 0) {
              for (var i = 0; i < newContact.otherDevices.length; i++) {
                var otherDevice = newContact.otherDevices[i];

                if (isPresence(otherDevice)) {
                  newContact.presenceDevices = [otherDevice]; // Splice returns the array of delete elements

                  newContact.otherDevices.splice(i, 1);
                  break;
                }
              }
            }
          }

          if (newContact.otherDevices) {
            newContact.otherDevices = newContact.otherDevices.filter(function (dev) {
              return dev.hwAddress !== hwAddress;
            });
          }
        }

        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onDeviceTogglePresence",
    value: function onDeviceTogglePresence(evt) {
      if (!evt.currentTarget) return; // This corresponds to "data-hwaddress" property of the link

      var hwAddress = evt.currentTarget.dataset.hwaddress;
      if (!hwAddress) return;
      var netNode = this.props.netNodes.find(function (netNode) {
        return netNode.hwAddress === hwAddress;
      });
      if (!netNode) return;

      var appendToArray = function appendToArray(arr, val) {
        return arr ? arr.concat([val]) : [val];
      };

      this.setState(function (prevState) {
        var newContact = Object.assign(new Contact(), prevState.contact);
        var devIndex = newContact.presenceDevices && newContact.presenceDevices.length > 0 ? newContact.presenceDevices.findIndex(function (netNode) {
          return netNode.hwAddress === hwAddress;
        }) : -1;

        if (devIndex >= 0) {
          newContact.presenceDevices.splice(devIndex, 1);
          newContact.otherDevices = appendToArray(newContact.otherDevices, netNode);
        } else {
          var _devIndex = newContact.otherDevices && newContact.otherDevices.length > 0 ? newContact.otherDevices.findIndex(function (netNode) {
            return netNode.hwAddress === hwAddress;
          }) : -1;

          if (_devIndex >= 0) {
            newContact.otherDevices.splice(_devIndex, 1); // Only one Presence device at most, so we move all presence devices to other before setting the
            // netNode as the new "presence" device

            if (newContact.presenceDevices && newContact.presenceDevices.length > 0) newContact.otherDevices = newContact.otherDevices.concat(newContact.presenceDevices);
            newContact.presenceDevices = [netNode];
          }
        }

        return {
          contact: newContact
        };
      });
    }
  }, {
    key: "onUserProvidedImage",
    value: function onUserProvidedImage(event) {
      var self = this;
      var canvas = document.getElementById('canvas');
      var image = new Image();
      image.src = URL.createObjectURL(event.target.files[0]);

      image.onload = function () {
        var canvasContext = canvas.getContext('2d');
        var scale = Math.max(canvas.width / image.width, canvas.height / image.height);
        var w = image.width * scale;
        var h = image.height * scale;
        var left = canvas.width / 2 - w / 2;
        var top = canvas.height / 2 - h / 2;
        canvasContext.drawImage(image, left, top, w, h);
        var dataURL = canvas.toDataURL("image/jpg");
        self.setState(function (prevState) {
          var newContact = Object.assign(new Contact(), prevState.contact);
          newContact.imageURL = dataURL;
          return {
            contact: newContact
          };
        });
      };
    } // --------------------------------------------------------------------------------

  }, {
    key: "dialogGoToDeviceStep",
    value: function dialogGoToDeviceStep() {
      var contact = this.state.contact;

      if (!contact.contactId || !contact.contactName || !contact.contactType) {
        this.setState({
          formIncomplete: true
        });
        return;
      }

      this.setState({
        formIncomplete: false,
        wizardStep: WIZARD_STEP_SELECT_DEVICES
      });
    }
  }, {
    key: "saveContactWithNetNode",
    value: function saveContactWithNetNode(netNode) {
      var contact = this.state.contact;
      var newContact = contact;
      newContact.presenceDevices = [netNode];

      if (this.props.onConfirm) {
        this.setState({
          formIncomplete: false,
          devicesIncomplete: false,
          wizardStep: WIZARD_STEP_USER_FORM
        });
        this.props.onConfirm(newContact);
      }
    }
  }, {
    key: "dialogSaveContact",
    value: function dialogSaveContact() {
      var netNodes = this.props.netNodes;
      var contact = this.state.contact;

      var isPresence = function isPresence(dev) {
        return DT_PRESENCE_TYPES.includes(dev.bestType);
      };

      netNodes.filter(function (netNode) {
        return !DT_PRESENCE_DISCARD_TYPES.includes(netNode.bestType);
      }).sort(function (n1, n2) {
        var p1 = isPresence(n1),
            p2 = isPresence(n2);
        return p1 === p2 ? 0 : p2 ? 1 : -1;
      });
      /*
      const available = nodes ? nodes.filter(netNode => !netNode.contactId || netNode.contactId === contact.contactId) : [];
      if(available.length === 1){
          const newContact = contact;
          newContact.presenceDevices = [available[0]];
          if (this.props.onConfirm){
              this.props.onConfirm(newContact);
          }
          this.setState({formIncomplete: false, devicesIncomplete: false, wizardStep: WIZARD_STEP_USER_FORM});
          return;
      }*/

      var hasPresenceDevices = contact.presenceDevices && contact.presenceDevices.length > 0;
      var hasOtherDevices = contact.otherDevices && contact.otherDevices.length > 0;

      if (!hasPresenceDevices && !hasOtherDevices) {
        this.setState({
          devicesIncomplete: true
        });
        return;
      }

      if (this.props.onConfirm) this.props.onConfirm(contact);
      this.setState({
        formIncomplete: false,
        devicesIncomplete: false,
        wizardStep: WIZARD_STEP_USER_FORM
      });
    } // --------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          defaultContact = _this$props.defaultContact;
      var wizardStep = this.state.wizardStep;

      if (wizardStep === 1) {
        return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
          id: id,
          title: intl__default["default"].get("presence_devices_dialog_title"),
          onClose: this.onCloseDialog
        }, this.renderDevicePage());
      } else {
        var title = defaultContact && defaultContact.contactName ? intl__default["default"].get("presence_edit_dialog_title") : intl__default["default"].get("presence_add_dialog_title");
        return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
          id: id,
          title: title,
          onClose: this.onCloseDialog
        }, this.renderFormPage());
      }
    }
  }, {
    key: "renderFormPage",
    value: function renderFormPage() {
      var _this2 = this;

      var netNode = this.props.netNode;
      var _this$state = this.state,
          contact = _this$state.contact,
          formIncomplete = _this$state.formIncomplete;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, formIncomplete === true && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge badge-soft-danger d-block"
      }, intl__default["default"].get("presence_error_incomplete"))), this.renderForm(contact)), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: netNode ? function () {
          return _this2.saveContactWithNetNode(netNode);
        } : this.dialogGoToDeviceStep,
        chevron: "fa-arrow-right",
        title: intl__default["default"].get('generic_continue')
      })));
    }
  }, {
    key: "renderDevicePage",
    value: function renderDevicePage() {
      var _this3 = this;

      var _this$state2 = this.state,
          contact = _this$state2.contact,
          devicesIncomplete = _this$state2.devicesIncomplete;
      var netNodes = this.props.netNodes;
      var contactId = contact ? contact.contactId : null;

      var goBack = function goBack() {
        _this3.setState({
          wizardStep: WIZARD_STEP_USER_FORM
        });
      };

      var isPresence = function isPresence(dev) {
        return DT_PRESENCE_TYPES.includes(dev.bestType);
      };

      var nodes = netNodes.filter(function (netNode) {
        return !DT_PRESENCE_DISCARD_TYPES.includes(netNode.bestType);
      }).sort(function (n1, n2) {
        var p1 = isPresence(n1),
            p2 = isPresence(n2);
        return p1 === p2 ? 0 : p2 ? 1 : -1;
      });
      var available = nodes ? nodes.filter(function (netNode) {
        return !netNode.contactId || netNode.contactId === contactId;
      }) : [];
      var assignedToOther = nodes ? nodes.filter(function (netNode) {
        return netNode.contactId && netNode.contactId !== contactId;
      }) : [];
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, devicesIncomplete === true ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge badge-soft-danger d-block"
      }, intl__default["default"].get("presence_edit_at_least_one_device"))) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small"
      }, intl__default["default"].get("presence_edit_multi_device"))), /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-align-middle"
      }, /*#__PURE__*/React__default["default"].createElement("tbody", null, available.map(function (netNode) {
        return _this3.renderNetNode(netNode, available.length === 1);
      }), assignedToOther && assignedToOther.length > 0 && /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("td", {
        colSpan: 4,
        className: "text-center"
      }, intl__default["default"].get("presence_edit_already_assigned_devices"))), assignedToOther && assignedToOther.map(function (netNode) {
        return _this3.renderNetNode(netNode);
      })))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: goBack,
        title: intl__default["default"].get('generic_back'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.dialogSaveContact,
        title: intl__default["default"].get('generic_save')
      })));
    }
  }, {
    key: "renderForm",
    value: function renderForm(contact) {
      var contactPictureUrl = contact && contact.imageURL ? contact.imageURL : null;
      var contactName = contact && contact.contactName ? contact.contactName : null;
      var contactType = contact && contact.contactType ? contact.contactType : null;
      var isMale = contact && contact.gender === GND_MALE;
      var isFemale = contact && contact.gender === GND_FEMALE;
      var isOther = !isMale && !isFemale;
      var allowedContexts = this.props.netContext && NC_ALL_TYPES.includes(this.props.netContext) ? contactTypesMatching(null, this.props.netContext) : CT_ALL_TYPES;
      return /*#__PURE__*/React__default["default"].createElement("form", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        className: "col-sm-3 col-form-label input-label"
      }, intl__default["default"].get("presence_profile_photo"), " ", /*#__PURE__*/React__default["default"].createElement("span", {
        className: "input-label-secondary"
      }, "(", intl__default["default"].get("generic_optional"), ")")), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-sm-9"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "media align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        className: "avatar avatar-lg avatar-circle mr-4",
        htmlFor: "avatarUploader"
      }, /*#__PURE__*/React__default["default"].createElement("canvas", {
        id: "canvas",
        width: "128",
        height: "128",
        style: {
          border: "1px solid black",
          display: "none"
        }
      }), /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
        id: "avatarImg",
        size: AVT_SIZE_DEFAULT,
        name: contactName,
        url: contactPictureUrl
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "media-body"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "btn btn-xs btn-primary file-attachment-btn mb-2 mb-sm-0 mr-2"
      }, intl__default["default"].get("presence_upload_profile_photo"), /*#__PURE__*/React__default["default"].createElement("input", {
        id: "avatarUploader",
        type: "file",
        className: "js-file-attach file-attachment-btn-label",
        onChange: this.onUserProvidedImage,
        "data-hs-file-attach-options": "{ \"textTarget\": \"#avatarImg\", \"mode\": \"image\", \"targetAttr\": \"src\" \"allowTypes\": [\".png\", \".jpeg\", \".jpg\"] }"
      })), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onClearPicture,
        title: intl__default["default"].get('generic_clear'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }))))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "displayNameLabel",
        className: "col-sm-3 col-form-label input-label"
      }, intl__default["default"].get("presence_display_name")), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-sm-9"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        type: "text",
        className: "form-control",
        name: "displayName",
        id: "displayNameLabel",
        placeholder: "Clarice",
        "aria-label": "Clarice",
        value: contactName || "",
        onChange: this.onContactNameInputChanged
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "displayNameLabel",
        className: "col-sm-3 col-form-label input-label"
      }, intl__default["default"].get("presence_contact_type")), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-sm-9"
      }, /*#__PURE__*/React__default["default"].createElement(ContactTypePicker, {
        allowedContexts: allowedContexts,
        contactType: contactType,
        className: "z-index-9999 mt-1",
        onContactTypePicked: this.onContactTypePicked
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        className: "col-sm-3 col-form-label input-label"
      }, intl__default["default"].get("presence_gender"), " ", /*#__PURE__*/React__default["default"].createElement("span", {
        className: "input-label-secondary"
      }, "(", intl__default["default"].get("generic_optional"), ")", /*#__PURE__*/React__default["default"].createElement("i", {
        className: "far fa-question-circle text-body ml-1",
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: intl__default["default"].get("presence_gender_explanation")
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-sm-9"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "input-group input-group-md-down-break"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-control"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-radio"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        type: "radio",
        className: "custom-control-input",
        name: "genderTypeRadio",
        id: "genderTypeRadio1",
        checked: isMale,
        onChange: this.onMaleGenderSelected
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "custom-control-label",
        htmlFor: "genderTypeRadio1"
      }, intl__default["default"].get("gender_male")))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-control"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-radio"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        type: "radio",
        className: "custom-control-input",
        name: "genderTypeRadio",
        id: "genderTypeRadio2",
        checked: isFemale,
        onChange: this.onFemaleGenderSelected
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "custom-control-label",
        htmlFor: "genderTypeRadio2"
      }, intl__default["default"].get("gender_female")))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-control"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-radio"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        type: "radio",
        className: "custom-control-input",
        name: "genderTypeRadio",
        id: "genderTypeRadio3",
        checked: isOther,
        onChange: this.onOtherGenderSelected
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "custom-control-label",
        htmlFor: "genderTypeRadio3"
      }, intl__default["default"].get("gender_other"))))))));
    }
    /**
     * Renders a NetNode.
     *
     * @param {NetNode} netNode
     * @return {JSX.Element}
     */

  }, {
    key: "renderNetNode",
    value: function renderNetNode(netNode, assigned) {
      var contact = this.state.contact;
      var isPresenceDevice = netNode.hwAddress && contact && contact.presenceDevices && contact.presenceDevices.find(function (dev) {
        return dev.hwAddress === netNode.hwAddress;
      });
      var isOtherDevice = netNode.hwAddress && contact && contact.otherDevices && contact.otherDevices.find(function (dev) {
        return dev.hwAddress === netNode.hwAddress;
      });
      var nodeIsAssignedToCurrentContact = assigned || isPresenceDevice || isOtherDevice;
      var nodeIsAssignedToOtherContact = netNode.contactId && netNode.contactId !== contact.contactId;
      var name = netNode.bestName || netNode.hwAddress;
      var makeAndModel = netNode.getBestMakeAndModelAsArray().join("•") || netNode.ipAddresses[0];
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: "row_".concat(netNode.hwAddress)
      }, /*#__PURE__*/React__default["default"].createElement("td", {
        className: "px-0"
      }, nodeIsAssignedToOtherContact ? /*#__PURE__*/React__default["default"].createElement("input", {
        key: "checkbox_".concat(netNode.hwAddress),
        type: "checkbox",
        "data-hwaddress": netNode.hwAddress,
        checked: true,
        onChange: null,
        disabled: true
      }) : /*#__PURE__*/React__default["default"].createElement("input", {
        key: "checkbox_".concat(netNode.hwAddress),
        type: "checkbox",
        "data-hwaddress": netNode.hwAddress,
        checked: nodeIsAssignedToCurrentContact,
        onChange: this.onDeviceSelected
      })), /*#__PURE__*/React__default["default"].createElement("td", {
        style: {
          width: "3rem"
        },
        className: "text-center"
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        type: netNode.bestType || DT_GENERIC
      })), /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, name), /*#__PURE__*/React__default["default"].createElement("div", null, makeAndModel)), /*#__PURE__*/React__default["default"].createElement("td", {
        className: "text-right"
      }, isPresenceDevice ? /*#__PURE__*/React__default["default"].createElement("a", {
        style: {
          cursor: "pointer"
        },
        "data-hwaddress": netNode.hwAddress,
        onClick: this.onDeviceTogglePresence
      }, /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
        label: intl__default["default"].get("presence_badge_tracking"),
        className: "badge-primary"
      })) : isOtherDevice ? /*#__PURE__*/React__default["default"].createElement("a", {
        style: {
          cursor: "pointer"
        },
        "data-hwaddress": netNode.hwAddress,
        onClick: this.onDeviceTogglePresence
      }, /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
        label: intl__default["default"].get("presence_badge_other"),
        className: "badge-secondary"
      })) : netNode.isDown() ? /*#__PURE__*/React__default["default"].createElement(StatusBadge, {
        label: intl__default["default"].get("generic_offline"),
        className: "badge-soft-secondary"
      }) : ""));
    }
  }]);

  return PresenceProfileEditDialog;
}(React.Component);

var PresenceConfirmDeleteDialog = /*#__PURE__*/function (_Component) {
  _inherits(PresenceConfirmDeleteDialog, _Component);

  var _super = _createSuper(PresenceConfirmDeleteDialog);

  function PresenceConfirmDeleteDialog(props, context) {
    var _this;

    _classCallCheck(this, PresenceConfirmDeleteDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onConfirmDialog = _this.onConfirmDialog.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(PresenceConfirmDeleteDialog, [{
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "onConfirmDialog",
    value: function onConfirmDialog() {
      if (this.props.onConfirm) {
        this.props.onConfirm(this.props.contact);
      }
    } // --------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          contact = _this$props.contact;
      var title = intl__default["default"].get("presence_delete_dialog_title");
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title,
        onClose: this.props.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, intl__default["default"].getHTML("presence_delete_dialog_body", {
        contactName: contact ? contact.contactName : ""
      })), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onConfirmDialog,
        title: intl__default["default"].get('generic_delete'),
        tint: BTN_TINT_DANGER
      })));
    }
  }]);

  return PresenceConfirmDeleteDialog;
}(React.Component);

/*
 * Copyright (c) Fing. All rights reserved.
 */
function safeParseEnum(json, key, enumItems, fallback) {
  var value = json[key];
  if (!value) return fallback;
  if (!enumItems) return fallback;

  for (var i = 0; i < enumItems.length; i++) {
    var enumItem = enumItems[i];
    if (enumItem === value) return enumItem;
  }

  return fallback;
}
function safeParseInt(json, key, fallback) {
  return json[key] ? parseInt(json[key], 10) : fallback;
}
function safeParseBool(json, key) {
  return json[key] ? json[key] === "true" : false;
}
function safeParseFloat(json, key, fallback) {
  return json[key] ? parseInt(json[key], 10) : fallback;
}
function isUndefined(json) {
  return typeof json === "undefined";
}
function isString(json) {
  return typeof json === "string";
}
function isObject(json) {
  return json && _typeof(json) === "object" && Object.getPrototypeOf(json) === Object.prototype;
}
function isNumber(json) {
  return typeof json === "number";
}
function isBoolean(json) {
  return typeof json === "boolean";
}
function isEmptyObject(json) {
  return isObject(json) && Object.keys(json).length === 0;
}
function isEmptyArray(json) {
  return json && Array.isArray(json) && json.length > 0;
}
function isEmptyString(json) {
  return isString(json) && json.length === 0;
}
function isURL(str) {
  if (!isString(str)) {
    return false;
  }

  try {
    new URL(str);
  } catch (_) {
    return false;
  }

  return true;
}
function isArrayOfStrings(array) {
  return array && Array.isArray(array) && array.reduce(function (prev, curr) {
    return prev && isString(curr);
  }, true);
}
function isMapOfStrings(map) {
  return map && isObject(map) && Object.keys(map).reduce(function (prev, key) {
    return prev && isString(map[key]);
  }, true);
}

var NetEvent = /*#__PURE__*/function () {
  function NetEvent() {
    _classCallCheck(this, NetEvent);

    _defineProperty(this, "timestamp", void 0);

    _defineProperty(this, "sharpTime", void 0);

    _defineProperty(this, "eventType", void 0);

    _defineProperty(this, "netNode", void 0);

    _defineProperty(this, "contact", void 0);

    _defineProperty(this, "device", void 0);

    _defineProperty(this, "content", void 0);

    _defineProperty(this, "onInspect", void 0);
  }

  _createClass(NetEvent, [{
    key: "applyFromDiscoveryStateLogAgentData",
    value: // Fill with callback to redirect users to some other place for inspection (optional)

    /**
     * Fill the current object with data coming from Fing Desktop agent's JSON API reply.
     *
     * @param json The external data
     * @return this same object, modified.
     */
    function applyFromDiscoveryStateLogAgentData(json, netNode, nextLog) {
      this.timestamp = safeParseInt(json, "time");
      this.sharpTime = safeParseInt(json, "sharptime");
      this.eventType = EVT_DEVICE_CHANGE;
      this.device = netNode;
      var duration = nextLog ? this.timestamp - nextLog.time : 0;
      this.content = new NetEventChangeState(json.state.change, duration);
      return this;
    }
  }, {
    key: "applyFromPeopleData",
    value: function applyFromPeopleData(json, nextLog) {
      var eventContent = json['eventContent'];
      this.timestamp = safeParseInt(json, "timestamp");
      this.sharpTime = safeParseInt(eventContent, "sharpTime");
      this.eventType = EVT_DEVICE_CHANGE;
      this.nextEventType = nextLog && nextLog.eventType;
      this.device = eventContent.device;
      var duration = nextLog ? this.timestamp - nextLog.timestamp : 0;
      this.content = new NetEventChangeState(eventContent.type, duration);
      return this;
    }
  }, {
    key: "applyFromHtcEventEntryData",
    value: function applyFromHtcEventEntryData(json) {
      this.timestamp = safeParseInt(json, "timestamp");
      this.eventType = EVT_HACKER_THREAT_CHECK;
      this.content = json['eventContent'];
      return this;
    }
  }, {
    key: "applyFromDeviceBlockEventEntryData",
    value: function applyFromDeviceBlockEventEntryData(json, nextEvent) {
      var eventContent = json['eventContent'];
      this.timestamp = safeParseInt(json, "timestamp");
      this.sharpTime = safeParseInt(json, "sharptime");
      this.nextEventType = nextEvent && nextEvent.eventType;
      this.eventType = EVT_DEVICE_BLOCK;
      this.device = eventContent['device'];
      var duration = nextEvent ? this.timestamp - nextEvent.timestamp : 0;
      this.content = new NetEventDeviceBlock(eventContent['type'], eventContent['blockOptions'], duration);
      return this;
    }
  }, {
    key: "applyNewBlockEventEntryData",
    value: function applyNewBlockEventEntryData(json) {
      var eventContent = json['eventContent'] || json['content'];
      this.timestamp = safeParseInt(json, "timestamp");
      this.eventType = EVT_DEVICE_BLOCK;
      this.device = eventContent['device'] || json['device'];
      this.content = new NetEventDeviceBlock(NS_NEW_BLOCKED, eventContent['blockOptions'], 0);
      return this;
    } // --------------------------------------------------------------------------------
    // Convenience methods
    // --------------------------------------------------------------------------------

  }, {
    key: "isDeviceOnline",
    value: function isDeviceOnline() {
      return this.content && typeof this.content.isOnline === "function" && this.content.isOnline() === true;
    }
  }, {
    key: "isDeviceNew",
    value: function isDeviceNew() {
      return this.content && typeof this.content.isNew === "function" && this.content.isNew() === true;
    }
  }, {
    key: "isBlockedEvent",
    value: function isBlockedEvent() {
      return this.content && typeof this.content.isBlockedEvent === "function" && this.content.isBlockedEvent() === true;
    }
  }, {
    key: "isPausedEvent",
    value: function isPausedEvent() {
      return this.content && typeof this.content.isPausedEvent === "function" && this.content.isPausedEvent() === true;
    }
  }, {
    key: "getTimeSinceOppositeState",
    value: function getTimeSinceOppositeState() {
      return this.content && this.content.timeSinceOppositeState ? this.content.timeSinceOppositeState : 0;
    }
  }, {
    key: "getTypeEvent",
    value: function getTypeEvent() {
      return this.content && this.content.type ? this.content.type : "";
    }
  }, {
    key: "getDurationKickOutModeEvent",
    value: function getDurationKickOutModeEvent() {
      return this.content && this.content.duration ? this.content.duration : 0;
    }
  }]);

  return NetEvent;
}();
var NetEventDeviceBlock = /*#__PURE__*/function () {
  function NetEventDeviceBlock(type, blockOptions, duration) {
    _classCallCheck(this, NetEventDeviceBlock);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "blockOptions", void 0);

    _defineProperty(this, "duration", void 0);

    this.type = type;
    this.duration = duration;
    this.blockOptions = blockOptions;
  }

  _createClass(NetEventDeviceBlock, [{
    key: "isBlockedEvent",
    value: function isBlockedEvent() {
      return this.blockOptions['onlyInternet'] === "false";
    }
  }, {
    key: "isPausedEvent",
    value: function isPausedEvent() {
      return this.blockOptions['onlyInternet'] === "true";
    }
  }]);

  return NetEventDeviceBlock;
}();
var NetEventChangeState = /*#__PURE__*/function () {
  function NetEventChangeState(state, timeSinceOppositeState) {
    _classCallCheck(this, NetEventChangeState);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "timeSinceOppositeState", void 0);

    this.state = state;
    this.timeSinceOppositeState = timeSinceOppositeState;
  }

  _createClass(NetEventChangeState, [{
    key: "isOnline",
    value: function isOnline() {
      return this.state === NS_UP;
    }
  }, {
    key: "isNew",
    value: function isNew() {
      return this.state === NS_NEW;
    }
  }]);

  return NetEventChangeState;
}();

var PresenceTimelineTableRow = /*#__PURE__*/function (_Component) {
  _inherits(PresenceTimelineTableRow, _Component);

  var _super = _createSuper(PresenceTimelineTableRow);

  function PresenceTimelineTableRow(props) {
    _classCallCheck(this, PresenceTimelineTableRow);

    return _super.call(this, props);
  }

  _createClass(PresenceTimelineTableRow, [{
    key: "render",
    value: function render() {
      var netEvent = this.props.netEvent;
      if (!netEvent) return;
      var blockEvent = netEvent && netEvent.eventType === EVT_DEVICE_BLOCK;
      var changeEvent = netEvent && netEvent.eventType === EVT_DEVICE_CHANGE;
      return /*#__PURE__*/React__default["default"].createElement("tr", null, changeEvent ? this.renderContactEvent(netEvent) : blockEvent ? this.renderDeviceEvent(netEvent) : '');
    }
    /**
     * @param {NetEvent} netEvent The network event
     * @return {JSX.Element}
     */

  }, {
    key: "renderContactEvent",
    value: function renderContactEvent(netEvent) {
      var contact = netEvent.contact;
      var timestamp = netEvent.sharpTime ? netEvent.sharpTime : netEvent.timestamp;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.renderContactColumn(contact, netEvent), this.renderTimeCell(timestamp), this.renderSubjectCell(contact.contactName, getContactTypeName(contact.contactType)), this.renderDetailCell(netEvent), this.renderActionCell(netEvent.onInspect));
    }
  }, {
    key: "renderContactColumn",
    value: function renderContactColumn(contact, netEvent) {
      var status = "avatar-secondary";

      if (netEvent && netEvent.eventType === EVT_DEVICE_BLOCK && (netEvent.isBlockedEvent() || netEvent.isPausedEvent())) {
        status = "avatar-danger";
      } else if (netEvent && netEvent.eventType === EVT_DEVICE_CHANGE && netEvent.isDeviceOnline()) {
        status = "avatar-success";
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "step mx-0"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "step-avatar step-avatar-xs"
      }, /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
        size: AVT_SIZE_MINI,
        contact: contact,
        status: status
      }))));
    }
    /**
     * @param {NetEvent} netEvent The network event
     * @return {JSX.Element}
     */

  }, {
    key: "renderDeviceEvent",
    value: function renderDeviceEvent(netEvent) {
      var netNode = netEvent.netNode;
      var deviceType = netNode.bestType || DT_GENERIC;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.renderDeviceColumn(netEvent, deviceType), this.renderTimeCell(netEvent.timestamp), this.renderSubjectCell(netNode.bestName || netNode.address, intl__default["default"].get("devicetype_".concat(deviceType.toLowerCase()))), this.renderDetailCell(netEvent), this.renderActionCell(netEvent.onInspect));
    }
  }, {
    key: "renderDeviceColumn",
    value: function renderDeviceColumn(netEvent, deviceType) {
      var stepIconClass = "step-icon-soft-secondary";
      var fillClass = "fill-dark";

      if (netEvent.isBlockedEvent() || netEvent.isPausedEvent()) {
        stepIconClass = netEvent.isPausedEvent() ? "badge-orange" : "step-icon-danger";
        fillClass = "fill-white";
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "step mx-0"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "step-icon step-icon-xs ".concat(stepIconClass)
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        type: deviceType,
        size: "16px",
        className: fillClass
      }))));
    }
    /**
     * @param {number} timestamp
     * @return {JSX.Element}
     */

  }, {
    key: "renderTimeCell",
    value: function renderTimeCell(timestamp) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, formatAbsoluteDate(timestamp, DATE_FORMAT_LONG)), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "small text-secondary"
      }, formatRelativeDate(timestamp, DATE_FORMAT_SMART))));
    }
    /**
     * @param {string} title
     * @param {string} subtitle
     * @return {JSX.Element}
     */

  }, {
    key: "renderSubjectCell",
    value: function renderSubjectCell(title, subtitle) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, title && /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 text-dark"
      }, title), subtitle && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "small text-secondary"
      }, subtitle));
    }
    /**
     * @param {string} detail
     * @return {JSX.Element}
     */

  }, {
    key: "renderDetailCell",
    value: function renderDetailCell(netEvent) {
      var stateString = "";

      if (netEvent) {
        if (netEvent.eventType === EVT_DEVICE_BLOCK) {
          var isBlocked = netEvent.isBlockedEvent();

          if (netEvent.getTypeEvent() === 'Block') {
            stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_blocked' : 'device_detail_kick_out_mode_paused');
          } else if (netEvent.getTypeEvent() === 'Unlock') {
            var duration = formatDuration(netEvent.getDurationKickOutModeEvent(), DATE_FORMAT_SHORT, false);

            if (duration !== "0m") {
              stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_blocked_for' : 'device_detail_kick_out_mode_paused_for', {
                duration: duration
              });
            } else {
              stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_unblocked_immediately' : 'device_detail_kick_out_mode_resumed_immediately');
            }
          }
        } else if (netEvent.eventType === EVT_DEVICE_CHANGE) {
          var _duration = formatDuration(netEvent.getTimeSinceOppositeState(), DATE_FORMAT_SHORT, false);

          var state = netEvent.isDeviceOnline() || netEvent.isDeviceNew() ? 'online' : 'offline';

          if (_duration === '0m') {
            stateString = intl__default["default"].get('discovery_events_timeline_' + state + '_duration_immediately');
          } else {
            stateString = intl__default["default"].get('discovery_events_timeline_' + state + '_duration', {
              duration: _duration
            });
          }
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3)
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark mb-0"
      }, stateString));
    }
  }, {
    key: "renderActionCell",
    value: function renderActionCell(onInspect) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: "text-md-right",
        "data-title": this.headerForColumn(4)
      }, onInspect && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: onInspect,
        chevron: "fa-pen",
        type: BTN_TYPE_SOFT,
        tint: BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get("generic_inspect"),
        titleClass: "d-md-none"
      }));
    }
  }, {
    key: "labelForOppositeState",
    value: function labelForOppositeState(duration, online) {
      if (duration <= 0) return null; // Labels inverted because it's about the PREVIOUS state

      return intl__default["default"].get("status_for_duration", {
        status: intl__default["default"].get(online ? "generic_offline" : "generic_online"),
        duration: formatDuration(duration, DATE_FORMAT_SHORT, true)
      });
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get("timeline_table_header_state");
      if (idx === 1) return intl__default["default"].get("timeline_table_header_when");
      if (idx === 2) return intl__default["default"].get("timeline_table_header_subject");
      if (idx === 3) return intl__default["default"].get("timeline_table_header_details");
      if (idx === 4) return intl__default["default"].get("generic_actions");
      return '';
    }
  }]);

  return PresenceTimelineTableRow;
}(React.Component);
PresenceTimelineTableRow.propTypes = {
  netEvent: PropTypes__default["default"].object
};

function renderRouterPortMappingTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", null), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('generic_device')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('generic_service')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('generic_details')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('generic_enabled')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('generic_first_seen'))));
}
function renderVulnerabilityTestTimelineTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "5rem"
    }
  }, intl__default["default"].get("timeline_table_header_state")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("timeline_table_header_when")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "20rem"
    }
  }, intl__default["default"].get("timeline_table_header_details")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "15rem"
    }
  }, intl__default["default"].get('tooltargetbar_open_ports')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('timeline_table_header_port')), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get('timeline_table_header_type'))));
}
function renderPresenceTimelineTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "5rem"
    }
  }, intl__default["default"].get("timeline_table_header_state")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("timeline_table_header_when")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_subject")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_details")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "4rem"
    }
  })));
}
function renderNetworkTimelineTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "5rem"
    }
  }, intl__default["default"].get("timeline_table_header_state")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("timeline_table_header_when")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_subject")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_details")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "4rem"
    }
  })));
}
function renderInternetTimelineTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "5rem"
    }
  }, intl__default["default"].get("timeline_table_header_state")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("timeline_table_header_when")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "18rem"
    }
  }, intl__default["default"].get("speedtest_download")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("speedtest_upload")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("internet_latency")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_type"))));
}
function renderNotificationTimelineTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "5rem"
    }
  }, intl__default["default"].get("timeline_table_header_state")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  }, intl__default["default"].get("timeline_table_header_when")), /*#__PURE__*/React__default["default"].createElement("th", null), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_details")), /*#__PURE__*/React__default["default"].createElement("th", {
    style: {
      width: "8rem"
    }
  })));
}
function renderHiddenCameraDeviceTableHeader() {
  return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("timeline_table_header_type")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("generic_name")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("tooltargetbar_ip_address")), /*#__PURE__*/React__default["default"].createElement("th", null, intl__default["default"].get("tooltargetbar_mac_address"))));
}

var PresenceTimelineTable = /*#__PURE__*/function (_Component) {
  _inherits(PresenceTimelineTable, _Component);

  var _super = _createSuper(PresenceTimelineTable);

  function PresenceTimelineTable(props) {
    var _this;

    _classCallCheck(this, PresenceTimelineTable);

    _this = _super.call(this, props);
    _this.tableId = "people_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(PresenceTimelineTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var netEvents = this.props.netEvents;
      if (!netEvents) return "";
      return /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-sm table-borderless table-responsive-flip table-align-middle"
      }, renderPresenceTimelineTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, netEvents.map(function (netEvent, idx) {
        return /*#__PURE__*/React__default["default"].createElement(PresenceTimelineTableRow, {
          key: "".concat(_this2.tableId, "_").concat(idx),
          netEvent: netEvent
        });
      })));
    }
  }]);

  return PresenceTimelineTable;
}(React.Component);
PresenceTimelineTable.propTypes = {
  netEvents: PropTypes__default["default"].array
};

var PresenceTimeline = /*#__PURE__*/function (_Component) {
  _inherits(PresenceTimeline, _Component);

  var _super = _createSuper(PresenceTimeline);

  function PresenceTimeline() {
    _classCallCheck(this, PresenceTimeline);

    return _super.apply(this, arguments);
  }

  _createClass(PresenceTimeline, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          netEvents = _this$props.netEvents,
          maxDays = _this$props.maxDays;
      var maxDaysUnlimited = !maxDays && maxDays !== 0;

      var ifMaxDaysAtLeast = function ifMaxDaysAtLeast(days) {
        return maxDaysUnlimited || maxDays >= days;
      };

      var eventsByDistance = groupEventsByTimeDistance(netEvents, function (netEvent) {
        return netEvent.timestamp;
      });
      return /*#__PURE__*/React__default["default"].createElement("div", null, ifMaxDaysAtLeast(1) && this.renderEventSection(intl__default["default"].get('relative_today'), eventsByDistance[TIME_DISTANCE_TODAY]), ifMaxDaysAtLeast(2) && this.renderEventSection(intl__default["default"].get('relative_yesterday'), eventsByDistance[TIME_DISTANCE_YESTERDAY]), ifMaxDaysAtLeast(7) && this.renderEventSection(intl__default["default"].get('relative_current_week'), eventsByDistance[TIME_DISTANCE_7D]), ifMaxDaysAtLeast(14) && this.renderEventSection(intl__default["default"].get('relative_week_long', {
        amount: 2
      }), eventsByDistance[TIME_DISTANCE_14D]), ifMaxDaysAtLeast(21) && this.renderEventSection(intl__default["default"].get('relative_week_long', {
        amount: 3
      }), eventsByDistance[TIME_DISTANCE_21D]), maxDaysUnlimited && this.renderEventSection(intl__default["default"].get('relative_older'), eventsByDistance[TIME_DISTANCE_OLDER]));
    }
  }, {
    key: "renderEventSection",
    value: function renderEventSection(title, events) {
      var contacts;

      if (events && events.length > 0) {
        contacts = Object.values(events.reduce(function (map, event) {
          if (event.contact && event.contact.contactId) {
            map[event.contact.contactId] = event.contact;
          }

          return map;
        }, {}));
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-6"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3 border-bottom d-flex"
      }, /*#__PURE__*/React__default["default"].createElement("h3", null, title), contacts && /*#__PURE__*/React__default["default"].createElement(PresenceAvatarStrip, {
        className: "ml-auto",
        contacts: contacts
      })), events ? /*#__PURE__*/React__default["default"].createElement(PresenceTimelineTable, {
        netEvents: events
      }) : /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('timeline_no_event')));
    }
  }]);

  return PresenceTimeline;
}(React.Component);
PresenceTimeline.propTypes = {
  netEvents: PropTypes__default["default"].array,
  maxDays: PropTypes__default["default"].number
};

var _path$m, _path2$2;

function _extends$q() { _extends$q = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$q.apply(this, arguments); }

function SvgWork(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$q({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$m || (_path$m = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  })), _path2$2 || (_path2$2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M13 16h-2c-.55 0-1-.45-1-1H3.01v4c0 1.1.9 2 2 2H19c1.1 0 2-.9 2-2v-4h-7c0 .55-.45 1-1 1zm7-9h-4c0-2.21-1.79-4-4-4S8 4.79 8 7H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-1c0-.55.45-1 1-1h2c.55 0 1 .45 1 1v1h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 7c0-1.1.9-2 2-2s2 .9 2 2H9.99 10z"
  })));
}

var _path$l, _path2$1;

function _extends$p() { _extends$p = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$p.apply(this, arguments); }

function SvgVideo(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$p({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$l || (_path$l = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  })), _path2$1 || (_path2$1 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"
  })));
}

var _path$k, _path2;

function _extends$o() { _extends$o = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$o.apply(this, arguments); }

function SvgSocial(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$o({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "current"
  }, props), _path$k || (_path$k = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  })), _path2 || (_path2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5s-3 1.34-3 3 1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V18c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-1.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05.02.01.03.03.04.04 1.14.83 1.93 1.94 1.93 3.41V18c0 .35-.07.69-.18 1H22c.55 0 1-.45 1-1v-1.5c0-2.33-4.67-3.5-7-3.5z"
  })));
}

var _g$3, _defs;

function _extends$n() { _extends$n = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$n.apply(this, arguments); }

function SvgGame(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$n({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$3 || (_g$3 = /*#__PURE__*/React__namespace.createElement("g", {
    clipPath: "url(#game_svg__clip0)"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M23.967 16.854l-1.361-9.57A4.992 4.992 0 0017.659 3H6.34a4.992 4.992 0 00-4.947 4.285L.033 16.854a3.18 3.18 0 003.148 3.635c.85 0 1.649-.338 2.248-.937l2.823-2.811h7.496l2.81 2.81c.6.6 1.412.938 2.249.938a3.182 3.182 0 003.16-3.636zm-13.216-6.359H8.252v2.498H7.003v-2.498H4.505v-1.25h2.498V6.749h1.25v2.498h2.498v1.25zm4.997-1.25c-.688 0-1.25-.561-1.25-1.248 0-.687.563-1.25 1.25-1.25s1.249.563 1.249 1.25-.562 1.249-1.25 1.249zm2.498 3.748c-.687 0-1.25-.562-1.25-1.249s.563-1.249 1.25-1.249 1.25.562 1.25 1.25c0 .686-.563 1.248-1.25 1.248z"
  }))), _defs || (_defs = /*#__PURE__*/React__namespace.createElement("defs", null, /*#__PURE__*/React__namespace.createElement("clipPath", {
    id: "game_svg__clip0"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    fill: "#fff",
    d: "M0 0h24v24H0z"
  })))));
}

var _path$j;

function _extends$m() { _extends$m = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$m.apply(this, arguments); }

function SvgCall(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$m({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$j || (_path$j = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.673 17.009l-2.452-2.453a2.81 2.81 0 00-3.979 0l-.5.5A54.36 54.36 0 018.94 8.245l.5-.5a2.817 2.817 0 000-3.978l-2.457-2.45a2.883 2.883 0 00-3.983 0L1.66 2.663a3.981 3.981 0 00-.5 4.994 54.175 54.175 0 0015.173 15.176 4.015 4.015 0 005-.5l1.345-1.346a2.809 2.809 0 000-3.977l-.005-.001z"
  })));
}

var defaultIconSize$1 = "24px";

var AchievementIcon = /*#__PURE__*/function (_Component) {
  _inherits(AchievementIcon, _Component);

  var _super = _createSuper(AchievementIcon);

  function AchievementIcon() {
    _classCallCheck(this, AchievementIcon);

    return _super.apply(this, arguments);
  }

  _createClass(AchievementIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          color = _this$props.color;
      if (!AI_ALL_TYPES.includes(type)) return "";
      var currentTint = this.tintToClass(color);
      var className = this.props.className || '';
      var iconSize = size || defaultIconSize$1;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(currentTint, " ").concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-primary";

      switch (tint) {
        case TINT_DARK:
          return "fill-dark";

        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_NAVY:
          return "fill-navy";

        default:
          return "fill-primary";
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case AI_SOCIAL:
          return /*#__PURE__*/React__default["default"].createElement(SvgSocial, {
            width: iconSize,
            height: iconSize
          });

        case AI_WORK:
          return /*#__PURE__*/React__default["default"].createElement(SvgWork, {
            width: iconSize,
            height: iconSize
          });

        case AI_VIDEO:
          return /*#__PURE__*/React__default["default"].createElement(SvgVideo, {
            width: iconSize,
            height: iconSize
          });

        case AI_CALL:
          return /*#__PURE__*/React__default["default"].createElement(SvgCall, {
            width: iconSize,
            height: iconSize
          });

        case AI_GAME:
          return /*#__PURE__*/React__default["default"].createElement(SvgGame, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return AchievementIcon;
}(React.Component);
AchievementIcon.propTypes = {
  size: PropTypes__default["default"].number,
  type: PropTypes__default["default"].oneOf([AI_GAME, AI_CALL, AI_VIDEO, AI_WORK, AI_SOCIAL]),
  color: PropTypes__default["default"].oneOf([TINT_DARK, TINT_DANGER, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING])
};

var SpeedTestAchievementTable = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestAchievementTable, _Component);

  var _super = _createSuper(SpeedTestAchievementTable);

  function SpeedTestAchievementTable() {
    _classCallCheck(this, SpeedTestAchievementTable);

    return _super.apply(this, arguments);
  }

  _createClass(SpeedTestAchievementTable, [{
    key: "render",
    value: function render() {
      var result = this.props.result;
      var download = result.getDownloadValue();
      var upload = result.getUploadValue();
      var jitter = result.getJitter();
      var ping = result.getPing();
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mt-10 mb-3"
      }, intl__default["default"].get('speedtest_achievements')), /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-sm table-borderless"
      }, /*#__PURE__*/React__default["default"].createElement("tbody", null, this.renderVideo(download), this.renderCall(download, upload), this.renderSocial(download, upload), this.renderWork(download, upload), this.renderGaming(ping, jitter))));
    }
  }, {
    key: "renderVideo",
    value: function renderVideo(download) {
      var videoText = intl__default["default"].get('speedtest_score_category_4k');
      var videoScore = 90;

      if (download >= 40) {
        videoText = intl__default["default"].get('speedtest_score_category_UHD8K');
        videoScore = 100;
      } else if (download >= 25) {
        videoText = intl__default["default"].get('speedtest_score_category_UHD4K');
        videoScore = 75;
      } else if (download >= 5) {
        videoText = intl__default["default"].get('speedtest_score_category_HDStream');
        videoScore = 50;
      } else if (download >= 2) {
        videoText = intl__default["default"].get('speedtest_score_category_SDStream');
        videoScore = 25;
      } else {
        videoText = intl__default["default"].get('speedtest_score_category_BasicStream');
        videoScore = 5;
      }

      return this.renderRow(AI_VIDEO, intl__default["default"].get('speedtest_title_video'), videoText, videoScore * 5 / 100);
    }
  }, {
    key: "renderCall",
    value: function renderCall(download, upload) {
      var callText = intl__default["default"].get('speedtest_score_category_video');
      var callScore = 80;

      if (download >= 5 && upload >= 2) {
        callText = intl__default["default"].get('speedtest_score_category_HDWebcam');
        callScore = 100;
      } else if (download >= 1 && upload >= 1) {
        callText = intl__default["default"].get('speedtest_score_category_SDWebcam');
        callScore = 50;
      } else if (download >= 0.5 && upload >= 0.5) {
        callText = intl__default["default"].get('speedtest_score_category_AudioStream');
        callScore = 25;
      } else {
        callText = intl__default["default"].get('speedtest_score_category_limited');
        callScore = 5;
      }

      return this.renderRow(AI_CALL, intl__default["default"].get('speedtest_title_call'), callText, callScore * 5 / 100);
    }
  }, {
    key: "renderSocial",
    value: function renderSocial(download, upload) {
      var socialText = intl__default["default"].get('speedtest_score_category_photo');
      var socialScore = 50;

      if (download >= 5 && upload >= 2) {
        socialText = intl__default["default"].get('speedtest_score_category_HDvid&photo');
        socialScore = 100;
      } else if (download >= 1 && upload >= 1) {
        socialText = intl__default["default"].get('speedtest_score_category_vid&photo');
        socialScore = 50;
      } else if (download >= 0.5 && upload >= 0.5) {
        socialText = intl__default["default"].get('speedtest_score_category_photo');
        socialScore = 25;
      } else {
        socialText = intl__default["default"].get('speedtest_score_category_Messaging');
        socialScore = 5;
      }

      return this.renderRow(AI_SOCIAL, intl__default["default"].get('speedtest_title_social'), socialText, socialScore * 5 / 100);
    }
  }, {
    key: "renderWork",
    value: function renderWork(download, upload) {
      var workText = intl__default["default"].get('speedtest_score_category_browsing');
      var workScore = 70;

      if (download >= 25 && upload >= 25) {
        workText = intl__default["default"].get('speedtest_score_category_L_filetrans');
        workScore = 100;
      } else if (download >= 5 && upload >= 2) {
        workText = intl__default["default"].get('speedtest_score_category_L_filetrans');
        workScore = 75;
      } else if (download >= 1 && upload >= 1) {
        workText = intl__default["default"].get('speedtest_score_category_S_filetrans');
        workScore = 50;
      } else if (download >= 0.5 && upload >= 0.5) {
        workText = intl__default["default"].get('speedtest_score_category_brows_emails');
        workScore = 25;
      } else {
        workText = intl__default["default"].get('speedtest_score_category_small_brows_email');
        workScore = 5;
      }

      return this.renderRow(AI_WORK, intl__default["default"].get('speedtest_title_work'), workText, workScore * 5 / 100);
    }
  }, {
    key: "renderGaming",
    value: function renderGaming(ping, jitter) {
      var gamingText = intl__default["default"].get('speedtest_score_category_winning');
      var gamingScore = 70;

      if (ping < 60 && jitter < 5) {
        gamingText = intl__default["default"].get('speedtest_score_category_gameon');
        gamingScore = 100;
      } else if (ping < 130 && jitter < 50) {
        gamingText = intl__default["default"].get('speedtest_score_category_inthegame');
        gamingScore = 75;
      } else if (ping < 200 && jitter < 80) {
        gamingText = intl__default["default"].get('speedtest_score_category_challenging');
        gamingScore = 50;
      } else if (ping < 250) {
        gamingText = intl__default["default"].get('speedtest_score_category_challenging');
        gamingScore = 25;
      } else {
        gamingText = intl__default["default"].get('speedtest_score_category_gameover');
        gamingScore = 5;
      }

      return this.renderRow(AI_GAME, intl__default["default"].get('speedtest_title_gaming'), gamingText, gamingScore * 5 / 100);
    }
  }, {
    key: "renderRow",
    value: function renderRow(icon, title, description, rating) {
      return /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("td", {
        className: "d-inline-flex text-dark align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement(AchievementIcon, {
        color: TINT_DARK,
        size: 16,
        type: icon,
        className: "d-flex mr-2"
      }), title), /*#__PURE__*/React__default["default"].createElement("td", {
        className: "list-inline"
      }, /*#__PURE__*/React__default["default"].createElement("li", {
        className: "list-inline-item small"
      }, /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        editable: false,
        tint: TINT_WARNING,
        length: 5,
        value: rating,
        type: RTI_DOT,
        size: RB_TINY
      })), /*#__PURE__*/React__default["default"].createElement("li", {
        className: "list-inline-item"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-none d-sm-none d-md-block d-lg-block"
      }, description))));
    }
  }]);

  return SpeedTestAchievementTable;
}(React.Component);
SpeedTestAchievementTable.propTypes = {
  result: PropTypes__default["default"].object
};

/**
 * Standard navigation bar.
 */

var MetricVerticalCard = /*#__PURE__*/function (_Component) {
  _inherits(MetricVerticalCard, _Component);

  var _super = _createSuper(MetricVerticalCard);

  function MetricVerticalCard() {
    _classCallCheck(this, MetricVerticalCard);

    return _super.apply(this, arguments);
  }

  _createClass(MetricVerticalCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          titleIcon = _this$props.titleIcon,
          value = _this$props.value,
          measure = _this$props.measure,
          extra = _this$props.extra,
          extraIcon = _this$props.extraIcon,
          className = _this$props.className,
          compact = _this$props.compact;
      var cName = className || "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "bg-soft-primary rounded " + cName
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center align-items-center"
      }, titleIcon, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "ml-2 mb-0"
      }, title)), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "text-center mb-0"
      }, value, /*#__PURE__*/React__default["default"].createElement("small", {
        className: "ml-1 text-secondary"
      }, measure)), !compact && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center"
      }, extraIcon, /*#__PURE__*/React__default["default"].createElement("small", {
        className: "ml-2 mb-0 text-secondary"
      }, extra)));
    }
  }]);

  return MetricVerticalCard;
}(React.Component);
MetricVerticalCard.propTypes = {
  title: PropTypes__default["default"].string,
  titleIcon: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string,
  compact: PropTypes__default["default"].bool,
  value: PropTypes__default["default"].string,
  measure: PropTypes__default["default"].string,
  extra: PropTypes__default["default"].string,
  extraIcon: PropTypes__default["default"].node
};

var SpeedTestDonuts = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestDonuts, _Component);

  var _super = _createSuper(SpeedTestDonuts);

  function SpeedTestDonuts() {
    _classCallCheck(this, SpeedTestDonuts);

    return _super.apply(this, arguments);
  }

  _createClass(SpeedTestDonuts, [{
    key: "render",
    value: function render() {
      var result = this.props.result;
      var isCompleted = result.isCompletedState();
      var cName = isCompleted ? "d-sm-flex" : "d-sm-block";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mt-10 mb-5 justify-content-start d-xl-flex d-lg-flex d-md-flex " + cName
      }, isCompleted ? this.renderResultDownload(result) : this.renderDownload(result), isCompleted ? this.renderResultUpload(result) : this.renderUpload(result));
    }
  }, {
    key: "renderDownloadText",
    value: function renderDownloadText() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        className: "d-flex",
        type: GEN_DOWN,
        color: TINT_SUCCESS,
        size: 16
      }), /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "ml-2 mb-0"
      }, intl__default["default"].get('speedtest_download')));
    }
  }, {
    key: "renderResultDownload",
    value: function renderResultDownload(result) {
      return /*#__PURE__*/React__default["default"].createElement(MetricVerticalCard, {
        className: "mr-2 mb-2 p-3 px-lg-7 px-xl-7 px-md-5 px-sm-3",
        title: intl__default["default"].get('speedtest_download'),
        value: result.getDownloadValue(),
        measure: intl__default["default"].get('#_mbps'),
        compact: true,
        titleIcon: /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          className: "d-flex",
          type: GEN_DOWN,
          color: TINT_SUCCESS,
          size: 16
        })
      });
    }
  }, {
    key: "renderDownload",
    value: function renderDownload(result) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "p-3 px-7 text-center"
      }, this.renderDownloadText(), /*#__PURE__*/React__default["default"].createElement(CircularChart, {
        loading: result.isInitState(),
        failed: result.isFailedState(),
        minLabel: intl__default["default"].get('num_mbps', {
          num: '0'
        }),
        maxLabel: intl__default["default"].get('num_mbps', {
          num: result.getDownloadValueMax()
        }),
        valueLabel: result.getDownloadValue(),
        radius: CC_RADIUS_DEFAULT,
        progress: result.getDownloadChartValue(),
        dimension: CC_DIM_DEFAULT,
        color: TINT_SUCCESS,
        animated: true
      }));
    }
  }, {
    key: "renderUploadText",
    value: function renderUploadText() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        className: "d-flex",
        type: GEN_UP,
        color: TINT_PRIMARY,
        size: 16
      }), /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "ml-2 mb-0"
      }, intl__default["default"].get('speedtest_upload')));
    }
  }, {
    key: "renderResultUpload",
    value: function renderResultUpload(result) {
      return /*#__PURE__*/React__default["default"].createElement(MetricVerticalCard, {
        className: "mr-2 mb-2 p-3 px-lg-7 px-xl-7 px-md-5 px-sm-3",
        title: intl__default["default"].get('speedtest_upload'),
        compact: true,
        value: result.getUploadValue(),
        measure: intl__default["default"].get('#_mbps'),
        titleIcon: /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          className: "d-flex",
          type: GEN_UP,
          color: TINT_PRIMARY,
          size: 16
        })
      });
    }
  }, {
    key: "renderUpload",
    value: function renderUpload(result) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "p-3 px-7 text-center"
      }, this.renderUploadText(), /*#__PURE__*/React__default["default"].createElement(CircularChart, {
        loading: result.isInitState(),
        failed: result.isFailedState(),
        minLabel: intl__default["default"].get('num_mbps', {
          num: '0'
        }),
        maxLabel: intl__default["default"].get('num_mbps', {
          num: result.getUploadValueMax()
        }),
        valueLabel: result.getUploadValue(),
        radius: CC_RADIUS_DEFAULT,
        progress: result.getUploadChartValue() || 0,
        dimension: CC_DIM_DEFAULT,
        color: TINT_PRIMARY,
        animated: true
      }));
    }
  }]);

  return SpeedTestDonuts;
}(React.Component);
SpeedTestDonuts.propTypes = {
  result: PropTypes__default["default"].object
};

var _path$i;

function _extends$l() { _extends$l = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$l.apply(this, arguments); }

function SvgXTwitter(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$l({
    viewBox: "0 0 512 512",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$i || (_path$i = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8l164.9-188.5L26.8 48h145.6l100.5 132.9L389.2 48zm-24.8 373.8h39.1L151.1 88h-42l255.3 333.8z"
  })));
}

var _path$h;

function _extends$k() { _extends$k = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$k.apply(this, arguments); }

function SvgFacebook(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$k({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$h || (_path$h = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.076 13.5l.67-4.343h-4.19V6.338c0-1.188.586-2.347 2.462-2.347h1.905V.293S17.195 0 15.542 0c-3.45 0-5.706 2.08-5.706 5.846v3.31H6V13.5h3.836V24h4.72V13.5h3.52z"
  })));
}

var _path$g;

function _extends$j() { _extends$j = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$j.apply(this, arguments); }

function SvgWebsite(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$j({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$g || (_path$g = /*#__PURE__*/React__namespace.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M11.988 0C5.364 0 0 5.376 0 12s5.364 12 11.988 12C18.624 24 24 18.624 24 12S18.624 0 11.988 0zm8.316 7.2h-3.54c-.384-1.5-.936-2.94-1.656-4.272A9.636 9.636 0 0120.304 7.2zM12 2.448A16.904 16.904 0 0114.292 7.2H9.708A16.903 16.903 0 0112 2.448zM2.712 14.4A9.89 9.89 0 012.4 12c0-.828.12-1.632.312-2.4h4.056A19.819 19.819 0 006.6 12c0 .816.072 1.608.168 2.4H2.712zm.984 2.4h3.54c.384 1.5.936 2.94 1.656 4.272A9.584 9.584 0 013.696 16.8zm3.54-9.6h-3.54a9.584 9.584 0 015.196-4.272A18.779 18.779 0 007.236 7.2zM12 21.552A16.903 16.903 0 019.708 16.8h4.584A16.904 16.904 0 0112 21.552zm2.808-7.152H9.192C9.084 13.608 9 12.816 9 12c0-.816.084-1.62.192-2.4h5.616c.108.78.192 1.584.192 2.4 0 .816-.084 1.608-.192 2.4zm.3 6.672a18.779 18.779 0 001.656-4.272h3.54a9.636 9.636 0 01-5.196 4.272zm2.124-6.672c.096-.792.168-1.584.168-2.4 0-.816-.072-1.608-.168-2.4h4.056A9.89 9.89 0 0121.6 12a9.89 9.89 0 01-.312 2.4h-4.056z"
  })));
}

var _path$f;

function _extends$i() { _extends$i = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$i.apply(this, arguments); }

function SvgPhone(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$i({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$f || (_path$f = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M22.673 17.009l-2.452-2.453a2.81 2.81 0 00-3.979 0l-.5.5A54.36 54.36 0 018.94 8.245l.5-.5a2.817 2.817 0 000-3.978l-2.457-2.45a2.883 2.883 0 00-3.983 0L1.66 2.663a3.981 3.981 0 00-.5 4.994 54.175 54.175 0 0015.173 15.176 4.015 4.015 0 005-.5l1.345-1.346a2.809 2.809 0 000-3.977l-.005-.001z"
  })));
}

var defaultIconSize = "24px";

var SupportIcon = /*#__PURE__*/function (_Component) {
  _inherits(SupportIcon, _Component);

  var _super = _createSuper(SupportIcon);

  function SupportIcon(props, context) {
    var _this;

    _classCallCheck(this, SupportIcon);

    _this = _super.call(this, props, context);
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SupportIcon, [{
    key: "onClick",
    value: function onClick() {
      if (this.props.onClick && !this.props.disabled) {
        this.props.onClick();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          disabled = _this$props.disabled;
      if (!SI_ALL_TYPES.includes(type)) return "";
      var cName = this.props.className || '';
      var iconSize = size || defaultIconSize;
      var linkClass = !disabled ? 'icon-svg-link' : 'fill-dark';
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(linkClass, " ")
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        role: "button",
        onClick: function onClick() {
          return _this2.onClick();
        },
        className: "".concat(cName)
      }, this.renderIcon(type, iconSize)));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case SI_PHONE:
          return /*#__PURE__*/React__default["default"].createElement(SvgPhone, {
            width: iconSize,
            height: iconSize
          });

        case SI_TWITTER:
          return /*#__PURE__*/React__default["default"].createElement(SvgXTwitter, {
            width: iconSize,
            height: iconSize
          });

        case SI_WEBSITE:
          return /*#__PURE__*/React__default["default"].createElement(SvgWebsite, {
            width: iconSize,
            height: iconSize
          });

        case SI_FACEBOOK:
          return /*#__PURE__*/React__default["default"].createElement(SvgFacebook, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return SupportIcon;
}(React.Component);
SupportIcon.propTypes = {
  size: PropTypes__default["default"].number,
  onClick: PropTypes__default["default"].func,
  disabled: PropTypes__default["default"].bool,
  type: PropTypes__default["default"].oneOf([SI_FACEBOOK, SI_WEBSITE, SI_TWITTER, SI_PHONE])
};

var SpeedTestContactSupport = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestContactSupport, _Component);

  var _super = _createSuper(SpeedTestContactSupport);

  function SpeedTestContactSupport(props, context) {
    var _this;

    _classCallCheck(this, SpeedTestContactSupport);

    _this = _super.call(this, props, context);
    _this.onSupportIconClicked = _this.onSupportIconClicked.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SpeedTestContactSupport, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.initTooltips();
    }
  }, {
    key: "onSupportIconClicked",
    value: function onSupportIconClicked(url, type) {
      if (url && type && this.props.onSupportIconClicked) {
        this.props.onSupportIconClicked(url, type);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var exists = function exists(v) {
        return v !== null && v !== undefined && v.length > 0;
      };

      var resultFacebook = this.props.result.getSupportFacebook();
      var resultTwitter = this.props.result.getSupportTwitter();
      var resultWebsite = this.props.result.getSupportWebsite();
      var resultPhone = this.props.result.getSupportPhone();

      var onFacebookClick = function onFacebookClick() {
        return _this2.onSupportIconClicked(resultFacebook, SI_FACEBOOK);
      };

      var onTwitterClick = function onTwitterClick() {
        return _this2.onSupportIconClicked(resultTwitter, SI_TWITTER);
      };

      var onWebsiteClick = function onWebsiteClick() {
        return _this2.onSupportIconClicked(resultWebsite, SI_WEBSITE);
      };

      var onPhoneClick = function onPhoneClick() {
        return _this2.onSupportIconClicked(resultPhone, SI_PHONE);
      };

      var cName = 'icon icon-sm icon-soft-primary icon-circle';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "w-100"
      }, /*#__PURE__*/React__default["default"].createElement("h5", null, intl__default["default"].get('speedtest_contact_support')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline-item",
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: resultFacebook
      }, /*#__PURE__*/React__default["default"].createElement(SupportIcon, {
        className: cName,
        onClick: onFacebookClick,
        disabled: !exists(resultFacebook),
        type: SI_FACEBOOK,
        size: 16
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline-item",
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: resultTwitter
      }, /*#__PURE__*/React__default["default"].createElement(SupportIcon, {
        className: cName,
        onClick: onTwitterClick,
        disabled: !exists(resultTwitter),
        type: SI_TWITTER,
        size: 16
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline-item",
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: resultWebsite
      }, /*#__PURE__*/React__default["default"].createElement(SupportIcon, {
        className: cName,
        onClick: onWebsiteClick,
        disabled: !exists(resultWebsite),
        type: SI_WEBSITE,
        size: 16
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline-item",
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: resultPhone
      }, /*#__PURE__*/React__default["default"].createElement(SupportIcon, {
        className: cName,
        ù: true,
        onClick: onPhoneClick,
        disabled: !exists(resultPhone),
        type: SI_PHONE,
        size: 16
      }))));
    }
  }]);

  return SpeedTestContactSupport;
}(React.Component);
SpeedTestContactSupport.propTypes = {
  onSupportIconClicked: PropTypes__default["default"].func,
  result: PropTypes__default["default"].object
};

var RATING_DIALOG_SPEED_TEST$1 = 'RATING_DIALOG_SPEED_TEST';

var SpeedTestIspCard = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestIspCard, _Component);

  var _super = _createSuper(SpeedTestIspCard);

  function SpeedTestIspCard(props, context) {
    var _this;

    _classCallCheck(this, SpeedTestIspCard);

    _this = _super.call(this, props, context);
    _this.onClickIsp = _this.onClickIsp.bind(_assertThisInitialized(_this));
    _this.onClickWebsite = _this.onClickWebsite.bind(_assertThisInitialized(_this));
    _this.onSaveRating = _this.onSaveRating.bind(_assertThisInitialized(_this));
    _this.onSupportIconClicked = _this.onSupportIconClicked.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SpeedTestIspCard, [{
    key: "onSupportIconClicked",
    value: function onSupportIconClicked(url, type) {
      if (url && type && this.props.onSupportIconClicked) {
        this.props.onSupportIconClicked(url, type);
      }
    }
  }, {
    key: "onClickIsp",
    value: function onClickIsp() {
      if (this.props.onClickIsp) {
        this.props.onClickIsp();
      }
    }
  }, {
    key: "onClickWebsite",
    value: function onClickWebsite() {
      if (this.props.onClickWebsite && this.props.result && this.props.result.getWebsite()) {
        this.props.onClickWebsite(this.props.result.getWebsite());
      }
    }
  }, {
    key: "onSaveRating",
    value: function onSaveRating(rating) {
      if (rating && this.props.onSaveRating) {
        this.props.onSaveRating(rating);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered shadow-none"
      }, this.renderBody(), this.renderFooter(), this.renderRatingDialog());
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, this.renderIspInfo());
    }
  }, {
    key: "renderFooter",
    value: function renderFooter() {
      if (!this.props.result.isCompletedState()) return '';

      var showRatingDialog = function showRatingDialog() {
        showDialogById(RATING_DIALOG_SPEED_TEST$1);
      };

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-footer bg-transparent"
      }, this.renderUserRating(), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: showRatingDialog,
        className: "w-100",
        size: BTN_SIZE_BIG,
        title: this.props.rate && this.props.rate.getRating() !== 0 ? intl__default["default"].get('rating_edit') : intl__default["default"].get('speedtest_rate'),
        type: BTN_TYPE_DEFAULT,
        tint: BTN_TINT_PRIMARY
      }));
    }
  }, {
    key: "renderIspInfo",
    value: function renderIspInfo() {
      var _this2 = this;

      var result = this.props.result;
      var cleanerUrl = result.getWebsite();

      if (cleanerUrl.startsWith('https://')) {
        cleanerUrl = cleanerUrl.replace('https://', '');
      } else if (cleanerUrl.startsWith('http://')) {
        cleanerUrl = cleanerUrl.replace('http://', '');
      }

      var logo = result.getLogoImage() || "https://cdn.fing.io/images/isp/general/default_isp.png";
      var image = result.getBannerImage() ? result.getBannerImage() : logo;
      var width = result.getBannerImage() ? 192 : 96;
      var name = result.getName() ? intl__default["default"].get('speedtest_isp_info_location', {
        isp: result.getName(),
        city: result.getCity(),
        country: result.getCountry()
      }) : '';
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "mb-1",
        onClick: this.onClickIsp,
        src: image,
        height: 96,
        width: width,
        alt: result.getName()
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-5 w-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("a", {
        className: "h4 link-underline mb-0",
        role: "button",
        onClick: this.onClickIsp
      }, name)), /*#__PURE__*/React__default["default"].createElement("a", {
        className: "text-primary",
        role: "button",
        onClick: this.onClickWebsite
      }, cleanerUrl)), /*#__PURE__*/React__default["default"].createElement(SpeedTestContactSupport, {
        result: result,
        onSupportIconClicked: function onSupportIconClicked(url, type) {
          return _this2.onSupportIconClicked(url, type);
        }
      }));
    }
  }, {
    key: "renderUserRating",
    value: function renderUserRating() {
      if (!this.props.rate || this.props.rate.getRating() === 0) return '';
      var date = intl__default["default"].get('rating_date', {
        date: formatAbsoluteDate(this.props.rate.getTimestamp(), DATE_FORMAT_SHORT)
      });
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        tint: TINT_SECONDARY,
        length: 5,
        value: Number(this.props.rate.getRating()),
        type: RTI_HEART,
        size: RB_SMALL
      }), this.props.rate.getTimestamp() > 0 && /*#__PURE__*/React__default["default"].createElement("p", {
        className: "small"
      }, date));
    }
  }, {
    key: "renderRatingDialog",
    value: function renderRatingDialog() {
      var _this3 = this;

      var onClose = function onClose() {
        hideDialogById(RATING_DIALOG_SPEED_TEST$1);
      };

      var onConfirm = function onConfirm(ratingResult) {
        hideDialogById(RATING_DIALOG_SPEED_TEST$1);

        _this3.onSaveRating(ratingResult);
      };

      return /*#__PURE__*/React__default["default"].createElement(RatingEditDialog, {
        id: RATING_DIALOG_SPEED_TEST$1,
        type: RTI_HEART,
        subjectName: this.props.result.getName(),
        ratingColor: TINT_DANGER,
        comment: this.props.rate.getComment() || '',
        value: this.props.rate.getRating() || 0,
        subjectImageBanner: this.props.result.getBannerImage(),
        subjectImageLogo: this.props.result.getLogoImage(),
        onClose: onClose,
        onConfirm: onConfirm
      });
    }
  }]);

  return SpeedTestIspCard;
}(React.Component);
SpeedTestIspCard.propTypes = {
  onSupportIconClicked: PropTypes__default["default"].func,
  onClickButton: PropTypes__default["default"].func,
  onSaveRating: PropTypes__default["default"].func,
  result: PropTypes__default["default"].object,
  rate: PropTypes__default["default"].object
};

var SpeedTestSentimentDistribution = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestSentimentDistribution, _Component);

  var _super = _createSuper(SpeedTestSentimentDistribution);

  function SpeedTestSentimentDistribution() {
    _classCallCheck(this, SpeedTestSentimentDistribution);

    return _super.apply(this, arguments);
  }

  _createClass(SpeedTestSentimentDistribution, [{
    key: "getProgressBarValue",
    value: function getProgressBarValue(rate) {
      return Math.round(rate / this.props.total * 100);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          distribution = _this$props.distribution,
          value = _this$props.value,
          total = _this$props.total;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-12 col-lg-6 col-md-6 col-sm-12"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("h1", {
        className: "mr-4 mb-0 display-4"
      }, value.toFixed(1)), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        tint: TINT_DANGER,
        length: 5,
        value: value,
        type: RTI_HEART,
        size: RB_SMALL
      }), /*#__PURE__*/React__default["default"].createElement("h5", null, intl__default["default"].get('speedtest_reviews', {
        total: total
      }))))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-12 col-lg-6 col-md-6 col-sm-12"
      }, [5, 4, 3, 2, 1].map(function (val) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          key: val,
          className: "d-flex align-items-center"
        }, /*#__PURE__*/React__default["default"].createElement("span", {
          className: "flex-nowrap text-nowrap"
        }, val), /*#__PURE__*/React__default["default"].createElement("span", {
          className: "col-lg-10 px-1"
        }, /*#__PURE__*/React__default["default"].createElement(ProgressBar, {
          visibilityPolicy: PB_VISIBLE_ALWAYS,
          value: _this.getProgressBarValue(Number(distribution[val - 1]))
        })));
      })));
    }
  }]);

  return SpeedTestSentimentDistribution;
}(React.Component);
SpeedTestSentimentDistribution.propTypes = {
  distribution: PropTypes__default["default"].array,
  value: PropTypes__default["default"].number,
  total: PropTypes__default["default"].number
};

var SpeedTestPerformance = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestPerformance, _Component);

  var _super = _createSuper(SpeedTestPerformance);

  function SpeedTestPerformance(props, context) {
    var _this;

    _classCallCheck(this, SpeedTestPerformance);

    _this = _super.call(this, props, context);
    _this.state = {
      selectedIndex: 0
    };
    return _this;
  }

  _createClass(SpeedTestPerformance, [{
    key: "isCitySelected",
    value: function isCitySelected() {
      return this.state.selectedIndex === 0;
    }
  }, {
    key: "isCountrySelected",
    value: function isCountrySelected() {
      return this.state.selectedIndex === 1;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var result = this.props.result;

      var onItemSelected = function onItemSelected(index) {
        _this2.setState({
          selectedIndex: index
        });
      };

      var items = [];
      if (!result.areStatsCityEmpty() && (result.isSentimentDistributionCityAvailable() || result.isCompareCityAvailable())) items.push({
        label: result.getCity()
      });
      if (!result.areStatsCountryEmpty() && (result.isSentimentDistributionCountryAvailable() || result.isCompareCountryAvailable())) items.push({
        label: result.getCountry()
      });
      return result.isCompletedState() && items.length > 0 ? /*#__PURE__*/React__default["default"].createElement("div", {
        className: "container-fluid bg-light p-6"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-between align-items-center mb-6"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('speedtest_compare_performance')), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "ml-auto"
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedBar, {
        activeIndex: this.state.selectedIndex,
        items: items,
        onItemSelected: onItemSelected
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-8 col-lg-12 col-md-12 col-sm-12 mb-xl-0 mb-4"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, this.renderComparisonChart(result)))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-xl-4 col-lg-12 col-md-12 col-sm-12 mb-xl-0 mb-4"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, this.renderSentimentDistribution(result)))))) : '';
    }
  }, {
    key: "renderSentimentDistribution",
    value: function renderSentimentDistribution(result) {
      if (this.isCountrySelected() && !result.isSentimentDistributionCountryAvailable() || this.isCitySelected() && !result.isSentimentDistributionCityAvailable() || result.areStatsCityEmpty() && !result.isSentimentDistributionCountryAvailable() || result.areStatsCountryEmpty() && !result.isSentimentDistributionCityAvailable()) {
        return /*#__PURE__*/React__default["default"].createElement("p", {
          className: "d-flex h-100 align-items-center justify-content-center"
        }, intl__default["default"].get('speedtest_distribution_not_available', {
          isp: result.getName()
        }));
      }

      if (result.areStatsCityEmpty()) {
        return /*#__PURE__*/React__default["default"].createElement(SpeedTestSentimentDistribution, {
          distribution: result.getSentimentDistributionCountry(),
          value: result.getSentimentScoreCountry(),
          total: result.getTotalRatingsCountry()
        });
      }

      if (result.areStatsCountryEmpty()) {
        return /*#__PURE__*/React__default["default"].createElement(SpeedTestSentimentDistribution, {
          distribution: result.getSentimentDistributionCity(),
          value: result.getSentimentScoreCity(),
          total: result.getTotalRatingsCity()
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(SpeedTestSentimentDistribution, {
        distribution: this.isCountrySelected() ? result.getSentimentDistributionCountry() : result.getSentimentDistributionCity(),
        value: this.isCountrySelected() ? result.getSentimentScoreCountry() : result.getSentimentScoreCity(),
        total: this.isCountrySelected() ? result.getTotalRatingsCountry() : result.getTotalRatingsCity()
      });
    }
  }, {
    key: "renderComparisonChart",
    value: function renderComparisonChart(result) {
      if (this.isCountrySelected() && !result.isCompareCountryAvailable() || this.isCitySelected() && !result.isCompareCityAvailable()) {
        return /*#__PURE__*/React__default["default"].createElement("p", {
          className: "d-flex h-100 align-items-center justify-content-center"
        }, intl__default["default"].get('speedtest_comparison_not_available', {
          isp: result.getName()
        }));
      }

      var formatSpeed = function formatSpeed(dw, up) {
        return intl__default["default"].get('format_speed', {
          dw: dw,
          up: up
        });
      };

      var speedTestScore = this.isCitySelected() ? result.getScoreCity() : result.getScoreCountry();
      var topItem = new ComparisonChartItem();
      topItem.title = intl__default["default"].get("speedtest_title");
      topItem.subtitle = formatSpeed(result.getDownloadValue(), result.getUploadValue());
      topItem.extra = rankStringWithLocation(speedTestScore, this.isCitySelected() ? result.getCity() : result.getCountry());
      topItem.value = speedTestScore;
      var bottomItem = new ComparisonChartItem();

      if (result.areStatsCityEmpty()) {
        bottomItem.title = intl__default["default"].get('speedtest_compare_location', {
          isp: result.getName(),
          location: result.getCountry()
        });
        bottomItem.subtitle = formatSpeed(result.getDownloadCountry(), result.getUploadCountry());
        bottomItem.extra = intl__default["default"].get('speedtest_tested', {
          tests: result.getSamplesCountry()
        });
        bottomItem.value = result.getScoreIspCountry();
        return /*#__PURE__*/React__default["default"].createElement(ComparisonChart, {
          height: 200,
          topItem: topItem,
          bottomItem: bottomItem
        });
      }

      if (result.areStatsCountryEmpty()) {
        bottomItem.title = intl__default["default"].get('speedtest_compare_location', {
          isp: result.getName(),
          location: result.getCity()
        });
        bottomItem.subtitle = formatSpeed(result.getDownloadCity(), result.getUploadCity());
        bottomItem.extra = intl__default["default"].get('speedtest_tested', {
          tests: result.getSamplesCity()
        });
        bottomItem.value = result.getScoreIspCity();
        return /*#__PURE__*/React__default["default"].createElement(ComparisonChart, {
          height: 200,
          topItem: topItem,
          bottomItem: bottomItem
        });
      }

      bottomItem.title = intl__default["default"].get('speedtest_compare_location', {
        isp: result.getName(),
        location: this.isCitySelected() ? result.getCity() : result.getCountry()
      });
      bottomItem.subtitle = this.isCitySelected() ? formatSpeed(result.getDownloadCity(), result.getUploadCity()) : formatSpeed(result.getDownloadCountry(), result.getUploadCountry());
      bottomItem.extra = intl__default["default"].get('speedtest_tested', {
        tests: this.isCitySelected() ? result.getSamplesCity() : result.getSamplesCountry()
      });
      bottomItem.value = this.isCitySelected() ? result.getScoreIspCity() : result.getScoreIspCountry();
      return /*#__PURE__*/React__default["default"].createElement(ComparisonChart, {
        height: 200,
        topItem: topItem,
        bottomItem: bottomItem
      });
    }
  }]);

  return SpeedTestPerformance;
}(React.Component);
SpeedTestPerformance.propTypes = {
  result: PropTypes__default["default"].object
};

var INFO_SPEED_TEST_DIALOG = "INFO_SPEED_TEST_DIALOG";

var SpeedTestStats = /*#__PURE__*/function (_Component) {
  _inherits(SpeedTestStats, _Component);

  var _super = _createSuper(SpeedTestStats);

  function SpeedTestStats() {
    _classCallCheck(this, SpeedTestStats);

    return _super.apply(this, arguments);
  }

  _createClass(SpeedTestStats, [{
    key: "render",
    value: function render() {
      var result = this.props.result;
      var cName = 'list-inline-item text-dark';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-inline-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("ul", {
        className: "list-inline list-separator mr-3"
      }, /*#__PURE__*/React__default["default"].createElement("li", {
        className: cName
      }, intl__default["default"].get('speedtest_stats_ping'), /*#__PURE__*/React__default["default"].createElement("strong", {
        className: "ml-2"
      }, result.getPing() + 'ms')), /*#__PURE__*/React__default["default"].createElement("li", {
        className: cName
      }, intl__default["default"].get('speedtest_stats_jitter'), /*#__PURE__*/React__default["default"].createElement("strong", {
        className: "ml-2"
      }, result.getJitter() + 'ms')), /*#__PURE__*/React__default["default"].createElement("li", {
        className: cName
      }, intl__default["default"].get('speedtest_stats_loss'), /*#__PURE__*/React__default["default"].createElement("strong", {
        className: "ml-2"
      }, result.getLoss() + '%'))), /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button",
        onClick: function onClick() {
          return showDialogById(INFO_SPEED_TEST_DIALOG);
        }
      }, /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        size: 16,
        type: GEN_INFO,
        color: TINT_PRIMARY
      })), this.renderInfoDialog());
    }
  }, {
    key: "renderInfoDialog",
    value: function renderInfoDialog() {
      var onClose = function onClose() {
        return hideDialogById(INFO_SPEED_TEST_DIALOG);
      };

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: INFO_SPEED_TEST_DIALOG,
        title: intl__default["default"].get('speedtest_mlab_title'),
        onClose: onClose
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("p", null, intl__default["default"].get('speedtest_mlab_body')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("dt", {
        className: "col-2"
      }, intl__default["default"].get('speedtest_download')), /*#__PURE__*/React__default["default"].createElement("dd", {
        className: "col-10"
      }, intl__default["default"].get('speedtest_download_info'))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("dt", {
        className: "col-2"
      }, intl__default["default"].get('speedtest_upload')), /*#__PURE__*/React__default["default"].createElement("dd", {
        className: "col-10"
      }, intl__default["default"].get('speedtest_upload_info'))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("dt", {
        className: "col-2"
      }, intl__default["default"].get('speedtest_stats_ping')), /*#__PURE__*/React__default["default"].createElement("dd", {
        className: "col-10"
      }, intl__default["default"].get('speedtest_stats_ping_info'))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("dt", {
        className: "col-2"
      }, intl__default["default"].get('speedtest_stats_jitter')), /*#__PURE__*/React__default["default"].createElement("dd", {
        className: "col-10"
      }, intl__default["default"].get('speedtest_stats_jitter_info'))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("dt", {
        className: "col-2"
      }, intl__default["default"].get('speedtest_stats_loss')), /*#__PURE__*/React__default["default"].createElement("dd", {
        className: "col-10"
      }, intl__default["default"].get('speedtest_stats_loss_info')))));
    }
  }]);

  return SpeedTestStats;
}(React.Component);
SpeedTestStats.propTypes = {
  result: PropTypes__default["default"].object
};

var NotificationTimelineTableRow = /*#__PURE__*/function (_Component) {
  _inherits(NotificationTimelineTableRow, _Component);

  var _super = _createSuper(NotificationTimelineTableRow);

  function NotificationTimelineTableRow(props) {
    var _this;

    _classCallCheck(this, NotificationTimelineTableRow);

    _this = _super.call(this, props);
    _this.onClickNotification = _this.onClickNotification.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NotificationTimelineTableRow, [{
    key: "onClickNotification",
    value: function onClickNotification(data) {
      if (this.props.onClickNotification) {
        this.props.onClickNotification(data);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var item = this.props.item;
      var banner = item.data.banner;
      return /*#__PURE__*/React__default["default"].createElement("tr", null, this.renderState(banner), this.renderTimestamp(item), this.renderSubjectCell(banner), this.renderDetailCell(banner), this.renderActions(item));
    }
  }, {
    key: "renderState",
    value: function renderState(banner) {
      var netContact = banner.contactInfo;
      var contact;

      if (netContact) {
        contact = new Contact();
        contact.contactId = netContact.identifier;
        contact.contactName = netContact.displayName;
        if (netContact.pictureUrl) contact.imageURL = netContact.pictureUrl;else if (netContact.pictureImageData) contact.imageURL = "data:image/jpeg;base64," + netContact.pictureImageData;
        contact.contactType = netContact.contactType;
        contact.gender = netContact.gender;
        contact.online = banner.icon.glyph === "fa-arrow-up"; // THIS IS A TRICK - Because of the tricky structure of these notifications
      }

      var background;
      var glyph;

      if (banner.icon) {
        if (banner.icon.background) {
          background = banner.icon.background;
        }

        if (banner.icon.glyph) {
          glyph = banner.icon.glyph;
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mr-3 d-block"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "step mx-0"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "step-icon step-icon-xs ".concat(background)
      }, netContact ? /*#__PURE__*/React__default["default"].createElement(ContactAvatar, {
        size: AVT_SIZE_MINI,
        contact: contact
      }) : /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-fw ".concat(glyph)
      })))));
    }
  }, {
    key: "renderTimestamp",
    value: function renderTimestamp(item) {
      var timestamp = item.time;
      var longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
      var smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, longDate), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, smartDate)));
    }
  }, {
    key: "renderSubjectCell",
    value: function renderSubjectCell(banner) {
      var icon = banner.supportPicture;
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center"
      }, icon && !icon.startsWith("http") && /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        type: icon,
        size: 32,
        color: TINT_DARK
      }), icon && icon.startsWith("http") && /*#__PURE__*/React__default["default"].createElement("img", {
        src: icon,
        height: 32,
        className: "d-block mx-auto"
      })));
    }
  }, {
    key: "renderDetailCell",
    value: function renderDetailCell(banner) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-inline-block ml-2"
      }, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, banner.title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, banner.body))));
    }
  }, {
    key: "renderActions",
    value: function renderActions(item) {
      var _this2 = this;

      if (item && item.data && item.data.banner && item.data.banner.link) {
        return /*#__PURE__*/React__default["default"].createElement("td", {
          className: "text-md-right",
          "data-title": this.headerForColumn(4)
        }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
          action: function action() {
            return _this2.onClickNotification(item.data);
          },
          chevron: "fa-chevron-right",
          type: BTN_TYPE_SOFT,
          tint: BTN_TINT_PRIMARY,
          rounded: true,
          className: "mr-2",
          title: intl__default["default"].get("generic_inspect"),
          titleClass: "d-md-none"
        }));
      }

      return /*#__PURE__*/React__default["default"].createElement("td", null);
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get("timeline_table_header_state");
      if (idx === 1) return intl__default["default"].get("timeline_table_header_when");
      if (idx === 2) return '';
      if (idx === 3) return intl__default["default"].get("timeline_table_header_details");
      if (idx === 4) return intl__default["default"].get("generic_actions");
      return '';
    }
  }]);

  return NotificationTimelineTableRow;
}(React.Component);
NotificationTimelineTableRow.propTypes = {
  item: PropTypes__default["default"].object,
  onClickNotification: PropTypes__default["default"].func
};

var NotificationTimelineTable = /*#__PURE__*/function (_Component) {
  _inherits(NotificationTimelineTable, _Component);

  var _super = _createSuper(NotificationTimelineTable);

  function NotificationTimelineTable(props, context) {
    var _this;

    _classCallCheck(this, NotificationTimelineTable);

    _this = _super.call(this, props, context);
    _this.tableId = "notification_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(NotificationTimelineTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          notifications = _this$props.notifications,
          onClickNotification = _this$props.onClickNotification;

      if (notifications && notifications.length > 0) {
        return /*#__PURE__*/React__default["default"].createElement("table", {
          className: "table table-borderless table-striped table-align-middle table-responsive-flip"
        }, renderNotificationTimelineTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, notifications.map(function (item, idx) {
          return /*#__PURE__*/React__default["default"].createElement(NotificationTimelineTableRow, {
            key: "".concat(_this2.tableId, "_").concat(idx),
            onClickNotification: onClickNotification,
            item: item
          });
        })));
      }

      return /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('timeline_no_notification'));
    }
  }]);

  return NotificationTimelineTable;
}(React.Component);
NotificationTimelineTable.propTypes = {
  notifications: PropTypes__default["default"].array,
  onClickNotification: PropTypes__default["default"].func
};

var NotificationTimeline = /*#__PURE__*/function (_Component) {
  _inherits(NotificationTimeline, _Component);

  var _super = _createSuper(NotificationTimeline);

  function NotificationTimeline(props, context) {
    var _this;

    _classCallCheck(this, NotificationTimeline);

    _this = _super.call(this, props, context);
    _this.tableId = "notification_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(NotificationTimeline, [{
    key: "render",
    value: function render() {
      var notifications = this.props.notifications;
      var newNotifications = notifications && notifications.new;
      var oldNotifications = notifications && notifications.old;
      var oldNotificationsByDistance = groupOldNotificationsByTimeDistance(oldNotifications, function (notification) {
        return notification.time;
      });
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.renderSection('New', newNotifications), this.renderSection(intl__default["default"].get('relative_today'), oldNotificationsByDistance[TIME_DISTANCE_TODAY]), this.renderSection(intl__default["default"].get('relative_yesterday'), oldNotificationsByDistance[TIME_DISTANCE_YESTERDAY]), this.renderSection(intl__default["default"].get('relative_older'), oldNotificationsByDistance[TIME_DISTANCE_OLDER]));
    }
  }, {
    key: "renderSection",
    value: function renderSection(title, notifications) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, title), /*#__PURE__*/React__default["default"].createElement("hr", null), notifications ? /*#__PURE__*/React__default["default"].createElement(NotificationTimelineTable, {
        notifications: notifications,
        onClickNotification: this.props.onClickNotification
      }) : /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('timeline_no_notification')));
    }
  }]);

  return NotificationTimeline;
}(React.Component);
NotificationTimeline.propTypes = {
  notifications: PropTypes__default["default"].object,
  onClickNotification: PropTypes__default["default"].func
};

function capitalize(s) {
  if (!s || typeof s !== 'string') return '';
  return s.charAt(0).toUpperCase() + s.slice(1);
}

var NetEventsHeatmap = /*#__PURE__*/function (_Component) {
  _inherits(NetEventsHeatmap, _Component);

  var _super = _createSuper(NetEventsHeatmap);

  function NetEventsHeatmap() {
    _classCallCheck(this, NetEventsHeatmap);

    return _super.apply(this, arguments);
  }

  _createClass(NetEventsHeatmap, [{
    key: "render",
    value: function render() {
      var heatMapData = this.props.heatMapData;
      if (!heatMapData) return '';
      var currentLocale = intl__default["default"].getInitOptions() && intl__default["default"].getInitOptions().currentLocale || "en-US";
      var xLabels = new Array(24).fill(0).map(function (_, i) {
        return "".concat(i);
      });
      var yLabels = heatMapData.map(function (obj, i) {
        var curStart = new Date(new Date().getTime() - 86400000 * i);
        curStart.setHours(0, 0, 0, 0);
        var dayName = i == 0 ? intl__default["default"].get('time_today') : i == 1 ? intl__default["default"].get('time_yesterday') : capitalize(getDayName(curStart, currentLocale));
        return /*#__PURE__*/React__default["default"].createElement("small", {
          className: "overflow-hidden text-nowrap mr-2"
        }, dayName);
      });
      return /*#__PURE__*/React__default["default"].createElement(HeatMap__default["default"], {
        xLabels: xLabels,
        yLabelWidth: 130,
        yLabels: yLabels,
        data: heatMapData,
        height: 15,
        width: 15,
        cellStyle: function cellStyle(background, value, min, max, data, x, y) {
          return {
            background: "".concat(value ? 'rgba(0, 109, 44,' + 0.9 + ')' : 'rgba(0, 0, 0,  0.1)'),
            fontSize: "11px",
            marginTop: "10px",
            marginBottom: "10px"
          };
        }
      });
    }
  }]);

  return NetEventsHeatmap;
}(React.Component);
NetEventsHeatmap.propTypes = {
  heatMapData: PropTypes__default["default"].array
};

var NetworkTimelineTableRow = /*#__PURE__*/function (_Component) {
  _inherits(NetworkTimelineTableRow, _Component);

  var _super = _createSuper(NetworkTimelineTableRow);

  function NetworkTimelineTableRow(props) {
    var _this;

    _classCallCheck(this, NetworkTimelineTableRow);

    _this = _super.call(this, props);
    _this.onDrillDown = _this.onDrillDown.bind(_assertThisInitialized(_this));
    _this.onInspect = _this.onInspect.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NetworkTimelineTableRow, [{
    key: "onInspect",
    value: function onInspect(device) {
      if (this.props.onInspect) {
        this.props.onInspect(device);
      }
    }
  }, {
    key: "onDrillDown",
    value: function onDrillDown(device) {
      if (this.props.onDrillDown) {
        this.props.onDrillDown(device);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var netEvent = this.props.netEvent;
      if (!netEvent) return '';
      return /*#__PURE__*/React__default["default"].createElement("tr", null, this.renderState(netEvent), this.renderTimeCell(netEvent), this.renderSubjectCell(netEvent), this.renderDetailCell(netEvent), this.renderActions(netEvent.device));
    }
  }, {
    key: "renderState",
    value: function renderState(netEvent) {
      var badgeClasses = "badge-secondary text-secondary";

      if (netEvent.eventType === EVT_DEVICE_BLOCK) {
        if (netEvent.isBlockedEvent()) {
          badgeClasses = "badge-danger text-danger";
        } else if (netEvent.isPausedEvent()) {
          badgeClasses = "badge-orange text-orange";
        }
      } else {
        var stateChange = netEvent.content && netEvent.content.state || null;
        var isNew = stateChange === NS_NEW;
        var isOnline = stateChange === NS_UP;

        if (isNew) {
          badgeClasses = "badge-primary text-primary";
        } else if (isOnline) {
          badgeClasses = "badge-success text-success";
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mt-1 mr-1",
        style: {
          width: "1.5em"
        }
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "badge badge-sm badge-pill py-2 px-2 ".concat(badgeClasses),
        style: {
          fontSize: "60%"
        }
      }, " "), /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          "minHeight": "24px",
          "marginLeft": "7px"
        },
        className: "border border-top-0 border-bottom-0 border-right-0"
      })));
    }
  }, {
    key: "renderTimeCell",
    value: function renderTimeCell(netEvent) {
      var timestamp = netEvent.timestamp;

      if (netEvent) {
        var stateChange = netEvent.content && netEvent.content.state || null;

        if (stateChange === NS_DOWN) {
          timestamp = netEvent.sharpTime;
        }
      }

      var longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
      var smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, longDate), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, smartDate)));
    }
  }, {
    key: "renderSubjectCell",
    value: function renderSubjectCell(netEvent) {
      var device = {
        mac_address: "",
        best_type: "",
        best_model: "",
        best_make: "",
        best_name: ""
      };

      if (netEvent.eventType === EVT_DEVICE_BLOCK) {
        if (netEvent && netEvent.device) {
          var blockedDevice = netEvent.device;

          if (blockedDevice.address) {
            device.mac_address = blockedDevice.address;
          }

          if (blockedDevice.type) {
            device.best_type = blockedDevice.type;
          }

          if (blockedDevice.model) {
            device.best_model = blockedDevice.model;
          }

          if (blockedDevice.make) {
            device.best_make = blockedDevice.make;
          }

          if (blockedDevice.name) {
            device.best_name = blockedDevice.name;
          }
        }
      } else {
        device = netEvent.device;
      }

      var deviceMakeAndModel = bestMakeAndModelAsArray(device);

      if (deviceMakeAndModel && deviceMakeAndModel.length === 0) {
        var model;

        if (device.ipAddresses && device.ipAddresses.length > 0) {
          model = device.ipAddresses[0];
        } else if (device.address_list && device.address_list.length > 0) {
          model = device.address_list[0];
        } else {
          model = device.hwAddress || device.mac_address || intl__default["default"].get("devicetype_generic");
        }

        return /*#__PURE__*/React__default["default"].createElement("td", {
          "data-title": this.headerForColumn(2)
        }, /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex align-items-center"
        }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
          type: device.bestType || device.best_type || DT_GENERIC
        }), /*#__PURE__*/React__default["default"].createElement("span", {
          className: "mx-2"
        }, model)));
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        type: device.bestType || device.best_type || DT_GENERIC
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-inline-block"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "mx-2"
      }, device.bestName ? device.bestName : device.best_name ? device.best_name : intl__default["default"].get("devicetype_generic")), /*#__PURE__*/React__default["default"].createElement("div", null, deviceMakeAndModel && deviceMakeAndModel.length >= 2 && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small text-secondary ml-2"
      }, deviceMakeAndModel[0], " \u2022 ", deviceMakeAndModel[1]), deviceMakeAndModel && deviceMakeAndModel.length === 1 && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small text-secondary ml-2"
      }, deviceMakeAndModel[0])))));
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get("timeline_table_header_state");
      if (idx === 1) return intl__default["default"].get("timeline_table_header_when");
      if (idx === 2) return intl__default["default"].get("timeline_table_header_subject");
      if (idx === 3) return intl__default["default"].get("timeline_table_header_details");
      if (idx === 4) return intl__default["default"].get("generic_actions");
      return '';
    }
  }, {
    key: "renderDetailCell",
    value: function renderDetailCell(netEvent) {
      var stateString = "";

      if (netEvent) {
        if (netEvent.eventType === EVT_DEVICE_BLOCK) {
          var type = netEvent.content && netEvent.content.type || null;

          if (type === NS_NEW_BLOCKED) {
            stateString = intl__default["default"].get("discovery_events_timeline_new_blocked");
          } else {
            var isBlocked = netEvent.isBlockedEvent();

            if (netEvent.getTypeEvent() === 'Block') {
              stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_blocked' : 'device_detail_kick_out_mode_paused');
            } else if (netEvent.getTypeEvent() === 'Unlock') {
              var duration = formatDuration(netEvent.getDurationKickOutModeEvent(), DATE_FORMAT_SHORT, false);

              if (duration !== "0m") {
                stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_blocked_for' : 'device_detail_kick_out_mode_paused_for', {
                  duration: duration
                });
              } else {
                stateString = intl__default["default"].get(isBlocked ? 'device_detail_kick_out_mode_unblocked_immediately' : 'device_detail_kick_out_mode_resumed_immediately');
              }
            }
          }
        } else if (netEvent.eventType === EVT_DEVICE_CHANGE) {
          if (netEvent.isDeviceNew()) {
            stateString = intl__default["default"].get('discovery_events_timeline_new');
          } else {
            var _duration = formatDuration(netEvent.getTimeSinceOppositeState(), DATE_FORMAT_SHORT, false);

            var state = netEvent.isDeviceOnline() ? 'online' : 'offline';

            if (_duration === '0m') {
              stateString = intl__default["default"].get('discovery_events_timeline_' + state + '_duration_immediately');
            } else {
              stateString = intl__default["default"].get('discovery_events_timeline_' + state + '_duration', {
                duration: _duration
              });
            }
          }
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3)
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark"
      }, stateString));
    }
  }, {
    key: "renderActions",
    value: function renderActions(netNode) {
      var _this2 = this;

      if (!netNode) return '';
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: "text-md-right",
        "data-title": this.headerForColumn(4)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-inline-block",
        style: {
          whiteSpace: 'nowrap'
        }
      }, this.props.onInspect && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return _this2.onInspect(netNode);
        },
        chevron: "fa-pen",
        type: BTN_TYPE_SOFT,
        tint: BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get("generic_drill_down"),
        titleClass: "d-md-none"
      }), this.props.onDrillDown && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return _this2.onDrillDown(netNode);
        },
        chevron: "fa-level-down-alt",
        type: BTN_TYPE_SOFT,
        tint: BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2",
        title: intl__default["default"].get("generic_inspect"),
        titleClass: "d-md-none"
      })));
    }
  }]);

  return NetworkTimelineTableRow;
}(React.Component);
NetworkTimelineTableRow.propTypes = {
  netEvent: PropTypes__default["default"].object,
  onInspect: PropTypes__default["default"].func,
  onDrillDown: PropTypes__default["default"].func
};

var NetworkTimelineTable = /*#__PURE__*/function (_Component) {
  _inherits(NetworkTimelineTable, _Component);

  var _super = _createSuper(NetworkTimelineTable);

  function NetworkTimelineTable(props) {
    var _this;

    _classCallCheck(this, NetworkTimelineTable);

    _this = _super.call(this, props);
    _this.tableId = "net_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(NetworkTimelineTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          onInspect = _this$props.onInspect,
          onDrillDown = _this$props.onDrillDown,
          netEvents = _this$props.netEvents;
      if (!netEvents) return "";
      var sortedNetEvents = netEvents.sort(function (a, b) {
        return (b.sharpTime || b.timestamp) - (a.sharpTime || a.timestamp);
      });
      return /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-sm table-borderless table-responsive-flip table-align-middle"
      }, renderNetworkTimelineTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, sortedNetEvents.map(function (netEvent, idx) {
        return /*#__PURE__*/React__default["default"].createElement(NetworkTimelineTableRow, {
          key: "".concat(_this2.tableId, "_").concat(idx),
          netEvent: netEvent,
          onDrillDown: onDrillDown,
          onInspect: onInspect
        });
      })));
    }
  }]);

  return NetworkTimelineTable;
}(React.Component);
NetworkTimelineTable.propTypes = {
  netEvents: PropTypes__default["default"].array,
  onInspect: PropTypes__default["default"].func,
  onDrillDown: PropTypes__default["default"].func
};

var TIMELINE_PAGINATION_MAX_EVENTS = 100;

var NetworkTimeline = /*#__PURE__*/function (_Component) {
  _inherits(NetworkTimeline, _Component);

  var _super = _createSuper(NetworkTimeline);

  function NetworkTimeline() {
    var _this;

    _classCallCheck(this, NetworkTimeline);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      maxEventIndex: TIMELINE_PAGINATION_MAX_EVENTS
    });

    return _this;
  }

  _createClass(NetworkTimeline, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          netEvents = _this$props.netEvents,
          maxDays = _this$props.maxDays;
      var maxEventIndex = this.state.maxEventIndex;

      var extractionFn = function extractionFn(netEvent) {
        return netEvent.sharpTime || netEvent.timestamp;
      };

      var maxDaysUnlimited = !maxDays && maxDays !== 0;
      var fullEventsByTimeDistance = groupEventsByTimeDistance(netEvents, extractionFn);
      var unlockedEventsLength = (!maxDays && maxDays !== 0 ? netEvents.length : this.getUnlockedEventsLength(fullEventsByTimeDistance, maxDays)) || 0;
      var slicedNetEvents = netEvents.slice(0, Math.min(maxEventIndex, netEvents.length));
      var eventsByDistance = groupEventsByTimeDistance(slicedNetEvents, extractionFn);

      var ifMaxDaysAtLeast = function ifMaxDaysAtLeast(days) {
        return maxDaysUnlimited || maxDays >= days;
      };

      var hasNotBeenPreviouslySliced = function hasNotBeenPreviouslySliced(timeDistance) {
        var keys = [TIME_DISTANCE_TODAY, TIME_DISTANCE_YESTERDAY, TIME_DISTANCE_7D, TIME_DISTANCE_14D, TIME_DISTANCE_21D, TIME_DISTANCE_OLDER];
        var fullLength = 0,
            slicedLength = 0;

        for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
          var key = _keys[_i];

          if (key === timeDistance) {
            break;
          }

          fullLength += (fullEventsByTimeDistance[key] || []).length;
          slicedLength += (eventsByDistance[key] || []).length;

          if (fullLength !== slicedLength) {
            return false;
          }
        }

        return true;
      };

      return /*#__PURE__*/React__default["default"].createElement("div", null, ifMaxDaysAtLeast(1) && hasNotBeenPreviouslySliced(TIME_DISTANCE_TODAY) && this.renderEventSection(intl__default["default"].get('relative_today'), eventsByDistance[TIME_DISTANCE_TODAY]), ifMaxDaysAtLeast(2) && hasNotBeenPreviouslySliced(TIME_DISTANCE_YESTERDAY) && this.renderEventSection(intl__default["default"].get('relative_yesterday'), eventsByDistance[TIME_DISTANCE_YESTERDAY]), ifMaxDaysAtLeast(7) && hasNotBeenPreviouslySliced(TIME_DISTANCE_7D) && this.renderEventSection(intl__default["default"].get('relative_current_week'), eventsByDistance[TIME_DISTANCE_7D]), ifMaxDaysAtLeast(14) && hasNotBeenPreviouslySliced(TIME_DISTANCE_14D) && this.renderEventSection(intl__default["default"].get('relative_week_long', {
        amount: 2
      }), eventsByDistance[TIME_DISTANCE_14D]), ifMaxDaysAtLeast(21) && hasNotBeenPreviouslySliced(TIME_DISTANCE_21D) && this.renderEventSection(intl__default["default"].get('relative_week_long', {
        amount: 3
      }), eventsByDistance[TIME_DISTANCE_21D]), maxDaysUnlimited && hasNotBeenPreviouslySliced(TIME_DISTANCE_OLDER) && this.renderEventSection(intl__default["default"].get('relative_older'), eventsByDistance[TIME_DISTANCE_OLDER]), React__default["default"].Children.toArray(this.props.children), maxEventIndex < unlockedEventsLength && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        title: intl__default["default"].get("discovery_events_timeline_more"),
        action: function action() {
          return _this2.setState({
            maxEventIndex: maxEventIndex + TIMELINE_PAGINATION_MAX_EVENTS
          });
        }
      }), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "ml-auto"
      }, slicedNetEvents.length + "/" + unlockedEventsLength)));
    }
  }, {
    key: "renderEventSection",
    value: function renderEventSection(title, events) {
      var _this$props2 = this.props,
          onInspect = _this$props2.onInspect,
          onDrillDown = _this$props2.onDrillDown;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-6"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3 border-bottom d-flex"
      }, /*#__PURE__*/React__default["default"].createElement("h3", null, title)), events ? /*#__PURE__*/React__default["default"].createElement(NetworkTimelineTable, {
        netEvents: events,
        onInspect: onInspect,
        onDrillDown: onDrillDown
      }) : /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('discovery_events_no_in_this_period')));
    }
  }, {
    key: "getUnlockedEventsLength",
    value: function getUnlockedEventsLength(eventsByDistance, maxDays) {
      var length = 0;

      var addLength = function addLength(timeDistance) {
        return length += (eventsByDistance[timeDistance] || []).length;
      };

      addLength(TIME_DISTANCE_TODAY);

      if (maxDays < 2) {
        return length;
      }

      addLength(TIME_DISTANCE_YESTERDAY);

      if (maxDays < 7) {
        return length;
      }

      addLength(TIME_DISTANCE_7D);

      if (maxDays < 14) {
        return length;
      }

      addLength(TIME_DISTANCE_14D);

      if (maxDays < 21) {
        return length;
      }

      addLength(TIME_DISTANCE_21D);

      if (maxDays <= 21) {
        return length;
      }

      addLength(TIME_DISTANCE_OLDER);
      return length;
    }
  }]);

  return NetworkTimeline;
}(React.Component);
NetworkTimeline.propTypes = {
  netEvents: PropTypes__default["default"].array,
  onInspect: PropTypes__default["default"].func,
  onDrillDown: PropTypes__default["default"].func,
  maxDays: PropTypes__default["default"].number
};

var ScheduleVulnerabilityTestDialog = /*#__PURE__*/function (_PureComponent) {
  _inherits(ScheduleVulnerabilityTestDialog, _PureComponent);

  var _super = _createSuper(ScheduleVulnerabilityTestDialog);

  function ScheduleVulnerabilityTestDialog(props, context) {
    var _this;

    _classCallCheck(this, ScheduleVulnerabilityTestDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onOptionSelected = _this.onOptionSelected.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ScheduleVulnerabilityTestDialog, [{
    key: "getActiveOptionIndex",
    value: function getActiveOptionIndex(timeoutValue) {
      if (timeoutValue === 0) {
        return 0;
      } else if (timeoutValue === MS_ONE_DAY) {
        return 1;
      } else if (timeoutValue === 2 * MS_ONE_DAY) {
        return 2;
      } else if (timeoutValue === 7 * MS_ONE_DAY) {
        return 3;
      }

      return 4;
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "onOptionSelected",
    value: function onOptionSelected(index) {
      var network = this.props.network;
      var delay = 0;

      if (index === 1) {
        delay = MS_ONE_DAY;
      } else if (index === 2) {
        delay = 2 * MS_ONE_DAY;
      } else if (index === 3) {
        delay = 7 * MS_ONE_DAY;
      }

      var newNetwork = Object.assign({}, network);
      newNetwork.autoHtcScheduleConfig = {
        delaySinceLastExecution: String(delay)
      };
      this.props.onOptionSelected(newNetwork);
    } // --------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          network = _this$props.network,
          id = _this$props.id,
          delay = _this$props.delay;
      var config = network && network.autohtcconfig ? network.autohtcconfig : null;
      var customDurationLabel = null;

      if (config) {
        var preselectedValues = [0, MS_ONE_DAY, MS_ONE_DAY * 2, MS_ONE_DAY * 7];
        var currentValue = Number(delay);

        if (!preselectedValues.includes(currentValue)) {
          if (currentValue < MS_ONE_DAY) {
            customDurationLabel = intl__default["default"].get('every_hour', {
              num: currentValue / MS_ONE_HOUR
            });
          } else {
            customDurationLabel = intl__default["default"].get('every_day', {
              num: currentValue / MS_ONE_DAY
            });
          }
        }
      }

      var options = [/*#__PURE__*/React__default["default"].createElement("small", null, intl__default["default"].get('generic_disabled')), /*#__PURE__*/React__default["default"].createElement("small", null, intl__default["default"].get('every_day', {
        num: 1
      })), /*#__PURE__*/React__default["default"].createElement("small", null, intl__default["default"].get('every_day', {
        num: 2
      })), /*#__PURE__*/React__default["default"].createElement("small", null, intl__default["default"].get('every_day', {
        num: 7
      }))];

      if (customDurationLabel) {
        options.push( /*#__PURE__*/React__default["default"].createElement("small", null, "Custom (", customDurationLabel, ")"));
      }

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: intl__default["default"].get('routercheck_title_schedule_dialog'),
        size: "modal-sm",
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement(OptionBar, {
        onOptionSelected: this.onOptionSelected,
        className: "w-60 mx-auto",
        vertical: true,
        activeIndex: this.getActiveOptionIndex(delay)
      }, React__default["default"].Children.toArray(options))));
    }
  }]);

  return ScheduleVulnerabilityTestDialog;
}(React.PureComponent);
ScheduleVulnerabilityTestDialog.propTypes = {
  delay: PropTypes__default["default"].any,
  onOptionSelected: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  network: PropTypes__default["default"].object,
  id: PropTypes__default["default"].string
};

var DeviceRecognition = /*#__PURE__*/function () {
  function DeviceRecognition() {
    _classCallCheck(this, DeviceRecognition);

    _defineProperty(this, "typeId", void 0);

    _defineProperty(this, "makeId", void 0);

    _defineProperty(this, "modelId", void 0);

    _defineProperty(this, "osId", void 0);

    _defineProperty(this, "familyId", void 0);

    _defineProperty(this, "typeName", void 0);

    _defineProperty(this, "makeName", void 0);

    _defineProperty(this, "modelName", void 0);

    _defineProperty(this, "osName", void 0);

    _defineProperty(this, "osVersion", void 0);

    _defineProperty(this, "osBuild", void 0);

    _defineProperty(this, "rank", void 0);

    _defineProperty(this, "familyName", void 0);

    _defineProperty(this, "isFamily", void 0);

    _defineProperty(this, "serial", void 0);
  }

  _createClass(DeviceRecognition, [{
    key: "applyFromAgentData",
    value: function applyFromAgentData(json) {
      this.typeId = safeParseInt(json, "type_id");
      this.makeId = safeParseInt(json, "make_id");
      this.modelId = safeParseInt(json, "model_id");
      this.osId = safeParseInt(json, "os_id");
      this.familyId = safeParseInt(json, "family_id");
      this.typeName = json["type_name"];
      this.makeName = json["make_name"];
      this.modelName = json["model_name"];
      this.osName = json["os_name"];
      this.osVersion = json["os_version"];
      this.osBuild = json["os_build"];
      this.rank = safeParseInt(json, "rank");
      this.familyName = json["family_name"];
      this.isFamily = safeParseBool(json, "is_family");
      this.serial = json["serial"];
      return this;
    }
  }, {
    key: "hasOsRecog",
    value: function hasOsRecog() {
      return Boolean(this.osId || this.osName || this.osVersion || this.osBuild);
    }
  }]);

  return DeviceRecognition;
}();

var Defaults = {
  REQUEST_TIME: function REQUEST_TIME() {
    return Date.now();
  },
  DURATION: 0,
  ONLY_INTERNET: false
};

var KickOutMode = /*#__PURE__*/function () {
  function KickOutMode() {
    _classCallCheck(this, KickOutMode);

    _defineProperty(this, "requestTime", void 0);

    _defineProperty(this, "duration", void 0);

    _defineProperty(this, "onlyInternet", void 0);
  }

  _createClass(KickOutMode, [{
    key: "applyFromAgentData",
    value: function applyFromAgentData(agentKickOutMode) {
      if (agentKickOutMode) {
        this.requestTime = safeParseInt(agentKickOutMode, "requestTime", Defaults.REQUEST_TIME());
        this.duration = safeParseInt(agentKickOutMode, "duration", Defaults.DURATION);
        this.onlyInternet = safeParseBool(agentKickOutMode, "onlyInternet");
      }

      return this;
    }
  }, {
    key: "extractValueForAgentData",
    value: function extractValueForAgentData() {
      return {
        requestTime: String(this.requestTime || Defaults.REQUEST_TIME()),
        duration: String(this.duration || Defaults.DURATION),
        onlyInternet: String(this.onlyInternet || Defaults.ONLY_INTERNET)
      };
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !this.requestTime && this.requestTime !== 0 && !this.duration && this.duration !== 0 && !this.onlyInternet;
    }
  }, {
    key: "isBlocked",
    value: function isBlocked() {
      return this.onlyInternet === false && this.isInTimeRange();
    }
  }, {
    key: "isPaused",
    value: function isPaused() {
      return this.onlyInternet === true && this.isInTimeRange();
    }
  }, {
    key: "block",
    value: function block() {
      this.onlyInternet = false;
      return this;
    }
  }, {
    key: "pause",
    value: function pause() {
      this.onlyInternet = true;
      return this;
    }
  }, {
    key: "fromNow",
    value: function fromNow() {
      this.requestTime = Date.now();
      return this;
    }
  }, {
    key: "from",
    value: function from(requestTime) {
      this.requestTime = requestTime;
      return this;
    }
  }, {
    key: "indefinitely",
    value: function indefinitely() {
      this.duration = 0;
      return this;
    }
  }, {
    key: "forTheNext",
    value: function forTheNext(millis) {
      this.duration = millis;
      return this;
    }
  }, {
    key: "getRequestTimeFormatted",
    value: function getRequestTimeFormatted() {
      return formatRelativeDate(this.requestTime, DATE_FORMAT_LONG);
    }
  }, {
    key: "isInTimeRange",
    value: function isInTimeRange() {
      if (!this.requestTime) {
        return false;
      }

      var now = Date.now();
      return this.requestTime <= now && (!this.duration || now <= this.requestTime + this.duration);
    }
  }]);

  return KickOutMode;
}();

/**
 * A node in a network. Called "NetNode" to clear avoid ambiguity with every Node.js reference
 */

var NetNode = /*#__PURE__*/function () {
  function NetNode() {
    _classCallCheck(this, NetNode);

    _defineProperty(this, "ipAddresses", void 0);

    _defineProperty(this, "hwAddress", void 0);

    _defineProperty(this, "macVendor", void 0);

    _defineProperty(this, "hostName", void 0);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "customType", void 0);

    _defineProperty(this, "customName", void 0);

    _defineProperty(this, "customNote", void 0);

    _defineProperty(this, "customLocation", void 0);

    _defineProperty(this, "favorite", void 0);

    _defineProperty(this, "important", void 0);

    _defineProperty(this, "tags", void 0);

    _defineProperty(this, "selfNode", void 0);

    _defineProperty(this, "gatewayNode", void 0);

    _defineProperty(this, "blockingDeviceNode", void 0);

    _defineProperty(this, "stateChangeTimeout", void 0);

    _defineProperty(this, "alertOnStateChange", void 0);

    _defineProperty(this, "autoWakeOnLan", void 0);

    _defineProperty(this, "kickOutMode", void 0);

    _defineProperty(this, "digitalPresence", void 0);

    _defineProperty(this, "contactId", void 0);

    _defineProperty(this, "contactType", void 0);

    _defineProperty(this, "firstSeenTime", void 0);

    _defineProperty(this, "lastSeenTime", void 0);

    _defineProperty(this, "lastChangeTime", void 0);

    _defineProperty(this, "lastInRangeTime", void 0);

    _defineProperty(this, "stateChangeTime", void 0);

    _defineProperty(this, "customChangeTime", void 0);

    _defineProperty(this, "macVendorChangeTime", void 0);

    _defineProperty(this, "lastDeepScanTime", void 0);

    _defineProperty(this, "lastDhcpRequestTime", void 0);

    _defineProperty(this, "netbiosInfo", void 0);

    _defineProperty(this, "snmpInfo", void 0);

    _defineProperty(this, "dhcpInfo", void 0);

    _defineProperty(this, "dhcp6Info", void 0);

    _defineProperty(this, "bonjourInfo", void 0);

    _defineProperty(this, "upnpInfo", void 0);

    _defineProperty(this, "logs", void 0);

    _defineProperty(this, "bestTypeId", void 0);

    _defineProperty(this, "bestMakeId", void 0);

    _defineProperty(this, "bestModelId", void 0);

    _defineProperty(this, "bestFamilyId", void 0);

    _defineProperty(this, "bestOsId", void 0);

    _defineProperty(this, "bestName", void 0);

    _defineProperty(this, "bestType", void 0);

    _defineProperty(this, "bestMake", void 0);

    _defineProperty(this, "bestModel", void 0);

    _defineProperty(this, "bestFamily", void 0);

    _defineProperty(this, "bestSerialNo", void 0);

    _defineProperty(this, "isFamily", void 0);

    _defineProperty(this, "recogRank", void 0);

    _defineProperty(this, "bestOs", void 0);

    _defineProperty(this, "bestOsVer", void 0);

    _defineProperty(this, "bestOsBuild", void 0);

    _defineProperty(this, "brandPicture", void 0);

    _defineProperty(this, "osPicture", void 0);

    _defineProperty(this, "osVersionName", void 0);

    _defineProperty(this, "recognitionOwnerName", void 0);

    _defineProperty(this, "recogDone", void 0);

    _defineProperty(this, "devRecog", void 0);

    _defineProperty(this, "usrRecog", void 0);

    _defineProperty(this, "lastTcpServiceScanShot", void 0);

    _defineProperty(this, "httpInfo", void 0);

    _defineProperty(this, "httpScanInfo", void 0);

    _defineProperty(this, "sshInfo", void 0);

    _defineProperty(this, "telnetInfo", void 0);

    _defineProperty(this, "ftpInfo", void 0);

    _defineProperty(this, "smbInfo", void 0);
  }

  _createClass(NetNode, [{
    key: "applyFromAgentData",
    value:
    /**
     * Fill the current object with data coming from Fing Desktop agent's JSON API reply.
     * Use as:
     *
     * const json = fetchNodeDataFromAPI();
     * <code>const netNode = new NetNode().applyFromAgentData(json)</code>.
     *
     * @param json The external data
     * @return this same object, modified.
     */
    function applyFromAgentData(json) {
      this.hwAddress = json["mac_address"];
      this.ipAddresses = json["address_list"];
      this.macVendor = json["mac_vendor"];
      this.hostName = json["host_name"];
      this.state = safeParseEnum(json, "state", NS_ALL_TYPES);
      this.customName = json["customName"];
      this.customType = json["customType"];
      this.customNote = json["customNote"];
      this.customLocation = json["customLocation"];
      this.favorite = safeParseBool(json, "favorite");
      this.important = safeParseBool(json, "important");
      this.recogDone = safeParseBool(json, "usrrecog");

      if (json["dev_recog"]) {
        this.devRecog = new DeviceRecognition().applyFromAgentData(json["dev_recog"]);
      }

      if (json["usr_recog"]) {
        this.usrRecog = new DeviceRecognition().applyFromAgentData(json["usr_recog"]);
        this.recogDone = true;
      }

      this.stateChangeTimeout = safeParseInt(json, "statechangetimeout");
      this.alertOnStateChange = safeParseBool(json, "alertOnStateChange");
      this.digitalPresence = safeParseBool(json, "digitalPresence");

      if (json["kickOutMode"]) {
        this.kickOutMode = new KickOutMode().applyFromAgentData(json["kickOutMode"]);
      }

      this.firstSeenTime = safeParseInt(json, "firstseentime");
      this.lastSeenTime = safeParseInt(json, "lastseentime");
      this.stateChangeTime = safeParseInt(json, "statechangetime");
      this.customChangeTime = safeParseInt(json, "customChangeTime");
      this.macVendorChangeTime = safeParseInt(json, "mac_vendor_changed");
      this.lastDeepScanTime = safeParseInt(json, "last_deep_scan_time");
      this.lastDhcpRequestTime = safeParseInt(json, "last_dhcp_request_time");
      this.bestTypeId = safeParseInt(json, "best_type_id");
      this.bestMakeId = safeParseInt(json, "best_make_id");
      this.bestModelId = safeParseInt(json, "best_model_id");
      this.bestFamilyId = safeParseInt(json, "best_family_id");
      this.bestName = json["best_name"];
      this.bestType = json["best_type"];
      this.bestMake = json["best_make"];
      this.bestModel = json["best_model"];
      this.bestFamily = json["best_family"];
      this.bestSerialNo = json["best_sno"];
      this.bestOs = json["best_os"];
      this.bestOsVer = json["best_osver"];
      this.bestOsBuild = json["best_osbuild"];
      this.isFamily = safeParseBool(json, "isFamily");
      this.recogRank = safeParseInt(json, "recog_rank");
      this.contactId = json["contactId"];
      this.logs = json["logs"]; // NEW DATA

      this.selfNode = safeParseBool(json, "selfNode");
      this.recognizing = safeParseBool(json, "recognizing");
      this.customType = json["customType"];
      this.prevStateTime = safeParseInt(json, "prevstatetime");
      this.bestOsId = safeParseInt(json, "best_os_id");
      this.ownerName = json["ownerName"];
      this.bonjourInfo = json["bonjour"]; // name model os serviceinfo_list

      this.upnpInfo = json["upnp"]; // name make model serialNumber type_list service_list

      this.dhcpInfo = json["dhcp"]; // name params vendor mud

      this.dhcp6Info = json["dhcp6"]; // name params vendor mud enterpriseid

      this.netbiosInfo = json["netbios"]; // name mac domain user is_file_server is_domain_controller

      this.lastTcpServiceScanShot = json["lastTcpServiceScanShot"]; // timestamp activePorts

      this.httpInfo = json["http"]; // useragent_list

      this.httpScanInfo = json["httpScan"]; // timestamp httpserver_list

      this.sshInfo = json["sshInfo"]; // timestamp banner

      this.telnetInfo = json["telnetInfo"]; // timestamp banner

      this.ftpInfo = json["ftpInfo"]; // timestamp banner

      this.smbInfo = json["smbInfo"]; // timestamp nativeOS nativeLM

      this.snmpInfo = json["snmp"]; // sysoid name services description contact location
      // TO REVIEW

      this.tags = json["tags"];
      this.autoWakeOnLan = safeParseBool(json, "autoWakeOnLan");
      this.lastChangeTime = safeParseInt(json, "lastchangetime");
      this.recognitionOwnerName = json["owner"];
      this.contactType = json["ownerType"];
      return this;
    }
  }, {
    key: "applyFromCatalog",
    value: function applyFromCatalog(catalog) {
      if (!catalog) {
        return this;
      }

      this.osVersionName = catalog.recogOs && catalog.recogOs.osVersionName;

      if (!this.osVersionName && this.bestOs) {
        this.osVersionName = "".concat(this.bestOs).concat(this.bestOsVer ? " " + this.bestOsVer : "");
      }

      return this;
    }
  }, {
    key: "applyFromDiscovery",
    value: function applyFromDiscovery(discoveryOrSnapshot) {
      if (!discoveryOrSnapshot) {
        return this;
      }

      var isSnapshot = Boolean(discoveryOrSnapshot.discovery && !discoveryOrSnapshot.engine_state);

      if (isSnapshot) {
        var snapshot = discoveryOrSnapshot;
        var discoveryState = snapshot.discovery;
        var discovery = discoveryState.discovery;
        this.onSnapshotApplies(discoveryOrSnapshot);

        if (discovery) {
          this.onDiscoveryApplies(discovery);
        }
      } else {
        var isDiscoveryState = Boolean(discoveryOrSnapshot.engine_state);

        var _discovery = isDiscoveryState ? discoveryOrSnapshot.discovery || {} : discoveryOrSnapshot;

        if (Object.keys(_discovery).length > 0) {
          this.onDiscoveryApplies(_discovery);
        }
      }

      return this;
    }
  }, {
    key: "onSnapshotApplies",
    value: function onSnapshotApplies(snapshot) {
      var kickOutValidation = snapshot.kickoutValidation || snapshot.validation;

      if (kickOutValidation) {
        this.blockingDeviceNode = this.hwAddress === kickOutValidation.blockingDeviceHwAddress;
      }
    }
  }, {
    key: "onDiscoveryApplies",
    value: function onDiscoveryApplies(discovery) {
      if (discovery.network && discovery.network.gateway_mac_address) {
        this.gatewayNode = this.hwAddress === discovery.network.gateway_mac_address;
      }
    }
  }, {
    key: "isUserOsRecogEnabled",
    value: function isUserOsRecogEnabled() {
      var hasOsRecog = this.usrRecog && this.usrRecog.hasOsRecog();
      var isBestTypeValid = this.bestType && DT_USER_OS_RECOG_ENABLED_TYPES.includes(this.bestType);
      return Boolean(hasOsRecog) || Boolean(isBestTypeValid);
    }
  }, {
    key: "extractValueForAgentData",
    value: function extractValueForAgentData() {
      var res = {
        id: this.hwAddress,
        customType: this.customType,
        customName: this.customName,
        customNote: this.customNote,
        customLocation: this.customLocation,
        alertOnStateChange: this.alertOnStateChange,
        statechangetimeout: this.stateChangeTimeout ? String(this.stateChangeTimeout) : undefined,
        last_deep_scan_time: this.lastDeepScanTime ? String(this.lastDeepScanTime) : undefined,
        favorite: this.favorite ? String(this.favorite) : undefined,
        important: this.important ? String(this.important) : undefined
      };

      if (this.kickOutMode && !this.kickOutMode.isEmpty() && !this.isProtectedFromBeingKickedOut()) {
        res.kickOutMode = this.kickOutMode.extractValueForAgentData();
      }

      return res;
    }
  }, {
    key: "isUp",
    value: function isUp() {
      return this.state === NS_UP || this.state === NS_IN_RANGE;
    }
  }, {
    key: "isDown",
    value: function isDown() {
      return this.state === NS_DOWN;
    }
  }, {
    key: "getLastOnlineToDownTime",
    value: function getLastOnlineToDownTime() {
      if (!this.isDown()) return this.stateChangeTime;
      var maxSeenTime = Math.max(this.lastSeenTime || 0, this.lastInRangeTime || 0);
      if (maxSeenTime === 0) return this.stateChangeTime;
      return maxSeenTime;
    }
  }, {
    key: "getLastDownToOnlineTime",
    value: function getLastDownToOnlineTime() {
      if (this.isDown()) return this.stateChangeTime;
      if (this.logs === undefined || this.logs.length < 2) return this.stateChangeTime;
      var entryIndex = 0;
      var lastLog = this.logs[0];
      if (lastLog == null) return this.stateChangeTime;
      var lastChangeLog = lastLog;
      if (lastChangeLog.time !== this.stateChangeTime) return this.stateChangeTime;
      if (lastChangeLog.state !== this.state) return this.stateChangeTime;
      var prevOnlineLog = null;

      for (; entryIndex < this.logs; ++entryIndex) {
        var prevChangeLog = this.logs[entryIndex];

        if (prevChangeLog.state === "UP" || prevChangeLog.state === "INRANGE") {
          prevOnlineLog = prevChangeLog;
          continue;
        }

        break;
      }

      if (prevOnlineLog == null) return this.stateChangeTime;
      return prevOnlineLog.sharpTime || prevOnlineLog.time;
    }
  }, {
    key: "getBestMakeAndModelAsArray",
    value: function getBestMakeAndModelAsArray() {
      if (!this.bestMake && !this.macVendor) return [];
      var make = this.bestMake;
      var model = this.bestModel;

      if (make && model) {
        return [make, model];
      } else if (model) {
        return [model];
      } else if (make) {
        return [make];
      } else {
        return [this.macVendor];
      }
    }
  }, {
    key: "getBestIdentifier",
    value: function getBestIdentifier() {
      return this.bestName || this.bestModel || this.bestFamily || this.bestMake || this.bestOs || this.macVendor;
    }
  }, {
    key: "isConfirmed",
    value: function isConfirmed() {
      return this.customChangeTime && this.customChangeTime > 0;
    }
  }, {
    key: "isSelf",
    value: function isSelf() {
      return this.selfNode;
    }
  }, {
    key: "isGateway",
    value: function isGateway() {
      return this.gatewayNode;
    }
  }, {
    key: "isBlockingDevice",
    value: function isBlockingDevice() {
      return this.blockingDeviceNode;
    }
  }, {
    key: "isFingbox",
    value: function isFingbox() {
      var equalsIgnoreCase = function equalsIgnoreCase(attr, test) {
        return attr && typeof attr === "string" && attr.toLowerCase() === test.toLowerCase();
      };

      var equalsFingbox = function equalsFingbox(attr) {
        return equalsIgnoreCase(attr, "Fingbox");
      };

      if (this.devRecog) {
        return equalsFingbox(this.devRecog.typeName) || equalsFingbox(this.devRecog.familyName);
      }

      if (this.upnpInfo) {
        return equalsFingbox(this.upnpInfo.name) || equalsFingbox(this.upnpInfo.model);
      }
      /** 
       *  macVendor can't be overwritten by the user, while best fields can be, so we strengthen the check by adding it. 
       *  This may still give false positives whenever a Domotz device is present, so previous tests happen to be more reliable.
       */


      return equalsIgnoreCase(this.macVendor, "Domotz") || equalsFingbox(this.bestName) || equalsFingbox(this.bestType) || equalsFingbox(this.bestFamily);
    }
  }, {
    key: "kickOut",
    value: function kickOut() {
      if (!this.kickOutMode) {
        this.kickOutMode = new KickOutMode();
      }

      return this.kickOutMode;
    }
  }, {
    key: "clearKickOut",
    value: function clearKickOut() {
      delete this.kickOutMode;
    }
  }, {
    key: "isProtectedFromBeingKickedOut",
    value: function isProtectedFromBeingKickedOut() {
      var _this = this;

      /**
       * Applying from discovery is required to know if this node is a gateway. When this information is not
       * available we must be conservative and just protect the node, since isGateway() and isBlockingDevice() 
       * would test false (as undefined)
       */
      var hasAppliedFromDiscovery = typeof this.gatewayNode !== "undefined" || typeof this.blockingDeviceNode !== "undefined";

      var isProtectedDeviceType = function isProtectedDeviceType() {
        return _this.bestType && DT_KICK_OUT_PROTECTED_TYPES.includes(_this.bestType);
      };

      return !hasAppliedFromDiscovery || this.isSelf() || this.isGateway() || this.isBlockingDevice() || isProtectedDeviceType() || this.isFingbox();
    }
  }, {
    key: "kickOutFormattedDate",
    value: function kickOutFormattedDate() {
      return this.kickOutMode && this.kickOutMode.getRequestTimeFormatted() || null;
    }
  }, {
    key: "isBlocked",
    value: function isBlocked() {
      return this.kickOutMode && this.kickOutMode.isBlocked() || false;
    }
  }, {
    key: "isPaused",
    value: function isPaused() {
      return this.kickOutMode && this.kickOutMode.isPaused() || false;
    }
  }, {
    key: "getKickOutModeDuration",
    value: function getKickOutModeDuration() {
      return this.kickOutMode && this.kickOutMode.duration || null;
    }
  }]);

  return NetNode;
}();

var CameraType = ["SURVEILLANCE_CAMERA", "PHOTO_CAMERA", "SECURITY_SYSTEM", "MOTION_DETECTOR", "BABY_MONITOR"];
var HiddenCameraResult = /*#__PURE__*/function () {
  function HiddenCameraResult() {
    _classCallCheck(this, HiddenCameraResult);

    _defineProperty(this, "knownCameras", []);

    _defineProperty(this, "unknownCameras", []);

    _defineProperty(this, "unrecognizedCameras", []);

    _defineProperty(this, "countersForCameraType", void 0);

    _defineProperty(this, "activeDeviceCount", 0);

    _defineProperty(this, "globalRecognizedCamerasCount", 0);

    _defineProperty(this, "progress", 0);
  }

  _createClass(HiddenCameraResult, [{
    key: "getDetectedCameras",
    value: function getDetectedCameras() {
      var detectedCameras = [];
      if (this.unknownCameras && this.unknownCameras.length > 0) detectedCameras = detectedCameras.concat(this.unknownCameras);
      if (this.knownCameras && this.knownCameras.length > 0) detectedCameras = detectedCameras.concat(this.knownCameras);
      return detectedCameras;
    }
  }]);

  return HiddenCameraResult;
}();
/**
 * TODO: @Tammaro to update
 * @returns {HiddenCameraResult} A speed test state result object
 */

function convertToHiddenCameraResult(discovery, progress, recogStats) {
  var testResult = new HiddenCameraResult();

  if (discovery && discovery.nodes) {
    var netNodes = discovery.nodes.map(function (netNode) {
      return new NetNode().applyFromAgentData(netNode);
    });
    setCameraData(testResult, netNodes);
  }

  if (progress) {
    setProgress(testResult, progress);
  }

  if (recogStats) {
    setCameraCatalogStats(testResult, recogStats);
  }

  return testResult;
}

function setProgress(testResult, progress) {
  testResult.progress = Number(progress);
}

function isUnknown(device) {
  return !device.customChangeTime || device.customChangeTime === 0;
}

function setCameraData(testResult, netNodes) {
  testResult.unknownCameras = [];
  testResult.knownCameras = [];
  testResult.unrecognizedCameras = [];
  var activeDeviceCount = 0;
  var countersForCameraType = {
    SURVEILLANCE_CAMERA: {
      countKnown: 0,
      countUnknown: 0,
      name: intl__default["default"].get('findhiddencameras_helper_type_ipcamera')
    },
    PHOTO_CAMERA: {
      countKnown: 0,
      countUnknown: 0,
      name: intl__default["default"].get('findhiddencameras_helper_type_photocamera')
    },
    SECURITY_SYSTEM: {
      countKnown: 0,
      countUnknown: 0,
      name: intl__default["default"].get('findhiddencameras_helper_type_securitysystem')
    },
    MOTION_DETECTOR: {
      countKnown: 0,
      countUnknown: 0,
      name: intl__default["default"].get('findhiddencameras_helper_type_monitordetector')
    },
    BABY_MONITOR: {
      countKnown: 0,
      countUnknown: 0,
      name: intl__default["default"].get('findhiddencameras_helper_type_babymonitor')
    }
  };

  if (netNodes) {
    var _iterator = _createForOfIteratorHelper(netNodes),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var netNode = _step.value;
        if (netNode.state !== NS_UP) continue;
        activeDeviceCount++;
        var cameraType = netNode.bestType;
        var counter = countersForCameraType[cameraType];

        if (counter) {
          if (isUnknown(netNode)) {
            testResult.unknownCameras.push(netNode);
            counter.countUnknown++;
          } else {
            testResult.knownCameras.push(netNode);
            counter.countKnown++;
          }
        }

        if (netNode.bestModelId && (!netNode.isFamily || netNode.isFamily === false)) {// countBySh['Full recognition'] = countBySh['Full recognition'] + 1;
        } else if ((cameraType || netNode.bestMake) && (!netNode.bestModelId || true === netNode.isFamily)) {// countBySh['Partial recognition'] = countBySh['Partial recognition'] + 1;
        } else {
          testResult.unrecognizedCameras.push(netNode);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  testResult.countersForCameraType = countersForCameraType;
  testResult.activeDeviceCount = activeDeviceCount;
}

function setCameraCatalogStats(testResult, recogStats) {
  var amount = 0;

  if (recogStats && recogStats.totalsByType) {
    var _iterator2 = _createForOfIteratorHelper(recogStats.totalsByType),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var type = _step2.value;

        if (CameraType.indexOf(type.name) !== -1) {
          amount = amount + Number(type.value);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  testResult.setGlobalStatsData = amount;
}

var PremiumBadge = /*#__PURE__*/function (_Component) {
  _inherits(PremiumBadge, _Component);

  var _super = _createSuper(PremiumBadge);

  function PremiumBadge() {
    _classCallCheck(this, PremiumBadge);

    return _super.apply(this, arguments);
  }

  _createClass(PremiumBadge, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          position: 'absolute',
          right: 24,
          top: -2
        }
      }, /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_BADGE,
        color: TINT_PURPLE,
        size: 24
      }));
    }
  }]);

  return PremiumBadge;
}(React.Component);

var SecurityCard = /*#__PURE__*/function (_React$Component) {
  _inherits(SecurityCard, _React$Component);

  var _super = _createSuper(SecurityCard);

  function SecurityCard(props) {
    var _this;

    _classCallCheck(this, SecurityCard);

    _this = _super.call(this, props);
    _this.ref = /*#__PURE__*/React__default["default"].createRef();
    return _this;
  }

  _createClass(SecurityCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          hasBadge = _this$props.hasBadge;
      var hasMoreThanOneButton = this.hasMultipleButtons();
      return /*#__PURE__*/React__default["default"].createElement(SummaryCard, {
        badgeIcon: hasBadge && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null),
        background: this.getBackground()
      }, /*#__PURE__*/React__default["default"].createElement(SummaryCardBody, {
        reduce: hasMoreThanOneButton
      }, /*#__PURE__*/React__default["default"].createElement(CardPanel, {
        title: title,
        subtitle: subtitle,
        icon: this.getIcon(),
        usePlusIcon: this.props.status === SCRD_STATUS_INACTIVE
      })), /*#__PURE__*/React__default["default"].createElement(SummaryCardFooter, {
        expand: hasMoreThanOneButton
      }, this.renderActions()));
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      if (this.props.status === SCRD_STATUS_INACTIVE) {
        return this.renderUpsellAction();
      }

      var children = this.props.children;
      return this.hasMultipleButtons() ? /*#__PURE__*/React__default["default"].createElement(SecurityCardButtonGroup, null, children) : children;
    }
  }, {
    key: "renderUpsellAction",
    value: function renderUpsellAction() {
      var _this2 = this;

      var onAction = function onAction() {
        return _this2.ref.current && _this2.ref.current.click();
      };

      return /*#__PURE__*/React__default["default"].createElement("div", {
        ref: this.ref,
        id: "security-card-button-upsell-action-marker"
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        title: intl__default["default"].get("security_score_upgrade_to_unlock"),
        action: onAction
      }));
    }
  }, {
    key: "getBackground",
    value: function getBackground() {
      return this.props.status === SCRD_STATUS_FAIL ? "bg-soft-danger" : "bg-white";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      if (this.icon && this.props.status !== SCRD_STATUS_INACTIVE) {
        return this.icon;
      }

      switch (this.props.status) {
        case SCRD_STATUS_OK:
          return SI_STATUS_SUCCESS;

        case SCRD_STATUS_WARN:
          return SI_STATUS_WARNING;

        case SCRD_STATUS_FAIL:
          return SI_STATUS_DANGER;

        case SCRD_STATUS_INACTIVE:
          return SI_STATUS_SYNC;

        default:
          return "";
      }
    }
  }, {
    key: "hasMultipleButtons",
    value: function hasMultipleButtons() {
      return React.Children.count(this.props.children) > 1;
    }
  }]);

  return SecurityCard;
}(React__default["default"].Component);

var SecurityCardController = /*#__PURE__*/function (_React$Component) {
  _inherits(SecurityCardController, _React$Component);

  var _super = _createSuper(SecurityCardController);

  function SecurityCardController() {
    var _this;

    _classCallCheck(this, SecurityCardController);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "cardStatus", void 0);

    return _this;
  }

  _createClass(SecurityCardController, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeout);
    }
  }, {
    key: "render",
    value: function render() {
      this.cardStatus = this.computeCardStatusWrapper();
      this.sendStatusBack();
      return this.renderCard();
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      return null;
    }
  }, {
    key: "computeCardStatusWrapper",
    value: function computeCardStatusWrapper() {
      if (this.props._config && this.props._config.isAllowedByPermission === false) {
        return SCRD_STATUS_INACTIVE;
      }

      return this.computeCardStatus();
    }
  }, {
    key: "sendStatusBack",
    value: function sendStatusBack() {
      var _this2 = this;

      clearTimeout(this.timeout);

      if (this.props._config && this.props._config.onCardStatusChange) {
        this.timeout = setTimeout(function () {
          return _this2.props._config.onCardStatusChange(_this2.cardStatus);
        }, 0);
      }
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      return typeof this.props.enabled === "boolean" && !this.props.enabled;
    }
  }, {
    key: "getCardStatus",
    value: function getCardStatus() {
      return this.cardStatus;
    }
  }]);

  return SecurityCardController;
}(React__default["default"].Component);

var FindHiddenCameraCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(FindHiddenCameraCard, _SecurityCardControll);

  var _super = _createSuper(FindHiddenCameraCard);

  function FindHiddenCameraCard() {
    _classCallCheck(this, FindHiddenCameraCard);

    return _super.apply(this, arguments);
  }

  _createClass(FindHiddenCameraCard, [{
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var _this$props = this.props,
          discovery = _this$props.discovery,
          running = _this$props.running,
          enabled = _this$props.enabled;
      var item = discovery ? convertToHiddenCameraResult(discovery, running ? 90 : 100, null) : null;

      if (!enabled) {
        return SCRD_STATUS_WARN;
      } else if (item.unknownCameras.length >= 1) {
        return SCRD_STATUS_FAIL;
      }

      return SCRD_STATUS_OK;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props2 = this.props,
          discovery = _this$props2.discovery,
          enabled = _this$props2.enabled,
          onClickHiddenCamera = _this$props2.onClickHiddenCamera;

      if (!discovery) {
        return null;
      }

      var cardStatus = this.getCardStatus();

      var _this$getTexts = this.getTexts(cardStatus),
          title = _this$getTexts.title,
          subtitle = _this$getTexts.subtitle,
          icon = _this$getTexts.icon;

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle,
        icon: icon
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        action: onClickHiddenCamera,
        title: intl__default["default"].get('generic_see_result'),
        disabled: !enabled
      }));
    }
  }, {
    key: "getTexts",
    value: function getTexts(cardStatus) {
      var _this$props3 = this.props,
          discovery = _this$props3.discovery,
          running = _this$props3.running;
      var item = discovery ? convertToHiddenCameraResult(discovery, running ? 90 : 100, null) : null;
      var icon;
      var title;
      var subtitle;

      if (cardStatus === SCRD_STATUS_INACTIVE) {
        title = intl__default["default"].get('findhiddencameras_toolresult_premium_title');
        subtitle = intl__default["default"].get('findhiddencameras_toolresult_premium_subtitle');
      } else if (running) {
        icon = SI_STATUS_SYNC;
        title = intl__default["default"].get("findhiddencameras_toolresult_sync_title");
        subtitle = intl__default["default"].get("findhiddencameras_toolresult_sync_subtitle");
      } else if (item.unknownCameras.length >= 1) {
        title = intl__default["default"].get("findhiddencameras_toolresult_danger_title");
        subtitle = intl__default["default"].get('findhiddencameras_toolresult_danger_subtitle', {
          length: item.unknownCameras.length
        });

        if (item.globalRecognizedCamerasCount) {
          subtitle += intl__default["default"].get('findhiddencameras_toolresult_fingpedia_stats', {
            length: item.globalRecognizedCamerasCount
          });
        }
      } else if (item.knownCameras.length >= 1) {
        title = intl__default["default"].get("findhiddencameras_toolresult_success_title");
        subtitle = intl__default["default"].get('findhiddencameras_toolresult_success_subtitle', {
          length: item.knownCameras.length
        });

        if (item.globalRecognizedCamerasCount) {
          subtitle += intl__default["default"].get('findhiddencameras_toolresult_fingpedia_stats', {
            length: item.globalRecognizedCamerasCount
          });
        }
      } else if (item.knownCameras.length === 0) {
        title = intl__default["default"].get("findhiddencameras_toolresult_success_nofound_title");
        subtitle = intl__default["default"].get('findhiddencameras_toolresult_success_nofound_subtitle', {
          length: item.activeDeviceCount
        });

        if (item.globalRecognizedCamerasCount) {
          subtitle += intl__default["default"].get('findhiddencameras_toolresult_fingpedia_stats', {
            length: item.globalRecognizedCamerasCount
          });
        }
      }

      return {
        title: title,
        subtitle: subtitle,
        icon: icon
      };
    }
  }]);

  return FindHiddenCameraCard;
}(SecurityCardController);
FindHiddenCameraCard.propTypes = {
  onClickHiddenCamera: PropTypes__default["default"].func,
  discovery: PropTypes__default["default"].object,
  enabled: PropTypes__default["default"].bool,
  running: PropTypes__default["default"].bool
};

function getProxyWpadAddress(discovery) {
  var servers = discovery && discovery.dhcpservers ? discovery.dhcpservers : [];
  var proxyWpadAddress = [];

  if (servers && servers.length > 0) {
    var _iterator = _createForOfIteratorHelper(servers),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var s = _step.value;

        if (s.wpad) {
          proxyWpadAddress.push(s.wpad);
          break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return proxyWpadAddress;
}

var NIC_TYPE_SECURE = ["ETHERNET", "USB_ETHERNET", "IP_OVER_THUNDERBOLT", "IP_OVER_FIREWIRE", "CELLULAR", "BLUETOOTH_PAN"];
var WIFI_PROTOCOL_SECURE = ["WPA3", "WPA2"];
var WIFI_PROTOCOL_SEMISECURE = ["WPA", "WEP"];

var AccessPointCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(AccessPointCard, _SecurityCardControll);

  var _super = _createSuper(AccessPointCard);

  function AccessPointCard() {
    _classCallCheck(this, AccessPointCard);

    return _super.apply(this, arguments);
  }

  _createClass(AccessPointCard, [{
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var discovery = this.props.discovery;
      var status = SCRD_STATUS_WARN;
      var nicInfo = discovery && discovery.nicinfo ? discovery.nicinfo : null;

      if (nicInfo) {
        var type = nicInfo.type ? nicInfo.type : null;

        if (NIC_TYPE_SECURE.includes(type)) {
          status = SCRD_STATUS_OK;
        } else if (type === "WIFI") {
          if (nicInfo.wpsEnabled && nicInfo.wpsEnabled === 'true') {
            status = SCRD_STATUS_WARN;
          } else if (nicInfo.apSecurityProtocol) {
            var protocol = nicInfo.apSecurityProtocol;

            if (WIFI_PROTOCOL_SECURE.filter(function (val) {
              return protocol.toUpperCase().startsWith(val);
            }).length > 0) {
              status = SCRD_STATUS_OK;
            } else if (WIFI_PROTOCOL_SEMISECURE.filter(function (val) {
              return protocol.toUpperCase().startsWith(val);
            }).length > 0) {
              status = SCRD_STATUS_WARN;
            } else {
              status = SCRD_STATUS_FAIL; // Open network
            }
          }
        }

        var WPADs = getProxyWpadAddress(discovery);
        var hasWPAD = WPADs.length > 0;

        if (hasWPAD && status === SCRD_STATUS_OK) {
          status = SCRD_STATUS_WARN;
        } else if (hasWPAD && status === SCRD_STATUS_WARN) {
          status = SCRD_STATUS_FAIL;
        }
      }

      return status;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props = this.props,
          enabled = _this$props.enabled,
          onClickAccessPoint = _this$props.onClickAccessPoint;
      var status = this.getCardStatus();
      var title = intl__default["default"].get('security_score_access_point_title_warning');
      var subtitle = intl__default["default"].get('security_score_access_point_subtitle_warning');

      if (status) {
        if (status === SCRD_STATUS_OK) {
          title = intl__default["default"].get('security_score_access_point_title_success');
          subtitle = intl__default["default"].get('security_score_access_point_subtitle_success');
        } else if (status === SCRD_STATUS_WARN) {
          title = intl__default["default"].get('security_score_access_point_title_warning');
          subtitle = intl__default["default"].get('security_score_access_point_subtitle_warning');
        } else if (status === SCRD_STATUS_FAIL) {
          title = intl__default["default"].get('security_score_access_point_title_danger');
          subtitle = intl__default["default"].get('security_score_access_point_subtitle_danger');
        }
      }

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        status: status,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        type: status === SCRD_STATUS_FAIL ? SCB_TYPE_WARNING : SCB_TYPE_PRIMARY,
        action: onClickAccessPoint,
        title: intl__default["default"].get('generic_view_details'),
        disabled: !enabled
      }));
    }
  }]);

  return AccessPointCard;
}(SecurityCardController);
AccessPointCard.propTypes = {
  onClickAccessPoint: PropTypes__default["default"].func,
  discovery: PropTypes__default["default"].object,
  enabled: PropTypes__default["default"].bool
};

var AutomatedVulnerabilityCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(AutomatedVulnerabilityCard, _SecurityCardControll);

  var _super = _createSuper(AutomatedVulnerabilityCard);

  function AutomatedVulnerabilityCard(props) {
    var _this;

    _classCallCheck(this, AutomatedVulnerabilityCard);

    _this = _super.call(this, props);
    _this.onScheduleClick = _this.onScheduleClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(AutomatedVulnerabilityCard, [{
    key: "onScheduleClick",
    value: function onScheduleClick() {
      if (this.props.onScheduleClick) {
        this.props.onScheduleClick();
      }
    }
  }, {
    key: "getActiveOptionIndex",
    value: function getActiveOptionIndex(config) {
      var timeoutValue = config ? Number(config.delaysincelastexecution) : 0;

      if (timeoutValue === 0) {
        return 0;
      } else if (timeoutValue === MS_ONE_DAY) {
        return 1;
      } else if (timeoutValue === 2 * MS_ONE_DAY) {
        return 2;
      } else if (timeoutValue === 7 * MS_ONE_DAY) {
        return 3;
      }

      return 4;
    }
  }, {
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var _this$props = this.props,
          enabled = _this$props.enabled,
          config = _this$props.config;
      var activeIndex = this.getActiveOptionIndex(config);

      if (enabled && activeIndex !== 0) {
        return SCRD_STATUS_OK;
      }

      return SCRD_STATUS_WARN;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props2 = this.props,
          enabled = _this$props2.enabled,
          onClickTimeline = _this$props2.onClickTimeline,
          config = _this$props2.config;
      var title = intl__default["default"].get("security_score_automated_disabled_title");
      var subtitle = intl__default["default"].get("security_score_automated_subtitle");
      var cardStatus = this.getCardStatus();

      if (cardStatus === SCRD_STATUS_OK) {
        title = intl__default["default"].get('security_score_automated_enabled_title');
      }

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        type: SCB_TYPE_SECONDARY,
        disabled: !enabled,
        icon: "fa-history",
        action: onClickTimeline,
        title: intl__default["default"].get('view_timeline_button')
      }), /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        disabled: !enabled,
        icon: "fa-calendar",
        title: this.getScheduleLabel(config, enabled),
        action: this.onScheduleClick
      }));
    }
  }, {
    key: "getScheduleLabel",
    value: function getScheduleLabel(config, enabled) {
      if (config) {
        var timeoutValue = config ? Number(config.delaysincelastexecution) : 0;

        if (timeoutValue === 0 || !enabled) {
          return intl__default["default"].get('generic_disabled');
        } else if (timeoutValue < MS_ONE_DAY) {
          return intl__default["default"].get('every_hour', {
            num: timeoutValue / MS_ONE_HOUR
          });
        } else {
          return intl__default["default"].get('every_day', {
            num: timeoutValue / MS_ONE_DAY
          });
        }
      }

      return intl__default["default"].get('generic_disabled');
    }
  }]);

  return AutomatedVulnerabilityCard;
}(SecurityCardController);
AutomatedVulnerabilityCard.propTypes = {
  onClickTimeline: PropTypes__default["default"].func,
  onScheduleClick: PropTypes__default["default"].func,
  activeOption: PropTypes__default["default"].number,
  enabled: PropTypes__default["default"].bool,
  config: PropTypes__default["default"].object
};

var ManageNotificationCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(ManageNotificationCard, _SecurityCardControll);

  var _super = _createSuper(ManageNotificationCard);

  function ManageNotificationCard() {
    _classCallCheck(this, ManageNotificationCard);

    return _super.apply(this, arguments);
  }

  _createClass(ManageNotificationCard, [{
    key: "computeCardStatus",
    value: function computeCardStatus() {
      return this.props.enabled ? SCRD_STATUS_OK : SCRD_STATUS_WARN;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props = this.props,
          netNodes = _this$props.netNodes,
          handleManageDevicesClick = _this$props.handleManageDevicesClick,
          enabled = _this$props.enabled;
      var cardStatus = this.getCardStatus();
      var title = intl__default["default"].get("security_score_state_change_disabled_title");

      if (enabled) {
        title = intl__default["default"].get('security_score_state_change_enabled_title');
      }

      var subtitle;

      if (cardStatus === SCRD_STATUS_INACTIVE) {
        subtitle = intl__default["default"].get("security_score_state_change_subtitle");
      } else {
        var alertedDevices = netNodes ? netNodes.filter(function (n) {
          return n.alertOnStateChange === true;
        }).length : 0;
        subtitle = /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, intl__default["default"].get("security_score_state_change_subtitle"), /*#__PURE__*/React__default["default"].createElement("br", null), intl__default["default"].get("notifications_page_manage_extra", {
          alertedDevices: alertedDevices
        }));
      }

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        action: handleManageDevicesClick,
        disabled: !enabled,
        title: intl__default["default"].get("generic_manage")
      }));
    }
  }]);

  return ManageNotificationCard;
}(SecurityCardController);
ManageNotificationCard.propTypes = {
  netNodes: PropTypes__default["default"].array,
  handleManageDevicesClick: PropTypes__default["default"].func,
  enabled: PropTypes__default["default"].bool
};

var NotificationDeviceCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(NotificationDeviceCard, _SecurityCardControll);

  var _super = _createSuper(NotificationDeviceCard);

  function NotificationDeviceCard(props) {
    var _this;

    _classCallCheck(this, NotificationDeviceCard);

    _this = _super.call(this, props);
    _this.handleAlertOnNewNodesChanged = _this.handleAlertOnNewNodesChanged.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NotificationDeviceCard, [{
    key: "handleAlertOnNewNodesChanged",
    value: function handleAlertOnNewNodesChanged() {
      if (this.props.handleAlertOnNewNodesChanged) {
        var newNetwork = Object.assign({}, this.props.network);
        newNetwork.alertOnNewNode = this.netAlertOnNewNodeSwitch.checked;
        this.props.handleAlertOnNewNodesChanged(newNetwork);
      }
    }
  }, {
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var _this$props = this.props,
          enabled = _this$props.enabled,
          network = _this$props.network;
      var hasAlertOnNewNodeOn = network && network.alertOnNewNode === "true";

      if (enabled && hasAlertOnNewNodeOn) {
        return SCRD_STATUS_OK;
      }

      return SCRD_STATUS_WARN;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this2 = this;

      var enabled = this.props.enabled;
      var title = intl__default["default"].get("security_score_alert_disabled_title");
      var subtitle = intl__default["default"].get("security_score_alert_subtitle");
      var cardStatus = this.getCardStatus();
      var hasAlertOnNewNodeOn = cardStatus === SCRD_STATUS_OK;

      if (hasAlertOnNewNodeOn) {
        title = intl__default["default"].get("security_score_alert_enabled_title");
      }

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-switch"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        id: "alertOnNewNodeSwitch",
        type: "checkbox",
        className: "custom-control-input",
        ref: function ref(input) {
          return _this2.netAlertOnNewNodeSwitch = input;
        },
        onChange: this.handleAlertOnNewNodesChanged,
        defaultChecked: hasAlertOnNewNodeOn === true ? "on" : null,
        disabled: !enabled
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "custom-control-label",
        htmlFor: "alertOnNewNodeSwitch"
      }, intl__default["default"].get('security_score_alert_switch'))));
    }
  }]);

  return NotificationDeviceCard;
}(SecurityCardController);
NotificationDeviceCard.propTypes = {
  network: PropTypes__default["default"].object,
  handleAlertOnNewNodesChanged: PropTypes__default["default"].func,
  enabled: PropTypes__default["default"].bool
};

var TOOLSTATE_INITIALIZING = "Initializing";
var TOOLSTATE_READY = "Ready";
var TOOLSTATE_STARTING = "Starting";
var TOOLSTATE_RUNNING = "Running";
var TOOLSTATE_STOPPING = "Stopping";
var TOOLSTATE_FAILED = "Failed";
var TOOLSTATE_COMPLETED = "Completed";
var TOOLSTATE_TERMINATED = "Terminated";
var TOOLSTATE_UNKNOWN = "Unknown";
var TOOLSTATE_DISCOVERY = "discovery";
var TOPOLOGY_PUBLICINTERNET = 'PUBLICINTERNET';
var TOPOLOGY_WAN = 'WAN';
var TOPOLOGY_UNKNOWN = 'UNKNOWN';

function calculateTopology(result) {
  if (result.extIpInfo && result.RouterUpnpInfo && result.RouterUpnpInfo.extip && result.extIpInfo.address) {
    return result.RouterUpnpInfo.extip === result.extIpInfo.address ? TOPOLOGY_PUBLICINTERNET : TOPOLOGY_WAN;
  }

  return TOPOLOGY_UNKNOWN;
}

var VulnerabilityTestResult = /*#__PURE__*/function () {
  function VulnerabilityTestResult() {
    _classCallCheck(this, VulnerabilityTestResult);

    _defineProperty(this, "engineState", TOOLSTATE_INITIALIZING);

    _defineProperty(this, "releaseDate", void 0);

    _defineProperty(this, "logoImageUrl", void 0);

    _defineProperty(this, "deviceFound", false);

    _defineProperty(this, "deviceBestModel", void 0);

    _defineProperty(this, "deviceBestMake", void 0);

    _defineProperty(this, "deviceBestFamily", void 0);

    _defineProperty(this, "deviceMacAddress", void 0);

    _defineProperty(this, "deviceAddressList", void 0);

    _defineProperty(this, "isFamily", false);

    _defineProperty(this, "manualUrl", void 0);

    _defineProperty(this, "portMappings", void 0);

    _defineProperty(this, "routerHasUpnpNAT", void 0);

    _defineProperty(this, "routerHasNatPMP", void 0);

    _defineProperty(this, "topology", void 0);

    _defineProperty(this, "topologyAddress", void 0);

    _defineProperty(this, "lastUpdate", void 0);
  }

  _createClass(VulnerabilityTestResult, [{
    key: "isToolRunning",
    value: function isToolRunning() {
      return this.engineState === TOOLSTATE_INITIALIZING || this.engineState === TOOLSTATE_STARTING || this.engineState === TOOLSTATE_RUNNING || this.engineState === TOOLSTATE_DISCOVERY || this.engineState === TOOLSTATE_STOPPING;
    }
  }, {
    key: "isToolStopped",
    value: function isToolStopped() {
      return this.engineState === TOOLSTATE_FAILED || this.engineState === TOOLSTATE_COMPLETED || this.engineState === TOOLSTATE_TERMINATED || this.engineState === TOOLSTATE_READY || this.engineState === TOOLSTATE_UNKNOWN;
    }
  }, {
    key: "getDeviceMacAddress",
    value: function getDeviceMacAddress() {
      return this.deviceMacAddress || '';
    }
  }, {
    key: "getDeviceAddressList",
    value: function getDeviceAddressList() {
      return this.deviceAddressList && this.deviceAddressList.length > 0 ? this.deviceAddressList[0] : '';
    }
  }, {
    key: "getDeviceBestMake",
    value: function getDeviceBestMake() {
      return this.deviceBestMake || '';
    }
  }]);

  return VulnerabilityTestResult;
}();
/**
 * Converts the given speedTest object into a list of items to display.
 * @param htcRecord The object from the vulnerability tool result
 * @param deviceDetail The object from device's data
 * @returns {VulnerabilityTestResult} A speed test state result object
 */

function convertToVulnerabilityTestResult(htcRecord, deviceDetail) {
  var testResult = new VulnerabilityTestResult();
  var result = htcRecord.result;
  var recogCatalog = deviceDetail && deviceDetail.recogCatalog ? deviceDetail.recogCatalog : null;
  testResult.engineState = htcRecord.tool_state;
  testResult.portMappings = result && result.routerInfoAudit && result.routerInfoAudit.RouterUpnpInfo && result.routerInfoAudit.RouterUpnpInfo.portMappings ? result.routerInfoAudit.RouterUpnpInfo.portMappings : [];
  testResult.routerHasUpnpNAT = result && result.routerInfoAudit && result.routerInfoAudit.RouterUpnpInfo && result.routerInfoAudit.RouterUpnpInfo.extip;
  testResult.routerHasNatPMP = result && result.routerInfoAudit && result.routerInfoAudit.RouterNatInfo && result.routerInfoAudit.RouterNatInfo.extip;
  testResult.lastUpdate = intl__default["default"].get('routercheck_last_update', {
    date: formatAbsoluteDate(result.timestamp, DATE_FORMAT_LONG)
  });
  testResult.topology = calculateTopology(result);

  if (result.extIpInfo && result.extIpInfo.address) {
    testResult.topologyAddress = intl__default["default"].get('routercheck_internet_address', {
      address: result.extIpInfo.address
    });
  }

  var releaseDate = null;

  if (recogCatalog && recogCatalog.recogDevice && recogCatalog.recogDevice.releaseDate) {
    releaseDate = formatShortAbsoluteDate(recogCatalog.recogDevice.releaseDate);

    if (recogCatalog.recogDevice.discDate) {
      releaseDate += ' - ' + formatShortAbsoluteDate(recogCatalog.recogDevice.discDate);
    } else {
      releaseDate += ' - ' + intl__default["default"].get('dateformat_now');
    }
  }

  testResult.releaseDate = releaseDate;
  var logoImageUrl = null;

  if (recogCatalog && recogCatalog.recogMake) {
    if (recogCatalog.recogMake.bannerImageUrl) logoImageUrl = recogCatalog.recogMake.bannerImageUrl;else if (recogCatalog.recogMake.logoImageUrl) logoImageUrl = recogCatalog.recogMake.logoImageUrl;
  }

  testResult.logoImageUrl = logoImageUrl;
  var device = result && result.routerInfoAudit && result.routerInfoAudit.router;

  if (device) {
    testResult.isFamily = device.isFamily && device.isFamily === 'true';
    if (device.best_model) testResult.deviceBestModel = device.best_model;
    if (device.best_make) testResult.deviceBestMake = device.best_make;
    if (device.address_list) testResult.deviceAddressList = device.address_list;
    if (device.mac_address) testResult.deviceMacAddress = device.mac_address;
    if (device.best_family) testResult.deviceBestFamily = device.best_family;
  }

  testResult.manualUrl = recogCatalog && recogCatalog.recogDevice && recogCatalog.recogDevice.manualUrl ? recogCatalog.recogDevice.manualUrl : null;
  return testResult;
}

var RouterVulnerabilityCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(RouterVulnerabilityCard, _SecurityCardControll);

  var _super = _createSuper(RouterVulnerabilityCard);

  function RouterVulnerabilityCard(props) {
    var _this;

    _classCallCheck(this, RouterVulnerabilityCard);

    _this = _super.call(this, props);
    _this.onClickRouterVulnerability = _this.onClickRouterVulnerability.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RouterVulnerabilityCard, [{
    key: "onClickRouterVulnerability",
    value: function onClickRouterVulnerability() {
      if (this.props.onClickRouterVulnerability) {
        this.props.onClickRouterVulnerability();
      }
    }
  }, {
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var _this$props = this.props,
          discovery = _this$props.discovery,
          running = _this$props.running,
          enabled = _this$props.enabled;
      var cardStatus;

      if (!enabled) {
        cardStatus = SCRD_STATUS_WARN;
      } else if (discovery && !discovery.lastvulnerabilitytest) {
        cardStatus = SCRD_STATUS_WARN;
      } else {
        var toolWrapper = {
          result: discovery && discovery.lastvulnerabilitytest,
          tool_state: ES_COMPLETED
        };
        var item = discovery && discovery.lastvulnerabilitytest ? convertToVulnerabilityTestResult(toolWrapper) : {};

        if (running || item.isToolRunning()) {
          cardStatus = SCRD_STATUS_WARN;
        } else if (item.portMappings && item.portMappings.length > 0) {
          cardStatus = SCRD_STATUS_FAIL;
        } else if (item.routerHasUpnpNAT || item.routerHasNatPMP) {
          cardStatus = SCRD_STATUS_WARN;
        } else {
          cardStatus = SCRD_STATUS_OK;
        }
      }

      return cardStatus;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props2 = this.props,
          discovery = _this$props2.discovery,
          enabled = _this$props2.enabled;

      if (!discovery) {
        return null;
      }

      var cardStatus = this.getCardStatus();

      var _this$getTexts = this.getTexts(cardStatus),
          title = _this$getTexts.title,
          subtitle = _this$getTexts.subtitle,
          icon = _this$getTexts.icon;

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle,
        icon: icon
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        action: this.onClickRouterVulnerability,
        title: intl__default["default"].get('generic_see_result'),
        disabled: !enabled
      }));
    }
  }, {
    key: "getTexts",
    value: function getTexts(cardStatus) {
      var _this$props3 = this.props,
          discovery = _this$props3.discovery,
          running = _this$props3.running;
      var title;
      var subtitle;
      var icon;

      if (cardStatus === SCRD_STATUS_INACTIVE) {
        title = intl__default["default"].get('routercheck_premium_title');
        subtitle = intl__default["default"].get('routercheck_premium_subtitle');
      } else if (discovery && !discovery.lastvulnerabilitytest) {
        title = intl__default["default"].get('routercheck_never_title');
        subtitle = intl__default["default"].get('routercheck_premium_subtitle');
      } else {
        var toolWrapper = {
          result: discovery && discovery.lastvulnerabilitytest,
          tool_state: ES_COMPLETED
        };
        var item = discovery && discovery.lastvulnerabilitytest ? convertToVulnerabilityTestResult(toolWrapper) : {};

        if (running || item.isToolRunning()) {
          icon = SI_STATUS_SYNC;
          title = intl__default["default"].get("routercheck_toolresult_sync_title");
          subtitle = intl__default["default"].get("routercheck_toolresult_sync_subtitle");
        } else if (item.portMappings && item.portMappings.length > 0) {
          title = intl__default["default"].get("routercheck_toolresult_danger_title");
          subtitle = intl__default["default"].get("routercheck_toolresult_danger_subtitle");
        } else if (item.routerHasUpnpNAT || item.routerHasNatPMP) {
          title = intl__default["default"].get("routercheck_toolresult_warning_title");
          subtitle = intl__default["default"].get("routercheck_toolresult_warning_subtitle");
        } else {
          title = intl__default["default"].get("routercheck_toolresult_success_title");
          subtitle = intl__default["default"].get("routercheck_toolresult_success_subtitle");
        }
      }

      return {
        title: title,
        subtitle: subtitle,
        icon: icon
      };
    }
  }]);

  return RouterVulnerabilityCard;
}(SecurityCardController);
RouterVulnerabilityCard.propTypes = {
  enabled: PropTypes__default["default"].bool,
  discovery: PropTypes__default["default"].object,
  onClickRouterVulnerability: PropTypes__default["default"].func,
  running: PropTypes__default["default"].bool
};

var UnconfirmedDeviceCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(UnconfirmedDeviceCard, _SecurityCardControll);

  var _super = _createSuper(UnconfirmedDeviceCard);

  function UnconfirmedDeviceCard(props) {
    var _this;

    _classCallCheck(this, UnconfirmedDeviceCard);

    _this = _super.call(this, props);
    _this.onConfirmDevices = _this.onConfirmDevices.bind(_assertThisInitialized(_this));
    _this.onClickEventsTimeline = _this.onClickEventsTimeline.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(UnconfirmedDeviceCard, [{
    key: "onConfirmDevices",
    value: function onConfirmDevices() {
      if (this.props.onConfirmDevices) {
        this.props.onConfirmDevices();
      }
    }
  }, {
    key: "onClickEventsTimeline",
    value: function onClickEventsTimeline() {
      if (this.props.onClickEventsTimeline) {
        this.props.onClickEventsTimeline();
      }
    }
  }, {
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var netNodes = this.props.netNodes;
      var nothingToConfirm = false;

      if (netNodes && netNodes.length > 0) {
        var devicesConfirmed = netNodes.filter(function (netNode) {
          return netNode.isConfirmed();
        }).length;
        nothingToConfirm = devicesConfirmed === netNodes.length;
      }

      return nothingToConfirm ? SCRD_STATUS_OK : SCRD_STATUS_WARN;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props = this.props,
          netNodes = _this$props.netNodes,
          enabled = _this$props.enabled;
      var nothingToConfirm = false;
      var devicesConfirmed = 0;
      var title = "";

      if (netNodes && netNodes.length > 0) {
        devicesConfirmed = netNodes.filter(function (netNode) {
          return netNode.isConfirmed();
        }).length;
        nothingToConfirm = devicesConfirmed === netNodes.length;
        var localeString = netNodes.length - devicesConfirmed === 1 ? "security_score_unconfirmed_devices_title" : "security_score_unconfirmed_devices_titles";
        title = nothingToConfirm ? intl__default["default"].get('security_score_all_confirmed_devices_title') : intl__default["default"].get(localeString, {
          num: netNodes.length - devicesConfirmed
        });
      }

      var subtitle = intl__default["default"].get('security_score_unconfirmed_devices_subtitle');
      var cardStatus = this.getCardStatus();
      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        status: cardStatus,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        type: SCB_TYPE_SECONDARY,
        title: intl__default["default"].get("view_timeline_button"),
        icon: "fa-history",
        action: this.onClickEventsTimeline,
        disabled: !enabled
      }), /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        action: this.onConfirmDevices,
        title: intl__default["default"].get('security_score_confirm_devices'),
        disabled: !enabled || nothingToConfirm
      }));
    }
  }]);

  return UnconfirmedDeviceCard;
}(SecurityCardController);
UnconfirmedDeviceCard.propTypes = {
  netNodes: PropTypes__default["default"].array,
  onClickEventsTimeline: PropTypes__default["default"].func,
  onConfirmDevices: PropTypes__default["default"].func
};

var NotificationAutoBlockCard = /*#__PURE__*/function (_SecurityCardControll) {
  _inherits(NotificationAutoBlockCard, _SecurityCardControll);

  var _super = _createSuper(NotificationAutoBlockCard);

  function NotificationAutoBlockCard(props) {
    var _this;

    _classCallCheck(this, NotificationAutoBlockCard);

    _this = _super.call(this, props);
    _this.handleAutoBlockChanged = _this.handleAutoBlockChanged.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NotificationAutoBlockCard, [{
    key: "handleAutoBlockChanged",
    value: function handleAutoBlockChanged() {
      if (this.props.handleAutoBlockChanged) {
        this.props.handleAutoBlockChanged();
      }
    }
  }, {
    key: "computeCardStatus",
    value: function computeCardStatus() {
      var _this$props = this.props,
          network = _this$props.network,
          enabled = _this$props.enabled,
          hasValidationFailed = _this$props.hasValidationFailed;
      var autoBlockOn = network && network.autoBlockNewDevices === "true";

      if (enabled && !hasValidationFailed && autoBlockOn) {
        return SCRD_STATUS_OK;
      }

      return SCRD_STATUS_WARN;
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var _this$props2 = this.props,
          network = _this$props2.network,
          enabled = _this$props2.enabled,
          hasValidationFailed = _this$props2.hasValidationFailed;
      var cardStatus = this.getCardStatus();
      var networkName = network && network.customName ? network.customName : null;

      if (!networkName) {
        networkName = network && network.name ? network.name : "unrecognized network";
      }

      var title = intl__default["default"].get("autoblock_card_title_disabled");
      var subtitle;
      var buttonTitle = intl__default["default"].get("generic_manage");

      if (cardStatus === SCRD_STATUS_INACTIVE) {
        subtitle = intl__default["default"].get("autoblock_card_subtitle_permission_disabled", {
          networkName: networkName
        });
      } else {
        if (hasValidationFailed) {
          subtitle = intl__default["default"].getHTML("autoblock_card_subtitle_validation_disabled", {
            networkName: networkName
          });
        } else {
          title = cardStatus === SCRD_STATUS_OK ? intl__default["default"].get("autoblock_card_title_enabled") : intl__default["default"].get("autoblock_card_title_disabled");
          subtitle = cardStatus === SCRD_STATUS_OK ? intl__default["default"].getHTML("autoblock_card_subtitle_enabled", {
            networkName: networkName
          }) : intl__default["default"].get("autoblock_card_subtitle_disabled");
          buttonTitle = cardStatus !== SCRD_STATUS_OK ? intl__default["default"].get("autoblock_card_action_enable") : intl__default["default"].get("generic_manage");
        }
      }

      return /*#__PURE__*/React__default["default"].createElement(SecurityCard, {
        hasBadge: true,
        status: cardStatus,
        title: title,
        subtitle: subtitle
      }, /*#__PURE__*/React__default["default"].createElement(SecurityCardButton, {
        action: this.handleAutoBlockChanged,
        title: buttonTitle,
        disabled: !enabled,
        freeze: hasValidationFailed
      }));
    }
  }]);

  return NotificationAutoBlockCard;
}(SecurityCardController);
NotificationAutoBlockCard.propTypes = {
  network: PropTypes__default["default"].object,
  handleAutoBlockChanged: PropTypes__default["default"].func,
  enabled: PropTypes__default["default"].bool
};

/*
 * Copyright (c) Fing. All rights reserved.
 */
function powerToSignalPercentage(power) {
  if (power >= -20) return 100;else if (power >= -23) return 99;else if (power >= -26) return 98;else if (power >= -28) return 97;else if (power >= -30) return 96;else if (power >= -32) return 95;else if (power >= -33) return 94;else if (power >= -35) return 93;else if (power >= -36) return 92;else if (power >= -37) return 91;else if (power >= -39) return 90;else if (power >= -40) return 89;else if (power >= -41) return 88;else if (power >= -42) return 87;else if (power >= -43) return 86;else if (power >= -44) return 85;else if (power >= -45) return 84;else if (power >= -46) return 83;else if (power >= -47) return 82;else if (power >= -48) return 81;else if (power >= -49) return 80;else if (power >= -50) return 79;else if (power >= -51) return 78;else if (power >= -52) return 76;else if (power >= -53) return 75;else if (power >= -54) return 74;else if (power >= -55) return 73;else if (power >= -56) return 71;else if (power >= -57) return 70;else if (power >= -58) return 69;else if (power >= -59) return 67;else if (power >= -60) return 66;else if (power >= -61) return 64;else if (power >= -62) return 63;else if (power >= -64) return 60;else if (power >= -65) return 58;else if (power >= -66) return 56;else if (power >= -67) return 55;else if (power >= -68) return 53;else if (power >= -69) return 51;else if (power >= -70) return 50;else if (power >= -71) return 48;else if (power >= -72) return 46;else if (power >= -73) return 44;else if (power >= -74) return 42;else if (power >= -75) return 40;else if (power >= -76) return 38;else if (power >= -77) return 36;else if (power >= -78) return 34;else if (power >= -79) return 32;else if (power >= -80) return 30;else if (power >= -81) return 28;else if (power >= -82) return 26;else if (power >= -83) return 24;else if (power >= -84) return 22;else if (power >= -85) return 20;else if (power >= -86) return 17;else if (power >= -87) return 15;else if (power >= -88) return 13;else if (power >= -89) return 10;else if (power >= -90) return 8;else if (power >= -91) return 6;else if (power >= -92) return 3;else return 1;
}

var AccessPointDialog = /*#__PURE__*/function (_PureComponent) {
  _inherits(AccessPointDialog, _PureComponent);

  var _super = _createSuper(AccessPointDialog);

  function AccessPointDialog(props, context) {
    var _this;

    _classCallCheck(this, AccessPointDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(AccessPointDialog, [{
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "getWpsEnableIcon",
    value: function getWpsEnableIcon(nicInfo) {
      if (nicInfo.wpsEnabled && nicInfo.wpsEnabled === 'true') {
        return /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
          shape: SI_SHAPE_CIRCLE,
          status: SI_STATUS_WARNING
        });
      }

      return '';
    }
  }, {
    key: "getProtocolIcon",
    value: function getProtocolIcon(nicInfo) {
      var iconProtocol = SI_STATUS_SUCCESS;

      if (nicInfo.apSecurityProtocol) {
        var protocol = nicInfo.apSecurityProtocol;

        if (WIFI_PROTOCOL_SECURE.filter(function (val) {
          return protocol.includes(val);
        }).length > 0) {
          iconProtocol = SI_STATUS_SUCCESS;
        } else if (WIFI_PROTOCOL_SEMISECURE.filter(function (val) {
          return protocol.includes(val);
        }).length > 0) {
          iconProtocol = SI_STATUS_WARNING;
        } else {
          iconProtocol = SI_STATUS_DANGER;
        }
      }

      return /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
        shape: SI_SHAPE_CIRCLE,
        status: iconProtocol
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          title = _this$props.title,
          discovery = _this$props.discovery;
      var notAvailable = intl__default["default"].get('generic_not_available');
      var values = [];
      var nicInfo = discovery && discovery.nicinfo ? discovery.nicinfo : null;

      if (nicInfo && nicInfo.type) {
        var type = nicInfo.type ? nicInfo.type : '';
        values.push({
          value: intl__default["default"].get('generic_type'),
          description: type
        });

        if (nicInfo.type === NT_WIFI) {
          var apssid = nicInfo.apssid ? nicInfo.apssid : '';
          values.push({
            value: intl__default["default"].get('generic_ssid'),
            description: apssid
          });
          var apbssid = nicInfo.apbssid ? nicInfo.apbssid : '';
          values.push({
            value: intl__default["default"].get('generic_bssid'),
            description: apbssid
          });
          var band = nicInfo.channel ? intl__default["default"].get('#_ghz', {
            num: nicInfo.channel > 14 ? 5 : 2.4
          }) : notAvailable;
          values.push({
            value: intl__default["default"].get('generic_band'),
            description: band
          });
          var signal = nicInfo.signalstrength ? powerToSignalPercentage(Number(nicInfo.signalstrength)) + '%' : '';
          values.push({
            value: intl__default["default"].get('generic_signal'),
            description: signal
          });
          var wpsIcon = this.getWpsEnableIcon(nicInfo);
          var wpsDescription = nicInfo.wpsEnabled ? nicInfo.wpsEnabled === "true" ? 'true' : 'false' : notAvailable;
          values.push({
            value: intl__default["default"].get('generic_wps_enabled'),
            description: wpsDescription,
            icon: wpsIcon
          });
          var apSecurityProtocol = nicInfo.apSecurityProtocol ? nicInfo.apSecurityProtocol : notAvailable;
          var apIcon = this.getProtocolIcon(nicInfo);
          values.push({
            value: intl__default["default"].get('generic_security'),
            description: apSecurityProtocol,
            icon: apIcon
          });
        } else {
          var speed = nicInfo.downlinkeffectiverate ? nicInfo.downlinkeffectiverate : '';
          values.push({
            value: intl__default["default"].get('generic_link_speed'),
            description: parseEthernetAnswer(speed)
          });
        }

        var dhcpserver = nicInfo.dhcpserver ? nicInfo.dhcpserver : '';
        values.push({
          value: intl__default["default"].get('generic_dhcp'),
          description: dhcpserver
        });
        var WPADs = getProxyWpadAddress(discovery);
        var wpadDescription = WPADs.length > 0 ? WPADs.join(',') : notAvailable;
        var statusWPAD = WPADs.length > 0 ? SI_STATUS_WARNING : SI_STATUS_SUCCESS;
        var proxyIcon = /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
          shape: SI_SHAPE_CIRCLE,
          status: statusWPAD
        });
        values.push({
          value: intl__default["default"].get('generic_dhcp_proxy'),
          description: wpadDescription,
          icon: proxyIcon
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title || '',
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement(InfoPanel, {
        values: values
      })), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      })));
    }
  }]);

  return AccessPointDialog;
}(React.PureComponent);
AccessPointDialog.propTypes = {
  id: PropTypes__default["default"].string,
  onClose: PropTypes__default["default"].func,
  title: PropTypes__default["default"].string,
  discovery: PropTypes__default["default"].object
};

/**
 * A generic dialog to toggle a property on/off, based on an external function that extracts and changes the
 * setting.
 */

var SecurityDeviceToggleDialog = /*#__PURE__*/function (_Component) {
  _inherits(SecurityDeviceToggleDialog, _Component);

  var _super = _createSuper(SecurityDeviceToggleDialog);

  function SecurityDeviceToggleDialog(props, context) {
    var _this;

    _classCallCheck(this, SecurityDeviceToggleDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onConfirmDialog = _this.onConfirmDialog.bind(_assertThisInitialized(_this));
    _this.onNodePropertyChanged = _this.onNodePropertyChanged.bind(_assertThisInitialized(_this));

    if (_this.props.netNodes && _this.props.values) {
      _this.state = {
        values: Object.assign({}, _this.props.values),
        disabled: Object.assign({}, _this.props.disabled)
      };
    } else {
      _this.state = {
        values: {},
        disabled: {}
      };
    }

    return _this;
  }

  _createClass(SecurityDeviceToggleDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      var x = prevProps.values;
      var y = this.props.values; // Refresh state only if some value actually changes

      var hasSameKeyCount = Object.keys(x).length === Object.keys(y).length;
      var hasSameValues = Object.keys(x).reduce(function (isEqual, key) {
        return isEqual && x[key] === y[key];
      }, true);

      if (!hasSameKeyCount || !hasSameValues) {
        this.setState({
          values: Object.assign({}, this.props.values),
          disabled: Object.assign({}, this.props.disabled)
        });
      }
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "onConfirmDialog",
    value: function onConfirmDialog() {
      if (this.props.onConfirm) {
        this.props.onConfirm(this.state.values);
      }
    } // --------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          id = _this$props.id,
          netNodes = _this$props.netNodes,
          title = _this$props.title,
          body = _this$props.body,
          selectAllEnabled = _this$props.selectAllEnabled,
          deselectAllEnabled = _this$props.deselectAllEnabled;
      var _this$state = this.state,
          values = _this$state.values,
          disabled = _this$state.disabled;

      var toggleAll = function toggleAll(newValue) {
        _this2.setState(function (prevState) {
          for (var key in prevState.values) {
            if (prevState.values.hasOwnProperty(key)) {
              prevState.values[key] = newValue;
            }
          }

          return {
            values: prevState.values
          };
        });
      };

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title || '',
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, body && /*#__PURE__*/React__default["default"].createElement("p", null, body), (selectAllEnabled || deselectAllEnabled) && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center mb-2"
      }, selectAllEnabled && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        icon: "fa-check",
        title: intl__default["default"].get('generic_enable_all'),
        type: BTN_TYPE_SOFT,
        className: "mr-2",
        action: function action(evt) {
          return toggleAll(true);
        }
      }), deselectAllEnabled && /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        icon: "fa-times",
        title: intl__default["default"].get('generic_disable_all'),
        type: BTN_TYPE_SOFT,
        action: function action(evt) {
          return toggleAll(false);
        }
      })), /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-align-middle"
      }, /*#__PURE__*/React__default["default"].createElement("tbody", null, netNodes && netNodes.map(function (netNode) {
        return _this2.renderNetNode(netNode, values[netNode.hwAddress] === true, disabled[netNode.hwAddress] === true);
      })))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onConfirmDialog,
        title: intl__default["default"].get('generic_save'),
        tint: BTN_TINT_PRIMARY
      })));
    }
    /**
     * Renders a NetNode.
     *
     * @param {NetNode} netNode
     * @return {JSX.Element}
     */

  }, {
    key: "renderNetNode",
    value: function renderNetNode(netNode, checked, disabled) {
      var _this3 = this;

      var name = netNode.bestName || netNode.hwAddress;
      var makeAndModel = netNode.getBestMakeAndModelAsArray().join(" • ") || netNode.ipAddresses[0];
      var id = "".concat(this.props.id, "_checkbox_").concat(netNode.hwAddress);
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: "row_".concat(netNode.hwAddress)
      }, /*#__PURE__*/React__default["default"].createElement("td", {
        style: {
          width: "3rem"
        },
        className: "text-center"
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        type: netNode.bestType || DT_GENERIC
      })), /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-dark"
      }, name), /*#__PURE__*/React__default["default"].createElement("div", null, makeAndModel)), /*#__PURE__*/React__default["default"].createElement("td", {
        className: "px-0 text-center"
      }, disabled ? /*#__PURE__*/React__default["default"].createElement("span", null, /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-fw fa-check-circle text-success"
      })) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "custom-control custom-switch"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        id: id,
        key: id,
        type: "checkbox",
        className: "custom-control-input",
        checked: checked,
        onChange: function onChange(evt) {
          if (!evt.currentTarget) return;
          var newEnabledValue = evt.currentTarget.checked;

          _this3.onNodePropertyChanged(netNode, newEnabledValue);
        }
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "custom-control-label",
        htmlFor: id
      }))));
    }
  }, {
    key: "onNodePropertyChanged",
    value: function onNodePropertyChanged(netNode, selected) {
      this.setState(function (prevState) {
        var prevValues = prevState.values;
        prevValues[netNode.hwAddress] = selected;
        return {
          values: prevValues
        };
      });
    }
  }]);

  return SecurityDeviceToggleDialog;
}(React.Component);
SecurityDeviceToggleDialog.propTypes = {
  onConfirm: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  title: PropTypes__default["default"].string,
  body: PropTypes__default["default"].string,
  selectAllEnabled: PropTypes__default["default"].bool,
  deselectAllEnabled: PropTypes__default["default"].bool,
  values: PropTypes__default["default"].object
};

function getDeviceAvailability(device, endDate, intervals, step) {
  var result = [];
  if (!device) return result;
  var now = new Date();
  var curStart = endDate;

  for (var i = 0; i < intervals; ++i) {
    var nextEnd = new Date(curStart.getTime() + step);
    result.push({
      start: curStart,
      end: nextEnd,
      state: 0
    });
    if (nextEnd > now) break;
    curStart = nextEnd;
  }

  if (!device.logs || device.logs.length == 0) {
    if (device.state === 'UP') {
      markOnline(result, new Date(Number(device.firstseentime)), new Date(Number(device.statechangetime), now));
    }

    return result;
  } // we have logs


  var curDownTime = result[result.length - 1].end;

  for (var _i = 0; _i < device.logs.length; ++_i) {
    //console.log("proc: "+i+" curDown= "+curDownTime);
    var log = device.logs[_i];
    var thisTime = Number(log.sharptime);

    if (log.state.change == 'UP') {
      markOnline(result, new Date(thisTime), curDownTime, now);
    } else {
      curDownTime = new Date(thisTime);
    }
  } // last event was a down: it's been online all the time, maybe ;)


  if (device.logs.length < 50 && device.logs[device.logs.length - 1].state.change == 'DOWN') {
    markOnline(result, new Date(Number(device.firstseentime)), curDownTime, now);
  }

  return result;
}
function markOnline(availability, start, end, now) {
  for (var i = 0; i < availability.length; ++i) {
    if (availability[i].start >= end) break;
    if (start >= availability[i].end) continue;
    var uptime = Math.min(availability[i].end.getTime(), end.getTime(), now) - Math.max(availability[i].start.getTime(), start.getTime());
    if (uptime < 0) continue;
    uptime = Math.max(300000, uptime);
    availability[i].state += uptime;
  }
}
function aggregateAvailability(avail) {
  var result = {
    slots: [],
    totalup: 0
  };
  if (!avail || avail.length == 0) return result;

  for (var i = 0; i < avail.length; ++i) {
    result.totalup += avail[i].state;
    var state = avail[i].state > 0 ? 1 : 0;

    if (i == 0) {
      result.slots.push([state, 1, avail[i].start, avail[i].end, avail[i].state]);
      continue;
    }

    if (result.slots[result.slots.length - 1][0] == state) {
      result.slots[result.slots.length - 1][1] = result.slots[result.slots.length - 1][1] + 1;
      result.slots[result.slots.length - 1][3] = avail[i].end;
      result.slots[result.slots.length - 1][4] = result.slots[result.slots.length - 1][4] + avail[i].state;
    } else {
      result.slots.push([state, 1, avail[i].start, avail[i].end, avail[i].state]);
    }
  }

  return result;
} // network summary timeline helpers

function getNetworkAvailability(discovery, endDate, intervals, step) {
  var result = [];
  if (!discovery || !discovery.nodes) return result;
  var now = new Date();
  var curStart = endDate;

  for (var i = 0; i < intervals; ++i) {
    var nextEnd = new Date(curStart.getTime() + step);
    result.push({
      start: curStart,
      end: nextEnd,
      devices: {}
    });
    if (nextEnd > now) break;
    curStart = nextEnd;
  }

  for (var _i2 = 0; _i2 < discovery.nodes.length; ++_i2) {
    var device = discovery.nodes[_i2];
    var mac = device.mac_address;

    if (!device.logs || device.logs.length == 0) {
      if (device.state === 'UP') {
        countOnline(result, new Date(Number(device.firstseentime)), new Date(Number(device.statechangetime), now, mac));
      }

      continue;
    } // we have logs


    var curDownTime = result[result.length - 1].end;

    for (var _i3 = 0; _i3 < device.logs.length; ++_i3) {
      //console.log("proc: "+i+" curDown= "+curDownTime);
      var log = device.logs[_i3];
      if (!log || !log.state || !log.sharptime) continue;
      var thisTime = Number(log.sharptime);

      if (log.state.change == 'UP') {
        countOnline(result, new Date(thisTime), curDownTime, now, mac);
      } else {
        curDownTime = new Date(thisTime);
      }
    } // last event was a down: it's been online all the time, maybe ;)


    if (device.logs.length < 50 && device.logs[device.logs.length - 1]) {
      var lastLog = device.logs[device.logs.length - 1];

      if (lastLog && lastLog.state && lastLog.state.change == 'DOWN') {
        countOnline(result, new Date(Number(device.firstseentime)), curDownTime, now, mac);
      }
    }
  }

  return result;
}
function countOnline(availability, start, end, now, mac) {
  for (var i = 0; i < availability.length; ++i) {
    if (availability[i].start >= end) break;
    if (start >= availability[i].end) continue;
    var uptime = Math.min(availability[i].end.getTime(), end.getTime(), now) - Math.max(availability[i].start.getTime(), start.getTime());
    if (uptime < 0) continue;
    uptime = Math.max(300000, uptime);
    if (!availability[i].devices[mac]) availability[i].devices[mac] = 0;
    availability[i].devices[mac] += uptime;
  }
}
function aggregateNetworkAvailability(avail) {
  var result = {
    slots: [],
    minup: 0,
    maxup: 0,
    distinct: 0
  };
  if (!avail || avail.length == 0) return result;
  var distinctDevices = {};

  for (var i = 0; i < avail.length; ++i) {
    var thisTotUp = Object.keys(avail[i].devices).length;
    Object.keys(avail[i].devices).forEach(function (mac) {
      distinctDevices[mac] = 1;
    });

    if (i == 0) {
      result.minup = thisTotUp;
      result.maxup = thisTotUp;
      result.slots.push([thisTotUp, 1, avail[i].start, avail[i].end]);
      continue;
    }

    result.minup = Math.min(result.minup, thisTotUp);
    result.maxup = Math.max(result.maxup, thisTotUp);

    if (result.slots[result.slots.length - 1][0] == thisTotUp) {
      result.slots[result.slots.length - 1][1] = result.slots[result.slots.length - 1][1] + 1;
      result.slots[result.slots.length - 1][3] = avail[i].end;
    } else {
      result.slots.push([thisTotUp, 1, avail[i].start, avail[i].end]);
    }
  }

  result.distinct = Object.keys(distinctDevices).length;
  return result;
}

var RouterSetupInfoPanel = /*#__PURE__*/function (_Component) {
  _inherits(RouterSetupInfoPanel, _Component);

  var _super = _createSuper(RouterSetupInfoPanel);

  function RouterSetupInfoPanel() {
    _classCallCheck(this, RouterSetupInfoPanel);

    return _super.apply(this, arguments);
  }

  _createClass(RouterSetupInfoPanel, [{
    key: "render",
    value: function render() {
      var router = this.props.router;
      var portForwardTitle, portForwardDesc;
      var portForwardIconColor = "bg-warning";
      var portForwardIcon = "fa-unlock";

      if (router.routerHasUpnpNAT && router.routerHasNatPMP) {
        portForwardIconColor = "bg-warning";
        portForwardTitle = intl__default["default"].get('routercheck_unprotectedboth');
        portForwardDesc = intl__default["default"].get('routercheck_unprotectedboth_description');
      } else if (router.routerHasUpnpNAT) {
        portForwardIconColor = "bg-warning";
        portForwardTitle = intl__default["default"].get('routercheck_unprotectedupnp');
        portForwardDesc = intl__default["default"].get('routercheck_unprotectedupnp_description');
      } else if (router.routerHasNatPMP) {
        portForwardIconColor = "bg-warning";
        portForwardTitle = intl__default["default"].get('routercheck_unprotectednatpmp');
        portForwardDesc = intl__default["default"].get('routercheck_unprotectednatpmp_description');
      } else {
        portForwardIconColor = "bg-success";
        portForwardIcon = "fa-lock";
        portForwardTitle = intl__default["default"].get('routercheck_protected');
        portForwardDesc = intl__default["default"].get('routercheck_protected_description');
      }

      var topologyIcon, topologyTitle, topologyDesc;

      if (router.topology === TOPOLOGY_PUBLICINTERNET) {
        topologyIcon = "fa-globe";
        topologyTitle = intl__default["default"].get('routercheck_publicip');
        topologyDesc = intl__default["default"].get('routercheck_publicip_description');
      } else if (router.topology === TOPOLOGY_WAN) {
        topologyIcon = "fa-link";
        topologyTitle = intl__default["default"].get('routercheck_wan');
        topologyDesc = intl__default["default"].get('routercheck_wan_description');
      } else if (router.topology === TOPOLOGY_UNKNOWN || !router.topology) {
        topologyIcon = "fa-question";
        topologyTitle = intl__default["default"].get('routercheck_unknown');
        topologyDesc = intl__default["default"].get('routercheck_unknown_description');
      }

      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "card-title mb-2"
      }, intl__default["default"].get('routercheck_your_setup_title')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-2 mt-1"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar avatar-circle " + portForwardIconColor + " text-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "text-white py-3 fa fa-fw " + portForwardIcon
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-10"
      }, /*#__PURE__*/React__default["default"].createElement("h6", {
        className: "d-block text-charcoal mt-2"
      }, portForwardTitle), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block text-secondary small"
      }, portForwardDesc))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-2 mt-1"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "avatar avatar-circle bg-soft-secondary text-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "text-white py-3 fa fa-fw " + topologyIcon
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-lg-10"
      }, /*#__PURE__*/React__default["default"].createElement("h6", {
        className: "d-block text-charcoal mt-2"
      }, topologyTitle), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block text-secondary small"
      }, topologyDesc), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block text-secondary small mt-2"
      }, router.topologyAddress))));
    }
  }]);

  return RouterSetupInfoPanel;
}(React.Component);
RouterSetupInfoPanel.propTypes = {
  router: PropTypes__default["default"].object
};

var AUTOMATIC = {
	profile: "Automatic",
	name: "automatic",
	caption: "Automatic",
	id: "dt_generic",
	group: "Automatic"
};
var STB = {
	profile: "DigitalMedia",
	name: "stb",
	caption: "Cable Box",
	id: "dt_stb",
	group: "Audio & Video"
};
var PRINT = {
	profile: "IT",
	name: "scanner",
	caption: "Scanner",
	id: "dt_scanner",
	group: "Home & Office"
};
var SLEEP = {
	profile: "SmartHome",
	name: "sleep",
	caption: "Sleep Tech",
	id: "dt_sleep",
	group: "Smart Home"
};
var NASACCESS = {
	profile: "IT",
	name: "vpn",
	caption: "VPN",
	id: "dt_vpn",
	group: "Network"
};
var SPRINKLER = {
	profile: "SmartHome",
	name: "sprinkler",
	caption: "Sprinkler",
	id: "dt_sprinkler",
	group: "Smart Home"
};
var TAPE = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var UNDEFINED = {
	profile: "",
	name: "undefined",
	caption: "",
	id: "dt_undefined",
	group: ""
};
var APPLIANCE = {
	profile: "SmartHome",
	name: "appliance",
	caption: "Smart Appliance",
	id: "dt_appliance",
	group: "Smart Home"
};
var NETWORK_APPLIANCE = {
	profile: "IT",
	name: "network_appliance",
	caption: "Network Appliance",
	id: "dt_network_appliance",
	group: "Network"
};
var PROXY_SERVER = {
	profile: "IT",
	name: "proxy_server",
	caption: "Proxy Server",
	id: "dt_proxy_server",
	group: "Server"
};
var MAIL_SERVER = {
	profile: "IT",
	name: "mail_server",
	caption: "Mail Server",
	id: "dt_mail_server",
	group: "Server"
};
var GAME_CONSOLE = {
	profile: "Gaming",
	name: "game_console",
	caption: "Game Console",
	id: "dt_game_console",
	group: "Audio & Video"
};
var FIREWALL = {
	profile: "IT",
	name: "firewall",
	caption: "Firewall",
	id: "dt_firewall",
	group: "Network"
};
var BELL = {
	profile: "SmartHome",
	name: "bell",
	caption: "Doorbell",
	id: "dt_bell",
	group: "Smart Home"
};
var FRIDGE = {
	profile: "SmartHome",
	name: "fridge",
	caption: "Smart Fridge",
	id: "dt_fridge",
	group: "Smart Home"
};
var WIFI_EXTENDER = {
	profile: "Networking",
	name: "wifi_extender",
	caption: "Wi-Fi Extender",
	id: "dt_wifi_extender",
	group: "Network"
};
var EXPANSION_CARD = {
	profile: "IT",
	name: "circuit_card",
	caption: "Circuit Board",
	id: "dt_circuit_card",
	group: "Engineering"
};
var IPOD = {
	profile: "DigitalMedia",
	name: "ipod",
	caption: "MP3 Player",
	id: "dt_ipod",
	group: "Mobile"
};
var PHOTOS = {
	profile: "DigitalMedia",
	name: "photos",
	caption: "Photo Display",
	id: "dt_photos",
	group: "Audio & Video"
};
var PHOTO_CAMERA = {
	profile: "DigitalMedia",
	name: "photo_camera",
	caption: "Photo Camera",
	id: "dt_photo_camera",
	group: "Audio & Video"
};
var STREAMING_DONGLE = {
	profile: "DigitalMedia",
	name: "streaming_dongle",
	caption: "Streaming Dongle",
	id: "dt_streaming_dongle",
	group: "Audio & Video"
};
var VOLUME = {
	profile: "SmartHome",
	name: "sensor",
	caption: "Sensor",
	id: "dt_sensor",
	group: "Smart Home"
};
var ROUTER = {
	profile: "Networking",
	name: "router",
	caption: "Router",
	id: "dt_router",
	group: "Network"
};
var SOUND_SYSTEM = {
	profile: "DigitalMedia",
	name: "sound_system",
	caption: "AV Receiver",
	id: "dt_sound_system",
	group: "Audio & Video"
};
var CAMERA = {
	profile: "DigitalMedia",
	name: "photo_camera",
	caption: "Photo Camera",
	id: "dt_photo_camera",
	group: "Audio & Video"
};
var SENSOR = {
	profile: "SmartHome",
	name: "sensor",
	caption: "Sensor",
	id: "dt_sensor",
	group: "Smart Home"
};
var CONTROL_PANEL = {
	profile: "SmartHome",
	name: "control_panel",
	caption: "Touch Panel",
	id: "dt_control_panel",
	group: "Smart Home"
};
var DOMAIN_SERVER = {
	profile: "IT",
	name: "domain_server",
	caption: "Domain Server",
	id: "dt_domain_server",
	group: "Server"
};
var SURVEILLANCE_CAMERA = {
	profile: "Protection",
	name: "surveillance_camera",
	caption: "IP Camera",
	id: "dt_surveillance_camera",
	group: "Smart Home"
};
var AVRECEIVER = {
	profile: "DigitalMedia",
	name: "sound_system",
	caption: "AV Receiver",
	id: "dt_sound_system",
	group: "Audio & Video"
};
var DATABASE = {
	profile: "IT",
	name: "database",
	caption: "Database",
	id: "dt_database",
	group: "Server"
};
var POS = {
	profile: "Business",
	name: "pos",
	caption: "Point of Sale",
	id: "dt_pos",
	group: "Home & Office"
};
var ETHERNETPLUG = {
	profile: "Networking",
	name: "poe_plug",
	caption: "PoE Switch",
	id: "dt_poe_plug",
	group: "Network"
};
var WEB = {
	profile: "IT",
	name: "web_server",
	caption: "Web Server",
	id: "dt_web_server",
	group: "Server"
};
var MOTIONDETECTOR = {
	profile: "Protection",
	name: "motion_detector",
	caption: "Motion Detector",
	id: "dt_motion_detector",
	group: "Smart Home"
};
var PET_MONITOR = {
	profile: "SmartHome",
	name: "pet_monitor",
	caption: "Pet Monitor",
	id: "dt_pet_monitor",
	group: "Smart Home"
};
var MEDIA_PLAYER = {
	profile: "DigitalMedia",
	name: "media_player",
	caption: "Media Player",
	id: "dt_media_player",
	group: "Audio & Video"
};
var ACCESSPOINT = {
	profile: "Networking",
	name: "wifi_extender",
	caption: "Wi-Fi Extender",
	id: "dt_wifi_extender",
	group: "Network"
};
var CLOCK = {
	profile: "SmartHome",
	name: "clock",
	caption: "Clock",
	id: "dt_clock",
	group: "Home & Office"
};
var WIFI = {
	profile: "Networking",
	name: "wifi",
	caption: "Wi-Fi",
	id: "dt_wifi",
	group: "Network"
};
var TOY = {
	profile: "SmartHome",
	name: "toy",
	caption: "Toy",
	id: "dt_toy",
	group: "Smart Home"
};
var ARDUINO = {
	profile: "IT",
	name: "arduino",
	caption: "Arduino",
	id: "dt_arduino",
	group: "Engineering"
};
var TERMINAL = {
	profile: "IT",
	name: "terminal",
	caption: "Terminal",
	id: "dt_terminal",
	group: "Server"
};
var HEALTH_MONITOR = {
	profile: "SmartHome",
	name: "health_monitor",
	caption: "Health Monitor",
	id: "dt_health_monitor",
	group: "Smart Home"
};
var DOMAIN = {
	profile: "IT",
	name: "domain_server",
	caption: "Domain Server",
	id: "dt_domain_server",
	group: "Server"
};
var EBOOK = {
	profile: "DigitalMedia",
	name: "ereader",
	caption: "eBook Reader",
	id: "dt_ereader",
	group: "Mobile"
};
var WATCH = {
	profile: "Personal",
	name: "watch",
	caption: "Smart Watch",
	id: "dt_watch",
	group: "Mobile"
};
var CLEANER = {
	profile: "SmartHome",
	name: "cleaner",
	caption: "Smart Cleaner",
	id: "dt_cleaner",
	group: "Smart Home"
};
var TELEVISION = {
	profile: "DigitalMedia",
	name: "television",
	caption: "Television",
	id: "dt_television",
	group: "Audio & Video"
};
var GLASSES = {
	profile: "Personal",
	name: "wearable",
	caption: "Wearable",
	id: "dt_wearable",
	group: "Mobile"
};
var ENERGYMETER = {
	profile: "SmartHome",
	name: "smart_meter",
	caption: "Smart Meter",
	id: "dt_smart_meter",
	group: "Smart Home"
};
var SMALL_CELL = {
	profile: "IT",
	name: "small_cell",
	caption: "Small Cell",
	id: "dt_small_cell",
	group: "Network"
};
var INBOX = {
	profile: "IT",
	name: "mail_server",
	caption: "Mail Server",
	id: "dt_mail_server",
	group: "Server"
};
var SMART_CONTROLLER = {
	profile: "SmartHome",
	name: "smart_controller",
	caption: "Controller",
	id: "dt_smart_controller",
	group: "Smart Home"
};
var MEDIA_SERVER = {
	profile: "DigitalMedia",
	name: "media_player",
	caption: "Media Player",
	id: "dt_media_player",
	group: "Audio & Video"
};
var WALLPLUG = {
	profile: "SmartHome",
	name: "smart_plug",
	caption: "Smart Plug",
	id: "dt_smart_plug",
	group: "Smart Home"
};
var VIDEO_CAMERA = {
	profile: "DigitalMedia",
	name: "photo_camera",
	caption: "Photo Camera",
	id: "dt_photo_camera",
	group: "Audio & Video"
};
var FILE = {
	profile: "IT",
	name: "file_server",
	caption: "File Server",
	id: "dt_file_server",
	group: "Server"
};
var PROJECTOR = {
	profile: "DigitalMedia",
	name: "projector",
	caption: "Projector",
	id: "dt_projector",
	group: "Audio & Video"
};
var MUSIC = {
	profile: "DigitalMedia",
	name: "music",
	caption: "Audio Player",
	id: "dt_music",
	group: "Audio & Video"
};
var SMART_PLUG = {
	profile: "SmartHome",
	name: "smart_plug",
	caption: "Smart Plug",
	id: "dt_smart_plug",
	group: "Smart Home"
};
var WEATHER = {
	profile: "SmartHome",
	name: "weather",
	caption: "Weather Station",
	id: "dt_weather",
	group: "Smart Home"
};
var IMAC = {
	profile: "Personal",
	name: "desktop",
	caption: "Desktop",
	id: "dt_desktop",
	group: "Home & Office"
};
var NASSTORAGE = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var USB = {
	profile: "IT",
	name: "usb",
	caption: "USB",
	id: "dt_usb",
	group: "Network"
};
var LOUDSPEAKER = {
	profile: "DigitalMedia",
	name: "loudspeaker",
	caption: "Speaker/Amp",
	id: "dt_loudspeaker",
	group: "Audio & Video"
};
var DESKTOP = {
	profile: "Personal",
	name: "desktop",
	caption: "Desktop",
	id: "dt_desktop",
	group: "Home & Office"
};
var SOLAR_PANEL = {
	profile: "SmartHome",
	name: "solar_panel",
	caption: "Solar Panel",
	id: "dt_solar_panel",
	group: "Smart Home"
};
var KEY_LOCK = {
	profile: "SmartHome",
	name: "key_lock",
	caption: "Smart Lock",
	id: "dt_key_lock",
	group: "Smart Home"
};
var MODEM = {
	profile: "Networking",
	name: "modem",
	caption: "Modem",
	id: "dt_modem",
	group: "Network"
};
var RFID = {
	profile: "IT",
	name: "rfid",
	caption: "RFID Tag",
	id: "dt_rfid",
	group: "Engineering"
};
var TABLET = {
	profile: "Personal",
	name: "tablet",
	caption: "Tablet",
	id: "dt_tablet",
	group: "Mobile"
};
var SCANNER = {
	profile: "IT",
	name: "scanner",
	caption: "Scanner",
	id: "dt_scanner",
	group: "Home & Office"
};
var BABY_MONITOR = {
	profile: "Protection",
	name: "baby_monitor",
	caption: "Baby Monitor",
	id: "dt_baby_monitor",
	group: "Smart Home"
};
var POWER_SYSTEM = {
	profile: "SmartHome",
	name: "power_system",
	caption: "Power System",
	id: "dt_power_system",
	group: "Smart Home"
};
var WEARABLE = {
	profile: "Personal",
	name: "wearable",
	caption: "Wearable",
	id: "dt_wearable",
	group: "Mobile"
};
var RADIO = {
	profile: "DigitalMedia",
	name: "radio",
	caption: "Radio",
	id: "dt_radio",
	group: "Audio & Video"
};
var VIRTUAL_MACHINE = {
	profile: "IT",
	name: "virtual_machine",
	caption: "Virtual Machine",
	id: "dt_virtual_machine",
	group: "Server"
};
var AIR_CONDITIONER = {
	profile: "SmartHome",
	name: "heating",
	caption: "HVAC",
	id: "dt_heating",
	group: "Smart Home"
};
var MOBILE = {
	profile: "Personal",
	name: "mobile",
	caption: "Mobile",
	id: "dt_mobile",
	group: "Mobile"
};
var TV = {
	profile: "DigitalMedia",
	name: "television",
	caption: "Television",
	id: "dt_television",
	group: "Audio & Video"
};
var ALARM = {
	profile: "Protection",
	name: "alarm",
	caption: "Alarm",
	id: "dt_alarm",
	group: "Smart Home"
};
var CIRCUIT_CARD = {
	profile: "IT",
	name: "circuit_card",
	caption: "Circuit Board",
	id: "dt_circuit_card",
	group: "Engineering"
};
var BARCODE = {
	profile: "Business",
	name: "barcode",
	caption: "Barcode Scanner",
	id: "dt_barcode",
	group: "Home & Office"
};
var MICROPHONE = {
	profile: "DigitalMedia",
	name: "microphone",
	caption: "Mic",
	id: "dt_microphone",
	group: "Audio & Video"
};
var EMAIL = {
	profile: "IT",
	name: "mail_server",
	caption: "Mail Server",
	id: "dt_mail_server",
	group: "Server"
};
var POE_PLUG = {
	profile: "Networking",
	name: "poe_plug",
	caption: "PoE Switch",
	id: "dt_poe_plug",
	group: "Network"
};
var SMART_METER = {
	profile: "SmartHome",
	name: "smart_meter",
	caption: "Smart Meter",
	id: "dt_smart_meter",
	group: "Smart Home"
};
var STEAMING = {
	profile: "DigitalMedia",
	name: "stb",
	caption: "Cable Box",
	id: "dt_stb",
	group: "Audio & Video"
};
var BACKUP = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var NAS_STORAGE = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var MAIL = {
	profile: "IT",
	name: "mail_server",
	caption: "Mail Server",
	id: "dt_mail_server",
	group: "Server"
};
var SMALLCELL = {
	profile: "IT",
	name: "small_cell",
	caption: "Small Cell",
	id: "dt_small_cell",
	group: "Network"
};
var MEDIA = {
	profile: "DigitalMedia",
	name: "media_player",
	caption: "Media Player",
	id: "dt_media_player",
	group: "Audio & Video"
};
var MEDIAPLAYER = {
	profile: "DigitalMedia",
	name: "media_player",
	caption: "Media Player",
	id: "dt_media_player",
	group: "Audio & Video"
};
var WEBCAM = {
	profile: "Protection",
	name: "surveillance_camera",
	caption: "IP Camera",
	id: "dt_surveillance_camera",
	group: "Smart Home"
};
var SCALE = {
	profile: "SmartHome",
	name: "scale",
	caption: "Scale",
	id: "dt_scale",
	group: "Smart Home"
};
var HEALTH = {
	profile: "SmartHome",
	name: "health_monitor",
	caption: "Health Monitor",
	id: "dt_health_monitor",
	group: "Smart Home"
};
var FINGBOX = {
	profile: "SmartHome",
	name: "fingbox",
	caption: "Fingbox",
	id: "dt_fingbox",
	group: "Smart Home"
};
var HARDDISK = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var GATEWAY = {
	profile: "Networking",
	name: "gateway",
	caption: "Gateway",
	id: "dt_gateway",
	group: "Network"
};
var PROCESSOR = {
	profile: "IT",
	name: "processor",
	caption: "Processing Unit",
	id: "dt_processor",
	group: "Engineering"
};
var LIGHT = {
	profile: "SmartHome",
	name: "light",
	caption: "Light",
	id: "dt_light",
	group: "Smart Home"
};
var IPAD = {
	profile: "Personal",
	name: "tablet",
	caption: "Tablet",
	id: "dt_tablet",
	group: "Mobile"
};
var RASPBERRY = {
	profile: "IT",
	name: "raspberry",
	caption: "Raspberry",
	id: "dt_raspberry",
	group: "Engineering"
};
var DISCPLAYER = {
	profile: "DigitalMedia",
	name: "disc_player",
	caption: "Disc Player",
	id: "dt_disc_player",
	group: "Audio & Video"
};
var RAID = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var EREADER = {
	profile: "DigitalMedia",
	name: "ereader",
	caption: "eBook Reader",
	id: "dt_ereader",
	group: "Mobile"
};
var VOICEMAIL = {
	profile: "IT",
	name: "phone",
	caption: "IP Phone",
	id: "dt_phone",
	group: "Home & Office"
};
var SMART_HOME = {
	profile: "SmartHome",
	name: "smart_home",
	caption: "Smart Device",
	id: "dt_smart_home",
	group: "Smart Home"
};
var GENERIC = {
	profile: "",
	name: "generic",
	caption: "Generic",
	id: "dt_generic",
	group: "Mobile"
};
var LAPTOP = {
	profile: "Personal",
	name: "laptop",
	caption: "Laptop",
	id: "dt_laptop",
	group: "Home & Office"
};
var CAR = {
	profile: "",
	name: "car",
	caption: "Car",
	id: "dt_car",
	group: "Mobile"
};
var CONSOLE = {
	profile: "Gaming",
	name: "game_console",
	caption: "Game Console",
	id: "dt_game_console",
	group: "Audio & Video"
};
var SWITCH = {
	profile: "Networking",
	name: "switch",
	caption: "Switch",
	id: "dt_switch",
	group: "Network"
};
var WASHER = {
	profile: "SmartHome",
	name: "washer",
	caption: "Smart Washer",
	id: "dt_washer",
	group: "Smart Home"
};
var REMOTE_CONTROL = {
	profile: "DigitalMedia",
	name: "remote_control",
	caption: "Remote Control",
	id: "dt_remote_control",
	group: "Audio & Video"
};
var COMMUNICATION = {
	profile: "IT",
	name: "communication",
	caption: "Communication",
	id: "dt_communication",
	group: "Server"
};
var MOTION_DETECTOR = {
	profile: "Protection",
	name: "motion_detector",
	caption: "Motion Detector",
	id: "dt_motion_detector",
	group: "Smart Home"
};
var DOMOTZ_BOX = {
	profile: "Networking",
	name: "domotz_box",
	caption: "Domotz Box",
	id: "dt_domotz_box",
	group: "Smart Home"
};
var SAN = {
	profile: "IT",
	name: "nas_storage",
	caption: "NAS",
	id: "dt_nas_storage",
	group: "Network"
};
var PROXY = {
	profile: "IT",
	name: "proxy_server",
	caption: "Proxy Server",
	id: "dt_proxy_server",
	group: "Server"
};
var GARAGE = {
	profile: "SmartHome",
	name: "garage",
	caption: "Garage Door",
	id: "dt_garage",
	group: "Smart Home"
};
var CLOUD = {
	profile: "IT",
	name: "cloud",
	caption: "Cloud",
	id: "dt_cloud",
	group: "Network"
};
var PHONE = {
	profile: "IT",
	name: "phone",
	caption: "IP Phone",
	id: "dt_phone",
	group: "Home & Office"
};
var PRESSURE = {
	profile: "SmartHome",
	name: "sensor",
	caption: "Sensor",
	id: "dt_sensor",
	group: "Smart Home"
};
var WEB_SERVER = {
	profile: "IT",
	name: "web_server",
	caption: "Web Server",
	id: "dt_web_server",
	group: "Server"
};
var VPN = {
	profile: "IT",
	name: "vpn",
	caption: "VPN",
	id: "dt_vpn",
	group: "Network"
};
var SERVER = {
	profile: "IT",
	name: "server",
	caption: "Server",
	id: "dt_server",
	group: "Server"
};
var COLLABORATION = {
	profile: "IT",
	name: "communication",
	caption: "Communication",
	id: "dt_communication",
	group: "Server"
};
var GAMECONSOLE = {
	profile: "Gaming",
	name: "game_console",
	caption: "Game Console",
	id: "dt_game_console",
	group: "Audio & Video"
};
var DISC_PLAYER = {
	profile: "DigitalMedia",
	name: "disc_player",
	caption: "Disc Player",
	id: "dt_disc_player",
	group: "Audio & Video"
};
var VOICE_CONTROL = {
	profile: "DigitalMedia",
	name: "voice_control",
	caption: "Voice Control",
	id: "dt_voice_control",
	group: "Smart Home"
};
var BATTERY = {
	profile: "IT",
	name: "battery",
	caption: "UPS",
	id: "dt_battery",
	group: "Network"
};
var ROBOT = {
	profile: "SmartHome",
	name: "robot",
	caption: "Robot",
	id: "dt_robot",
	group: "Smart Home"
};
var SATELLITE = {
	profile: "DigitalMedia",
	name: "satellite",
	caption: "Satellite",
	id: "dt_satellite",
	group: "Audio & Video"
};
var HUMIDITY = {
	profile: "Protection",
	name: "humidity",
	caption: "Water Sensor",
	id: "dt_humidity",
	group: "Smart Home"
};
var FILE_SERVER = {
	profile: "IT",
	name: "file_server",
	caption: "File Server",
	id: "dt_file_server",
	group: "Server"
};
var HEATING = {
	profile: "SmartHome",
	name: "heating",
	caption: "HVAC",
	id: "dt_heating",
	group: "Smart Home"
};
var PRINTER = {
	profile: "IT",
	name: "printer",
	caption: "Printer",
	id: "dt_printer",
	group: "Home & Office"
};
var COMPUTER = {
	profile: "Personal",
	name: "computer",
	caption: "Computer",
	id: "dt_computer",
	group: "Home & Office"
};
var SURVEILLANCE = {
	profile: "Protection",
	name: "surveillance_camera",
	caption: "IP Camera",
	id: "dt_surveillance_camera",
	group: "Smart Home"
};
var THERMOSTAT = {
	profile: "SmartHome",
	name: "thermostat",
	caption: "Thermostat",
	id: "dt_thermostat",
	group: "Smart Home"
};
var SMOKE = {
	profile: "Protection",
	name: "smoke",
	caption: "Smoke Detector",
	id: "dt_smoke",
	group: "Smart Home"
};
var FAX = {
	profile: "IT",
	name: "printer",
	caption: "Printer",
	id: "dt_printer",
	group: "Home & Office"
};
var INDUSTRIAL = {
	profile: "Business",
	name: "industrial",
	caption: "Industrial Device",
	id: "dt_industrial",
	group: "Industrial"
};
var MEDICAL = {
	profile: "Business",
	name: "medical",
	caption: "Medical Device",
	id: "dt_medical",
	group: "Industrial"
};
var AUTOMOTIVE = {
	profile: "Business",
	name: "automotive",
	caption: "Automotive",
	id: "dt_automotive",
	group: "Industrial"
};
var ENERGY = {
	profile: "Business",
	name: "energy",
	caption: "Energy",
	id: "dt_energy",
	group: "Industrial"
};
var VOIP = {
	profile: "IT",
	name: "voip",
	caption: "VoIP Device",
	id: "dt_voip",
	group: "Home & Office"
};
var CONFERENCING = {
	profile: "IT",
	name: "conferencing",
	caption: "Conferencing",
	id: "dt_conferencing",
	group: "Home & Office"
};
var SECURITY_SYSTEM = {
	profile: "Protection",
	name: "security_system",
	caption: "Security System",
	id: "dt_security_system",
	group: "Smart Home"
};
var FITNESS = {
	profile: "SmartHome",
	name: "fitness",
	caption: "Fitness",
	id: "dt_fitness",
	group: "Smart Home"
};
var POOL = {
	aliases: "",
	profile: "SmartHome",
	name: "pool",
	caption: "Pool",
	id: "dt_pool",
	group: "Smart Home"
};
var DeviceTypes = {
	AUTOMATIC: AUTOMATIC,
	STB: STB,
	PRINT: PRINT,
	SLEEP: SLEEP,
	NASACCESS: NASACCESS,
	SPRINKLER: SPRINKLER,
	TAPE: TAPE,
	UNDEFINED: UNDEFINED,
	APPLIANCE: APPLIANCE,
	NETWORK_APPLIANCE: NETWORK_APPLIANCE,
	PROXY_SERVER: PROXY_SERVER,
	MAIL_SERVER: MAIL_SERVER,
	GAME_CONSOLE: GAME_CONSOLE,
	FIREWALL: FIREWALL,
	BELL: BELL,
	FRIDGE: FRIDGE,
	WIFI_EXTENDER: WIFI_EXTENDER,
	EXPANSION_CARD: EXPANSION_CARD,
	IPOD: IPOD,
	PHOTOS: PHOTOS,
	PHOTO_CAMERA: PHOTO_CAMERA,
	STREAMING_DONGLE: STREAMING_DONGLE,
	VOLUME: VOLUME,
	ROUTER: ROUTER,
	SOUND_SYSTEM: SOUND_SYSTEM,
	CAMERA: CAMERA,
	SENSOR: SENSOR,
	CONTROL_PANEL: CONTROL_PANEL,
	DOMAIN_SERVER: DOMAIN_SERVER,
	SURVEILLANCE_CAMERA: SURVEILLANCE_CAMERA,
	AVRECEIVER: AVRECEIVER,
	DATABASE: DATABASE,
	POS: POS,
	ETHERNETPLUG: ETHERNETPLUG,
	WEB: WEB,
	MOTIONDETECTOR: MOTIONDETECTOR,
	PET_MONITOR: PET_MONITOR,
	MEDIA_PLAYER: MEDIA_PLAYER,
	ACCESSPOINT: ACCESSPOINT,
	CLOCK: CLOCK,
	WIFI: WIFI,
	TOY: TOY,
	ARDUINO: ARDUINO,
	TERMINAL: TERMINAL,
	HEALTH_MONITOR: HEALTH_MONITOR,
	DOMAIN: DOMAIN,
	EBOOK: EBOOK,
	WATCH: WATCH,
	CLEANER: CLEANER,
	TELEVISION: TELEVISION,
	GLASSES: GLASSES,
	ENERGYMETER: ENERGYMETER,
	SMALL_CELL: SMALL_CELL,
	INBOX: INBOX,
	SMART_CONTROLLER: SMART_CONTROLLER,
	MEDIA_SERVER: MEDIA_SERVER,
	WALLPLUG: WALLPLUG,
	VIDEO_CAMERA: VIDEO_CAMERA,
	FILE: FILE,
	PROJECTOR: PROJECTOR,
	MUSIC: MUSIC,
	SMART_PLUG: SMART_PLUG,
	WEATHER: WEATHER,
	IMAC: IMAC,
	NASSTORAGE: NASSTORAGE,
	USB: USB,
	LOUDSPEAKER: LOUDSPEAKER,
	DESKTOP: DESKTOP,
	SOLAR_PANEL: SOLAR_PANEL,
	KEY_LOCK: KEY_LOCK,
	MODEM: MODEM,
	RFID: RFID,
	TABLET: TABLET,
	SCANNER: SCANNER,
	BABY_MONITOR: BABY_MONITOR,
	POWER_SYSTEM: POWER_SYSTEM,
	WEARABLE: WEARABLE,
	RADIO: RADIO,
	VIRTUAL_MACHINE: VIRTUAL_MACHINE,
	AIR_CONDITIONER: AIR_CONDITIONER,
	MOBILE: MOBILE,
	TV: TV,
	ALARM: ALARM,
	CIRCUIT_CARD: CIRCUIT_CARD,
	BARCODE: BARCODE,
	MICROPHONE: MICROPHONE,
	EMAIL: EMAIL,
	POE_PLUG: POE_PLUG,
	SMART_METER: SMART_METER,
	STEAMING: STEAMING,
	BACKUP: BACKUP,
	NAS_STORAGE: NAS_STORAGE,
	MAIL: MAIL,
	SMALLCELL: SMALLCELL,
	MEDIA: MEDIA,
	MEDIAPLAYER: MEDIAPLAYER,
	WEBCAM: WEBCAM,
	SCALE: SCALE,
	HEALTH: HEALTH,
	FINGBOX: FINGBOX,
	HARDDISK: HARDDISK,
	GATEWAY: GATEWAY,
	PROCESSOR: PROCESSOR,
	LIGHT: LIGHT,
	IPAD: IPAD,
	RASPBERRY: RASPBERRY,
	DISCPLAYER: DISCPLAYER,
	RAID: RAID,
	EREADER: EREADER,
	VOICEMAIL: VOICEMAIL,
	SMART_HOME: SMART_HOME,
	GENERIC: GENERIC,
	LAPTOP: LAPTOP,
	CAR: CAR,
	CONSOLE: CONSOLE,
	SWITCH: SWITCH,
	WASHER: WASHER,
	REMOTE_CONTROL: REMOTE_CONTROL,
	COMMUNICATION: COMMUNICATION,
	MOTION_DETECTOR: MOTION_DETECTOR,
	DOMOTZ_BOX: DOMOTZ_BOX,
	SAN: SAN,
	PROXY: PROXY,
	GARAGE: GARAGE,
	CLOUD: CLOUD,
	PHONE: PHONE,
	PRESSURE: PRESSURE,
	WEB_SERVER: WEB_SERVER,
	VPN: VPN,
	SERVER: SERVER,
	COLLABORATION: COLLABORATION,
	GAMECONSOLE: GAMECONSOLE,
	DISC_PLAYER: DISC_PLAYER,
	VOICE_CONTROL: VOICE_CONTROL,
	BATTERY: BATTERY,
	ROBOT: ROBOT,
	SATELLITE: SATELLITE,
	HUMIDITY: HUMIDITY,
	FILE_SERVER: FILE_SERVER,
	HEATING: HEATING,
	PRINTER: PRINTER,
	COMPUTER: COMPUTER,
	SURVEILLANCE: SURVEILLANCE,
	THERMOSTAT: THERMOSTAT,
	SMOKE: SMOKE,
	FAX: FAX,
	INDUSTRIAL: INDUSTRIAL,
	MEDICAL: MEDICAL,
	AUTOMOTIVE: AUTOMOTIVE,
	ENERGY: ENERGY,
	VOIP: VOIP,
	CONFERENCING: CONFERENCING,
	SECURITY_SYSTEM: SECURITY_SYSTEM,
	FITNESS: FITNESS,
	POOL: POOL
};

function getDeviceTypeCaption(deviceType) {
  if (!deviceType) return null;
  var devType = DeviceTypes[deviceType];
  if (!devType) return deviceType.charAt(0) + deviceType.toLowerCase().slice(1);
  return devType.caption;
}

var RouterPortMappingTableRow = /*#__PURE__*/function (_PureComponent) {
  _inherits(RouterPortMappingTableRow, _PureComponent);

  var _super = _createSuper(RouterPortMappingTableRow);

  function RouterPortMappingTableRow(props, context) {
    var _this;

    _classCallCheck(this, RouterPortMappingTableRow);

    _this = _super.call(this, props, context);
    _this.onChangePortSelection = _this.onChangePortSelection.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RouterPortMappingTableRow, [{
    key: "onChangePortSelection",
    value: function onChangePortSelection(rowId) {
      if (this.props.onChangePortSelection) {
        this.props.onChangePortSelection(rowId);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          selectionPorts = _this$props.selectionPorts,
          service = _this$props.service,
          index = _this$props.index;
      var isSelected = selectionPorts && index < selectionPorts.length ? selectionPorts[index] : false;
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: "port_row_" + index
      }, /*#__PURE__*/React__default["default"].createElement("td", {
        style: {
          width: "2rem"
        }
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        key: "port_checkbox_" + index,
        type: "checkbox",
        checked: isSelected,
        onChange: function onChange() {
          return _this2.onChangePortSelection(index);
        }
      })), this.renderDevice(service), this.renderDescription(service), this.renderPorts(service), this.renderType(service), this.renderFirstSeenTime(service));
    }
  }, {
    key: "renderFirstSeenTime",
    value: function renderFirstSeenTime(service) {
      var timestamp = service && service.firstSeenTime;
      var longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
      var smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
      return /*#__PURE__*/React__default["default"].createElement("td", null, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, longDate), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, smartDate)));
    }
  }, {
    key: "renderDescription",
    value: function renderDescription(service) {
      return /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("span", null, service.description));
    }
  }, {
    key: "renderDevice",
    value: function renderDevice(service) {
      var deviceType = service.device ? service.device.type : DT_GENERIC;
      var deviceName = service.device && service.device.name ? service.device.name : getDeviceTypeCaption(deviceType);
      var deviceMakeAndModel = service.device ? bestMakeAndModelAsArrayForRouter(service.device) : [];
      return /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start"
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        className: "mx-2",
        type: deviceType
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "flex-grow-1"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block"
      }, deviceName), /*#__PURE__*/React__default["default"].createElement("div", null, deviceMakeAndModel && deviceMakeAndModel.length >= 2 && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small text-secondary"
      }, deviceMakeAndModel[0], " \u2022 ", deviceMakeAndModel[1]), deviceMakeAndModel && deviceMakeAndModel.length === 1 && /*#__PURE__*/React__default["default"].createElement("span", {
        className: "small text-secondary ml-2"
      }, deviceMakeAndModel[0])))));
    }
  }, {
    key: "renderPorts",
    value: function renderPorts(service) {
      var intPort = Number(service.internalPort);
      var extPort = Number(service.externalPort);
      return /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-12"
      }, intl__default["default"].get('routercheck_port_protocol'), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "text-dark ml-2"
      }, service.protocol)), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-12 small d-flex"
      }, intl__default["default"].get('routercheck_port_internal'), /*#__PURE__*/React__default["default"].createElement(Badge, {
        soft: true,
        tint: BADGE_TINT_PRIMARY,
        className: "ml-2",
        text: intPort
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-12 small d-flex"
      }, intl__default["default"].get('routercheck_port_external'), /*#__PURE__*/React__default["default"].createElement(Badge, {
        soft: true,
        tint: BADGE_TINT_PRIMARY,
        className: "ml-2",
        text: extPort
      }))));
    }
  }, {
    key: "renderType",
    value: function renderType(service) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        style: {
          width: "3rem"
        }
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: service.enabled === 'true' ? "fa fa-fw fa-check" : "fa fa-fw fa-times"
      }));
    }
  }]);

  return RouterPortMappingTableRow;
}(React.PureComponent);
RouterPortMappingTableRow.propTypes = {
  service: PropTypes__default["default"].object,
  index: PropTypes__default["default"].number,
  selectionPorts: PropTypes__default["default"].array,
  onChangePortSelection: PropTypes__default["default"].func
};

var RouterPortMappingTable = /*#__PURE__*/function (_PureComponent) {
  _inherits(RouterPortMappingTable, _PureComponent);

  var _super = _createSuper(RouterPortMappingTable);

  function RouterPortMappingTable(props, context) {
    var _this;

    _classCallCheck(this, RouterPortMappingTable);

    _this = _super.call(this, props, context);
    _this.onClosePorts = _this.onClosePorts.bind(_assertThisInitialized(_this));
    _this.onChangePortSelection = _this.onChangePortSelection.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RouterPortMappingTable, [{
    key: "onChangePortSelection",
    value: function onChangePortSelection(rowId) {
      if (this.props.onChangePortSelection) {
        this.props.onChangePortSelection(rowId);
      }
    }
  }, {
    key: "onClosePorts",
    value: function onClosePorts(ports) {
      if (this.props.onClosePorts) {
        this.props.onClosePorts(ports);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          portMappings = _this$props.portMappings,
          selectionPorts = _this$props.selectionPorts;
      var selectedPorts = selectionPorts && selectionPorts.filter(function (s) {
        return s === true;
      }).length || 0;
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center border-bottom pb-3 mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('routercheck_openports_title')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-auto"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        type: BTN_TYPE_OUTLINE,
        tint: BTN_TINT_PRIMARY,
        disabled: selectedPorts === 0,
        action: function action() {
          return _this2.onClosePorts(selectionPorts);
        },
        title: intl__default["default"].get('routercheck_openports_action', {
          ports: selectedPorts
        })
      }))), /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table"
      }, renderRouterPortMappingTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, React__default["default"].Children.toArray(portMappings.map(function (port, index, arr) {
        return /*#__PURE__*/React__default["default"].createElement(RouterPortMappingTableRow, {
          selectionPorts: selectionPorts,
          index: index,
          onChangePortSelection: function onChangePortSelection(rowId) {
            return _this2.onChangePortSelection(rowId);
          },
          service: port
        });
      })))));
    }
  }]);

  return RouterPortMappingTable;
}(React.PureComponent);
RouterPortMappingTable.propTypes = {
  portMappings: PropTypes__default["default"].array,
  selectionPorts: PropTypes__default["default"].array,
  onClosePorts: PropTypes__default["default"].func,
  onChangePortSelection: PropTypes__default["default"].func
};

var RouterDeviceInfoPanel = /*#__PURE__*/function (_Component) {
  _inherits(RouterDeviceInfoPanel, _Component);

  var _super = _createSuper(RouterDeviceInfoPanel);

  function RouterDeviceInfoPanel(props, context) {
    var _this;

    _classCallCheck(this, RouterDeviceInfoPanel);

    _this = _super.call(this, props, context);
    _this.onRouterSelected = _this.onRouterSelected.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RouterDeviceInfoPanel, [{
    key: "onRouterSelected",
    value: function onRouterSelected(router) {
      if (this.props.onRouterSelected) {
        this.props.onRouterSelected(router);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          router = _this$props.router,
          onRouterSelected = _this$props.onRouterSelected;
      var values = [{
        value: intl__default["default"].get('tooltargetbar_mac_address'),
        description: router.getDeviceMacAddress(),
        action: function action() {
          return onRouterSelected(router);
        }
      }, {
        value: intl__default["default"].get('tooltargetbar_ip_address'),
        description: router.getDeviceAddressList()
      }, {
        value: intl__default["default"].get('routercheck_your_router_brand'),
        description: router.getDeviceBestMake()
      }];

      if (router.deviceBestModel) {
        values.push({
          value: router.isFamily ? intl__default["default"].get('routercheck_your_router_family') : intl__default["default"].get('routercheck_your_router_model'),
          description: router.deviceBestModel
        });
      }

      if (!router.isFamily && router.deviceBestFamily) {
        values.push({
          value: intl__default["default"].get('routercheck_your_router_family'),
          description: router.deviceBestFamily
        });
      }

      if (!router.isFamily && router.releaseDate) {
        values.push({
          value: intl__default["default"].get('routercheck_your_router_releasedate'),
          description: router.releaseDate
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(InfoPanel, {
        title: intl__default["default"].get('routercheck_your_router_title'),
        image: router.logoImageUrl,
        values: values
      });
    }
  }]);

  return RouterDeviceInfoPanel;
}(React.Component);
RouterDeviceInfoPanel.propTypes = {
  router: PropTypes__default["default"].object,
  onRouterSelected: PropTypes__default["default"].func
};

var VulnerabilityTestTimelineTableRow = /*#__PURE__*/function (_Component) {
  _inherits(VulnerabilityTestTimelineTableRow, _Component);

  var _super = _createSuper(VulnerabilityTestTimelineTableRow);

  function VulnerabilityTestTimelineTableRow() {
    _classCallCheck(this, VulnerabilityTestTimelineTableRow);

    return _super.apply(this, arguments);
  }

  _createClass(VulnerabilityTestTimelineTableRow, [{
    key: "extractUpnpInfo",
    value: function extractUpnpInfo(netEvent) {
      return netEvent && netEvent.content && netEvent.content.routerInfoAudit && netEvent.content.routerInfoAudit.RouterUpnpInfo;
    }
  }, {
    key: "extractNatInfo",
    value: function extractNatInfo(netEvent) {
      return netEvent && netEvent.content && netEvent.content.routerInfoAudit && netEvent.content.routerInfoAudit.RouterNatInfo;
    } // ----------------------------------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var netEvent = this.props.netEvent;
      return /*#__PURE__*/React__default["default"].createElement("tr", null, this.renderState(netEvent), this.renderTimeCell(netEvent), this.renderDetails(netEvent), this.renderOpenPorts(netEvent), this.renderPortForwarding(netEvent), this.renderType(netEvent));
    }
  }, {
    key: "renderState",
    value: function renderState(netEvent) {
      var natInfo = this.extractNatInfo(netEvent);
      var upnpInfo = this.extractUpnpInfo(netEvent);
      var hasOpenPorts = upnpInfo && upnpInfo.portMappings && upnpInfo.portMappings.length > 0;
      var routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
      var routerHasNatPMP = natInfo && natInfo.extip;
      var state;

      if (hasOpenPorts) {
        state = "danger";
      } else if (routerHasUpnpNAT || routerHasNatPMP) {
        state = "warning";
      } else {
        state = "success";
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(0)
      }, /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
        shape: SI_SHAPE_SHIELD,
        status: state
      }));
    }
  }, {
    key: "renderTimeCell",
    value: function renderTimeCell(netEvent) {
      var timestamp = netEvent && netEvent.timestamp;
      var longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
      var smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(1)
      }, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, longDate), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, smartDate)));
    }
  }, {
    key: "renderDetails",
    value: function renderDetails(netEvent) {
      var natInfo = this.extractNatInfo(netEvent);
      var upnpInfo = this.extractUpnpInfo(netEvent);
      var hasOpenPorts = upnpInfo && upnpInfo.portMappings && upnpInfo.portMappings.length > 0;
      var routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
      var routerHasNatPMP = natInfo && natInfo.extip;
      var state;

      if (hasOpenPorts) {
        state = "danger";
      } else if (routerHasUpnpNAT || routerHasNatPMP) {
        state = "warning";
      } else {
        state = "success";
      }

      var title = intl__default["default"].get('routercheck_toolresult_' + state + '_title');
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(2)
      }, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, title));
    }
  }, {
    key: "renderOpenPorts",
    value: function renderOpenPorts(netEvent) {
      var upnpInfo = this.extractUpnpInfo(netEvent);
      var ports = upnpInfo && upnpInfo.portMappings && upnpInfo.portMappings.length > 0 ? upnpInfo.portMappings : [];
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(3)
      }, /*#__PURE__*/React__default["default"].createElement("div", null, ports.length > 0 ? React__default["default"].Children.toArray(ports.map(function (val) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "mr-2"
        }, val.protocol, /*#__PURE__*/React__default["default"].createElement("small", {
          className: "ml-1"
        }, "(", val.internalPort, " \u27F7 ", val.externalPort, ") "));
      })) : intl__default["default"].get('tooltargetbar_no_open_ports')));
    }
  }, {
    key: "renderPortForwarding",
    value: function renderPortForwarding(netEvent) {
      var natInfo = this.extractNatInfo(netEvent);
      var upnpInfo = this.extractUpnpInfo(netEvent);
      var routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
      var routerHasNatPMP = natInfo && natInfo.extip;
      var portForwardingEnabled = routerHasUpnpNAT || routerHasNatPMP ? intl__default["default"].get('generic_enabled') : intl__default["default"].get('generic_disabled');
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": this.headerForColumn(4)
      }, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, portForwardingEnabled));
    }
  }, {
    key: "renderType",
    value: function renderType(netEvent) {
      var forced = netEvent && netEvent.content && netEvent.content.forced;
      var text = forced === 'true' ? intl__default["default"].get('generic_manual') : intl__default["default"].get('generic_auto');
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("timeline_table_header_type")
      }, /*#__PURE__*/React__default["default"].createElement(Badge, {
        pill: true,
        soft: true,
        tint: BADGE_TINT_PRIMARY,
        text: text
      }));
    }
  }, {
    key: "headerForColumn",
    value: function headerForColumn(idx) {
      if (idx === 0) return intl__default["default"].get("timeline_table_header_state");
      if (idx === 1) return intl__default["default"].get("timeline_table_header_when");
      if (idx === 2) return intl__default["default"].get("timeline_table_header_subject");
      if (idx === 3) return intl__default["default"].get('tooltargetbar_open_ports');
      if (idx === 4) return intl__default["default"].get('timeline_table_header_port');
      if (idx === 5) return intl__default["default"].get('timeline_table_header_type');
      return '';
    }
  }]);

  return VulnerabilityTestTimelineTableRow;
}(React.Component);
VulnerabilityTestTimelineTableRow.propTypes = {
  netEvent: PropTypes__default["default"].object,
  onInspect: PropTypes__default["default"].func,
  onDrillDown: PropTypes__default["default"].func
};

var VulnerabilityTestTimelineTable = /*#__PURE__*/function (_Component) {
  _inherits(VulnerabilityTestTimelineTable, _Component);

  var _super = _createSuper(VulnerabilityTestTimelineTable);

  function VulnerabilityTestTimelineTable(props, context) {
    var _this;

    _classCallCheck(this, VulnerabilityTestTimelineTable);

    _this = _super.call(this, props, context);
    _this.tableId = "vulnerability_test_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(VulnerabilityTestTimelineTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var netEvents = this.props.netEvents;

      if (netEvents) {
        return /*#__PURE__*/React__default["default"].createElement("table", {
          className: "table table-borderless table-striped table-align-middle table-responsive-flip"
        }, renderVulnerabilityTestTimelineTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, netEvents.map(function (netEvent, idx) {
          return /*#__PURE__*/React__default["default"].createElement(VulnerabilityTestTimelineTableRow, {
            key: "".concat(_this2.tableId, "_").concat(idx),
            netEvent: netEvent
          });
        })));
      }

      return /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('internet_no_data_period_timeline'));
    }
  }]);

  return VulnerabilityTestTimelineTable;
}(React.Component);
VulnerabilityTestTimelineTable.propTypes = {
  netEvents: PropTypes__default["default"].array
};

var VulnerabilityTestTimeline = /*#__PURE__*/function (_Component) {
  _inherits(VulnerabilityTestTimeline, _Component);

  var _super = _createSuper(VulnerabilityTestTimeline);

  function VulnerabilityTestTimeline(props, context) {
    var _this;

    _classCallCheck(this, VulnerabilityTestTimeline);

    _this = _super.call(this, props, context);
    _this.tableId = "vulnerability_test_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(VulnerabilityTestTimeline, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          netEvents = _this$props.netEvents,
          maxDays = _this$props.maxDays,
          extra = _this$props.extra;

      if (!netEvents) {
        return '';
      }

      var eventsByDistance = groupEventsByTimeDistance(netEvents, function (evt) {
        return evt.timestamp;
      });

      var ifMaxDaysAtLeast = function ifMaxDaysAtLeast(days) {
        return !maxDays && maxDays !== 0 || maxDays >= days;
      };

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, ifMaxDaysAtLeast(1) && this.renderSection(intl__default["default"].get('relative_today'), eventsByDistance[TIME_DISTANCE_TODAY]), ifMaxDaysAtLeast(2) && this.renderSection(intl__default["default"].get('relative_yesterday'), eventsByDistance[TIME_DISTANCE_YESTERDAY]), ifMaxDaysAtLeast(7) && this.renderSection(intl__default["default"].get('relative_current_week'), eventsByDistance[TIME_DISTANCE_7D]), ifMaxDaysAtLeast(14) && this.renderSection(intl__default["default"].get('relative_week_long', {
        amount: 2
      }), eventsByDistance[TIME_DISTANCE_14D]), ifMaxDaysAtLeast(21) && this.renderSection(intl__default["default"].get('relative_week_long', {
        amount: 3
      }), eventsByDistance[TIME_DISTANCE_21D]), !maxDays && maxDays !== 0 && this.renderSection(intl__default["default"].get('relative_older'), eventsByDistance[TIME_DISTANCE_OLDER]), (maxDays === 0 || maxDays === 1) && extra);
    }
  }, {
    key: "renderSection",
    value: function renderSection(title, netEvents) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, title), /*#__PURE__*/React__default["default"].createElement("hr", null), netEvents && netEvents.length > 0 ? /*#__PURE__*/React__default["default"].createElement(VulnerabilityTestTimelineTable, {
        netEvents: netEvents
      }) : /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('timeline_no_event')));
    }
  }]);

  return VulnerabilityTestTimeline;
}(React.Component);
VulnerabilityTestTimeline.propTypes = {
  netEvents: PropTypes__default["default"].array,
  maxDays: PropTypes__default["default"].number,
  extra: PropTypes__default["default"].node
};

var HiddenCameraDeviceTableRow = /*#__PURE__*/function (_Component) {
  _inherits(HiddenCameraDeviceTableRow, _Component);

  var _super = _createSuper(HiddenCameraDeviceTableRow);

  function HiddenCameraDeviceTableRow(props, context) {
    var _this;

    _classCallCheck(this, HiddenCameraDeviceTableRow);

    _this = _super.call(this, props, context);
    _this.onClickDetail = _this.onClickDetail.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(HiddenCameraDeviceTableRow, [{
    key: "onClickDetail",
    value: function onClickDetail(netNode) {
      if (this.props.onClickDetail) {
        this.props.onClickDetail(netNode);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var netNode = this.props.netNode;
      var moreAddresses = netNode.ipAddresses && netNode.ipAddresses.length > 1 ? "+" + (netNode.ipAddresses.length - 1) : "";
      return /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        tint: TINT_DARK,
        className: "mx-2",
        type: netNode.bestType || DT_GENERIC
      })), /*#__PURE__*/React__default["default"].createElement("td", null, netNode.bestName), /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "media align-items-center"
      }, /*#__PURE__*/React__default["default"].createElement("span", null, netNode.ipAddresses[0]), moreAddresses && /*#__PURE__*/React__default["default"].createElement(Badge, {
        soft: true,
        tint: BADGE_TINT_PRIMARY,
        className: "pb-1 ml-1",
        text: moreAddresses
      }))), /*#__PURE__*/React__default["default"].createElement("td", {
        className: "col-4"
      }, netNode.hwAddress), /*#__PURE__*/React__default["default"].createElement("td", {
        className: "col-1 text-right"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: function action() {
          return _this2.onClickDetail(netNode);
        },
        chevron: "fa-arrow-right",
        type: BTN_TYPE_SOFT,
        tint: BTN_TINT_PRIMARY,
        rounded: true,
        className: "mr-2"
      })));
    }
  }]);

  return HiddenCameraDeviceTableRow;
}(React.Component);
HiddenCameraDeviceTableRow.propTypes = {
  netNode: PropTypes__default["default"].object,
  onClickDetail: PropTypes__default["default"].func
};

var HiddenCameraDeviceTable = /*#__PURE__*/function (_Component) {
  _inherits(HiddenCameraDeviceTable, _Component);

  var _super = _createSuper(HiddenCameraDeviceTable);

  function HiddenCameraDeviceTable() {
    _classCallCheck(this, HiddenCameraDeviceTable);

    return _super.apply(this, arguments);
  }

  _createClass(HiddenCameraDeviceTable, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          netNodes = _this$props.netNodes,
          onClickDetail = _this$props.onClickDetail;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "table-responsive"
      }, /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-borderless table-nowrap table-align-center"
      }, renderHiddenCameraDeviceTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, React__default["default"].Children.toArray(netNodes.map(function (netNode) {
        return /*#__PURE__*/React__default["default"].createElement(HiddenCameraDeviceTableRow, {
          netNode: netNode,
          onClickDetail: onClickDetail
        });
      })))));
    }
  }]);

  return HiddenCameraDeviceTable;
}(React.Component);
HiddenCameraDeviceTable.propTypes = {
  netNodes: PropTypes__default["default"].array,
  onClickDetail: PropTypes__default["default"].func
};

var CameraTypesSummaryPanel = /*#__PURE__*/function (_Component) {
  _inherits(CameraTypesSummaryPanel, _Component);

  var _super = _createSuper(CameraTypesSummaryPanel);

  function CameraTypesSummaryPanel() {
    _classCallCheck(this, CameraTypesSummaryPanel);

    return _super.apply(this, arguments);
  }

  _createClass(CameraTypesSummaryPanel, [{
    key: "getNameFromCameraType",
    value: function getNameFromCameraType(type) {
      switch (type) {
        case "SURVEILLANCE_CAMERA":
          return intl__default["default"].get('devicetype_surveillance_camera');

        case "PHOTO_CAMERA":
          return intl__default["default"].get('devicetype_photo_camera');

        case "SECURITY_SYSTEM":
          return intl__default["default"].get('devicetype_security_system');

        case "MOTION_DETECTOR":
          return intl__default["default"].get('devicetype_motion_detector');

        case "BABY_MONITOR":
          return intl__default["default"].get('devicetype_baby_monitor');

        default:
          return '';
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var cameraTypes = this.props.cameraTypes;
      if (!cameraTypes) return "";
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "card-title mb-2"
      }, intl__default["default"].get('findhiddencameras_summary_title')), React__default["default"].Children.toArray(Object.keys(cameraTypes).map(function (key) {
        return _this.renderRow(cameraTypes[key], key);
      })));
    }
  }, {
    key: "renderRow",
    value: function renderRow(cameraInfoForType, deviceType) {
      var currentType = cameraInfoForType;
      var tot = currentType.countKnown + currentType.countUnknown;
      var subtitle = "";
      var iconTint;
      var iconBackgroundTint;
      var statusType;

      if (tot === 0) {
        subtitle = intl__default["default"].get('findhiddencameras_helper_0found');
        iconBackgroundTint = "bg-soft-success";
        statusType = SI_STATUS_SUCCESS;
        iconTint = TINT_SUCCESS;
      } else {
        var totDeviceString = tot === 1 ? intl__default["default"].get('findhiddencameras_helper_totdevice_1found') : intl__default["default"].get('findhiddencameras_helper_totdevice_manyfound', {
          tot: tot
        });

        if (currentType.countUnknown > 0) {
          subtitle = tot === currentType.countUnknown ? intl__default["default"].get('findhiddencameras_helper_totdevice', {
            totDeviceString: totDeviceString
          }) : intl__default["default"].get('findhiddencameras_helper_totdevice_with_unknown', {
            totDeviceString: totDeviceString,
            countUnknown: currentType.countUnknown
          });
          iconBackgroundTint = "bg-soft-danger";
          statusType = SI_STATUS_DANGER;
          iconTint = TINT_DANGER;
        } else {
          subtitle = intl__default["default"].get('findhiddencameras_helper_totdevice', {
            totDeviceString: totDeviceString
          });
          iconBackgroundTint = "bg-soft-success";
          statusType = SI_STATUS_SUCCESS;
          iconTint = TINT_SUCCESS;
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex py-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "flex-shrink-0 mr-4"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "avatar avatar-circle text-center align-items-center p-2 ".concat(iconBackgroundTint)
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        tint: iconTint,
        type: deviceType,
        width: 26,
        height: 26
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "flex-grow-1 mr-4"
      }, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, this.getNameFromCameraType(deviceType)), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "d-block"
      }, subtitle)), /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
        shape: SI_SHAPE_SHIELD,
        status: statusType,
        width: 24,
        height: 24
      })));
    }
  }]);

  return CameraTypesSummaryPanel;
}(React.Component);
CameraTypesSummaryPanel.propTypes = {
  cameraTypes: PropTypes__default["default"].any
};

// https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization

var LastSpeedTestSection = /*#__PURE__*/function (_PureComponent) {
  _inherits(LastSpeedTestSection, _PureComponent);

  var _super = _createSuper(LastSpeedTestSection);

  function LastSpeedTestSection() {
    _classCallCheck(this, LastSpeedTestSection);

    return _super.apply(this, arguments);
  }

  _createClass(LastSpeedTestSection, [{
    key: "render",
    value: function render() {
      var speedTestResult = this.props.speedTestResult;

      if (!speedTestResult) {
        return /*#__PURE__*/React__default["default"].createElement(SummarySection, null, /*#__PURE__*/React__default["default"].createElement("h3", {
          className: "mb-0"
        }, intl__default["default"].get('internet_last_speed_test')), /*#__PURE__*/React__default["default"].createElement("p", {
          className: "mb-3"
        }, intl__default["default"].get('internet_no_data_last_speed_test')));
      }

      var formattedTimestamp = speedTestResult ? formatAbsoluteDate(speedTestResult.timestamp, DATE_FORMAT_LONG) : '';
      var latency = speedTestResult && speedTestResult.rtd ? Number(speedTestResult.rtd).toFixed(1) : 0;
      var locationDownload;
      var locationUpload;

      if (speedTestResult.downloadInfo && speedTestResult.downloadInfo.serverCity && speedTestResult.downloadInfo.serverCountry) {
        locationDownload = intl__default["default"].get('internet_location_server_from', {
          serverCity: speedTestResult.downloadInfo.serverCity,
          serverCountry: speedTestResult.downloadInfo.serverCountry
        });
      }

      if (speedTestResult.uploadInfo && speedTestResult.uploadInfo.serverCity && speedTestResult.uploadInfo.serverCountry) {
        locationUpload = intl__default["default"].get('internet_location_server_to', {
          serverCity: speedTestResult.uploadInfo.serverCity,
          serverCountry: speedTestResult.uploadInfo.serverCountry
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(SummarySection, null, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('internet_last_speed_test')), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-3"
      }, formattedTimestamp), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-lg-flex d-xl-flex d-md-flex d-sm-block justify-content-start align-items-center h-100"
      }, /*#__PURE__*/React__default["default"].createElement(MetricCard, {
        extra: locationDownload,
        bgColor: "bg-soft-success",
        icon: /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          type: GEN_DOWN,
          color: TINT_SUCCESS,
          size: 16
        }),
        metric: formatSpeed(Number(speedTestResult.downloadbps)),
        description: intl__default["default"].get("generic_mbps_download")
      }), /*#__PURE__*/React__default["default"].createElement(MetricCard, {
        extra: locationUpload,
        bgColor: "bg-soft-primary",
        icon: /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          type: GEN_UP,
          color: TINT_PRIMARY,
          size: 16
        }),
        metric: formatSpeed(Number(speedTestResult.uploadbps)),
        description: intl__default["default"].get("generic_mbps_upload")
      }), /*#__PURE__*/React__default["default"].createElement(MetricCard, {
        bgColor: "bg-soft-danger",
        extra: locationUpload,
        icon: /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          type: GEN_TREND_UP,
          color: TINT_DANGER,
          size: 16
        }),
        metric: latency,
        description: intl__default["default"].get("generic_ms_latency")
      })));
    }
  }]);

  return LastSpeedTestSection;
}(React.PureComponent);

var data = [
	{
		code: "AD",
		code3: "AND",
		name: "Andorra",
		nameLocal: "Andorra",
		continentCode: "EU",
		timeZone: "Europe/Andorra",
		lat: 42.5,
		lng: 1.5,
		weight: 2326,
		hasRegions: true,
		flagCode: "🇦🇩"
	},
	{
		code: "AE",
		code3: "ARE",
		name: "United Arab Emirates",
		nameLocal: "دولة الإمارات العربية المتحدة",
		urlName: "United-Arab-Emirates",
		urlNameLocal: "United-Arab-Emirates",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Dubai",
		lat: 24,
		lng: 54,
		weight: 57834,
		hasRegions: true,
		flagCode: "🇦🇪"
	},
	{
		code: "AF",
		code3: "AFG",
		name: "Afghanistan",
		nameLocal: "افغانستان",
		urlNameLocal: "Afghanistan",
		continentCode: "AS",
		timeZone: "Asia/Kabul",
		lat: 33,
		lng: 65,
		weight: 1357,
		hasRegions: true,
		flagCode: "🇦🇫"
	},
	{
		code: "AG",
		code3: "ATG",
		name: "Antigua and Barbuda",
		nameLocal: "Antigua and Barbuda",
		urlName: "Antigua-Barbuda",
		urlNameLocal: "Antigua-Barbuda",
		continentCode: "NA",
		timeZone: "America/Antigua",
		lat: 17.05,
		lng: -61.8,
		weight: 659,
		hasRegions: true,
		flagCode: "🇦🇬"
	},
	{
		code: "AI",
		code3: "AIA",
		name: "Anguilla",
		nameLocal: "Anguilla",
		continentCode: "NA",
		lat: 18.25,
		lng: -63.16666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇦🇮"
	},
	{
		code: "AL",
		code3: "ALB",
		name: "Albania",
		nameLocal: "Shqipëria",
		urlNameLocal: "Shqiperia",
		continentCode: "EU",
		languageCode: "sq",
		timeZone: "Europe/Tirane",
		lat: 41,
		lng: 20,
		weight: 6344,
		hasRegions: true,
		flagCode: "🇦🇱"
	},
	{
		code: "AM",
		code3: "ARM",
		name: "Armenia",
		nameLocal: "Հայաստան",
		urlNameLocal: "Armenia",
		continentCode: "AS",
		timeZone: "Asia/Yerevan",
		lat: 40,
		lng: 45,
		weight: 9011,
		hasRegions: true,
		flagCode: "🇦🇲"
	},
	{
		code: "AO",
		code3: "AGO",
		name: "Angola",
		nameLocal: "Angola",
		continentCode: "AF",
		timeZone: "Africa/Luanda",
		lat: -12.5,
		lng: 18.5,
		weight: 6369,
		hasRegions: true,
		flagCode: "🇦🇴"
	},
	{
		code: "AQ",
		code3: "ATA",
		name: "Antarctica",
		continentCode: "AN",
		lat: -90,
		lng: 0,
		weight: 1,
		hasRegions: false,
		flagCode: "🇦🇶"
	},
	{
		code: "AR",
		code3: "ARG",
		name: "Argentina",
		nameLocal: "Argentina",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Argentina/Salta",
		lat: -34,
		lng: -64,
		weight: 343595,
		hasRegions: true,
		flagCode: "🇦🇷"
	},
	{
		code: "AS",
		code3: "ASM",
		name: "American Samoa",
		nameLocal: "Sāmoa Amelika",
		urlName: "American-Samoa",
		urlNameLocal: "Samoa-Amelika",
		continentCode: "OC",
		timeZone: "Pacific/Pago_Pago",
		lat: -14.33333333,
		lng: -170,
		weight: 313,
		hasRegions: true,
		flagCode: "🇦🇸"
	},
	{
		code: "AT",
		code3: "AUT",
		name: "Austria",
		nameLocal: "Österreich",
		urlNameLocal: "Osterreich",
		continentCode: "EU",
		languageCode: "de",
		timeZone: "Europe/Vienna",
		lat: 47.33333333,
		lng: 13.33333333,
		weight: 230784,
		hasRegions: true,
		flagCode: "🇦🇹"
	},
	{
		code: "AU",
		code3: "AUS",
		name: "Australia",
		nameLocal: "Australia",
		continentCode: "OC",
		languageCode: "en",
		timeZone: "Australia/Perth",
		lat: -27,
		lng: 133,
		weight: 2003768,
		hasRegions: true,
		flagCode: "🇦🇺"
	},
	{
		code: "AW",
		code3: "ABW",
		name: "Aruba",
		nameLocal: "Aruba",
		continentCode: "NA",
		timeZone: "America/Aruba",
		lat: 12.5,
		lng: -69.96666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇦🇼"
	},
	{
		code: "AX",
		code3: "ALA",
		name: "Aland Islands",
		nameLocal: "Åland",
		urlName: "Aland-Islands",
		urlNameLocal: "Aland",
		continentCode: "EU",
		timeZone: "Europe/Mariehamn",
		lat: 60.116667,
		lng: 19.9,
		weight: 1,
		hasRegions: false,
		flagCode: "🇦🇽"
	},
	{
		code: "AZ",
		code3: "AZE",
		name: "Azerbaijan",
		nameLocal: "Азербайджан",
		urlNameLocal: "Azerbaijan",
		continentCode: "AS",
		timeZone: "Asia/Baku",
		lat: 40.5,
		lng: 47.5,
		weight: 8388,
		hasRegions: true,
		flagCode: "🇦🇿"
	},
	{
		code: "BA",
		code3: "BIH",
		name: "Bosnia and Herzegovina",
		nameLocal: "Боснa и Херцеговина",
		urlName: "Bosnia-Herzegovina",
		urlNameLocal: "Bosnia-Herzegovina",
		continentCode: "EU",
		languageCode: "sr",
		timeZone: "Europe/Sarajevo",
		lat: 44,
		lng: 18,
		weight: 23046,
		hasRegions: true,
		flagCode: "🇧🇦"
	},
	{
		code: "BB",
		code3: "BRB",
		name: "Barbados",
		nameLocal: "Barbados",
		continentCode: "NA",
		timeZone: "America/Barbados",
		lat: 13.16666666,
		lng: -59.53333333,
		weight: 1812,
		hasRegions: true,
		flagCode: "🇧🇧"
	},
	{
		code: "BD",
		code3: "BGD",
		name: "Bangladesh",
		nameLocal: "বাংলাদেশ",
		urlNameLocal: "Bangladesh",
		continentCode: "AS",
		timeZone: "Asia/Dhaka",
		lat: 24,
		lng: 90,
		weight: 35541,
		hasRegions: true,
		flagCode: "🇧🇩"
	},
	{
		code: "BE",
		code3: "BEL",
		name: "Belgium",
		nameLocal: "Belgique",
		continentCode: "EU",
		languageCode: "fr",
		timeZone: "Europe/Brussels",
		lat: 50.83333333,
		lng: 4,
		weight: 416267,
		hasRegions: true,
		flagCode: "🇧🇪"
	},
	{
		code: "BF",
		code3: "BFA",
		name: "Burkina Faso",
		nameLocal: "Burkina Faso",
		urlName: "Burkina-Faso",
		urlNameLocal: "Burkina-Faso",
		continentCode: "AF",
		timeZone: "Africa/Ouagadougou",
		lat: 13,
		lng: -2,
		weight: 2420,
		hasRegions: true,
		flagCode: "🇧🇫"
	},
	{
		code: "BG",
		code3: "BGR",
		name: "Bulgaria",
		nameLocal: "България",
		urlNameLocal: "Bulgaria",
		continentCode: "EU",
		languageCode: "bg",
		timeZone: "Europe/Sofia",
		lat: 43,
		lng: 25,
		weight: 95712,
		hasRegions: true,
		flagCode: "🇧🇬"
	},
	{
		code: "BH",
		code3: "BHR",
		name: "Bahrain",
		nameLocal: "‏البحرين",
		urlNameLocal: "Bahrain",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Bahrain",
		lat: 26,
		lng: 50.55,
		weight: 18240,
		hasRegions: true,
		flagCode: "🇧🇭"
	},
	{
		code: "BI",
		code3: "BDI",
		name: "Burundi",
		nameLocal: "Burundi",
		continentCode: "AF",
		timeZone: "Africa/Bujumbura",
		lat: -3.5,
		lng: 30,
		weight: 289,
		hasRegions: true,
		flagCode: "🇧🇮"
	},
	{
		code: "BJ",
		code3: "BEN",
		name: "Benin",
		nameLocal: "Bénin",
		urlNameLocal: "Benin",
		continentCode: "AF",
		timeZone: "Africa/Porto-Novo",
		lat: 9.5,
		lng: 2.25,
		weight: 804,
		hasRegions: true,
		flagCode: "🇧🇯"
	},
	{
		code: "BL",
		code3: "BLM",
		name: "Saint Barthélemy",
		nameLocal: "Saint-Barthélemy",
		urlName: "Saint-Barthelemy",
		urlNameLocal: "Saint-Barthelemy",
		continentCode: "NA",
		lat: 18.5,
		lng: -63.41666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇧🇱"
	},
	{
		code: "BM",
		code3: "BMU",
		name: "Bermuda",
		nameLocal: "Bermuda",
		continentCode: "NA",
		timeZone: "Atlantic/Bermuda",
		lat: 32.33333333,
		lng: -64.75,
		weight: 1558,
		hasRegions: true,
		flagCode: "🇧🇲"
	},
	{
		code: "BN",
		code3: "BRN",
		name: "Brunei",
		nameLocal: "Negara Brunei Darussalam",
		urlNameLocal: "Negara-Brunei-Darussalam",
		continentCode: "AS",
		timeZone: "Asia/Brunei",
		lat: 4.5,
		lng: 114.66666666,
		weight: 1680,
		hasRegions: true,
		flagCode: "🇧🇳"
	},
	{
		code: "BO",
		code3: "BOL",
		name: "Bolivia",
		nameLocal: "Buliwya",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/La_Paz",
		lat: -17,
		lng: -65,
		weight: 12073,
		hasRegions: true,
		flagCode: "🇧🇴"
	},
	{
		code: "BQ",
		code3: "BES",
		name: "Bonaire, Sint Eustatius and Saba",
		nameLocal: "Caribisch Nederland",
		urlName: "Bonaire",
		urlNameLocal: "Caribisch-Nederland",
		continentCode: "NA",
		timeZone: "PRT",
		lat: 12.18,
		lng: -68.25,
		weight: 1,
		hasRegions: false,
		flagCode: ""
	},
	{
		code: "BR",
		code3: "BRA",
		name: "Brazil",
		nameLocal: "Brasil",
		continentCode: "SA",
		languageCode: "pt",
		timeZone: "America/Sao_Paulo",
		lat: -10,
		lng: -55,
		weight: 1706898,
		hasRegions: true,
		flagCode: "🇧🇷"
	},
	{
		code: "BS",
		code3: "BHS",
		name: "Bahamas",
		nameLocal: "Bahamas",
		continentCode: "NA",
		timeZone: "America/Nassau",
		lat: 24.25,
		lng: -76,
		weight: 3502,
		hasRegions: true,
		flagCode: "🇧🇸"
	},
	{
		code: "BT",
		code3: "BTN",
		name: "Bhutan",
		nameLocal: "འབྲུག་ཡུལ་",
		urlNameLocal: "Bhutan",
		continentCode: "AS",
		timeZone: "Asia/Thimphu",
		lat: 27.5,
		lng: 90.5,
		weight: 583,
		hasRegions: true,
		flagCode: "🇧🇹"
	},
	{
		code: "BV",
		code3: "BVT",
		name: "Bouvet Island",
		nameLocal: "Bouvetøya",
		urlName: "Bouvet-Island",
		urlNameLocal: "Bouvetoya",
		continentCode: "AN",
		lat: -54.43333333,
		lng: 3.4,
		weight: 1,
		hasRegions: false,
		flagCode: "🇧🇻"
	},
	{
		code: "BW",
		code3: "BWA",
		name: "Botswana",
		nameLocal: "Botswana",
		continentCode: "AF",
		timeZone: "Africa/Gaborone",
		lat: -22,
		lng: 24,
		weight: 2336,
		hasRegions: true,
		flagCode: "🇧🇼"
	},
	{
		code: "BY",
		code3: "BLR",
		name: "Belarus",
		nameLocal: "Беларусь",
		urlNameLocal: "Belarus",
		continentCode: "EU",
		languageCode: "be",
		timeZone: "Europe/Minsk",
		lat: 53,
		lng: 28,
		weight: 34337,
		hasRegions: true,
		flagCode: "🇧🇾"
	},
	{
		code: "BZ",
		code3: "BLZ",
		name: "Belize",
		nameLocal: "Belize",
		continentCode: "NA",
		timeZone: "America/Belize",
		lat: 17.25,
		lng: -88.75,
		weight: 2844,
		hasRegions: true,
		flagCode: "🇧🇿"
	},
	{
		code: "CA",
		code3: "CAN",
		name: "Canada",
		nameLocal: "Canada",
		continentCode: "NA",
		languageCode: "en",
		timeZone: "America/Toronto",
		lat: 60,
		lng: -95,
		weight: 1219187,
		hasRegions: true,
		flagCode: "🇨🇦"
	},
	{
		code: "CC",
		code3: "CCK",
		name: "Cocos (Keeling) Islands",
		nameLocal: "Cocos (Keeling) Islands",
		urlName: "Cocos-Islands",
		urlNameLocal: "Cocos-Islands",
		continentCode: "AS",
		lat: -12.5,
		lng: 96.83333333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇨🇨"
	},
	{
		code: "CD",
		code3: "COD",
		name: "The Democratic Republic Of Congo",
		nameLocal: "Republiki ya Kongó Demokratiki",
		urlName: "Democratic-Republic-Congo",
		urlNameLocal: "Republiki-Kongo-Demokratiki",
		continentCode: "AF",
		timeZone: "Africa/Kinshasa",
		lat: 0,
		lng: 25,
		weight: 715,
		hasRegions: true,
		flagCode: "🇨🇩"
	},
	{
		code: "CF",
		code3: "CAF",
		name: "Central African Republic",
		nameLocal: "République centrafricaine",
		urlName: "Central-African-Republic",
		urlNameLocal: "Republique-centrafricaine",
		continentCode: "AF",
		timeZone: "Africa/Bangui",
		lat: 7,
		lng: 21,
		weight: 250,
		hasRegions: true,
		flagCode: "🇨🇫"
	},
	{
		code: "CG",
		code3: "COG",
		name: "Congo",
		nameLocal: "Republíki ya Kongó",
		urlNameLocal: "Republiki-Kongo",
		continentCode: "AF",
		timeZone: "Africa/Brazzaville",
		lat: -1,
		lng: 15,
		weight: 309,
		hasRegions: true,
		flagCode: "🇨🇬"
	},
	{
		code: "CH",
		code3: "CHE",
		name: "Switzerland",
		nameLocal: "Suisse",
		continentCode: "EU",
		languageCode: "de",
		timeZone: "Europe/Zurich",
		lat: 47,
		lng: 8,
		weight: 469783,
		hasRegions: true,
		flagCode: "🇨🇭"
	},
	{
		code: "CI",
		code3: "CIV",
		name: "Côte d'Ivoire",
		nameLocal: "Côte d'Ivoire",
		urlName: "Cote-d-Ivoire",
		urlNameLocal: "Cote-d-Ivoire",
		continentCode: "AF",
		timeZone: "Africa/Abidjan",
		lat: 8,
		lng: -5,
		weight: 13002,
		hasRegions: true,
		flagCode: "🇨🇮"
	},
	{
		code: "CK",
		code3: "COK",
		name: "Cook Islands",
		nameLocal: "Kūki 'Āirani",
		urlName: "Cook-Islands",
		urlNameLocal: "Kuki-Airani",
		continentCode: "OC",
		timeZone: "Pacific/Rarotonga",
		lat: -21.23333333,
		lng: -159.76666666,
		weight: 108,
		hasRegions: true,
		flagCode: "🇨🇰"
	},
	{
		code: "CL",
		code3: "CHL",
		name: "Chile",
		nameLocal: "Chile",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Santiago",
		lat: -30,
		lng: -71,
		weight: 210475,
		hasRegions: true,
		flagCode: "🇨🇱"
	},
	{
		code: "CM",
		code3: "CMR",
		name: "Cameroon",
		nameLocal: "Cameroun",
		continentCode: "AF",
		timeZone: "Africa/Douala",
		lat: 6,
		lng: 12,
		weight: 1936,
		hasRegions: true,
		flagCode: "🇨🇲"
	},
	{
		code: "CN",
		code3: "CHN",
		name: "China",
		nameLocal: "中国",
		urlNameLocal: "China",
		continentCode: "AS",
		languageCode: "zh",
		timeZone: "Asia/Shanghai",
		lat: 35,
		lng: 105,
		weight: 1004497,
		hasRegions: true,
		flagCode: "🇨🇳"
	},
	{
		code: "CO",
		code3: "COL",
		name: "Colombia",
		nameLocal: "Colombia",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Bogota",
		lat: 4,
		lng: -72,
		weight: 344752,
		hasRegions: true,
		flagCode: "🇨🇴"
	},
	{
		code: "CR",
		code3: "CRI",
		name: "Costa Rica",
		nameLocal: "Costa Rica",
		urlName: "Costa-Rica",
		urlNameLocal: "Costa-Rica",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Costa_Rica",
		lat: 10,
		lng: -84,
		weight: 49087,
		hasRegions: true,
		flagCode: "🇨🇷"
	},
	{
		code: "CU",
		code3: "CUB",
		name: "Cuba",
		nameLocal: "Cuba",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Havana",
		lat: 21.5,
		lng: -80,
		weight: 376,
		hasRegions: true,
		flagCode: "🇨🇺"
	},
	{
		code: "CV",
		code3: "CPV",
		name: "Cape Verde",
		nameLocal: "Cabo Verde",
		urlName: "Cape-Verde",
		urlNameLocal: "Cabo-Verde",
		continentCode: "AF",
		timeZone: "Atlantic/Cape_Verde",
		lat: 16,
		lng: -24,
		weight: 571,
		hasRegions: true,
		flagCode: "🇨🇻"
	},
	{
		code: "CW",
		code3: "CUW",
		name: "Curaçao",
		nameLocal: "Curaçao",
		urlName: "Curacao",
		urlNameLocal: "Curacao",
		continentCode: "NA",
		timeZone: "America/Curacao",
		lat: 12.116667,
		lng: -68.933333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇨🇼"
	},
	{
		code: "CX",
		code3: "CXR",
		name: "Christmas Island",
		nameLocal: "Christmas Island",
		urlName: "Christmas-Island",
		urlNameLocal: "Christmas-Island",
		continentCode: "AS",
		lat: -10.5,
		lng: 105.66666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇨🇽"
	},
	{
		code: "CY",
		code3: "CYP",
		name: "Cyprus",
		nameLocal: "Kıbrıs",
		urlNameLocal: "Cyprus",
		continentCode: "EU",
		languageCode: "el",
		timeZone: "Asia/Nicosia",
		lat: 35,
		lng: 33,
		weight: 40595,
		hasRegions: true,
		flagCode: "🇨🇾"
	},
	{
		code: "CZ",
		code3: "CZE",
		name: "Czech Republic",
		nameLocal: "Česko",
		urlName: "Czech-Republic",
		urlNameLocal: "Cesko",
		continentCode: "EU",
		languageCode: "cs",
		timeZone: "Europe/Prague",
		lat: 49.75,
		lng: 15.5,
		weight: 210193,
		hasRegions: true,
		flagCode: "🇨🇿"
	},
	{
		code: "DE",
		code3: "DEU",
		name: "Germany",
		nameLocal: "Deutschland",
		continentCode: "EU",
		languageCode: "de",
		timeZone: "Europe/Berlin",
		lat: 51,
		lng: 9,
		weight: 1833320,
		hasRegions: true,
		flagCode: "🇩🇪"
	},
	{
		code: "DJ",
		code3: "DJI",
		name: "Djibouti",
		nameLocal: "جيبوتي‎",
		urlNameLocal: "Djibouti",
		continentCode: "AF",
		timeZone: "Africa/Djibouti",
		lat: 11.5,
		lng: 43,
		weight: 283,
		hasRegions: true,
		flagCode: "🇩🇯"
	},
	{
		code: "DK",
		code3: "DNK",
		name: "Denmark",
		nameLocal: "Danmark",
		continentCode: "EU",
		languageCode: "da",
		timeZone: "Europe/Copenhagen",
		lat: 56,
		lng: 10,
		weight: 308381,
		hasRegions: true,
		flagCode: "🇩🇰"
	},
	{
		code: "DM",
		code3: "DMA",
		name: "Dominica",
		nameLocal: "Dominica",
		continentCode: "NA",
		timeZone: "America/Dominica",
		lat: 15.41666666,
		lng: -61.33333333,
		weight: 350,
		hasRegions: true,
		flagCode: "🇩🇲"
	},
	{
		code: "DO",
		code3: "DOM",
		name: "Dominican Republic",
		nameLocal: "República Dominicana",
		urlName: "Dominican-Republic",
		urlNameLocal: "Republica-Dominicana",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Santo_Domingo",
		lat: 19,
		lng: -70.66666666,
		weight: 41930,
		hasRegions: true,
		flagCode: "🇩🇴"
	},
	{
		code: "DZ",
		code3: "DZA",
		name: "Algeria",
		nameLocal: "الجزائر",
		urlNameLocal: "Algeria",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Algiers",
		lat: 28,
		lng: 3,
		weight: 60605,
		hasRegions: true,
		flagCode: "🇩🇿"
	},
	{
		code: "EC",
		code3: "ECU",
		name: "Ecuador",
		nameLocal: "Ecuador",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Guayaquil",
		lat: -2,
		lng: -77.5,
		weight: 55518,
		hasRegions: true,
		flagCode: "🇪🇨"
	},
	{
		code: "EE",
		code3: "EST",
		name: "Estonia",
		nameLocal: "Eesti",
		continentCode: "EU",
		languageCode: "et",
		timeZone: "Europe/Tallinn",
		lat: 59,
		lng: 26,
		weight: 31358,
		hasRegions: true,
		flagCode: "🇪🇪"
	},
	{
		code: "EG",
		code3: "EGY",
		name: "Egypt",
		nameLocal: "مصر",
		urlNameLocal: "Egypt",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Cairo",
		lat: 27,
		lng: 30,
		weight: 239305,
		hasRegions: true,
		flagCode: "🇪🇬"
	},
	{
		code: "EH",
		code3: "ESH",
		name: "Western Sahara",
		nameLocal: "الصحراء الغربية",
		urlName: "Western-Sahara",
		urlNameLocal: "Western-Sahara",
		continentCode: "AF",
		lat: 24.5,
		lng: -13,
		weight: 1,
		hasRegions: false,
		flagCode: "🇪🇭"
	},
	{
		code: "ER",
		code3: "ERI",
		name: "Eritrea",
		nameLocal: "إرتريا‎",
		urlNameLocal: "Eritrea",
		continentCode: "AF",
		timeZone: "Africa/Asmara",
		lat: 15,
		lng: 39,
		weight: 106,
		hasRegions: true,
		flagCode: "🇪🇷"
	},
	{
		code: "ES",
		code3: "ESP",
		name: "Spain",
		nameLocal: "España",
		urlNameLocal: "Espana",
		continentCode: "EU",
		languageCode: "es",
		timeZone: "Atlantic/Canary",
		lat: 40,
		lng: -4,
		weight: 860939,
		hasRegions: true,
		flagCode: "🇪🇸"
	},
	{
		code: "ET",
		code3: "ETH",
		name: "Ethiopia",
		nameLocal: "ኢትዮጵያ",
		urlNameLocal: "Ethiopia",
		continentCode: "AF",
		timeZone: "Africa/Addis_Ababa",
		lat: 8,
		lng: 38,
		weight: 918,
		hasRegions: true,
		flagCode: "🇪🇹"
	},
	{
		code: "FI",
		code3: "FIN",
		name: "Finland",
		nameLocal: "Finland",
		continentCode: "EU",
		languageCode: "fi",
		timeZone: "Europe/Helsinki",
		lat: 64,
		lng: 26,
		weight: 177494,
		hasRegions: true,
		flagCode: "🇫🇮"
	},
	{
		code: "FJ",
		code3: "FJI",
		name: "Fiji",
		nameLocal: "फिजी",
		urlNameLocal: "Fiji",
		continentCode: "OC",
		timeZone: "Pacific/Fiji",
		lat: -18,
		lng: 175,
		weight: 1453,
		hasRegions: true,
		flagCode: "🇫🇯"
	},
	{
		code: "FK",
		code3: "FLK",
		name: "Falkland Islands",
		nameLocal: "Falkland Islands",
		urlName: "Falkland-Islands",
		urlNameLocal: "Falkland-Islands",
		continentCode: "SA",
		lat: -51.75,
		lng: -59,
		weight: 1,
		hasRegions: false,
		flagCode: "🇫🇰"
	},
	{
		code: "FM",
		code3: "FSM",
		name: "Micronesia",
		nameLocal: "Micronesia",
		continentCode: "OC",
		timeZone: "Pacific/Kosrae",
		lat: 6.91666666,
		lng: 158.25,
		weight: 213,
		hasRegions: true,
		flagCode: "🇫🇲"
	},
	{
		code: "FO",
		code3: "FRO",
		name: "Faroe Islands",
		nameLocal: "Færøerne",
		urlName: "Faroe-Islands",
		urlNameLocal: "Faroe-Islands",
		continentCode: "EU",
		lat: 62,
		lng: -7,
		weight: 1,
		hasRegions: false,
		flagCode: "🇫🇴"
	},
	{
		code: "FR",
		code3: "FRA",
		name: "France",
		nameLocal: "France",
		continentCode: "EU",
		languageCode: "fr",
		timeZone: "Europe/Paris",
		lat: 46,
		lng: 2,
		weight: 1683750,
		hasRegions: true,
		flagCode: "🇫🇷"
	},
	{
		code: "GA",
		code3: "GAB",
		name: "Gabon",
		nameLocal: "Gabon",
		continentCode: "AF",
		timeZone: "Africa/Libreville",
		lat: -1,
		lng: 11.75,
		weight: 1453,
		hasRegions: true,
		flagCode: "🇬🇦"
	},
	{
		code: "GB",
		code3: "GBR",
		name: "United Kingdom",
		nameLocal: "United Kingdom",
		urlName: "United-Kingdom",
		urlNameLocal: "United-Kingdom",
		continentCode: "EU",
		languageCode: "en",
		timeZone: "Europe/London",
		lat: 54,
		lng: -2,
		weight: 2376225,
		hasRegions: true,
		flagCode: "🇬🇧"
	},
	{
		code: "GD",
		code3: "GRD",
		name: "Grenada",
		nameLocal: "Grenada",
		continentCode: "NA",
		timeZone: "America/Grenada",
		lat: 12.11666666,
		lng: -61.66666666,
		weight: 842,
		hasRegions: true,
		flagCode: "🇬🇩"
	},
	{
		code: "GE",
		code3: "GEO",
		name: "Georgia",
		nameLocal: "საქართველო",
		urlNameLocal: "Georgia",
		continentCode: "AS",
		timeZone: "Asia/Tbilisi",
		lat: 42,
		lng: 43.5,
		weight: 18532,
		hasRegions: true,
		flagCode: "🇬🇪"
	},
	{
		code: "GF",
		code3: "GUF",
		name: "French Guiana",
		nameLocal: "Guyane française",
		urlName: "French-Guiana",
		urlNameLocal: "Guyane-française",
		continentCode: "SA",
		timeZone: "BET",
		lat: 4,
		lng: -53,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇫"
	},
	{
		code: "GG",
		code3: "GGY",
		name: "Guernsey",
		nameLocal: "Guernesey",
		continentCode: "EU",
		timeZone: "Europe/Guernsey",
		lat: 49.46666666,
		lng: -2.58333333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇬"
	},
	{
		code: "GH",
		code3: "GHA",
		name: "Ghana",
		nameLocal: "Ghana",
		continentCode: "AF",
		timeZone: "Africa/Accra",
		lat: 8,
		lng: -2,
		weight: 7008,
		hasRegions: true,
		flagCode: "🇬🇭"
	},
	{
		code: "GI",
		code3: "GIB",
		name: "Gibraltar",
		nameLocal: "Gibraltar",
		continentCode: "EU",
		timeZone: "Europe/Gibraltar",
		lat: 36.13333333,
		lng: -5.35,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇮"
	},
	{
		code: "GL",
		code3: "GRL",
		name: "Greenland",
		nameLocal: "Kalaallit Nunaat",
		urlNameLocal: "Kalaallit-Nunaat",
		continentCode: "NA",
		timeZone: "America/Godthab",
		lat: 72,
		lng: -40,
		weight: 3265,
		hasRegions: true,
		flagCode: "🇬🇱"
	},
	{
		code: "GM",
		code3: "GMB",
		name: "Gambia",
		nameLocal: "Gambia",
		continentCode: "AF",
		timeZone: "Africa/Banjul",
		lat: 13.46666666,
		lng: -16.56666666,
		weight: 315,
		hasRegions: true,
		flagCode: "🇬🇲"
	},
	{
		code: "GN",
		code3: "GIN",
		name: "Guinea",
		nameLocal: "Guinée",
		urlNameLocal: "Guinee",
		continentCode: "AF",
		timeZone: "Africa/Conakry",
		lat: 11,
		lng: -10,
		weight: 228,
		hasRegions: true,
		flagCode: "🇬🇳"
	},
	{
		code: "GP",
		code3: "GLP",
		name: "Guadeloupe",
		nameLocal: "Guadeloupe",
		continentCode: "NA",
		timeZone: "America/Guadeloupe",
		lat: 16.25,
		lng: -61.583333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇵"
	},
	{
		code: "GQ",
		code3: "GNQ",
		name: "Equatorial Guinea",
		nameLocal: "Guiné Equatorial",
		urlName: "Equatorial-Guinea",
		urlNameLocal: "Guine-Equatorial",
		continentCode: "AF",
		timeZone: "Africa/Malabo",
		lat: 2,
		lng: 10,
		weight: 190,
		hasRegions: true,
		flagCode: "🇬🇶"
	},
	{
		code: "GR",
		code3: "GRC",
		name: "Greece",
		nameLocal: "Ελλάδα",
		urlNameLocal: "Greece",
		continentCode: "EU",
		languageCode: "el",
		timeZone: "Europe/Athens",
		lat: 39,
		lng: 22,
		weight: 131295,
		hasRegions: true,
		flagCode: "🇬🇷"
	},
	{
		code: "GS",
		code3: "SGS",
		name: "South Georgia",
		nameLocal: "South Georgia",
		urlName: "South-Georgia",
		urlNameLocal: "South-Georgia",
		continentCode: "AN",
		lat: -54.5,
		lng: -37,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇸"
	},
	{
		code: "GT",
		code3: "GTM",
		name: "Guatemala",
		nameLocal: "Guatemala",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Guatemala",
		lat: 15.5,
		lng: -90.25,
		weight: 13854,
		hasRegions: true,
		flagCode: "🇬🇹"
	},
	{
		code: "GU",
		code3: "GUM",
		name: "Guam",
		nameLocal: "Guam",
		continentCode: "OC",
		timeZone: "Pacific/Guam",
		lat: 13.46666666,
		lng: 144.78333333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇬🇺"
	},
	{
		code: "GW",
		code3: "GNB",
		name: "Guinea-Bissau",
		nameLocal: "Guiné-Bissau",
		urlNameLocal: "Guine-Bissau",
		continentCode: "AF",
		timeZone: "Africa/Bissau",
		lat: 12,
		lng: -15,
		weight: 96,
		hasRegions: true,
		flagCode: "🇬🇼"
	},
	{
		code: "GY",
		code3: "GUY",
		name: "Guyana",
		nameLocal: "Guyana",
		continentCode: "SA",
		timeZone: "America/Guyana",
		lat: 5,
		lng: -59,
		weight: 1576,
		hasRegions: true,
		flagCode: "🇬🇾"
	},
	{
		code: "HK",
		code3: "HKG",
		name: "Hong Kong",
		nameLocal: "香港",
		urlName: "Hong-Kong",
		urlNameLocal: "Hong-Kong",
		continentCode: "AS",
		languageCode: "zh",
		timeZone: "Asia/Hong_Kong",
		lat: 22.267,
		lng: 114.188,
		weight: 193292,
		hasRegions: true,
		flagCode: "🇭🇰"
	},
	{
		code: "HM",
		code3: "HMD",
		name: "Heard Island and McDonald Islands",
		nameLocal: "Heard Island and McDonald Islands",
		urlName: "Heard-Island-McDonald-Islands",
		urlNameLocal: "Heard-Island-McDonald-Islands",
		continentCode: "AN",
		lat: -53.1,
		lng: 72.51666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇭🇲"
	},
	{
		code: "HN",
		code3: "HND",
		name: "Honduras",
		nameLocal: "Honduras",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Tegucigalpa",
		lat: 15,
		lng: -86.5,
		weight: 9884,
		hasRegions: true,
		flagCode: "🇭🇳"
	},
	{
		code: "HR",
		code3: "HRV",
		name: "Croatia",
		nameLocal: "Hrvatska",
		continentCode: "EU",
		languageCode: "hr",
		timeZone: "Europe/Zagreb",
		lat: 45.16666666,
		lng: 15.5,
		weight: 95548,
		hasRegions: true,
		flagCode: "🇭🇷"
	},
	{
		code: "HT",
		code3: "HTI",
		name: "Haiti",
		nameLocal: "Haïti",
		urlNameLocal: "Haiti",
		continentCode: "NA",
		timeZone: "America/Port-au-Prince",
		lat: 19,
		lng: -72.41666666,
		weight: 2878,
		hasRegions: true,
		flagCode: "🇭🇹"
	},
	{
		code: "HU",
		code3: "HUN",
		name: "Hungary",
		nameLocal: "Magyarország",
		urlNameLocal: "Magyarorszag",
		continentCode: "EU",
		languageCode: "hu",
		timeZone: "Europe/Budapest",
		lat: 47,
		lng: 20,
		weight: 162504,
		hasRegions: true,
		flagCode: "🇭🇺"
	},
	{
		code: "ID",
		code3: "IDN",
		name: "Indonesia",
		nameLocal: "Indonesia",
		continentCode: "AS",
		languageCode: "in",
		timeZone: "Asia/Jakarta",
		lat: -5,
		lng: 120,
		weight: 170963,
		hasRegions: true,
		flagCode: "🇮🇩"
	},
	{
		code: "IE",
		code3: "IRL",
		name: "Ireland",
		nameLocal: "Éire",
		urlNameLocal: "Eire",
		continentCode: "EU",
		languageCode: "ga",
		timeZone: "Europe/Dublin",
		lat: 53,
		lng: -8,
		weight: 196532,
		hasRegions: true,
		flagCode: "🇮🇪"
	},
	{
		code: "IL",
		code3: "ISR",
		name: "Israel",
		nameLocal: "إسرائيل",
		urlNameLocal: "Israel",
		continentCode: "AS",
		languageCode: "iw",
		timeZone: "Asia/Jerusalem",
		lat: 31.47,
		lng: 35.13,
		weight: 230219,
		hasRegions: true,
		flagCode: "🇮🇱"
	},
	{
		code: "IM",
		code3: "IMN",
		name: "Isle Of Man",
		nameLocal: "Mannin",
		urlName: "Isle-Of-Man",
		continentCode: "EU",
		timeZone: "MET",
		lat: 54.25,
		lng: -4.5,
		weight: 1,
		hasRegions: false,
		flagCode: "🇮🇲"
	},
	{
		code: "IN",
		code3: "IND",
		name: "India",
		nameLocal: "இந்தியா",
		urlNameLocal: "India",
		continentCode: "AS",
		languageCode: "hi",
		timeZone: "Asia/Kolkata",
		lat: 20,
		lng: 77,
		weight: 771379,
		hasRegions: true,
		flagCode: "🇮🇳"
	},
	{
		code: "IO",
		code3: "IOT",
		name: "British Indian Ocean Territory",
		nameLocal: "British Indian Ocean Territory",
		urlName: "British-Indian-Ocean-Territory",
		urlNameLocal: "British-Indian-Ocean-Territory",
		continentCode: "AS",
		lat: -6,
		lng: 71.5,
		weight: 1,
		hasRegions: false,
		flagCode: "🇮🇴"
	},
	{
		code: "IQ",
		code3: "IRQ",
		name: "Iraq",
		nameLocal: "العراق",
		urlNameLocal: "Iraq",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Baghdad",
		lat: 33,
		lng: 44,
		weight: 8541,
		hasRegions: true,
		flagCode: "🇮🇶"
	},
	{
		code: "IR",
		code3: "IRN",
		name: "Iran",
		nameLocal: "ایران",
		urlNameLocal: "Iran",
		continentCode: "AS",
		timeZone: "Asia/Tehran",
		lat: 32,
		lng: 53,
		weight: 9298,
		hasRegions: true,
		flagCode: "🇮🇷"
	},
	{
		code: "IS",
		code3: "ISL",
		name: "Iceland",
		nameLocal: "Ísland",
		urlNameLocal: "Island",
		continentCode: "EU",
		languageCode: "is",
		timeZone: "Atlantic/Reykjavik",
		lat: 65,
		lng: -18,
		weight: 43542,
		hasRegions: true,
		flagCode: "🇮🇸"
	},
	{
		code: "IT",
		code3: "ITA",
		name: "Italy",
		nameLocal: "Italia",
		continentCode: "EU",
		languageCode: "it",
		timeZone: "Europe/Rome",
		lat: 42.83333333,
		lng: 12.83333333,
		weight: 1380418,
		hasRegions: true,
		flagCode: "🇮🇹"
	},
	{
		code: "JE",
		code3: "JEY",
		name: "Jersey",
		nameLocal: "Jèrri",
		urlNameLocal: "Jerri",
		continentCode: "EU",
		timeZone: "Europe/Jersey",
		lat: 49.25,
		lng: -2.16666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇯🇪"
	},
	{
		code: "JM",
		code3: "JAM",
		name: "Jamaica",
		nameLocal: "Jamaica",
		continentCode: "NA",
		timeZone: "America/Jamaica",
		lat: 18.25,
		lng: -77.5,
		weight: 10376,
		hasRegions: true,
		flagCode: "🇯🇲"
	},
	{
		code: "JO",
		code3: "JOR",
		name: "Jordan",
		nameLocal: "الأردن",
		urlNameLocal: "Jordan",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Amman",
		lat: 31,
		lng: 36,
		weight: 11920,
		hasRegions: true,
		flagCode: "🇯🇴"
	},
	{
		code: "JP",
		code3: "JPN",
		name: "Japan",
		nameLocal: "日本",
		urlNameLocal: "Japan",
		continentCode: "AS",
		languageCode: "ja",
		timeZone: "Asia/Tokyo",
		lat: 36,
		lng: 138,
		weight: 2202980,
		hasRegions: true,
		flagCode: "🇯🇵"
	},
	{
		code: "KE",
		code3: "KEN",
		name: "Kenya",
		nameLocal: "Kenya",
		continentCode: "AF",
		timeZone: "Africa/Nairobi",
		lat: 1,
		lng: 38,
		weight: 19870,
		hasRegions: true,
		flagCode: "🇰🇪"
	},
	{
		code: "KG",
		code3: "KGZ",
		name: "Kyrgyzstan",
		nameLocal: "Киргизия",
		urlNameLocal: "Kyrgyzstan",
		continentCode: "AS",
		timeZone: "Asia/Bishkek",
		lat: 41,
		lng: 75,
		weight: 3066,
		hasRegions: true,
		flagCode: "🇰🇬"
	},
	{
		code: "KH",
		code3: "KHM",
		name: "Cambodia",
		nameLocal: "Kâmpŭchéa",
		urlNameLocal: "Cambodia",
		continentCode: "AS",
		timeZone: "Asia/Phnom_Penh",
		lat: 13,
		lng: 105,
		weight: 5567,
		hasRegions: true,
		flagCode: "🇰🇭"
	},
	{
		code: "KI",
		code3: "KIR",
		name: "Kiribati",
		nameLocal: "Kiribati",
		continentCode: "OC",
		timeZone: "Pacific/Enderbury",
		lat: 1.41666666,
		lng: 173,
		weight: 90,
		hasRegions: true,
		flagCode: "🇰🇮"
	},
	{
		code: "KM",
		code3: "COM",
		name: "Comoros",
		nameLocal: "القمر‎",
		urlNameLocal: "Comoros",
		continentCode: "AF",
		timeZone: "Indian/Comoro",
		lat: -12.16666666,
		lng: 44.25,
		weight: 171,
		hasRegions: true,
		flagCode: "🇰🇲"
	},
	{
		code: "KN",
		code3: "KNA",
		name: "Saint Kitts And Nevis",
		nameLocal: "Saint Kitts and Nevis",
		urlName: "Saint-Kitts-Nevis",
		urlNameLocal: "Saint-Kitts-Nevis",
		continentCode: "NA",
		timeZone: "America/St_Kitts",
		lat: 17.33333333,
		lng: -62.75,
		weight: 683,
		hasRegions: true,
		flagCode: "🇰🇳"
	},
	{
		code: "KP",
		code3: "PRK",
		name: "North Korea",
		nameLocal: "조선",
		urlName: "North-Korea",
		urlNameLocal: "North-Korea",
		continentCode: "AS",
		timeZone: "Asia/Pyongyang",
		lat: 40,
		lng: 127,
		weight: 4,
		hasRegions: true,
		flagCode: "🇰🇵"
	},
	{
		code: "KR",
		code3: "KOR",
		name: "South Korea",
		nameLocal: "한국",
		urlName: "South-Korea",
		urlNameLocal: "South-Korea",
		continentCode: "AS",
		languageCode: "ko",
		timeZone: "Asia/Seoul",
		lat: 37,
		lng: 127.5,
		weight: 1034130,
		hasRegions: true,
		flagCode: "🇰🇷"
	},
	{
		code: "KW",
		code3: "KWT",
		name: "Kuwait",
		nameLocal: "الكويت",
		urlNameLocal: "Kuwait",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Kuwait",
		lat: 29.5,
		lng: 45.75,
		weight: 48599,
		hasRegions: true,
		flagCode: "🇰🇼"
	},
	{
		code: "KY",
		code3: "CYM",
		name: "Cayman Islands",
		nameLocal: "Cayman Islands",
		urlName: "Cayman-Islands",
		urlNameLocal: "Cayman-Islands",
		continentCode: "NA",
		timeZone: "America/Cayman",
		lat: 19.5,
		lng: -80.5,
		weight: 1,
		hasRegions: false,
		flagCode: "🇰🇾"
	},
	{
		code: "KZ",
		code3: "KAZ",
		name: "Kazakhstan",
		nameLocal: "Казахстан",
		urlNameLocal: "Kazakhstan",
		continentCode: "AS",
		timeZone: "Asia/Almaty",
		lat: 48,
		lng: 68,
		weight: 54499,
		hasRegions: true,
		flagCode: "🇰🇿"
	},
	{
		code: "LA",
		code3: "LAO",
		name: "Laos",
		nameLocal: "ສປປລາວ",
		urlNameLocal: "Laos",
		continentCode: "AS",
		timeZone: "Asia/Vientiane",
		lat: 18,
		lng: 105,
		weight: 547,
		hasRegions: true,
		flagCode: "🇱🇦"
	},
	{
		code: "LB",
		code3: "LBN",
		name: "Lebanon",
		nameLocal: "لبنان",
		urlNameLocal: "Lebanon",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Beirut",
		lat: 33.83333333,
		lng: 35.83333333,
		weight: 13481,
		hasRegions: true,
		flagCode: "🇱🇧"
	},
	{
		code: "LC",
		code3: "LCA",
		name: "Saint Lucia",
		nameLocal: "Saint Lucia",
		urlName: "Saint-Lucia",
		urlNameLocal: "Saint-Lucia",
		continentCode: "NA",
		timeZone: "America/St_Lucia",
		lat: 13.88333333,
		lng: -60.96666666,
		weight: 1297,
		hasRegions: true,
		flagCode: "🇱🇨"
	},
	{
		code: "LI",
		code3: "LIE",
		name: "Liechtenstein",
		nameLocal: "Liechtenstein",
		continentCode: "EU",
		timeZone: "Europe/Vaduz",
		lat: 47.26666666,
		lng: 9.53333333,
		weight: 1889,
		hasRegions: true,
		flagCode: "🇱🇮"
	},
	{
		code: "LK",
		code3: "LKA",
		name: "Sri Lanka",
		nameLocal: "இலங்கை",
		urlName: "Sri-Lanka",
		urlNameLocal: "Sri-Lanka",
		continentCode: "AS",
		timeZone: "Asia/Colombo",
		lat: 7,
		lng: 81,
		weight: 15199,
		hasRegions: true,
		flagCode: "🇱🇰"
	},
	{
		code: "LR",
		code3: "LBR",
		name: "Liberia",
		nameLocal: "Liberia",
		continentCode: "AF",
		timeZone: "Africa/Monrovia",
		lat: 6.5,
		lng: -9.5,
		weight: 999,
		hasRegions: true,
		flagCode: "🇱🇷"
	},
	{
		code: "LS",
		code3: "LSO",
		name: "Lesotho",
		nameLocal: "Lesotho",
		continentCode: "AF",
		timeZone: "Africa/Maseru",
		lat: -29.5,
		lng: 28.5,
		weight: 1413,
		hasRegions: true,
		flagCode: "🇱🇸"
	},
	{
		code: "LT",
		code3: "LTU",
		name: "Lithuania",
		nameLocal: "Lietuva",
		continentCode: "EU",
		languageCode: "lt",
		timeZone: "Europe/Vilnius",
		lat: 56,
		lng: 24,
		weight: 74788,
		hasRegions: true,
		flagCode: "🇱🇹"
	},
	{
		code: "LU",
		code3: "LUX",
		name: "Luxembourg",
		nameLocal: "Lëtzebuerg",
		urlNameLocal: "Letzebuerg",
		continentCode: "EU",
		languageCode: "fr",
		timeZone: "Europe/Luxembourg",
		lat: 49.75,
		lng: 6.16666666,
		weight: 5738,
		hasRegions: true,
		flagCode: "🇱🇺"
	},
	{
		code: "LV",
		code3: "LVA",
		name: "Latvia",
		nameLocal: "Latvija",
		continentCode: "EU",
		languageCode: "lv",
		timeZone: "Europe/Riga",
		lat: 57,
		lng: 25,
		weight: 48835,
		hasRegions: true,
		flagCode: "🇱🇻"
	},
	{
		code: "LY",
		code3: "LBY",
		name: "Libya",
		nameLocal: "‏ليبيا",
		urlNameLocal: "Libya",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Tripoli",
		lat: 25,
		lng: 17,
		weight: 1616,
		hasRegions: true,
		flagCode: "🇱🇾"
	},
	{
		code: "MA",
		code3: "MAR",
		name: "Morocco",
		nameLocal: "المغرب",
		urlNameLocal: "Morocco",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Casablanca",
		lat: 32,
		lng: -5,
		weight: 140015,
		hasRegions: true,
		flagCode: "🇲🇦"
	},
	{
		code: "MC",
		code3: "MCO",
		name: "Monaco",
		nameLocal: "Monaco",
		continentCode: "EU",
		timeZone: "Europe/Monaco",
		lat: 43.73333333,
		lng: 7.4,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇨"
	},
	{
		code: "MD",
		code3: "MDA",
		name: "Moldova",
		nameLocal: "Moldova",
		continentCode: "EU",
		timeZone: "Europe/Chisinau",
		lat: 47,
		lng: 29,
		weight: 23967,
		hasRegions: true,
		flagCode: "🇲🇩"
	},
	{
		code: "ME",
		code3: "MNE",
		name: "Montenegro",
		nameLocal: "Црна Гора",
		urlNameLocal: "Montenegro",
		continentCode: "EU",
		languageCode: "sr",
		timeZone: "Europe/Podgorica",
		lat: 42.5,
		lng: 19.3,
		weight: 4986,
		hasRegions: true,
		flagCode: "🇲🇪"
	},
	{
		code: "MF",
		code3: "MAF",
		name: "Saint Martin",
		nameLocal: "Saint-Martin",
		urlName: "Saint-Martin",
		continentCode: "NA",
		timeZone: "America/Marigot",
		lat: 18.08333333,
		lng: -63.95,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇫"
	},
	{
		code: "MG",
		code3: "MDG",
		name: "Madagascar",
		nameLocal: "Madagascar",
		continentCode: "AF",
		timeZone: "EAT",
		lat: -20,
		lng: 47,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇬"
	},
	{
		code: "MH",
		code3: "MHL",
		name: "Marshall Islands",
		nameLocal: "M̧ajeļ",
		urlName: "Marshall-Islands",
		urlNameLocal: "Majeļ",
		continentCode: "OC",
		timeZone: "Pacific/Kwajalein",
		lat: 9,
		lng: 168,
		weight: 196,
		hasRegions: true,
		flagCode: "🇲🇭"
	},
	{
		code: "MK",
		code3: "MKD",
		name: "Macedonia",
		nameLocal: "Македонија",
		urlNameLocal: "Macedonia",
		continentCode: "EU",
		languageCode: "mk",
		timeZone: "Europe/Skopje",
		lat: 41.83333333,
		lng: 22,
		weight: 15341,
		hasRegions: true,
		flagCode: "🇲🇰"
	},
	{
		code: "ML",
		code3: "MLI",
		name: "Mali",
		nameLocal: "Mali",
		continentCode: "AF",
		timeZone: "Africa/Bamako",
		lat: 17,
		lng: -4,
		weight: 519,
		hasRegions: true,
		flagCode: "🇲🇱"
	},
	{
		code: "MM",
		code3: "MMR",
		name: "Myanmar",
		nameLocal: "မြန်မာ",
		urlNameLocal: "Myanmar",
		continentCode: "AS",
		timeZone: "Asia/Yangon",
		lat: 22,
		lng: 98,
		weight: 1346,
		hasRegions: true,
		flagCode: "🇲🇲"
	},
	{
		code: "MN",
		code3: "MNG",
		name: "Mongolia",
		nameLocal: "Монгол улс",
		urlNameLocal: "Mongolia",
		continentCode: "AS",
		timeZone: "Asia/Ulaanbaatar",
		lat: 46,
		lng: 105,
		weight: 2826,
		hasRegions: true,
		flagCode: "🇲🇳"
	},
	{
		code: "MO",
		code3: "MAC",
		name: "Macao",
		nameLocal: "澳门",
		urlNameLocal: "Macao",
		continentCode: "AS",
		timeZone: "Asia/Macao",
		lat: 22.16666666,
		lng: 113.55,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇴"
	},
	{
		code: "MP",
		code3: "MNP",
		name: "Northern Mariana Islands",
		nameLocal: "Na Islas Mariånas",
		urlName: "Northern-Mariana-Islands",
		urlNameLocal: "Na-Islas-Marianas",
		continentCode: "OC",
		timeZone: "Pacific/Saipan",
		lat: 15.2,
		lng: 145.75,
		weight: 814,
		hasRegions: true,
		flagCode: "🇲🇵"
	},
	{
		code: "MQ",
		code3: "MTQ",
		name: "Martinique",
		nameLocal: "Martinique",
		continentCode: "NA",
		timeZone: "America/Martinique",
		lat: 14.666667,
		lng: -61,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇶"
	},
	{
		code: "MR",
		code3: "MRT",
		name: "Mauritania",
		nameLocal: "موريتانيا",
		urlNameLocal: "Mauritania",
		continentCode: "AF",
		timeZone: "Africa/Nouakchott",
		lat: 20,
		lng: -12,
		weight: 274,
		hasRegions: true,
		flagCode: "🇲🇷"
	},
	{
		code: "MS",
		code3: "MSR",
		name: "Montserrat",
		nameLocal: "Montserrat",
		continentCode: "NA",
		lat: 16.75,
		lng: -62.2,
		weight: 1,
		hasRegions: false,
		flagCode: "🇲🇸"
	},
	{
		code: "MT",
		code3: "MLT",
		name: "Malta",
		nameLocal: "Malta",
		continentCode: "EU",
		languageCode: "mt",
		timeZone: "Europe/Malta",
		lat: 35.83333333,
		lng: 14.58333333,
		weight: 19951,
		hasRegions: true,
		flagCode: "🇲🇹"
	},
	{
		code: "MU",
		code3: "MUS",
		name: "Mauritius",
		nameLocal: "Maurice",
		continentCode: "AF",
		timeZone: "Indian/Mauritius",
		lat: -20.28333333,
		lng: 57.55,
		weight: 16592,
		hasRegions: true,
		flagCode: "🇲🇺"
	},
	{
		code: "MV",
		code3: "MDV",
		name: "Maldives",
		nameLocal: "ދިވެހިރާއްޖޭގެ",
		urlNameLocal: "Maldives",
		continentCode: "AS",
		timeZone: "Indian/Maldives",
		lat: 3.25,
		lng: 73,
		weight: 1818,
		hasRegions: true,
		flagCode: "🇲🇻"
	},
	{
		code: "MW",
		code3: "MWI",
		name: "Malawi",
		nameLocal: "Malaŵi",
		urlNameLocal: "Malawi",
		continentCode: "AF",
		timeZone: "Africa/Blantyre",
		lat: -13.5,
		lng: 34,
		weight: 910,
		hasRegions: true,
		flagCode: "🇲🇼"
	},
	{
		code: "MX",
		code3: "MEX",
		name: "Mexico",
		nameLocal: "México",
		urlNameLocal: "Mexico",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Mexico_City",
		lat: 23,
		lng: -102,
		weight: 575886,
		hasRegions: true,
		flagCode: "🇲🇽"
	},
	{
		code: "MY",
		code3: "MYS",
		name: "Malaysia",
		nameLocal: "مليسيا",
		urlNameLocal: "Malaysia",
		continentCode: "AS",
		languageCode: "ms",
		timeZone: "Asia/Kuala_Lumpur",
		lat: 2.5,
		lng: 112.5,
		weight: 131320,
		hasRegions: true,
		flagCode: "🇲🇾"
	},
	{
		code: "MZ",
		code3: "MOZ",
		name: "Mozambique",
		nameLocal: "Moçambique",
		continentCode: "AF",
		timeZone: "Africa/Maputo",
		lat: -18.25,
		lng: 35,
		weight: 3821,
		hasRegions: true,
		flagCode: "🇲🇿"
	},
	{
		code: "NA",
		code3: "NAM",
		name: "Namibia",
		nameLocal: "Namibia",
		continentCode: "AF",
		timeZone: "Africa/Windhoek",
		lat: -22,
		lng: 17,
		weight: 8524,
		hasRegions: true,
		flagCode: "🇳🇦"
	},
	{
		code: "NC",
		code3: "NCL",
		name: "New Caledonia",
		nameLocal: "Nouvelle-Calédonie",
		urlName: "New-Caledonia",
		continentCode: "OC",
		timeZone: "Pacific/Noumea",
		lat: -21.5,
		lng: 165.5,
		weight: 6677,
		hasRegions: true,
		flagCode: "🇳🇨"
	},
	{
		code: "NE",
		code3: "NER",
		name: "Niger",
		nameLocal: "Niger",
		continentCode: "AF",
		timeZone: "Africa/Niamey",
		lat: 16,
		lng: 8,
		weight: 363,
		hasRegions: true,
		flagCode: "🇳🇪"
	},
	{
		code: "NF",
		code3: "NFK",
		name: "Norfolk Island",
		nameLocal: "Norf'k Ailen",
		urlName: "Norfolk-Island",
		urlNameLocal: "Norf-k-Ailen",
		continentCode: "OC",
		lat: -29.03333333,
		lng: 167.95,
		weight: 1,
		hasRegions: false,
		flagCode: "🇳🇫"
	},
	{
		code: "NG",
		code3: "NGA",
		name: "Nigeria",
		nameLocal: "Nigeria",
		continentCode: "AF",
		timeZone: "Africa/Lagos",
		lat: 10,
		lng: 8,
		weight: 22155,
		hasRegions: true,
		flagCode: "🇳🇬"
	},
	{
		code: "NI",
		code3: "NIC",
		name: "Nicaragua",
		nameLocal: "Nicaragua",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Managua",
		lat: 13,
		lng: -85,
		weight: 5809,
		hasRegions: true,
		flagCode: "🇳🇮"
	},
	{
		code: "NL",
		code3: "NLD",
		name: "Netherlands",
		nameLocal: "Nederland",
		continentCode: "EU",
		languageCode: "nl",
		timeZone: "Europe/Amsterdam",
		lat: 52.5,
		lng: 5.75,
		weight: 997754,
		hasRegions: true,
		flagCode: "🇳🇱"
	},
	{
		code: "NO",
		code3: "NOR",
		name: "Norway",
		nameLocal: "Norge",
		continentCode: "EU",
		languageCode: "no",
		timeZone: "Europe/Oslo",
		lat: 62,
		lng: 10,
		weight: 314740,
		hasRegions: true,
		flagCode: "🇳🇴"
	},
	{
		code: "NP",
		code3: "NPL",
		name: "Nepal",
		nameLocal: "नेपाल",
		urlNameLocal: "Nepal",
		continentCode: "AS",
		timeZone: "Asia/Kathmandu",
		lat: 28,
		lng: 84,
		weight: 5454,
		hasRegions: true,
		flagCode: "🇳🇵"
	},
	{
		code: "NR",
		code3: "NRU",
		name: "Nauru",
		nameLocal: "Nauru",
		continentCode: "OC",
		timeZone: "Pacific/Nauru",
		lat: -0.53333333,
		lng: 166.91666666,
		weight: 162,
		hasRegions: true,
		flagCode: "🇳🇷"
	},
	{
		code: "NU",
		code3: "NIU",
		name: "Niue",
		nameLocal: "Niuē",
		urlNameLocal: "Niue",
		continentCode: "OC",
		lat: -19.03333333,
		lng: -169.86666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇳🇺"
	},
	{
		code: "NZ",
		code3: "NZL",
		name: "New Zealand",
		nameLocal: "Aotearoa",
		urlName: "New-Zealand",
		continentCode: "OC",
		languageCode: "en",
		timeZone: "Pacific/Auckland",
		lat: -41,
		lng: 174,
		weight: 238281,
		hasRegions: true,
		flagCode: "🇳🇿"
	},
	{
		code: "OM",
		code3: "OMN",
		name: "Oman",
		nameLocal: "عمان",
		urlNameLocal: "Oman",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Muscat",
		lat: 21,
		lng: 57,
		weight: 12978,
		hasRegions: true,
		flagCode: "🇴🇲"
	},
	{
		code: "PA",
		code3: "PAN",
		name: "Panama",
		nameLocal: "Panamá",
		urlNameLocal: "Panama",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Panama",
		lat: 9,
		lng: -80,
		weight: 26675,
		hasRegions: true,
		flagCode: "🇵🇦"
	},
	{
		code: "PE",
		code3: "PER",
		name: "Peru",
		nameLocal: "Piruw",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Lima",
		lat: -10,
		lng: -76,
		weight: 48493,
		hasRegions: true,
		flagCode: "🇵🇪"
	},
	{
		code: "PF",
		code3: "PYF",
		name: "French Polynesia",
		nameLocal: "Polynésie française",
		urlName: "French-Polynesia",
		urlNameLocal: "Polynesie-française",
		continentCode: "OC",
		timeZone: "Pacific/Marquesas",
		lat: -15,
		lng: -140,
		weight: 2412,
		hasRegions: true,
		flagCode: "🇵🇫"
	},
	{
		code: "PG",
		code3: "PNG",
		name: "Papua New Guinea",
		nameLocal: "Papua Niu Gini",
		urlName: "Papua-New-Guinea",
		urlNameLocal: "Papua-Niu-Gini",
		continentCode: "OC",
		timeZone: "Pacific/Port_Moresby",
		lat: -6,
		lng: 147,
		weight: 1557,
		hasRegions: true,
		flagCode: "🇵🇬"
	},
	{
		code: "PH",
		code3: "PHL",
		name: "Philippines",
		nameLocal: "Pilipinas",
		continentCode: "AS",
		languageCode: "en",
		timeZone: "Asia/Manila",
		lat: 13,
		lng: 122,
		weight: 143299,
		hasRegions: true,
		flagCode: "🇵🇭"
	},
	{
		code: "PK",
		code3: "PAK",
		name: "Pakistan",
		nameLocal: "پاكستان",
		urlNameLocal: "Pakistan",
		continentCode: "AS",
		timeZone: "Asia/Karachi",
		lat: 30,
		lng: 70,
		weight: 128664,
		hasRegions: true,
		flagCode: "🇵🇰"
	},
	{
		code: "PL",
		code3: "POL",
		name: "Poland",
		nameLocal: "Polska",
		continentCode: "EU",
		languageCode: "pl",
		timeZone: "Europe/Warsaw",
		lat: 52,
		lng: 20,
		weight: 507659,
		hasRegions: true,
		flagCode: "🇵🇱"
	},
	{
		code: "PM",
		code3: "SPM",
		name: "Saint Pierre And Miquelon",
		nameLocal: "Saint-Pierre-et-Miquelon",
		urlName: "Saint-Pierre-Miquelon",
		continentCode: "NA",
		timeZone: "America/Miquelon",
		lat: 46.83333333,
		lng: -56.33333333,
		weight: 108,
		hasRegions: true,
		flagCode: "🇵🇲"
	},
	{
		code: "PN",
		code3: "PCN",
		name: "Pitcairn Islands",
		nameLocal: "Pitcairn Islands",
		urlName: "Pitcairn-Islands",
		urlNameLocal: "Pitcairn-Islands",
		continentCode: "OC",
		lat: -25.06666666,
		lng: -130.1,
		weight: 1,
		hasRegions: false,
		flagCode: "🇵🇳"
	},
	{
		code: "PR",
		code3: "PRI",
		name: "Puerto Rico",
		nameLocal: "Puerto Rico",
		urlName: "Puerto-Rico",
		urlNameLocal: "Puerto-Rico",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/Puerto_Rico",
		lat: 18.25,
		lng: -66.5,
		weight: 1,
		hasRegions: false,
		flagCode: "🇵🇷"
	},
	{
		code: "PS",
		code3: "PSE",
		name: "Palestine",
		nameLocal: "فلسطين",
		urlNameLocal: "Palestine",
		continentCode: "AS",
		timeZone: "Asia/Hebron",
		lat: 31.9,
		lng: 35.2,
		weight: 5079,
		hasRegions: true,
		flagCode: "🇵🇸"
	},
	{
		code: "PT",
		code3: "PRT",
		name: "Portugal",
		nameLocal: "Portugal",
		continentCode: "EU",
		languageCode: "pt",
		timeZone: "Europe/Lisbon",
		lat: 39.5,
		lng: -8,
		weight: 272697,
		hasRegions: true,
		flagCode: "🇵🇹"
	},
	{
		code: "PW",
		code3: "PLW",
		name: "Palau",
		nameLocal: "Belau",
		continentCode: "OC",
		timeZone: "Pacific/Palau",
		lat: 7.5,
		lng: 134.5,
		weight: 99,
		hasRegions: true,
		flagCode: "🇵🇼"
	},
	{
		code: "PY",
		code3: "PRY",
		name: "Paraguay",
		nameLocal: "Paraguái",
		urlNameLocal: "Paraguai",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Asuncion",
		lat: -23,
		lng: -58,
		weight: 18370,
		hasRegions: true,
		flagCode: "🇵🇾"
	},
	{
		code: "QA",
		code3: "QAT",
		name: "Qatar",
		nameLocal: "قطر",
		urlNameLocal: "Qatar",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Qatar",
		lat: 25.5,
		lng: 51.25,
		weight: 15794,
		hasRegions: true,
		flagCode: "🇶🇦"
	},
	{
		code: "RE",
		code3: "REU",
		name: "Reunion",
		nameLocal: "La Réunion",
		urlNameLocal: "La-Reunion",
		continentCode: "AF",
		timeZone: "Indian/Reunion",
		lat: -21.15,
		lng: 55.5,
		weight: 1,
		hasRegions: false,
		flagCode: "🇷🇪"
	},
	{
		code: "RO",
		code3: "ROU",
		name: "Romania",
		nameLocal: "România",
		urlNameLocal: "Romania",
		continentCode: "EU",
		languageCode: "ro",
		timeZone: "Europe/Bucharest",
		lat: 46,
		lng: 25,
		weight: 237824,
		hasRegions: true,
		flagCode: "🇷🇴"
	},
	{
		code: "RS",
		code3: "SRB",
		name: "Serbia",
		nameLocal: "Србија",
		urlNameLocal: "Serbia",
		continentCode: "EU",
		languageCode: "sr",
		timeZone: "Europe/Belgrade",
		lat: 44,
		lng: 21,
		weight: 62062,
		hasRegions: true,
		flagCode: "🇷🇸"
	},
	{
		code: "RU",
		code3: "RUS",
		name: "Russia",
		nameLocal: "Россия",
		urlNameLocal: "Russia",
		continentCode: "EU",
		languageCode: "ru",
		timeZone: "Europe/Moscow",
		lat: 60,
		lng: 100,
		weight: 1001611,
		hasRegions: true,
		flagCode: "🇷🇺"
	},
	{
		code: "RW",
		code3: "RWA",
		name: "Rwanda",
		nameLocal: "Rwanda",
		continentCode: "AF",
		timeZone: "Africa/Kigali",
		lat: -2,
		lng: 30,
		weight: 987,
		hasRegions: true,
		flagCode: "🇷🇼"
	},
	{
		code: "SA",
		code3: "SAU",
		name: "Saudi Arabia",
		nameLocal: "العربية السعودية",
		urlName: "Saudi-Arabia",
		urlNameLocal: "Saudi-Arabia",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Riyadh",
		lat: 25,
		lng: 45,
		weight: 146944,
		hasRegions: true,
		flagCode: "🇸🇦"
	},
	{
		code: "SB",
		code3: "SLB",
		name: "Solomon Islands",
		nameLocal: "Solomon Islands",
		urlName: "Solomon-Islands",
		urlNameLocal: "Solomon-Islands",
		continentCode: "OC",
		timeZone: "Pacific/Guadalcanal",
		lat: -8,
		lng: 159,
		weight: 184,
		hasRegions: true,
		flagCode: "🇸🇧"
	},
	{
		code: "SC",
		code3: "SYC",
		name: "Seychelles",
		nameLocal: "Seychelles",
		continentCode: "AF",
		timeZone: "Indian/Mahe",
		lat: -4.58333333,
		lng: 55.66666666,
		weight: 1542,
		hasRegions: true,
		flagCode: "🇸🇨"
	},
	{
		code: "SD",
		code3: "SDN",
		name: "Sudan",
		nameLocal: "السودان",
		urlNameLocal: "Sudan",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Khartoum",
		lat: 15,
		lng: 30,
		weight: 394,
		hasRegions: true,
		flagCode: "🇸🇩"
	},
	{
		code: "SE",
		code3: "SWE",
		name: "Sweden",
		nameLocal: "Sverige",
		continentCode: "EU",
		languageCode: "sv",
		timeZone: "Europe/Stockholm",
		lat: 62,
		lng: 15,
		weight: 487249,
		hasRegions: true,
		flagCode: "🇸🇪"
	},
	{
		code: "SG",
		code3: "SGP",
		name: "Singapore",
		nameLocal: "新加坡",
		urlNameLocal: "Singapore",
		continentCode: "AS",
		languageCode: "en",
		timeZone: "Asia/Singapore",
		lat: 1.36666666,
		lng: 103.8,
		weight: 92311,
		hasRegions: true,
		flagCode: "🇸🇬"
	},
	{
		code: "SH",
		code3: "SHN",
		name: "Saint Helena",
		nameLocal: "Saint Helena",
		urlName: "Saint-Helena",
		urlNameLocal: "Saint-Helena",
		continentCode: "AF",
		timeZone: "Atlantic/St_Helena",
		lat: -15.95,
		lng: -5.72,
		weight: 9,
		hasRegions: true,
		flagCode: "🇸🇭"
	},
	{
		code: "SI",
		code3: "SVN",
		name: "Slovenia",
		nameLocal: "Slovenija",
		continentCode: "EU",
		languageCode: "sl",
		timeZone: "Europe/Ljubljana",
		lat: 46.11666666,
		lng: 14.81666666,
		weight: 79141,
		hasRegions: true,
		flagCode: "🇸🇮"
	},
	{
		code: "SJ",
		code3: "SJM",
		name: "Svalbard And Jan Mayen",
		nameLocal: "Svalbard og Jan Mayen",
		urlName: "Svalbard-Jan-Mayen",
		urlNameLocal: "Svalbard-og-Jan-Mayen",
		continentCode: "EU",
		timeZone: "Arctic/Longyearbyen",
		lat: 78,
		lng: 20,
		weight: 167,
		hasRegions: true,
		flagCode: "🇸🇯"
	},
	{
		code: "SK",
		code3: "SVK",
		name: "Slovakia",
		nameLocal: "Slovensko",
		continentCode: "EU",
		languageCode: "sk",
		timeZone: "Europe/Prague",
		lat: 48.66666666,
		lng: 19.5,
		weight: 93383,
		hasRegions: true,
		flagCode: "🇸🇰"
	},
	{
		code: "SL",
		code3: "SLE",
		name: "Sierra Leone",
		nameLocal: "Sierra Leone",
		urlName: "Sierra-Leone",
		urlNameLocal: "Sierra-Leone",
		continentCode: "AF",
		timeZone: "Africa/Freetown",
		lat: 8.5,
		lng: -11.5,
		weight: 237,
		hasRegions: true,
		flagCode: "🇸🇱"
	},
	{
		code: "SM",
		code3: "SMR",
		name: "San Marino",
		nameLocal: "San Marino",
		urlName: "San-Marino",
		urlNameLocal: "San-Marino",
		continentCode: "EU",
		timeZone: "Europe/San_Marino",
		lat: 43.76666666,
		lng: 12.41666666,
		weight: 343,
		hasRegions: true,
		flagCode: "🇸🇲"
	},
	{
		code: "SN",
		code3: "SEN",
		name: "Senegal",
		nameLocal: "Sénégal",
		urlNameLocal: "Senegal",
		continentCode: "AF",
		timeZone: "Africa/Dakar",
		lat: 14,
		lng: -14,
		weight: 3701,
		hasRegions: true,
		flagCode: "🇸🇳"
	},
	{
		code: "SO",
		code3: "SOM",
		name: "Somalia",
		nameLocal: "Soomaaliya",
		continentCode: "AF",
		timeZone: "Africa/Mogadishu",
		lat: 10,
		lng: 49,
		weight: 306,
		hasRegions: true,
		flagCode: "🇸🇴"
	},
	{
		code: "SR",
		code3: "SUR",
		name: "Suriname",
		nameLocal: "Suriname",
		continentCode: "SA",
		timeZone: "America/Paramaribo",
		lat: 4,
		lng: -56,
		weight: 1991,
		hasRegions: true,
		flagCode: "🇸🇷"
	},
	{
		code: "SS",
		code3: "SSD",
		name: "South Sudan",
		nameLocal: "South Sudan",
		urlName: "South-Sudan",
		urlNameLocal: "South-Sudan",
		continentCode: "AF",
		lat: 7,
		lng: 30,
		weight: 1,
		hasRegions: false,
		flagCode: "🇸🇸"
	},
	{
		code: "ST",
		code3: "STP",
		name: "Sao Tome And Principe",
		nameLocal: "São Tomé e Príncipe",
		urlName: "Sao-Tome-Principe",
		urlNameLocal: "Sao-Tome-Principe",
		continentCode: "AF",
		timeZone: "Africa/Sao_Tome",
		lat: 1,
		lng: 7,
		weight: 192,
		hasRegions: true,
		flagCode: "🇸🇹"
	},
	{
		code: "SV",
		code3: "SLV",
		name: "El Salvador",
		nameLocal: "El Salvador",
		urlName: "El-Salvado",
		urlNameLocal: "El-Salvado",
		continentCode: "NA",
		languageCode: "es",
		timeZone: "America/El_Salvador",
		lat: 13.83333333,
		lng: -88.91666666,
		weight: 16014,
		hasRegions: true,
		flagCode: "🇸🇻"
	},
	{
		code: "SX",
		code3: "SXM",
		name: "Sint Maarten (Dutch part)",
		nameLocal: "Saint-Martin",
		urlName: "Sint-Maarten-Dutch-part",
		continentCode: "NA",
		timeZone: "PRT",
		lat: 18.033333,
		lng: -63.05,
		weight: 1,
		hasRegions: false,
		flagCode: "🇸🇽"
	},
	{
		code: "SY",
		code3: "SYR",
		name: "Syria",
		nameLocal: "سوريا",
		urlNameLocal: "Syria",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Damascus",
		lat: 35,
		lng: 38,
		weight: 328,
		hasRegions: true,
		flagCode: "🇸🇾"
	},
	{
		code: "SZ",
		code3: "SWZ",
		name: "Swaziland",
		nameLocal: "eSwatini",
		continentCode: "AF",
		timeZone: "Africa/Mbabane",
		lat: -26.5,
		lng: 31.5,
		weight: 1017,
		hasRegions: true,
		flagCode: "🇸🇿"
	},
	{
		code: "TC",
		code3: "TCA",
		name: "Turks And Caicos Islands",
		nameLocal: "Turks and Caicos Islands",
		urlName: "Turks-Caicos-Islands",
		urlNameLocal: "Turks-Caicos-Islands",
		continentCode: "NA",
		timeZone: "PRT",
		lat: 21.75,
		lng: -71.58333333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇹🇨"
	},
	{
		code: "TD",
		code3: "TCD",
		name: "Chad",
		nameLocal: "تشاد‎",
		urlNameLocal: "Chad",
		continentCode: "AF",
		timeZone: "Africa/Ndjamena",
		lat: 15,
		lng: 19,
		weight: 221,
		hasRegions: true,
		flagCode: "🇹🇩"
	},
	{
		code: "TF",
		code3: "ATF",
		name: "French Southern and Antarctic Lands",
		nameLocal: "Terres australes et antarctiques françaises",
		urlName: "French-Southern-Antarctic-Lands",
		urlNameLocal: "Terres-australes-antarctiques-françaises",
		continentCode: "AN",
		lat: -49.25,
		lng: 69.167,
		weight: 1,
		hasRegions: false,
		flagCode: "🇹🇫"
	},
	{
		code: "TG",
		code3: "TGO",
		name: "Togo",
		nameLocal: "Togo",
		continentCode: "AF",
		timeZone: "Africa/Lome",
		lat: 8,
		lng: 1.16666666,
		weight: 1564,
		hasRegions: true,
		flagCode: "🇹🇬"
	},
	{
		code: "TH",
		code3: "THA",
		name: "Thailand",
		nameLocal: "ประเทศไทย",
		urlNameLocal: "Thailand",
		continentCode: "AS",
		languageCode: "th",
		timeZone: "Asia/Bangkok",
		lat: 15,
		lng: 100,
		weight: 186458,
		hasRegions: true,
		flagCode: "🇹🇭"
	},
	{
		code: "TJ",
		code3: "TJK",
		name: "Tajikistan",
		nameLocal: "Таджикистан",
		urlNameLocal: "Tajikistan",
		continentCode: "AS",
		timeZone: "Asia/Dushanbe",
		lat: 39,
		lng: 71,
		weight: 913,
		hasRegions: true,
		flagCode: "🇹🇯"
	},
	{
		code: "TK",
		code3: "TKL",
		name: "Tokelau",
		nameLocal: "Tokelau",
		continentCode: "OC",
		timeZone: "Pacific/Fakaofo",
		lat: -9,
		lng: -172,
		weight: 106,
		hasRegions: true,
		flagCode: "🇹🇰"
	},
	{
		code: "TL",
		code3: "TLS",
		name: "Timor-Leste",
		nameLocal: "Timor-Leste",
		continentCode: "OC",
		timeZone: "Asia/Dili",
		lat: -8.83333333,
		lng: 125.91666666,
		weight: 185,
		hasRegions: true,
		flagCode: "🇹🇱"
	},
	{
		code: "TM",
		code3: "TKM",
		name: "Turkmenistan",
		nameLocal: "Туркмения",
		urlNameLocal: "Turkmenistan",
		continentCode: "AS",
		timeZone: "Asia/Ashgabat",
		lat: 40,
		lng: 60,
		weight: 228,
		hasRegions: true,
		flagCode: "🇹🇲"
	},
	{
		code: "TN",
		code3: "TUN",
		name: "Tunisia",
		nameLocal: "تونس",
		urlNameLocal: "Tunisia",
		continentCode: "AF",
		languageCode: "ar",
		timeZone: "Africa/Tunis",
		lat: 34,
		lng: 9,
		weight: 45549,
		hasRegions: true,
		flagCode: "🇹🇳"
	},
	{
		code: "TO",
		code3: "TON",
		name: "Tonga",
		nameLocal: "Tonga",
		continentCode: "OC",
		timeZone: "Pacific/Tongatapu",
		lat: -20,
		lng: -175,
		weight: 84,
		hasRegions: true,
		flagCode: "🇹🇴"
	},
	{
		code: "TR",
		code3: "TUR",
		name: "Turkey",
		nameLocal: "Türkiye",
		urlNameLocal: "Turkiye",
		continentCode: "AS",
		languageCode: "tr",
		timeZone: "Europe/Istanbul",
		lat: 39,
		lng: 35,
		weight: 374544,
		hasRegions: true,
		flagCode: "🇹🇷"
	},
	{
		code: "TT",
		code3: "TTO",
		name: "Trinidad and Tobago",
		nameLocal: "Trinidad and Tobago",
		urlName: "Trinidad-Tobago",
		urlNameLocal: "Trinidad-Tobago",
		continentCode: "NA",
		timeZone: "America/Port_of_Spain",
		lat: 11,
		lng: -61,
		weight: 9720,
		hasRegions: true,
		flagCode: "🇹🇹"
	},
	{
		code: "TV",
		code3: "TUV",
		name: "Tuvalu",
		nameLocal: "Tuvalu",
		continentCode: "OC",
		timeZone: "Pacific/Funafuti",
		lat: -8,
		lng: 178,
		weight: 185,
		hasRegions: true,
		flagCode: "🇹🇻"
	},
	{
		code: "TW",
		code3: "TWN",
		name: "Taiwan",
		nameLocal: "台灣",
		urlNameLocal: "Taiwan",
		continentCode: "AS",
		languageCode: "zh",
		timeZone: "Asia/Taipei",
		lat: 23.5,
		lng: 121,
		weight: 363467,
		hasRegions: true,
		flagCode: "🇹🇼"
	},
	{
		code: "TZ",
		code3: "TZA",
		name: "Tanzania",
		nameLocal: "Tanzania",
		continentCode: "AF",
		timeZone: "Africa/Dar_es_Salaam",
		lat: -6,
		lng: 35,
		weight: 5219,
		hasRegions: true,
		flagCode: "🇹🇿"
	},
	{
		code: "UA",
		code3: "UKR",
		name: "Ukraine",
		nameLocal: "Україна",
		urlNameLocal: "Ukraine",
		continentCode: "EU",
		languageCode: "uk",
		timeZone: "Europe/Kiev",
		lat: 49,
		lng: 32,
		weight: 274572,
		hasRegions: true,
		flagCode: "🇺🇦"
	},
	{
		code: "UG",
		code3: "UGA",
		name: "Uganda",
		nameLocal: "Uganda",
		continentCode: "AF",
		timeZone: "Africa/Kampala",
		lat: 1,
		lng: 32,
		weight: 2822,
		hasRegions: true,
		flagCode: "🇺🇬"
	},
	{
		code: "UM",
		code3: "UMI",
		name: "United States Minor Outlying Islands",
		nameLocal: "United States Minor Outlying Islands",
		urlName: "United-States-Minor-Outlying-Islands",
		urlNameLocal: "United-States-Minor-Outlying-Islands",
		continentCode: "OC",
		lat: 19.3,
		lng: 166.633333,
		weight: 1,
		hasRegions: false,
		flagCode: "🇺🇲"
	},
	{
		code: "US",
		code3: "USA",
		name: "United States",
		nameLocal: "United States",
		urlName: "United-States",
		urlNameLocal: "United-States",
		continentCode: "NA",
		languageCode: "en",
		timeZone: "America/New_York",
		lat: 38,
		lng: -97,
		weight: 15602589,
		hasRegions: true,
		flagCode: "🇺🇸"
	},
	{
		code: "UY",
		code3: "URY",
		name: "Uruguay",
		nameLocal: "Uruguay",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Montevideo",
		lat: -33,
		lng: -56,
		weight: 33484,
		hasRegions: true,
		flagCode: "🇺🇾"
	},
	{
		code: "UZ",
		code3: "UZB",
		name: "Uzbekistan",
		nameLocal: "Узбекистан",
		urlNameLocal: "Uzbekistan",
		continentCode: "AS",
		timeZone: "Asia/Tashkent",
		lat: 41,
		lng: 64,
		weight: 3339,
		hasRegions: true,
		flagCode: "🇺🇿"
	},
	{
		code: "VA",
		code3: "VAT",
		name: "Vatican City",
		nameLocal: "Vaticano",
		urlName: "Vatican-City",
		continentCode: "EU",
		lat: 41.9,
		lng: 12.45,
		weight: 1,
		hasRegions: false,
		flagCode: "🇻🇦"
	},
	{
		code: "VC",
		code3: "VCT",
		name: "Saint Vincent And The Grenadines",
		nameLocal: "Saint Vincent and the Grenadines",
		urlName: "Saint-Vincent-The-Grenadines",
		urlNameLocal: "Saint-Vincent-The-Grenadines",
		continentCode: "NA",
		timeZone: "America/St_Vincent",
		lat: 13.25,
		lng: -61.2,
		weight: 604,
		hasRegions: true,
		flagCode: "🇻🇨"
	},
	{
		code: "VE",
		code3: "VEN",
		name: "Venezuela",
		nameLocal: "Venezuela",
		continentCode: "SA",
		languageCode: "es",
		timeZone: "America/Caracas",
		lat: 8,
		lng: -66,
		weight: 127348,
		hasRegions: true,
		flagCode: "🇻🇪"
	},
	{
		code: "VG",
		code3: "VGB",
		name: "British Virgin Islands",
		nameLocal: "British Virgin Islands",
		urlName: "British-Virgin-Islands",
		urlNameLocal: "British-Virgin-Islands",
		continentCode: "NA",
		timeZone: "America/Tortola",
		lat: 18.431383,
		lng: -64.62305,
		weight: 1,
		hasRegions: false,
		flagCode: "🇻🇬"
	},
	{
		code: "VI",
		code3: "VIR",
		name: "U.S. Virgin Islands",
		nameLocal: "United States Virgin Islands",
		urlName: "US-Virgin-Islands",
		urlNameLocal: "US-Virgin-Islands",
		continentCode: "NA",
		timeZone: "America/St_Thomas",
		lat: 18.35,
		lng: -64.933333,
		weight: 2561,
		hasRegions: true,
		flagCode: "🇻🇮"
	},
	{
		code: "VN",
		code3: "VNM",
		name: "Vietnam",
		nameLocal: "Việt Nam",
		urlNameLocal: "Viet Nam",
		continentCode: "AS",
		languageCode: "vi",
		timeZone: "Asia/Ho_Chi_Minh",
		lat: 16.16666666,
		lng: 107.83333333,
		weight: 195911,
		hasRegions: true,
		flagCode: "🇻🇳"
	},
	{
		code: "VU",
		code3: "VUT",
		name: "Vanuatu",
		nameLocal: "Vanuatu",
		continentCode: "OC",
		timeZone: "Pacific/Efate",
		lat: -16,
		lng: 167,
		weight: 204,
		hasRegions: true,
		flagCode: "🇻🇺"
	},
	{
		code: "WF",
		code3: "WLF",
		name: "Wallis And Futuna",
		nameLocal: "Wallis et Futuna",
		urlName: "Wallis-Futuna",
		urlNameLocal: "Wallis-Futuna",
		continentCode: "OC",
		timeZone: "Pacific/Wallis",
		lat: -13.3,
		lng: -176.2,
		weight: 69,
		hasRegions: true,
		flagCode: "🇼🇫"
	},
	{
		code: "WS",
		code3: "WSM",
		name: "Samoa",
		nameLocal: "Sāmoa",
		urlNameLocal: "Samoa",
		continentCode: "OC",
		timeZone: "Pacific/Apia",
		lat: -13.58333333,
		lng: -172.33333333,
		weight: 269,
		hasRegions: true,
		flagCode: "🇼🇸"
	},
	{
		code: "XK",
		code3: "UNK",
		name: "Kosovo",
		nameLocal: "Косово",
		continentCode: "EU",
		lat: 42.666667,
		lng: 21.166667,
		weight: 1,
		hasRegions: false,
		flagCode: "🇽🇰"
	},
	{
		code: "YE",
		code3: "YEM",
		name: "Yemen",
		nameLocal: "اليَمَن",
		urlNameLocal: "Yemen",
		continentCode: "AS",
		languageCode: "ar",
		timeZone: "Asia/Aden",
		lat: 15,
		lng: 48,
		weight: 2509,
		hasRegions: true,
		flagCode: "🇾🇪"
	},
	{
		code: "YT",
		code3: "MYT",
		name: "Mayotte",
		nameLocal: "Mayotte",
		continentCode: "AF",
		lat: -12.83333333,
		lng: 45.16666666,
		weight: 1,
		hasRegions: false,
		flagCode: "🇾🇹"
	},
	{
		code: "ZA",
		code3: "ZAF",
		name: "South Africa",
		nameLocal: "Ningizimu Afrika",
		urlName: "South-Africa",
		urlNameLocal: "Ningizimu-Afrika",
		continentCode: "AF",
		languageCode: "en",
		timeZone: "Africa/Johannesburg",
		lat: -29,
		lng: 24,
		weight: 329735,
		hasRegions: true,
		flagCode: "🇿🇦"
	},
	{
		code: "ZM",
		code3: "ZMB",
		name: "Zambia",
		nameLocal: "Zambia",
		continentCode: "AF",
		timeZone: "Africa/Lusaka",
		lat: -15,
		lng: 30,
		weight: 9048,
		hasRegions: true,
		flagCode: "🇿🇲"
	},
	{
		code: "ZW",
		code3: "ZWE",
		name: "Zimbabwe",
		nameLocal: "Zimbabwe",
		continentCode: "AF",
		timeZone: "Africa/Harare",
		lat: -20,
		lng: 30,
		weight: 2092,
		hasRegions: true,
		flagCode: "🇿🇼"
	}
];

function getJsonCountries() {
  var nameMap = {};
  var codeMap = {};
  data.forEach(function (country) {
    nameMap[country.name.toLowerCase()] = country;
    codeMap[country.code.toLowerCase()] = country;
  });
  return {
    names: nameMap,
    codes: codeMap
  };
}
function getCountryCode(name) {
  var nameMap = getJsonCountries().names;
  var country = name ? nameMap[name.toLowerCase()] : null;
  return country ? country.code : null;
}
function getCountryName(code) {
  var codeMap = getJsonCountries().codes;
  var country = code ? codeMap[code.toLowerCase()] : null;
  return country ? country.name : code;
}
function getCountryCode3(code) {
  var codeMap = getJsonCountries().codes;
  var country = code ? codeMap[code.toLowerCase()] : null;
  return country ? country.code3 : null;
}
function getCountryObject(code) {
  var codeMap = getJsonCountries().codes;
  return code ? codeMap[code.toLowerCase()] : null;
}

// https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization

var CurrentNetworkScoreSection = /*#__PURE__*/function (_PureComponent) {
  _inherits(CurrentNetworkScoreSection, _PureComponent);

  var _super = _createSuper(CurrentNetworkScoreSection);

  function CurrentNetworkScoreSection() {
    _classCallCheck(this, CurrentNetworkScoreSection);

    return _super.apply(this, arguments);
  }

  _createClass(CurrentNetworkScoreSection, [{
    key: "render",
    value: function render() {
      var istAnalysis = this.props.istAnalysis;

      if (!istAnalysis || !istAnalysis.statsIsp) {
        return /*#__PURE__*/React__default["default"].createElement(SummarySection, null, /*#__PURE__*/React__default["default"].createElement("h3", {
          className: "mb-0"
        }, intl__default["default"].get("internet_performance_score")), /*#__PURE__*/React__default["default"].createElement("p", null, intl__default["default"].get('internet_no_data')));
      }

      var statsIsp = istAnalysis.statsIsp;
      var score = 0;
      var location = "";
      var hasScore = false;

      if (statsIsp && statsIsp.country) {
        if (statsIsp.city) {
          location = statsIsp.city + ", " + getCountryName(statsIsp.country);
          score = istAnalysis.scoreInCity ? istAnalysis.scoreInCity : 0;
        } else {
          location = getCountryName(statsIsp.country);
          score = istAnalysis.scoreInCountry ? istAnalysis.scoreInCountry : 0;
        }

        hasScore = true;
      }

      var finalScore = hasScore ? Math.ceil(score * 5) : 0;
      var rankString = hasScore ? rankStringWithLocation(score * 100, location) : '';
      return /*#__PURE__*/React__default["default"].createElement(SummarySection, null, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get("discovery_internet_performance_score")), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-3"
      }, rankString), /*#__PURE__*/React__default["default"].createElement(SummaryInternetScore, {
        leftText: intl__default["default"].get("generic_worst"),
        rightText: intl__default["default"].get("generic_best"),
        score: finalScore,
        infoText: intl__default["default"].get('internet_score_info')
      }, React__default["default"].Children.toArray(this.props.children)));
    }
  }]);

  return CurrentNetworkScoreSection;
}(React.PureComponent);

/**
 * A summary of multiple speed test samples in a single day.
 */
var IstAnalysisDaySample = /*#__PURE__*/function () {
  function IstAnalysisDaySample() {
    _classCallCheck(this, IstAnalysisDaySample);

    _defineProperty(this, "samples", void 0);

    this.samples = [];
  }

  _createClass(IstAnalysisDaySample, [{
    key: "addSample",
    value: function addSample(sample) {
      this.samples.push(sample);
    }
  }, {
    key: "getSamples",
    value: function getSamples() {
      return this.samples;
    }
  }, {
    key: "getOutlierIndex",
    value: function getOutlierIndex() {
      var index = -1;
      var outlier = Number.MIN_VALUE;

      for (var i = 0; i < this.samples.length; i++) {
        var sample = this.samples[i];

        if (sample.outlierDownload != null || sample.outlierUpload != null) {
          var outlierMax = Math.max(sample.outlierDownload ? Math.abs(Number(sample.outlierDownload)) : Number.MIN_VALUE, sample.outlierUpload ? Math.abs(Number(sample.outlierUpload)) : Number.MIN_VALUE);

          if (outlierMax > outlier) {
            outlier = outlierMax;
            index = i;
          }
        }
      }

      return index;
    }
  }, {
    key: "hasOutlier",
    value: function hasOutlier() {
      return this.getOutlierIndex() !== -1;
    }
  }, {
    key: "getAvgDown",
    value: function getAvgDown() {
      /*const outlierIndex = this.getOutlierIndex();
      if (outlierIndex !== -1) {
          let avg = this.samples[outlierIndex].downloadBps;
          return avg ? Number(avg) : 0;
      }*/
      var mean = 0;

      for (var i = 0; i < this.samples.length; i++) {
        var sample = this.samples[i];
        mean += Number(sample.downloadBps);
      }

      return mean / this.samples.length;
    }
  }, {
    key: "getAvgUp",
    value: function getAvgUp() {
      /*const outlierIndex = this.getOutlierIndex();
      if (outlierIndex !== -1) {
          let avg = this.samples[outlierIndex].uploadBps;
          return avg ? Number(avg) : 0;
      }*/
      var mean = 0;

      for (var i = 0; i < this.samples.length; i++) {
        var sample = this.samples[i];
        mean += Number(sample.uploadBps);
      }

      return mean / this.samples.length;
    }
  }, {
    key: "getOutlierDown",
    value: function getOutlierDown() {
      var outlierIndex = this.getOutlierIndex();

      if (outlierIndex !== -1) {
        var sample = this.samples[outlierIndex];
        return sample.outlierDownload ? Number(sample.outlierDownload) : null;
      }

      return null;
    }
  }, {
    key: "getOutlierUp",
    value: function getOutlierUp() {
      var outlierIndex = this.getOutlierIndex();

      if (outlierIndex !== -1) {
        var sample = this.samples[outlierIndex];
        return sample.outlierUpload ? Number(sample.outlierUpload) : null;
      }

      return null;
    }
  }, {
    key: "getTimestamp",
    value: function getTimestamp() {
      var outlierIndex = this.getOutlierIndex();
      if (outlierIndex !== -1) return Number(this.samples[outlierIndex].timestamp);
      return this.samples.length > 0 ? Number(this.samples[0].timestamp) : 0;
    }
  }, {
    key: "getLocationIndexes",
    value: function getLocationIndexes() {
      var indexes = [];

      for (var i = 0; i < this.samples.length; i++) {
        var sample = this.samples[i];

        if (sample.downloadServerIndex !== null && sample.downloadServerIndex !== undefined && sample.downloadServerIndex >= 0 && !indexes.includes(Number(sample.downloadServerIndex))) {
          indexes.push(Number(sample.downloadServerIndex));
        }

        if (sample.uploadServerIndex !== null && sample.uploadServerIndex !== undefined && sample.uploadServerIndex >= 0 && !indexes.includes(Number(sample.uploadServerIndex))) {
          indexes.push(Number(sample.uploadServerIndex));
        }
      }

      return indexes;
    }
  }]);

  return IstAnalysisDaySample;
}();

/**
 * Converts the network contacts and network discovery into a list of <code>Contact</code> objects
 * that retain the current status.
 *
 * @param istAnalysisSamples The single speed test samples
 * @return {[DaySpeedSample]} The array of samples, coalesced by day
 */

function convertSamplesToDailySamples(istAnalysisSamples) {
  // --- GROUP INTO DAY SAMPLES --------------------
  var day = -1,
      month = -1,
      year = -1;
  var daySample = null;
  var daySamples = [];

  var _iterator = _createForOfIteratorHelper(istAnalysisSamples),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var sample = _step.value;

      if (sample == null || sample.success !== "true") {
        continue;
      }

      if (daySample === null) {
        daySample = new IstAnalysisDaySample();
      } else {
        var calendar = new Date(Number(sample.timestamp));

        if (calendar.getDate() !== day || calendar.getMonth() !== month || calendar.getFullYear() !== year) {
          daySamples.push(daySample);
          daySample = new IstAnalysisDaySample();
        }

        day = calendar.getDate();
        month = calendar.getMonth();
        year = calendar.getFullYear();
      }

      daySample.addSample(sample);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (daySample != null) {
    // Add the last sample, which is not inserted withing the for loop.
    daySamples.push(daySample);
  }

  return daySamples;
}
/**
 * Converts a list of IstAnalysisDaySample objects into SpeedHistorySample objects, filling the gap when needed.
 *
 * @param daySamples {[IstAnalysisDaySample]} array of daily samples
 * @param startDate {Date} The chart start date
 * @param endDate {Date} The chart end date
 */

function convertDailySamplesToChartData(daySamples, startDate, endDate) {
  var sampleDayExtractor = function sampleDayExtractor(timestamp) {
    return new Date(timestamp).toLocaleDateString();
  };

  var samplesByDay = daySamples.reduce(function (map, daySample) {
    map[sampleDayExtractor(daySample.getTimestamp())] = daySample;
    return map;
  }, {});
  var days = daysDifferenceBetween(startDate, endDate);
  var chartSamples = [];

  for (var i = 0; i <= days; i++) {
    var d = new Date(startDate);
    d.setDate(d.getDate() + i); // This works also across months, don't worry

    var key = sampleDayExtractor(d.getTime());
    var daySample = samplesByDay[key];
    chartSamples.push({
      date: d,
      daySample: daySample,
      formattedDate: formatAbsoluteDate(d.getTime(), DATE_FORMAT_RECENT),
      avgDownload: daySample ? formatSpeed(daySample.getAvgDown()) : null,
      avgUpload: daySample ? formatSpeed(daySample.getAvgUp()) : null
    });
  }

  return chartSamples;
}

var Y_AXIS_TICK_COUNT = 5;
var chartBlueColor = "#1a6aff";
var chartGreenColor = "#26a65d"; // Why PureComponent?
// https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization

var DailySpeedHistoryChart = /*#__PURE__*/function (_PureComponent) {
  _inherits(DailySpeedHistoryChart, _PureComponent);

  var _super = _createSuper(DailySpeedHistoryChart);

  function DailySpeedHistoryChart() {
    _classCallCheck(this, DailySpeedHistoryChart);

    return _super.apply(this, arguments);
  }

  _createClass(DailySpeedHistoryChart, [{
    key: "render",
    value: // --------------------------------------------------------------------------------------------------------------
    // RENDERING
    // --------------------------------------------------------------------------------------------------------------
    function render() {
      var _this$props = this.props,
          startDate = _this$props.startDate,
          endDate = _this$props.endDate,
          daySamples = _this$props.daySamples,
          tooltip = _this$props.tooltip,
          height = _this$props.height,
          exampleData = _this$props.exampleData;
      var chartData = exampleData || convertDailySamplesToChartData(daySamples, startDate, endDate);
      return chartData ? /*#__PURE__*/React__default["default"].createElement(recharts.ResponsiveContainer, {
        width: "100%",
        height: height
      }, /*#__PURE__*/React__default["default"].createElement(recharts.AreaChart, {
        data: chartData
      }, /*#__PURE__*/React__default["default"].createElement("defs", null, /*#__PURE__*/React__default["default"].createElement("linearGradient", {
        id: "colorUpload",
        x1: "0",
        y1: "0",
        x2: "0",
        y2: "1"
      }, /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "5%",
        stopColor: chartBlueColor,
        stopOpacity: 0.8
      }), /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "95%",
        stopColor: chartBlueColor,
        stopOpacity: 0
      })), /*#__PURE__*/React__default["default"].createElement("linearGradient", {
        id: "colorDownload",
        x1: "0",
        y1: "0",
        x2: "0",
        y2: "1"
      }, /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "5%",
        stopColor: chartGreenColor,
        stopOpacity: 0.8
      }), /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "95%",
        stopColor: chartGreenColor,
        stopOpacity: 0
      }))), /*#__PURE__*/React__default["default"].createElement(recharts.CartesianGrid, {
        strokeDasharray: "3 3"
      }), tooltip === true && /*#__PURE__*/React__default["default"].createElement(recharts.Tooltip, {
        content: /*#__PURE__*/React__default["default"].createElement(CustomTooltip, null)
      }), /*#__PURE__*/React__default["default"].createElement(recharts.XAxis, {
        dataKey: "formattedDate"
      }), /*#__PURE__*/React__default["default"].createElement(recharts.YAxis, {
        type: "number",
        orientation: "right",
        ticks: this.getAreaChartTicks(chartData)
      }), /*#__PURE__*/React__default["default"].createElement(recharts.Area, {
        type: "monotone",
        connectNulls: true,
        id: "area-upload",
        dot: {
          r: 2
        },
        dataKey: "avgUpload",
        stroke: "#1a6aff",
        fill: "url(#colorUpload)"
      }), /*#__PURE__*/React__default["default"].createElement(recharts.Area, {
        type: "monotone",
        connectNulls: true,
        dot: {
          r: 2
        },
        id: "area-download",
        dataKey: "avgDownload",
        stroke: "#26a65d",
        fill: "url(#colorDownload)"
      }))) : '';
    }
  }, {
    key: "getAreaChartTicks",
    value: function getAreaChartTicks(data) {
      var ticks = [];
      var values = data.map(function (val) {
        return Math.max(val.avgDownload || 0, val.avgUpload || 0);
      });
      var max = Math.max.apply(Math, _toConsumableArray(values));

      for (var i = 0; i <= Y_AXIS_TICK_COUNT; i++) {
        var offset = max / Y_AXIS_TICK_COUNT * i;
        ticks.push(Math.trunc(offset));
      }

      return ticks;
    }
  }]);

  return DailySpeedHistoryChart;
}(React.PureComponent);

var CustomTooltip = function CustomTooltip(_ref) {
  var active = _ref.active,
      payload = _ref.payload,
      label = _ref.label;

  if (active && payload && payload.length) {
    var title = label;

    if (payload[0].payload && payload[0].payload.date) {
      title = formatAbsoluteDate(payload[0].payload.date, DATE_FORMAT_LONG);
    }

    console.log(payload);
    return /*#__PURE__*/React__default["default"].createElement("div", {
      className: "card card-bordered"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "card-body"
    }, /*#__PURE__*/React__default["default"].createElement("h4", {
      className: "label"
    }, title), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "label"
    }, intl__default["default"].get('internet_average_download', {
      value: payload[1].value
    })), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "label"
    }, intl__default["default"].get('internet_average_upload', {
      value: payload[0].value
    }))));
  }

  return null;
};

DailySpeedHistoryChart.propTypes = {
  exampleData: PropTypes__default["default"].array,
  height: PropTypes__default["default"].number,
  startDate: PropTypes__default["default"].object,
  endDate: PropTypes__default["default"].object,
  daySamples: PropTypes__default["default"].array,
  tooltip: PropTypes__default["default"].bool
};

/**
  * A horizontal layout card to show metrics and optional trend.
  */

var MetricHorizontalCard = /*#__PURE__*/function (_Component) {
  _inherits(MetricHorizontalCard, _Component);

  var _super = _createSuper(MetricHorizontalCard);

  function MetricHorizontalCard() {
    _classCallCheck(this, MetricHorizontalCard);

    return _super.apply(this, arguments);
  }

  _createClass(MetricHorizontalCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          value = _this$props.value,
          measure = _this$props.measure,
          extra = _this$props.extra,
          extraIcon = _this$props.extraIcon,
          className = _this$props.className;
      var cName = className || "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "bg-soft-primary rounded " + cName
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-left"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-baseline"
      }, /*#__PURE__*/React__default["default"].createElement("small", null, title), extra && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-2"
      }, extraIcon), /*#__PURE__*/React__default["default"].createElement("small", {
        className: "mx-1 mb-0"
      }, extra))), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, value, /*#__PURE__*/React__default["default"].createElement("small", {
        className: "ml-1 text-secondary"
      }, measure))));
    }
  }]);

  return MetricHorizontalCard;
}(React.Component);
MetricHorizontalCard.propTypes = {
  title: PropTypes__default["default"].string,
  className: PropTypes__default["default"].string,
  value: PropTypes__default["default"].string,
  measure: PropTypes__default["default"].string,
  extra: PropTypes__default["default"].string,
  extraIcon: PropTypes__default["default"].node
};

function createMockChartSamples(startDate, endDate) {
  var days = daysDifferenceBetween(startDate, endDate);
  var chartSamples = [];

  for (var i = 0; i <= days; i++) {
    var d = new Date(startDate);
    d.setDate(d.getDate() + i);
    chartSamples.push({
      date: d,
      formattedDate: formatAbsoluteDate(d.getTime(), DATE_FORMAT_RECENT),
      avgDownload: Math.floor(Math.random() * 100),
      avgUpload: Math.floor(Math.random() * 100)
    });
  }

  return chartSamples;
}

var exampleStartDateOneWeek = new Date(1639150913973);
var exampleEndDateOneWeek = new Date(1639755713973); // Why PureComponent??
// https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization

var InternetAveragePerformanceSection = /*#__PURE__*/function (_PureComponent) {
  _inherits(InternetAveragePerformanceSection, _PureComponent);

  var _super = _createSuper(InternetAveragePerformanceSection);

  function InternetAveragePerformanceSection(props, context) {
    var _this;

    _classCallCheck(this, InternetAveragePerformanceSection);

    _this = _super.call(this, props, context);
    _this.state = {
      selectedIndex: 0
    };
    _this.onIntervalDurationSelected = _this.onIntervalDurationSelected.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InternetAveragePerformanceSection, [{
    key: "onIntervalDurationSelected",
    value: function onIntervalDurationSelected(days) {
      if (this.props.onIntervalDurationSelected) {
        this.props.onIntervalDurationSelected(days);
      }
    }
  }, {
    key: "mapIntervals",
    value: function mapIntervals(interval) {
      var difference = Number(interval.endTime) - Number(interval.startTime);
      var days = difference / 1000 / 60 / 60 / 24;
      return {
        days: days,
        label: intl__default["default"].get('duration_day_long', {
          amount: days
        })
      };
    } // --------------------------------------------------------------------------------------------------------------
    // RENDERING
    // --------------------------------------------------------------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          istAnalysis = _this$props.istAnalysis,
          maxIntervalDuration = _this$props.maxIntervalDuration;
      var selectedIndex = this.state.selectedIndex;
      var intervals = istAnalysis.trends ? istAnalysis.trends : [];

      if (intervals.length === 0) {
        return this.renderSampleChartSection();
      }

      var segmentItems = intervals.map(function (interval) {
        return _this2.mapIntervals(interval);
      });
      var showExampleData = maxIntervalDuration > 0 && segmentItems[selectedIndex].days > maxIntervalDuration;
      var currentInterval = intervals[selectedIndex];
      var daySamples = convertSamplesToDailySamples(istAnalysis.samples);
      var startDate = new Date(Number(currentInterval.startTime));
      var endDate = new Date(Number(currentInterval.endTime));

      var onItemSelected = function onItemSelected(idx) {
        _this2.onIntervalDurationSelected(segmentItems[idx].days);

        _this2.setState({
          selectedIndex: idx
        });
      };

      return /*#__PURE__*/React__default["default"].createElement("section", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start"
      }, this.renderTitle(startDate, endDate, daySamples), /*#__PURE__*/React__default["default"].createElement("span", {
        className: "ml-auto d-block"
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedBar, {
        activeIndex: selectedIndex,
        items: segmentItems,
        onItemSelected: onItemSelected
      }))), this.renderMetricHorizontalCards(currentInterval, showExampleData), showExampleData ? this.renderExampleChart(startDate, endDate) : this.renderDailySpeedHistoryChart(daySamples, startDate, endDate));
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(startDate, endDate, daySamples) {
      var durationInDays = daysDifferenceBetween(startDate, endDate);
      var serverLocationsText = this.renderServerLocationsText(daySamples);
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('internet_average_title', {
        amount: durationInDays
      })), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, serverLocationsText ? intl__default["default"].get('internet_test_server_location', {
        location: serverLocationsText
      }) : intl__default["default"].get('internet_location_not_available')));
    }
  }, {
    key: "renderMetricHorizontalCards",
    value: function renderMetricHorizontalCards(currentInterval, shouldShowExample) {
      var hasAverageData = currentInterval.avgDownloadBps && currentInterval.avgUploadBps && Number(currentInterval.avgDownloadBps) > 0 && Number(currentInterval.avgUploadBps) > 0;

      if (hasAverageData) {
        var download = {};
        var upload = {};

        if (currentInterval.avgDownloadBps) {
          download.downloadValue = formatSpeed(Number(currentInterval.avgDownloadBps));
        }

        if (currentInterval.trendDownload) {
          download.trendDownload = formatTrend(Number(currentInterval.trendDownload));
          download.trendDownloadIcon = this.renderTrendIcon(Number(currentInterval.trendDownload));
        }

        if (currentInterval.avgUploadBps) {
          upload.uploadValue = formatSpeed(Number(currentInterval.avgUploadBps));
        }

        if (currentInterval.trendUpload) {
          upload.trendUpload = formatTrend(Number(currentInterval.trendUpload));
          upload.trendUploadIcon = this.renderTrendIcon(Number(currentInterval.trendUpload));
        }

        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "text-center"
        }, /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex justify-content-center",
          style: {
            opacity: shouldShowExample ? "0.3" : "1.0"
          }
        }, /*#__PURE__*/React__default["default"].createElement(MetricHorizontalCard, {
          title: intl__default["default"].get('speedtest_download'),
          className: "px-3 py-2 m-3",
          value: download.downloadValue,
          extra: download.trendDownload,
          extraIcon: download.trendDownloadIcon,
          measure: intl__default["default"].get('#_mbps')
        }), /*#__PURE__*/React__default["default"].createElement(MetricHorizontalCard, {
          title: intl__default["default"].get('speedtest_upload'),
          className: "px-3 py-2 m-3",
          value: upload.uploadValue,
          extra: upload.trendUpload,
          extraIcon: upload.trendUploadIcon,
          measure: intl__default["default"].get('#_mbps')
        })));
      }

      return '';
    }
  }, {
    key: "renderExampleChart",
    value: function renderExampleChart(startDate, endDate) {
      var chartData = createMockChartSamples(startDate, endDate);
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "w-100",
        style: {
          opacity: "0.3"
        }
      }, /*#__PURE__*/React__default["default"].createElement("h1", {
        className: "position-absolute mt-5 w-100 text-center"
      }, intl__default["default"].get('generic_example')), /*#__PURE__*/React__default["default"].createElement(DailySpeedHistoryChart, {
        exampleData: chartData,
        tooltip: false,
        height: 300
      })));
    }
  }, {
    key: "renderDailySpeedHistoryChart",
    value: function renderDailySpeedHistoryChart(chartSamples, startDate, endDate) {
      return /*#__PURE__*/React__default["default"].createElement(DailySpeedHistoryChart, {
        daySamples: chartSamples,
        startDate: startDate,
        endDate: endDate,
        tooltip: true,
        height: 300
      });
    }
  }, {
    key: "renderSampleChartSection",
    value: function renderSampleChartSection() {
      var chartData = createMockChartSamples(exampleStartDateOneWeek, exampleEndDateOneWeek);
      return /*#__PURE__*/React__default["default"].createElement("section", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('internet_average_title', {
        amount: 7
      })), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, intl__default["default"].get('internet_no_data_period_example')))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "w-100",
        style: {
          opacity: "0.3"
        }
      }, /*#__PURE__*/React__default["default"].createElement("h1", {
        className: "position-absolute mt-5 right-50"
      }, intl__default["default"].get('generic_example')), /*#__PURE__*/React__default["default"].createElement(DailySpeedHistoryChart, {
        exampleData: chartData,
        tooltip: false,
        height: 300
      }))));
    }
  }, {
    key: "renderTrendIcon",
    value: function renderTrendIcon(outlier) {
      outlier = (outlier * 100).toFixed(0);
      var icon = GEN_TREND_FLAT;

      if (outlier < 0) {
        icon = GEN_TREND_DOWN;
      } else if (outlier > 0) {
        icon = GEN_TREND_UP;
      }

      return /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: icon,
        color: TINT_DARK,
        size: 12
      });
    }
  }, {
    key: "renderServerLocationsText",
    value: function renderServerLocationsText(daySamples) {
      var istAnalysis = this.props.istAnalysis;
      var servers = istAnalysis && istAnalysis.servers ? istAnalysis.servers.filter(function (val) {
        return Number(val.transferredBytes) > 0;
      }) : [];
      var serverLocations = [];

      var _iterator = _createForOfIteratorHelper(daySamples),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var samples = _step.value;

          var _iterator2 = _createForOfIteratorHelper(samples.getLocationIndexes()),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var idx = _step2.value;

              if (servers[idx]) {
                var serverLocation = servers[idx].serverCity + ', ' + getCountryName(servers[idx].serverCountry);

                if (!serverLocations.includes(serverLocation)) {
                  serverLocations.push(serverLocation);
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var location = '';

      if (serverLocations.length > 0) {
        location = serverLocations[0];

        if (serverLocations.length > 1) {
          location += " (+" + (serverLocations.length - 1) + ")";
        }
      }

      return location;
    }
  }]);

  return InternetAveragePerformanceSection;
}(React.PureComponent);
InternetAveragePerformanceSection.propTypes = {
  istAnalysis: PropTypes__default["default"].any,
  maxIntervalDuration: PropTypes__default["default"].number,
  onIntervalDurationSelected: PropTypes__default["default"].func
};

var InternetLastSpeedTestSection = /*#__PURE__*/function (_Component) {
  _inherits(InternetLastSpeedTestSection, _Component);

  var _super = _createSuper(InternetLastSpeedTestSection);

  function InternetLastSpeedTestSection() {
    _classCallCheck(this, InternetLastSpeedTestSection);

    return _super.apply(this, arguments);
  }

  _createClass(InternetLastSpeedTestSection, [{
    key: "render",
    value: // --------------------------------------------------------------------------------------------------------------
    // RENDERING
    // --------------------------------------------------------------------------------------------------------------
    function render() {
      var speedTestResult = this.props.speedTestResult;
      var formattedTimestamp = speedTestResult ? formatAbsoluteDate(speedTestResult.timestamp, DATE_FORMAT_LONG) : '';
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, intl__default["default"].get('internet_last_speed_test')), speedTestResult ? /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small"
      }, formattedTimestamp), this.renderBody(speedTestResult)) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center align-items-center w-100 h-100"
      }, intl__default["default"].get('internet_no_data_last_speed_test')));
    }
  }, {
    key: "renderBody",
    value: function renderBody(speedTestResult) {
      var upload;
      var download;
      var locationDownload;
      var locationUpload;
      var latency;
      var test = speedTestResult;
      upload = formatSpeed(Number(test.uploadbps));
      download = formatSpeed(Number(test.downloadbps));
      latency = test && test.rtd ? Number(test.rtd).toFixed(1) : 0;

      if (test.downloadInfo && test.downloadInfo.serverCity && test.downloadInfo.serverCountry) {
        locationDownload = intl__default["default"].get('internet_location_server_from', {
          serverCity: test.downloadInfo.serverCity,
          serverCountry: test.downloadInfo.serverCountry
        });
      }

      if (test.uploadInfo && test.uploadInfo.serverCity && test.uploadInfo.serverCountry) {
        locationUpload = intl__default["default"].get('internet_location_server_to', {
          serverCity: test.uploadInfo.serverCity,
          serverCountry: test.uploadInfo.serverCountry
        });
      }

      var iconDownload = /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_DOWN,
        color: TINT_SUCCESS,
        size: 16
      });
      var iconUpload = /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_UP,
        color: TINT_PRIMARY,
        size: 16
      });
      var iconLatency = /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_TREND_UP,
        color: TINT_DANGER,
        size: 16
      });
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-lg-flex d-xl-flex d-md-block justify-content-center align-items-center h-100"
      }, /*#__PURE__*/React__default["default"].createElement(MetricVerticalCard, {
        title: intl__default["default"].get('speedtest_download'),
        className: "p-3 m-3",
        value: download,
        extra: locationDownload,
        extraIcon: '',
        measure: intl__default["default"].get('#_mbps'),
        titleIcon: iconDownload
      }), /*#__PURE__*/React__default["default"].createElement(MetricVerticalCard, {
        title: intl__default["default"].get('speedtest_upload'),
        className: "p-3 m-3",
        value: upload,
        extra: locationUpload,
        extraIcon: '',
        measure: intl__default["default"].get('#_mbps'),
        titleIcon: iconUpload
      }), /*#__PURE__*/React__default["default"].createElement(MetricVerticalCard, {
        title: intl__default["default"].get('internet_latency'),
        className: "p-3 m-3",
        value: latency,
        extra: locationUpload,
        extraIcon: '',
        measure: intl__default["default"].get('#_ms'),
        titleIcon: iconLatency
      }));
    }
  }]);

  return InternetLastSpeedTestSection;
}(React.Component);
InternetLastSpeedTestSection.propTypes = {
  speedTestResult: PropTypes__default["default"].object
};

var SORT_BY_NAME_ASC = 'SORT_BY_NAME_ASC';
var SORT_BY_NAME_DESC = 'SORT_BY_NAME_DESC';
var SORT_BY_DOWNLOAD_ASC = 'SORT_BY_DOWNLOAD_ASC';
var SORT_BY_DOWNLOAD_DESC = 'SORT_BY_DOWNLOAD_DESC';
var SORT_BY_UPLOAD_ASC = 'SORT_BY_UPLOAD_ASC';
var SORT_BY_UPLOAD_DESC = 'SORT_BY_UPLOAD_DESC';
var SORT_BY_PERFORMANCE_SCORE_ASC = 'SORT_BY_PERFORMANCE_SCORE_ASC';
var SORT_BY_PERFORMANCE_SCORE_DESC = 'SORT_BY_PERFORMANCE_SCORE_DESC';
var SORT_BY_SAMPLES_ASC = 'SORT_BY_SAMPLES_ASC';
var SORT_BY_SAMPLES_DESC = 'SORT_BY_SAMPLES_DESC';
var SORT_BY_SENTIMENT_SCORE_ASC = 'SORT_BY_SENTIMENT_SCORE_ASC';
var SORT_BY_SENTIMENT_SCORE_DESC = 'SORT_BY_SENTIMENT_SCORE_DESC';
var SORT_BY_RATINGS_DESC = 'SORT_BY_RATINGS_DESC';
var SORT_BY_RATINGS_ASC = 'SORT_BY_RATINGS_ASC';
var YOUR_NETWORK_ISP_ID = "YOUR_NETWORK";

var InternetScoreBoard = /*#__PURE__*/function (_Component) {
  _inherits(InternetScoreBoard, _Component);

  var _super = _createSuper(InternetScoreBoard);

  function InternetScoreBoard(props, context) {
    var _this;

    _classCallCheck(this, InternetScoreBoard);

    _this = _super.call(this, props, context);
    _this.state = {
      selectedIndexLocation: 0,
      selectedOrderType: SORT_BY_PERFORMANCE_SCORE_DESC
    };
    _this.onClickName = _this.onClickName.bind(_assertThisInitialized(_this));

    _this.updateTableData();

    return _this;
  }

  _createClass(InternetScoreBoard, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (prevProps.istAnalysis !== this.props.istAnalysis) {
        this.updateTableData();
      }
    }
  }, {
    key: "updateTableData",
    value: function updateTableData() {
      var istAnalysis = this.props.istAnalysis;
      var myNetworkSampleCount = 0;

      if (istAnalysis && istAnalysis.samples) {
        var daySamples = convertSamplesToDailySamples(istAnalysis.samples);
        var oneWeekAgo = daysDifferenceFromNow(7);
        myNetworkSampleCount = daySamples.filter(function (daySample) {
          return daySample.samples && daySample.samples[0].timestamp >= oneWeekAgo;
        }).map(function (daySample) {
          return daySample.samples.length;
        }).reduce(function (value, acc) {
          return acc + value;
        }, 0);
      }

      if (istAnalysis.weekAvgDownloadBps > 0 && istAnalysis.weekAvgUploadBps > 0) {
        var prototype = {
          ispId: YOUR_NETWORK_ISP_ID,
          downloadSpeedMbpsAvg: formatSpeed(Number(istAnalysis.weekAvgDownloadBps)),
          uploadSpeedMbpsAvg: formatSpeed(Number(istAnalysis.weekAvgUploadBps)),
          isp: istAnalysis.statsIsp.isp,
          samples: myNetworkSampleCount || 0,
          score: 0,
          sentiment: 0,
          totalRatings: 0
        };
        this.yourNetworkStatsInCity = Object.assign({}, prototype);
        this.yourNetworkStatsInCity.score = istAnalysis.scoreInCity;
        this.yourNetworkStatsInCountry = Object.assign({}, prototype);
        this.yourNetworkStatsInCountry.score = istAnalysis.scoreInCountry;
      } else {
        this.yourNetworkStatsInCity = null;
        this.yourNetworkStatsInCountry = null;
      }
    } // --------------------------------------------------------------------------------------------------------------
    // RENDERING
    // --------------------------------------------------------------------------------------------------------------

  }, {
    key: "getNumberTotalCluster",
    value: function getNumberTotalCluster(num) {
      if (num > 1000) return Math.round(num / 1000) + "k+";
      if (num > 100) return Math.round(num / 100) * 100 + "+";
      if (num > 10) return Math.round(num / 10) * 10 + "+";
      return num;
    }
  }, {
    key: "onClickName",
    value: function onClickName(isp, badgeVisible) {
      if (this.props.onClickName && !badgeVisible) {
        this.props.onClickName(isp);
      }
    }
  }, {
    key: "sortIsps",
    value: function sortIsps(values) {
      var sortStringByParam = function sortStringByParam(a, b, param) {
        return a[param] < b[param] ? -1 : a[param] > b[param] ? 1 : 0;
      };

      var sortOn = function sortOn(values, param) {
        return values.sort(function (a, b) {
          return Number(b[param]) - Number(a[param]);
        });
      };

      switch (this.state.selectedOrderType) {
        case SORT_BY_NAME_ASC:
          values = values.sort(function (a, b) {
            return sortStringByParam(a, b, 'isp');
          });
          break;

        case SORT_BY_NAME_DESC:
          values = values.sort(function (a, b) {
            return sortStringByParam(a, b, 'isp');
          }).reverse();
          break;

        case SORT_BY_DOWNLOAD_ASC:
          values = sortOn(values, 'downloadSpeedMbpsAvg').reverse();
          break;

        case SORT_BY_DOWNLOAD_DESC:
          values = sortOn(values, 'downloadSpeedMbpsAvg');
          break;

        case SORT_BY_UPLOAD_ASC:
          values = sortOn(values, 'uploadSpeedMbpsAvg').reverse();
          break;

        case SORT_BY_UPLOAD_DESC:
          values = sortOn(values, 'uploadSpeedMbpsAvg');
          break;

        case SORT_BY_PERFORMANCE_SCORE_ASC:
          values = sortOn(values, 'score').reverse();
          break;

        case SORT_BY_PERFORMANCE_SCORE_DESC:
          values = sortOn(values, 'score');
          break;

        case SORT_BY_RATINGS_ASC:
          values = sortOn(values, 'totalRatings').reverse();
          break;

        case SORT_BY_RATINGS_DESC:
          values = sortOn(values, 'totalRatings');
          break;

        case SORT_BY_SENTIMENT_SCORE_ASC:
          values = sortOn(values, 'sentiment').reverse();
          break;

        case SORT_BY_SENTIMENT_SCORE_DESC:
          values = sortOn(values, 'sentiment');
          break;

        case SORT_BY_SAMPLES_ASC:
          values = sortOn(values, 'samples').reverse();
          break;

        case SORT_BY_SAMPLES_DESC:
          values = sortOn(values, 'samples');
          break;

        default:
          return values;
      }

      return values;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var istAnalysis = this.props.istAnalysis;
      var isCitySelected = this.state.selectedIndexLocation === 0;
      var data = [];

      if (isCitySelected && istAnalysis.statsCity) {
        data = istAnalysis.statsCity;
      } else if (!isCitySelected && istAnalysis.statsCountry) {
        data = istAnalysis.statsCountry;
      }

      if (data.length === 0) {
        return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.props.emptyState);
      }

      if (data.length > 0) {
        data.slice();
      }

      if (isCitySelected && this.yourNetworkStatsInCity) {
        if (data.filter(function (val) {
          return val.ispId === _this2.yourNetworkStatsInCity.ispId;
        }).length === 0) {
          data.push(this.yourNetworkStatsInCity);
        }
      } else if (!isCitySelected && this.yourNetworkStatsInCountry) {
        if (data.filter(function (val) {
          return val.ispId === _this2.yourNetworkStatsInCountry.ispId;
        }).length === 0) {
          data.push(this.yourNetworkStatsInCountry);
        }
      }

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.renderSegmentedBar(istAnalysis), this.renderTable(data));
    }
  }, {
    key: "renderTable",
    value: function renderTable(data) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "m-2"
      }, /*#__PURE__*/React__default["default"].createElement("table", {
        className: "table table-sm table-borderless table-responsive-flip"
      }, this.renderTableHeader(), this.renderTableBody(this.sortIsps(data))));
    }
  }, {
    key: "renderTableBody",
    value: function renderTableBody(values) {
      var _this3 = this;

      var yourIspId;

      if (this.props.istAnalysis.statsIsp) {
        yourIspId = this.props.istAnalysis.statsIsp.ispId;
      }

      return /*#__PURE__*/React__default["default"].createElement("tbody", null, values.map(function (isp, idx) {
        return _this3.renderRow(isp, idx, yourIspId);
      }));
    }
  }, {
    key: "renderTableHeader",
    value: function renderTableHeader() {
      return /*#__PURE__*/React__default["default"].createElement("thead", null, /*#__PURE__*/React__default["default"].createElement("tr", null, /*#__PURE__*/React__default["default"].createElement("th", null), this.renderSingleHeaderColumn(intl__default["default"].get('discovery_network_internet_isp'), SORT_BY_NAME_ASC, SORT_BY_NAME_DESC, true), this.renderSingleHeaderColumn(intl__default["default"].get('speedtest_download'), SORT_BY_DOWNLOAD_DESC, SORT_BY_DOWNLOAD_ASC, true), this.renderSingleHeaderColumn(intl__default["default"].get('speedtest_upload'), SORT_BY_UPLOAD_DESC, SORT_BY_UPLOAD_ASC, true), this.renderSingleHeaderColumn(intl__default["default"].get('internet_performance_score'), SORT_BY_PERFORMANCE_SCORE_DESC, SORT_BY_PERFORMANCE_SCORE_ASC, true), this.renderSingleHeaderColumn(intl__default["default"].get('internet_test_samples'), SORT_BY_SAMPLES_DESC, SORT_BY_SAMPLES_ASC, false), this.renderSingleHeaderColumn(intl__default["default"].get('internet_sentiment'), SORT_BY_SENTIMENT_SCORE_DESC, SORT_BY_SENTIMENT_SCORE_ASC, true), this.renderSingleHeaderColumn(intl__default["default"].get('internet_ratings'), SORT_BY_RATINGS_DESC, SORT_BY_RATINGS_ASC, false)));
    }
  }, {
    key: "renderSegmentedBar",
    value: function renderSegmentedBar(istAnalysis) {
      var _this4 = this;

      var onLocationSelected = function onLocationSelected(index) {
        return _this4.setState({
          selectedIndexLocation: index
        });
      };

      var countryName;
      var city = '';
      var country = '';

      if (istAnalysis.statsIsp) {
        countryName = getCountryName(istAnalysis.statsIsp.country);
        city = istAnalysis.statsIsp.city;
        country = istAnalysis.statsIsp.country;
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center mb-4"
      }, /*#__PURE__*/React__default["default"].createElement(SegmentedBar, {
        activeIndex: this.state.selectedIndexLocation,
        items: [{
          label: city
        }, {
          label: countryName || country
        }],
        onItemSelected: onLocationSelected
      }));
    }
  }, {
    key: "renderSingleHeaderColumn",
    value: function renderSingleHeaderColumn(title, sortA, sortB, isForSmall) {
      var _this5 = this;

      var isSorted = function isSorted(a, b) {
        return _this5.state.selectedOrderType === a || _this5.state.selectedOrderType === b ? 'text-primary' : 'text-dark';
      };

      var onClickSort = function onClickSort(a, b) {
        return _this5.state.selectedOrderType === a ? _this5.setState({
          selectedOrderType: b
        }) : _this5.setState({
          selectedOrderType: a
        });
      };

      var renderSortedIcon = function renderSortedIcon(a, b) {
        if (_this5.state.selectedOrderType === a) {
          return /*#__PURE__*/React__default["default"].createElement("i", {
            className: "fas fa-sort-up"
          });
        } else if (_this5.state.selectedOrderType === b) {
          return /*#__PURE__*/React__default["default"].createElement("i", {
            className: "fas fa-sort-down"
          });
        }
      };

      return /*#__PURE__*/React__default["default"].createElement("th", {
        className: isForSmall ? "d-table-cell" : "d-sm-none d-xs-none d-md-none d-lg-table-cell",
        onClick: function onClick() {
          return onClickSort(sortA, sortB);
        }
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button",
        className: isSorted(sortA, sortB)
      }, title, renderSortedIcon(sortA, sortB)));
    }
  }, {
    key: "renderRow",
    value: function renderRow(isp, idx, ispId) {
      var isYourNetwork = isp.ispId === YOUR_NETWORK_ISP_ID;
      var isActive = ispId === isp.ispId || isYourNetwork;
      var avgDownload = Number(isp.downloadSpeedMbpsAvg).toFixed(1);
      var avgUpload = Number(isp.uploadSpeedMbpsAvg).toFixed(1);
      var performanceScore = (Number(isp.score) * 5).toFixed(1);
      var sentimentScore = (Number(isp.sentiment) / 100 * 5).toFixed(1);
      var samples = this.getNumberTotalCluster(Number(isp.samples));
      var totalRatings = this.getNumberTotalCluster(Number(isp.totalRatings));
      return /*#__PURE__*/React__default["default"].createElement("tr", {
        key: idx,
        className: isActive ? "bg-soft-warning" : ''
      }, this.renderTextCell(idx + 1, true), this.renderIspNameCell(isp, isYourNetwork), this.renderTextCell(intl__default["default"].get('num_mbps', {
        num: avgDownload
      }), true), this.renderTextCell(intl__default["default"].get('num_mbps', {
        num: avgUpload
      }), true), this.renderRatingBarCell(performanceScore, RTI_STAR, isActive, true), this.renderTextCell(samples, false), this.renderRatingBarCell(sentimentScore, RTI_HEART, isActive, !isYourNetwork), this.renderTextCell(totalRatings, false, isYourNetwork));
    }
  }, {
    key: "renderTextCell",
    value: function renderTextCell(str, isForSmall, isYourNetwork) {
      return /*#__PURE__*/React__default["default"].createElement("td", {
        className: isForSmall ? "d-table-cell" : "d-sm-none d-xs-none d-md-none d-lg-table-cell"
      }, !isYourNetwork && /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, str));
    }
  }, {
    key: "renderIspNameCell",
    value: function renderIspNameCell(isp, badgeVisible) {
      var _this6 = this;

      var activeText = /*#__PURE__*/React__default["default"].createElement("a", {
        className: "link-primary",
        role: "button",
        onClick: function onClick() {
          return _this6.onClickName(isp, badgeVisible);
        }
      }, isp.isp, " ", this.renderBadge(badgeVisible));
      var notActiveText = /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0"
      }, isp.isp, " ", this.renderBadge(badgeVisible));
      return /*#__PURE__*/React__default["default"].createElement("td", null, badgeVisible ? notActiveText : activeText);
    }
  }, {
    key: "renderRatingBarCell",
    value: function renderRatingBarCell(score, type, isActive, visible) {
      var tint = isActive ? TINT_WARNING : TINT_SECONDARY;
      return /*#__PURE__*/React__default["default"].createElement("td", null, visible && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mt-1"
      }, /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        tint: tint,
        length: 5,
        value: score,
        type: type,
        size: RB_SMALL
      })));
    }
  }, {
    key: "renderBadge",
    value: function renderBadge(visible) {
      if (visible) {
        return /*#__PURE__*/React__default["default"].createElement(Badge, {
          pill: true,
          soft: true,
          tint: BADGE_TINT_PRIMARY,
          className: "ml-2",
          text: intl__default["default"].get('internet_network')
        });
      }

      return '';
    }
  }]);

  return InternetScoreBoard;
}(React.Component);
InternetScoreBoard.propTypes = {
  istAnalysis: PropTypes__default["default"].object
};

var InternetScoreSection = /*#__PURE__*/function (_Component) {
  _inherits(InternetScoreSection, _Component);

  var _super = _createSuper(InternetScoreSection);

  function InternetScoreSection() {
    _classCallCheck(this, InternetScoreSection);

    return _super.apply(this, arguments);
  }

  _createClass(InternetScoreSection, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          internetInfo = _this$props.internetInfo,
          istAnalysis = _this$props.istAnalysis;
      var ispStats = istAnalysis.statsIsp;
      var score = 0;
      var location = "";

      if (ispStats && ispStats.country) {
        var country = getCountryName(ispStats.country);

        if (ispStats.city) {
          location = ispStats.city + ", " + country;
          score = istAnalysis.scoreInCity;
        } else {
          location = country;
          score = istAnalysis.scoreInCountry;
        }
      }

      var hasScore = internetInfo && ispStats && score;
      var finalScore = hasScore ? score * 5 : 0;
      var rankString = hasScore ? rankStringWithLocation(score * 100, location) : intl__default["default"].get('internet_no_data');
      return /*#__PURE__*/React__default["default"].createElement("section", {
        className: "pt-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-4"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, intl__default["default"].get('internet_score')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-2"
      }, rankString), /*#__PURE__*/React__default["default"].createElement(RatingBar, {
        tint: TINT_WARNING,
        length: 5,
        value: finalScore,
        type: RTI_STAR,
        size: RB_SMALL
      })));
    }
  }]);

  return InternetScoreSection;
}(React.Component);
InternetScoreSection.propTypes = {
  internetInfo: PropTypes__default["default"].object,
  istAnalysis: PropTypes__default["default"].object
};

var InternetTimelineTableRow = /*#__PURE__*/function (_Component) {
  _inherits(InternetTimelineTableRow, _Component);

  var _super = _createSuper(InternetTimelineTableRow);

  function InternetTimelineTableRow(props) {
    var _this;

    _classCallCheck(this, InternetTimelineTableRow);

    _this = _super.call(this, props);
    _this.state = {
      item: _this.props.item,
      success: _this.props.item.success === 'true',
      manual: _this.props.item.manual === 'true'
    };
    return _this;
  }

  _createClass(InternetTimelineTableRow, [{
    key: "getLocationFromServer",
    value: function getLocationFromServer(server) {
      if (server.serverCity && server.serverCountry) {
        if (server.serverCity !== '' && server.serverCountry !== '') {
          return server.serverCity + ", " + server.serverCountry;
        } else if (server.serverCity !== '' && server.serverCountry === '') {
          return server.serverCountry;
        } else if (server.serverCity === '' && server.serverCountry !== '') {
          return server.serverCity;
        }
      }

      return '';
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("tr", null, this.renderState(), this.renderTimestamp(), this.renderDownload(), this.renderUpload(), this.renderLatency(), this.renderType());
    }
  }, {
    key: "renderState",
    value: function renderState() {
      var dotColor;
      var dotIcon;

      if (this.state.success === false) {
        dotColor = "step-icon-danger";
        dotIcon = "fa-times";
      } else if (!this.state.item.outlierDownload && !this.state.item.outlierUpload) {
        dotColor = "step-icon-soft-primary";
        dotIcon = "fa-check";
      } else {
        var outlierDownload = this.state.item.outlierDownload ? Number(this.state.item.outlierDownload) : 0;
        var outlierUpload = this.state.item.outlierUpload ? Number(this.state.item.outlierUpload) : 0;

        if ((outlierDownload + outlierUpload) / 2 > 0) {
          dotColor = "step-icon-success";
          dotIcon = "fa-thumbs-up";
        } else {
          dotColor = "step-icon-danger";
          dotIcon = "fa-thumbs-down";
        }
      }

      return /*#__PURE__*/React__default["default"].createElement("td", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "step mx-0"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "step-icon step-icon-xs ".concat(dotColor)
      }, /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-fw ".concat(dotIcon)
      }))));
    }
  }, {
    key: "renderDownload",
    value: function renderDownload() {
      var download = formatSpeed(Number(this.state.item.downloadBps));
      var outlier = this.state.item.outlierDownload;
      var textColor = 'text-dark';

      if (outlier) {
        textColor = outlier > 0 ? "text-success" : "text-danger";
      }

      var trend = outlier ? '(' + formatTrend(Number(outlier)) + ')' : '';
      var location = '';

      if (this.state.item.downloadServerIndex) {
        var server = this.props.servers[Number(this.state.item.downloadServerIndex)];
        location = this.getLocationFromServer(server);
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("speedtest_download")
      }, this.state.success && /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0 " + textColor
      }, intl__default["default"].get('num_mbps', {
        num: download
      }), " ", trend), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, location)));
    }
  }, {
    key: "renderUpload",
    value: function renderUpload() {
      var upload = formatSpeed(Number(this.state.item.uploadBps));
      var outlier = this.state.item.outlierUpload;
      var textColor = 'text-dark';

      if (outlier) {
        textColor = outlier > 0 ? "text-success" : "text-danger";
      }

      var trend = outlier ? '(' + formatTrend(Number(outlier)) + ')' : '';
      var location = '';

      if (this.state.item.uploadServerIndex) {
        var server = this.props.servers[Number(this.state.item.uploadServerIndex)];
        location = this.getLocationFromServer(server);
      }

      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("speedtest_upload"),
        className: textColor
      }, this.state.success && /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0 " + textColor
      }, intl__default["default"].get('num_mbps', {
        num: upload
      }), " ", trend), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, location)));
    }
  }, {
    key: "renderLatency",
    value: function renderLatency() {
      var latency = this.state.item.rtd;
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("internet_latency")
      }, this.state.success && /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, intl__default["default"].get('num_ms', {
        num: latency
      })));
    }
  }, {
    key: "renderType",
    value: function renderType() {
      var text = this.state.manual ? intl__default["default"].get('generic_manual') : intl__default["default"].get('generic_auto');
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("timeline_table_header_type")
      }, /*#__PURE__*/React__default["default"].createElement(Badge, {
        pill: true,
        soft: true,
        tint: BADGE_TINT_PRIMARY,
        text: text
      }));
    }
  }, {
    key: "renderTimestamp",
    value: function renderTimestamp() {
      var timestamp = this.state.item.timestamp;
      var longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
      var smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
      return /*#__PURE__*/React__default["default"].createElement("td", {
        "data-title": intl__default["default"].get("timeline_table_header_when")
      }, timestamp && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "mb-0"
      }, longDate), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small text-secondary"
      }, smartDate)));
    }
  }]);

  return InternetTimelineTableRow;
}(React.Component);
InternetTimelineTableRow.propTypes = {
  item: PropTypes__default["default"].object,
  servers: PropTypes__default["default"].array
};

var InternetTimelineTable = /*#__PURE__*/function (_Component) {
  _inherits(InternetTimelineTable, _Component);

  var _super = _createSuper(InternetTimelineTable);

  function InternetTimelineTable(props, context) {
    var _this;

    _classCallCheck(this, InternetTimelineTable);

    _this = _super.call(this, props, context);
    _this.tableId = "speed_test_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(InternetTimelineTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          samples = _this$props.samples,
          servers = _this$props.servers;

      if (samples) {
        return /*#__PURE__*/React__default["default"].createElement("table", {
          className: "table table-borderless table-striped table-align-middle table-responsive-flip"
        }, renderInternetTimelineTableHeader(), /*#__PURE__*/React__default["default"].createElement("tbody", null, samples.reverse().map(function (sample, idx) {
          return /*#__PURE__*/React__default["default"].createElement(InternetTimelineTableRow, {
            key: "".concat(_this2.tableId, "_").concat(idx),
            item: sample,
            servers: servers.length > 0 ? servers : []
          });
        })));
      }

      return /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('internet_no_data_period_timeline'));
    }
  }]);

  return InternetTimelineTable;
}(React.Component);
InternetTimelineTable.propTypes = {
  samples: PropTypes__default["default"].array,
  servers: PropTypes__default["default"].array
};

var InternetTimeline = /*#__PURE__*/function (_Component) {
  _inherits(InternetTimeline, _Component);

  var _super = _createSuper(InternetTimeline);

  function InternetTimeline(props, context) {
    var _this;

    _classCallCheck(this, InternetTimeline);

    _this = _super.call(this, props, context);
    _this.tableId = "speed_test_timeline_table_".concat(nextId__default["default"]());
    return _this;
  }

  _createClass(InternetTimeline, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          istAnalysis = _this$props.istAnalysis,
          maxDays = _this$props.maxDays,
          extra = _this$props.extra;

      if (!istAnalysis) {
        return '';
      }

      var samples = istAnalysis.samples;
      var eventsByDistance = groupEventsByTimeDistance(samples, function (sample) {
        return sample.timestamp;
      });
      var maxDaysUnlimited = !maxDays && maxDays !== 0;

      var ifMaxDaysAtLeast = function ifMaxDaysAtLeast(days) {
        return maxDaysUnlimited || maxDays >= days;
      };

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, ifMaxDaysAtLeast(1) && this.renderSection(intl__default["default"].get('relative_today'), eventsByDistance[TIME_DISTANCE_TODAY]), ifMaxDaysAtLeast(2) && this.renderSection(intl__default["default"].get('relative_yesterday'), eventsByDistance[TIME_DISTANCE_YESTERDAY]), ifMaxDaysAtLeast(7) && this.renderSection(intl__default["default"].get('relative_current_week'), eventsByDistance[TIME_DISTANCE_7D]), ifMaxDaysAtLeast(14) && this.renderSection(intl__default["default"].get('relative_week_long', {
        amount: 2
      }), eventsByDistance[TIME_DISTANCE_14D]), ifMaxDaysAtLeast(21) && this.renderSection(intl__default["default"].get('relative_week_long', {
        amount: 3
      }), eventsByDistance[TIME_DISTANCE_21D]), maxDaysUnlimited && this.renderSection(intl__default["default"].get('relative_older'), eventsByDistance[TIME_DISTANCE_OLDER]), !maxDaysUnlimited && extra);
    }
  }, {
    key: "renderSection",
    value: function renderSection(title, samples) {
      var istAnalysis = this.props.istAnalysis;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-3"
      }, /*#__PURE__*/React__default["default"].createElement("h4", null, title), /*#__PURE__*/React__default["default"].createElement("hr", null), samples ? /*#__PURE__*/React__default["default"].createElement(InternetTimelineTable, {
        samples: samples,
        servers: istAnalysis.servers
      }) : /*#__PURE__*/React__default["default"].createElement("div", null, intl__default["default"].get('timeline_no_sample')));
    }
  }]);

  return InternetTimeline;
}(React.Component);
InternetTimeline.propTypes = {
  istAnalysis: PropTypes__default["default"].object,
  maxDays: PropTypes__default["default"].number,
  extra: PropTypes__default["default"].node
};

var RATING_DIALOG_SPEED_TEST = 'RATING_DIALOG_SPEED_TEST';

var InternetTrendSection = /*#__PURE__*/function (_Component) {
  _inherits(InternetTrendSection, _Component);

  var _super = _createSuper(InternetTrendSection);

  function InternetTrendSection(props, context) {
    var _this;

    _classCallCheck(this, InternetTrendSection);

    _this = _super.call(this, props, context);
    _this.state = {
      ratingComment: _this.props.ratingComment
    };
    _this.onClickImageProvider = _this.onClickImageProvider.bind(_assertThisInitialized(_this));
    _this.onSaveRating = _this.onSaveRating.bind(_assertThisInitialized(_this));
    _this.onClickDetails = _this.onClickDetails.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InternetTrendSection, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.props.ratingComment !== prevProps.ratingComment) {
        this.setState({
          ratingComment: this.props.ratingComment
        });
      }
    }
  }, {
    key: "onSaveRating",
    value: function onSaveRating(rating) {
      if (rating && this.props.onSaveRating) {
        this.props.onSaveRating(rating);
      }
    }
  }, {
    key: "onClickDetails",
    value: function onClickDetails(ispInfo) {
      if (this.props.onClickDetails) {
        this.props.onClickDetails(ispInfo);
      }
    }
  }, {
    key: "onClickImageProvider",
    value: function onClickImageProvider(ispInfo) {
      if (this.props.onClickImageProvider) {
        this.props.onClickImageProvider(ispInfo);
      }
    }
  }, {
    key: "formatIspTrend",
    value: function formatIspTrend(val) {
      var trend = val || 0;
      if (trend >= 0.15) return intl__default["default"].get("data_trend_up_1");else if (trend >= 0.03) return intl__default["default"].get("data_trend_up_2");else if (trend <= -0.15) return intl__default["default"].get("data_trend_down_1");else if (trend <= -0.03) return intl__default["default"].get("data_trend_down_2");else return intl__default["default"].get("data_trend_stable");
    }
  }, {
    key: "getLogo",
    value: function getLogo(ispInfo) {
      return ispInfo && ispInfo.logoimageurl ? "https://cdn.fing.io/images" + ispInfo.logoimageurl : "https://cdn.fing.io/images/isp/general/default_isp.png";
    }
  }, {
    key: "getBanner",
    value: function getBanner(ispInfo) {
      return ispInfo && ispInfo.bannerimageurl ? "https://cdn.fing.io/images" + ispInfo.bannerimageurl : null;
    }
  }, {
    key: "render",
    value: function render() {
      var internetInfo = this.props.internetInfo;
      var ispInfo = internetInfo && internetInfo.ispinfo ? internetInfo.ispinfo : null;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, this.renderTitle(ispInfo), ispInfo && this.renderBody(ispInfo), ispInfo && this.renderActions(ispInfo), ispInfo && this.renderRatingDialog(ispInfo));
    }
  }, {
    key: "renderBody",
    value: function renderBody(ispInfo) {
      var _this2 = this;

      var ispStats = ispInfo ? ispInfo.ispstats : null;
      var outages = ispInfo && ispInfo.outagesSummary && ispInfo.outagesSummary.totOutages ? ispInfo.outagesSummary.totOutages : intl__default["default"].get('generic_not_available');
      var banner = this.getBanner(ispInfo);
      var downloadSpeedTrend = ispStats && ispStats.downloadSpeedTrend ? ispStats.downloadSpeedTrend : '0';
      var scoreTrend = ispStats && ispStats.downloadSpeedTrend ? ispStats.downloadSpeedTrend : '0';
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-center"
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        onClick: function onClick() {
          return _this2.onClickImageProvider(ispInfo);
        },
        src: banner ? banner : this.getLogo(ispInfo),
        height: 96,
        width: banner ? 192 : 96,
        alt: ispInfo.name
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-lg-flex d-xl-flex d-md-block justify-content-center"
      }, this.renderPerformance(this.renderTrendIcon(Number(downloadSpeedTrend)), this.formatIspTrend(Number(downloadSpeedTrend)), intl__default["default"].get('internet_speed_performance')), this.renderPerformance(this.renderTrendIcon(Number(scoreTrend)), this.formatIspTrend(Number(scoreTrend)), intl__default["default"].get('internet_user_rating')), this.renderPerformance( /*#__PURE__*/React__default["default"].createElement(RatingTypeIcon, {
        size: 16,
        tint: TINT_PRIMARY,
        type: RTI_BOLT,
        variant: RTI_FULL
      }), intl__default["default"].get('internet_outages_summary', {
        num: outages
      }), intl__default["default"].get('internet_outages'))));
    }
  }, {
    key: "renderActions",
    value: function renderActions(ispInfo) {
      var _this3 = this;

      var hasRating = this.state.ratingComment && this.state.ratingComment.getRating() !== 0;
      var date = hasRating ? intl__default["default"].get('rating_date', {
        date: formatAbsoluteDate(new Date().getTime(), DATE_FORMAT_SHORT)
      }) : null;
      var ratingString = hasRating ? intl__default["default"].get('rating_edit') : intl__default["default"].get('speedtest_rate');
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center mt-2"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "mr-2",
        disabled: this.props.disableAction,
        title: intl__default["default"].get('internet_view_details'),
        action: function action() {
          return _this3.onClickDetails(ispInfo);
        },
        type: BTN_TYPE_DEFAULT,
        tint: BTN_TINT_PRIMARY
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "mr-2",
        disabled: this.props.disableAction,
        title: ratingString,
        action: function action() {
          return showDialogById(RATING_DIALOG_SPEED_TEST);
        },
        type: BTN_TYPE_SOFT,
        tint: BTN_TINT_PRIMARY
      }), /*#__PURE__*/React__default["default"].createElement("small", {
        className: "ml-1"
      }, date));
    }
  }, {
    key: "renderTitle",
    value: function renderTitle(ispInfo) {
      if (!ispInfo) {
        return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h4", {
          className: "card-title"
        }, intl__default["default"].get('internet_data_trend')), /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex justify-content-center align-items-center w-100 h-100"
        }, intl__default["default"].get('internet_no_data_trend')));
      }

      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "card-title"
      }, intl__default["default"].get('internet_trend_in', {
        isp: ispInfo.name,
        city: bestIspLocation(this.props.internetInfo)
      })), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small"
      }, intl__default["default"].get('internet_based_on')));
    }
  }, {
    key: "renderRatingDialog",
    value: function renderRatingDialog(ispInfo) {
      var _this4 = this;

      var onClose = function onClose() {
        hideDialogById(RATING_DIALOG_SPEED_TEST);
      };

      var onConfirm = function onConfirm(ratingResult) {
        hideDialogById(RATING_DIALOG_SPEED_TEST);

        _this4.onSaveRating(ratingResult);
      };

      return /*#__PURE__*/React__default["default"].createElement(RatingEditDialog, {
        id: RATING_DIALOG_SPEED_TEST,
        type: RTI_HEART,
        subjectName: ispInfo.name,
        ratingColor: TINT_DANGER,
        comment: this.state.ratingComment.getComment(),
        value: this.state.ratingComment.getRating(),
        subjectImageBanner: this.getBanner(ispInfo),
        subjectImageLogo: this.getLogo(ispInfo),
        onClose: onClose,
        onConfirm: onConfirm
      });
    }
  }, {
    key: "renderTrendIcon",
    value: function renderTrendIcon(val) {
      var trend = val || 0;
      var icon = GEN_TREND_FLAT;
      if (trend >= 0.15) icon = TI_UP_FAST;else if (trend >= 0.03) icon = TI_UP;else if (trend <= -0.15) icon = TI_DOWN_FAST;else if (trend <= -0.03) icon = TI_DOWN;

      if (icon === GEN_TREND_FLAT) {
        return /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
          type: icon,
          color: TINT_DARK,
          size: 16
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(TrendIcon, {
        type: icon,
        color: TINT_DARK,
        size: 16
      });
    }
  }, {
    key: "renderPerformance",
    value: function renderPerformance(icon, title, subtitle) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-bordered shadow-none m-2 p-3"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mx-auto w-100 m-2"
      }, icon), /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 small"
      }, subtitle)));
    }
  }]);

  return InternetTrendSection;
}(React.Component);
InternetTrendSection.propTypes = {
  network: PropTypes__default["default"].object,
  disableAction: PropTypes__default["default"].bool,
  ratingComment: PropTypes__default["default"].object,
  onClickImageProvider: PropTypes__default["default"].func,
  onClickDetails: PropTypes__default["default"].func
};

var ScheduleHoursDialog = /*#__PURE__*/function (_Component) {
  _inherits(ScheduleHoursDialog, _Component);

  var _super = _createSuper(ScheduleHoursDialog);

  function ScheduleHoursDialog(props, context) {
    var _this;

    _classCallCheck(this, ScheduleHoursDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onClearDialog = _this.onClearDialog.bind(_assertThisInitialized(_this));
    _this.onConfirmDialog = _this.onConfirmDialog.bind(_assertThisInitialized(_this));
    _this.onClickNumber = _this.onClickNumber.bind(_assertThisInitialized(_this));
    _this.state = {
      values: _this.props.values.slice(0)
    };
    return _this;
  }

  _createClass(ScheduleHoursDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.props.values !== prevProps.values) {
        this.setState({
          values: this.props.values.slice(0)
        });
      }
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onCloseDialog) {
        this.props.onCloseDialog();
      }

      this.setState({
        values: this.props.values.slice(0)
      });
    }
  }, {
    key: "onClearDialog",
    value: function onClearDialog() {
      this.setState({
        values: []
      });
    }
  }, {
    key: "onConfirmDialog",
    value: function onConfirmDialog() {
      if (this.props.onConfirmDialog) {
        this.props.onConfirmDialog(this.state.values);
      }
    }
  }, {
    key: "onClickNumber",
    value: function onClickNumber(number) {
      if (this.props.editable === false) return;
      var numbers = this.state.values;

      if (numbers.includes(number)) {
        var index = numbers.indexOf(number);

        if (index > -1) {
          numbers.splice(index, 1);
          this.setState({
            values: numbers
          });
        }
      } else {
        numbers.push(number);
        this.setState({
          values: numbers
        });
      }
    }
  }, {
    key: "canEnable",
    value: function canEnable(max) {
      return this.state.values.length > max;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          max = _this$props.max; // values, onConfirmDialog, onCloseDialog

      var maxValue = max || 4;
      var titleValue = title || intl__default["default"].get('schedule_hours');
      var subtitleValue = subtitle || intl__default["default"].get('schedule_max_run', {
        max: maxValue
      });
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: titleValue,
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, subtitleValue && /*#__PURE__*/React__default["default"].createElement("p", null, subtitleValue), this.renderBody()), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, {
        className: "border-0"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onClearDialog,
        title: intl__default["default"].get('generic_clear'),
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onConfirmDialog,
        disabled: this.state.values.length > maxValue,
        title: intl__default["default"].get('generic_save')
      })));
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      var _this2 = this;

      var is24Hours = currentLocaleUsers24Hours();
      var hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
      var middleIndex = Math.ceil(hours.length / 2);
      var halfAM = hours.splice(0, middleIndex);
      var halfPM = hours.splice(-middleIndex);
      middleIndex = Math.ceil(halfAM.length / 2);
      var firstHalfAM = halfAM.splice(0, middleIndex);
      var secondHalfAM = halfAM.splice(-middleIndex);
      middleIndex = Math.ceil(halfPM.length / 2);
      var firstHalfPM = halfPM.splice(0, middleIndex);
      var secondHalfPM = halfPM.splice(-middleIndex);
      return /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("h4", null, intl__default["default"].get('generic_morning')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, firstHalfAM.map(function (val) {
        return _this2.renderNumber(val, is24Hours);
      }), secondHalfAM.map(function (val) {
        return _this2.renderNumber(val, is24Hours);
      })), /*#__PURE__*/React__default["default"].createElement("h4", null, intl__default["default"].get('generic_afternoon')), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, firstHalfPM.map(function (val) {
        return _this2.renderNumber(val, is24Hours);
      }), secondHalfPM.map(function (val) {
        return _this2.renderNumber(val, is24Hours);
      })));
    }
  }, {
    key: "renderNumber",
    value: function renderNumber(number, is24h) {
      var _this3 = this;

      var value = is24h ? number : number % 12 !== 0 ? number % 12 : 12;
      var classNumber = this.state.values.includes(number) ? 'icon-primary' : 'icon-soft-secondary';
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-2 text-center p-2 ".concat(this.props.editable === false ? "opacity" : ""),
        key: number
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        role: "button",
        onClick: function onClick() {
          return _this3.onClickNumber(number);
        },
        className: 'icon icon-sm icon-circle ' + classNumber
      }, value));
    }
  }]);

  return ScheduleHoursDialog;
}(React.Component);
ScheduleHoursDialog.propTypes = {
  onConfirmDialog: PropTypes__default["default"].func,
  onCloseDialog: PropTypes__default["default"].func,
  title: PropTypes__default["default"].string,
  subtitle: PropTypes__default["default"].string,
  id: PropTypes__default["default"].string,
  max: PropTypes__default["default"].number,
  values: PropTypes__default["default"].array,
  editable: PropTypes__default["default"].bool
};

var ToolSection = /*#__PURE__*/function (_Component) {
  _inherits(ToolSection, _Component);

  var _super = _createSuper(ToolSection);

  function ToolSection(props, context) {
    _classCallCheck(this, ToolSection);

    return _super.call(this, props, context);
  }

  _createClass(ToolSection, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          wrap = _this$props.wrap;
      var colClass = wrap === true ? "col-12 col-md-6 col-xs-12 col-lg-4" : "px-4";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "mb-6"
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, title), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "container mb-3 ml-0 px-0"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row"
      }, React__default["default"].Children.toArray(this.props.children.map(function (card) {
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: "my-3 ".concat(colClass)
        }, card);
      })))));
    }
  }]);

  return ToolSection;
}(React.Component);
ToolSection.propTypes = {
  title: PropTypes__default["default"].string,
  wrap: PropTypes__default["default"].bool
};

var CardChevron = /*#__PURE__*/function (_PureComponent) {
  _inherits(CardChevron, _PureComponent);

  var _super = _createSuper(CardChevron);

  function CardChevron() {
    _classCallCheck(this, CardChevron);

    return _super.apply(this, arguments);
  }

  _createClass(CardChevron, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement("i", {
        className: "align-self-center fa fa-chevron-right text-muted ml-2",
        style: {
          opacity: "0.5"
        }
      });
    }
  }]);

  return CardChevron;
}(React.PureComponent);

var _path$e;

function _extends$h() { _extends$h = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$h.apply(this, arguments); }

function SvgExport(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$h({
    viewBox: "0 0 24 24",
    fill: "current",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$e || (_path$e = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.78 1H2.308A2.316 2.316 0 000 3.309v13.853a2.316 2.316 0 002.309 2.308h10.39v-2.308H2.308V5.618l8.011 5.01c.75.473 1.697.473 2.448 0l8.011-5.01v5.772h2.309V3.309A2.316 2.316 0 0020.779 1zm-9.236 8.08L2.309 3.31h18.47L11.544 9.08zm8.08 6.015c0-.52.624-.773.982-.404l3.22 3.221c.232.23.232.589 0 .82l-3.22 3.22c-.358.358-.981.104-.981-.415V19.47h-3.463c-.635 0-1.155-.52-1.155-1.154 0-.635.52-1.154 1.155-1.154h3.463v-2.067z"
  })));
}

var _path$d;

function _extends$g() { _extends$g = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$g.apply(this, arguments); }

function SvgPing(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$g({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$d || (_path$d = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.697 6.042l1.766 1.766-5.984 5.984-4.034-4.034a1.221 1.221 0 00-1.73 0L.36 17.127a1.221 1.221 0 000 1.729c.478.478 1.25.478 1.729 0l6.486-6.499 4.034 4.034c.479.479 1.251.479 1.73 0l6.854-6.842 1.765 1.766c.38.38 1.043.11 1.043-.43V5.614A.59.59 0 0023.399 5h-5.26c-.552 0-.822.662-.442 1.042z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g$2;

function _extends$f() { _extends$f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }

function SvgTraceroute(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$f({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$2 || (_g$2 = /*#__PURE__*/React__namespace.createElement("g", {
    fill: "current",
    fillRule: "evenodd"
  }, /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M5.125 12.694a.458.458 0 00.324-.134c.155-.156 3.801-3.83 3.801-6.435a4.125 4.125 0 00-8.25 0c0 2.604 3.647 6.28 3.8 6.435a.458.458 0 00.325.134zM3.469 6.125a1.452 1.452 0 112.905-.002 1.452 1.452 0 01-2.905.002zM18.417 10.86a4.589 4.589 0 00-4.584 4.584c0 2.903 4.086 7.028 4.26 7.2a.458.458 0 00.648 0c.173-.172 4.259-4.297 4.259-7.2a4.589 4.589 0 00-4.583-4.584zm0 6.188a1.604 1.604 0 110-3.208 1.604 1.604 0 010 3.208zM5.125 14.069a.917.917 0 00-.917.916v1.376a.917.917 0 001.834 0v-1.375a.917.917 0 00-.917-.917zM5.125 18.652a.917.917 0 00-.917.917v1.375a.917.917 0 101.834 0v-1.375a.917.917 0 00-.917-.917zM9.708 20.027H8.333a.917.917 0 100 1.833h1.375a.917.917 0 100-1.833zM14.292 20.027h-1.375a.917.917 0 100 1.833h1.375a.917.917 0 000-1.833z"
  })))));
}

var _g$1;

function _extends$e() { _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }

function SvgWifiScan(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$e({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1 || (_g$1 = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.644 2.61a.917.917 0 10-1.296 1.297 9.625 9.625 0 010 13.612.917.917 0 101.296 1.297 11.458 11.458 0 000-16.206z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.05 5.203A.917.917 0 0015.758 6.5a5.958 5.958 0 010 8.426.917.917 0 001.297 1.296 7.792 7.792 0 000-11.02h-.005zM2.833 10.714a9.566 9.566 0 012.82-6.807.917.917 0 00-1.297-1.296 11.458 11.458 0 000 16.205.917.917 0 001.296-1.297 9.559 9.559 0 01-2.819-6.805z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M8.242 5.203a.917.917 0 00-1.297 0 7.792 7.792 0 000 11.018.917.917 0 001.297-1.296 5.958 5.958 0 010-8.427.917.917 0 000-1.295zM12 7.842a2.744 2.744 0 00-.917 5.331v7.731a.917.917 0 001.834 0v-7.73A2.744 2.744 0 0012 7.841z"
  }))));
}

var _path$c;

function _extends$d() { _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }

function SvgGlobe(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$d({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$c || (_path$c = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.989 1C5.917 1 1 5.928 1 12s4.917 11 10.989 11C18.072 23 23 18.072 23 12S18.072 1 11.989 1zm7.623 6.6h-3.245a17.214 17.214 0 00-1.518-3.916A8.833 8.833 0 0119.612 7.6zM12 3.244A15.495 15.495 0 0114.101 7.6H9.899A15.495 15.495 0 0112 3.244zM3.486 14.2A9.066 9.066 0 013.2 12c0-.759.11-1.496.286-2.2h3.718A18.167 18.167 0 007.05 12c0 .748.066 1.474.154 2.2H3.486zm.902 2.2h3.245a17.214 17.214 0 001.518 3.916A8.785 8.785 0 014.388 16.4zm3.245-8.8H4.388a8.785 8.785 0 014.763-3.916A17.214 17.214 0 007.633 7.6zM12 20.756A15.495 15.495 0 019.899 16.4h4.202A15.495 15.495 0 0112 20.756zm2.574-6.556H9.426c-.099-.726-.176-1.452-.176-2.2 0-.748.077-1.485.176-2.2h5.148c.099.715.176 1.452.176 2.2 0 .748-.077 1.474-.176 2.2zm.275 6.116a17.214 17.214 0 001.518-3.916h3.245a8.833 8.833 0 01-4.763 3.916zm1.947-6.116c.088-.726.154-1.452.154-2.2 0-.748-.066-1.474-.154-2.2h3.718c.176.704.286 1.441.286 2.2 0 .759-.11 1.496-.286 2.2h-3.718z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$b;

function _extends$c() { _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }

function SvgSearch(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$c({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$b || (_path$b = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M17.121 15.187h-1.019l-.36-.349a8.383 8.383 0 001.908-6.886c-.606-3.586-3.598-6.449-7.21-6.887a8.39 8.39 0 00-9.375 9.376c.438 3.61 3.301 6.603 6.887 7.209a8.383 8.383 0 006.886-1.909l.349.361v1.02l5.48 5.48a1.362 1.362 0 001.922 0 1.362 1.362 0 000-1.921l-5.468-5.494zm-7.738 0A5.796 5.796 0 013.58 9.383 5.796 5.796 0 019.383 3.58a5.796 5.796 0 015.804 5.803 5.796 5.796 0 01-5.804 5.804z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$a;

function _extends$b() { _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }

function SvgDhcpDiscovery(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$b({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$a || (_path$a = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18.4 7.2c1.32 0 2.4 1.08 2.4 2.4v12c0 1.32-1.08 2.4-2.4 2.4h-12C5.08 24 4 22.92 4 21.6v-12c0-1.32 1.08-2.4 2.4-2.4h12zm-8.659 4.5H8.5v7.2h1.241v-7.2zm4.152 0h-2.204v7.2h1.24v-2.642h1.007c.378 0 .73-.046 1.054-.138.324-.092.606-.235.845-.43a2.02 2.02 0 00.562-.731c.135-.294.203-.639.203-1.035 0-.418-.068-.769-.203-1.051a1.792 1.792 0 00-.567-.689c-.243-.176-.53-.3-.862-.374a4.73 4.73 0 00-.791-.103l-.284-.007zm-.096 1.024c.52 0 .914.086 1.182.259.267.172.401.486.401.94 0 .874-.513 1.31-1.54 1.31h-.91v-2.51h.867zM19.6 5.4H5.2c0-.996.804-1.8 1.8-1.8h10.8c.996 0 1.8.804 1.8 1.8zm-1.2-3.6h-12C6.4.804 7.204 0 8.2 0h8.4c.996 0 1.8.804 1.8 1.8z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$9;

function _extends$a() { _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }

function SvgDnsBenchmark(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$a({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$9 || (_path$9 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M15 9l.94-2.07L18 6l-2.06-.93L15 3l-.92 2.07L12 6l2.08.93L15 9zm6-1c-1.45 0-2.26 1.44-1.93 2.51l-3.55 3.56c-.3-.09-.74-.09-1.04 0l-2.55-2.55C12.27 10.45 11.46 9 10 9c-1.45 0-2.27 1.44-1.93 2.52l-4.56 4.55C2.44 15.74 1 16.55 1 18c0 1.1.9 2 2 2 1.45 0 2.26-1.44 1.93-2.51l4.55-4.56c.3.09.74.09 1.04 0l2.55 2.55C12.73 16.55 13.54 18 15 18c1.45 0 2.27-1.44 1.93-2.52l3.56-3.55c1.07.33 2.51-.48 2.51-1.93 0-1.1-.9-2-2-2zM4 9l-.5 2L3 9l-2-.5L3 8l.5-2L4 8l2 .5L4 9z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$8;

function _extends$9() { _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }

function SvgLock(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$9({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$8 || (_path$8 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M19.25 8h-1.125V5.75A5.627 5.627 0 0012.5.125 5.627 5.627 0 006.875 5.75V8H5.75a2.257 2.257 0 00-2.25 2.25V21.5a2.257 2.257 0 002.25 2.25h13.5a2.257 2.257 0 002.25-2.25V10.25A2.257 2.257 0 0019.25 8zM12.5 18.125a2.257 2.257 0 01-2.25-2.25 2.257 2.257 0 012.25-2.25 2.257 2.257 0 012.25 2.25 2.257 2.257 0 01-2.25 2.25zM9.125 8V5.75A3.37 3.37 0 0112.5 2.375a3.37 3.37 0 013.375 3.375V8h-6.75z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$7;

function _extends$8() { _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }

function SvgSecurity(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$8({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$7 || (_path$7 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.19 1.36l-7 3.11C3.47 4.79 3 5.51 3 6.3V11c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V6.3c0-.79-.47-1.51-1.19-1.83l-7-3.11c-.51-.23-1.11-.23-1.62 0zM12 11.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$6;

function _extends$7() { _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }

function SvgHiddenCamera(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$7({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$6 || (_path$6 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M24 9.5A5.506 5.506 0 0018.5 4h-13a5.5 5.5 0 000 11h4.75a.25.25 0 01.25.25v2.654a.251.251 0 01-.208.246 9.884 9.884 0 00-3.783 1.487c-.393.315-.584.82-.5 1.316 0 .54.41.993.949 1.047h10.084c.537-.055.945-.507.946-1.047.084-.497-.107-1-.5-1.315a9.892 9.892 0 00-3.784-1.489.249.249 0 01-.204-.249v-2.649a.25.25 0 01.25-.25h4.75A5.506 5.506 0 0024 9.5zm-12 3a3 3 0 110-6 3 3 0 010 6z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$5;

function _extends$6() { _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }

function SvgSpeed(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$6({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$5 || (_path$5 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M20.021 10.161a1.1 1.1 0 01.187-.54 1.1 1.1 0 011.925.121 11 11 0 01-.605 9.78 2.2 2.2 0 01-1.914 1.1H4.378a2.2 2.2 0 01-1.892-1.1A11 11 0 0116.336 3.89a1.1 1.1 0 01.186 1.936 1.1 1.1 0 01-1.1.077 8.458 8.458 0 00-2.32-.616A8.8 8.8 0 004.07 17.905a1.1 1.1 0 00.98.594h13.915a1.1 1.1 0 00.979-.583 8.8 8.8 0 00.759-5.204 8.305 8.305 0 00-.572-1.99 1.099 1.099 0 01-.11-.56zM9.806 14.027c0-.584.231-1.144.644-1.557l9.34-6.226-6.227 9.34a2.201 2.201 0 01-3.757-1.557z",
    fill: "current",
    fillRule: "evenodd"
  })));
}

var _path$4;

function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

function SvgBolt(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$5({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$4 || (_path$4 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M9.884 23H8.662l1.222-8.556H5.606c-.708 0-.696-.39-.464-.806.232-.416.061-.098.086-.147C6.804 10.704 9.175 6.55 12.328 1h1.223l-1.222 8.556h4.277c.6 0 .685.403.575.623l-.086.183C12.28 18.783 9.885 23 9.885 23z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _path$3;

function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

function SvgStar(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$4({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$3 || (_path$3 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M7.978 9.255h-6.44a.535.535 0 00-.31.974l5.252 3.754-2.021 6.525c-.15.492.417.899.834.589l5.274-4.022 5.273 4.011a.536.536 0 00.835-.588l-2.022-6.525 5.252-3.755c.428-.3.214-.973-.31-.973h-6.44L11.07 2.377c-.15-.503-.866-.503-1.027 0L7.978 9.255zm13.179 11.243l-1.498-4.835 3.113-2.225c.428-.3.214-.974-.31-.974H20.45l-3.295 2.354 1.562 5.049 1.604 1.22c.417.31.984-.097.835-.59zM16.985 7.116L15.55 2.388c-.15-.503-.866-.503-1.027 0l-.61 2 .835 2.728h2.236z",
    fillRule: "nonzero",
    fill: "current"
  })));
}

var _g;

function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

function SvgWakeOnLan(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g || (_g = /*#__PURE__*/React__namespace.createElement("g", {
    fillRule: "nonzero",
    fill: "current"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    d: "M12 .498a1 1 0 01.993.883l.007.117v9.75a1 1 0 01-1.993.117L11 11.248v-9.75a1 1 0 011-1z"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    d: "M14.057 4.678a1 1 0 011.276-.61 9.997 9.997 0 016.095 6.096c1.84 5.206-.888 10.92-6.095 12.76-5.207 1.84-10.92-.888-12.76-6.095C.73 11.623 3.46 5.91 8.666 4.07a1 1 0 11.666 1.885 8 8 0 105.334 0 1 1 0 01-.61-1.276z"
  }))));
}

var _path$2;

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

function SvgPause(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 320 512"
  }, props), _path$2 || (_path$2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M272 63.1h-32c-26.51 0-48 21.49-48 47.1v288c0 26.51 21.49 48 48 48l32 1.8c26.51 0 48-21.49 48-48V112c0-26.51-21.5-48.9-48-48.9zm-192 0H48c-26.51 0-48 21.49-48 48v288C0 426.5 21.49 448 48 448h32c26.51 0 48-21.49 48-48V112c0-26.51-21.5-48.9-48-48.9z",
    fill: "current"
  })));
}

var _path$1;

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

function SvgHand(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512"
  }, props), _path$1 || (_path$1 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M480 128v208c0 97.05-78.95 176-176 176h-37.72c-53.42 0-103.7-20.8-141.4-58.58l-113.1-113.1C3.906 332.5 0 322.2 0 312c0-21.3 17.15-40 40-40 10.23 0 20.47 3.906 28.28 11.72L128 343.4V64c0-17.67 14.33-32 32-32s32 14.33 32 32l.073 176c.027 8.8 7.127 16 15.927 16s16.07-7.164 16.07-16L224 32c0-17.67 14.33-32 32-32s32 14.33 32 32l.048 208c0 8.836 7.111 16 15.95 16S320 248.8 320 240V64c0-17.67 14.33-32 32-32s32 14.33 32 32l.073 176c0 8.836 7.09 16 15.93 16S416 248.8 416 240V128c0-17.67 14.33-32 32-32s32 14.3 32 32z",
    fill: "current"
  })));
}

var _path;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function SvgConfirmed(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 448 512"
  }, props), _path || (_path = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M438.6 105.4c12.5 12.5 12.5 32.7 0 45.2l-256 256c-12.5 12.5-32.7 12.5-45.2 0L9.372 278.6c-12.496-12.5-12.496-32.7 0-45.2 12.498-12.5 32.758-12.5 45.258 0L159.1 338.7l234.3-233.3c12.5-12.52 32.7-12.52 45.2 0z",
    fill: "current"
  })));
}

var ToolIcon = /*#__PURE__*/function (_Component) {
  _inherits(ToolIcon, _Component);

  var _super = _createSuper(ToolIcon);

  function ToolIcon() {
    _classCallCheck(this, ToolIcon);

    return _super.apply(this, arguments);
  }

  _createClass(ToolIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          color = _this$props.color;
      if (!TOOL_ALL_TYPES.includes(type)) return "";
      var currentTint = this.tintToClass(color);
      var className = this.props.className || '';
      var iconSize = size;
      return /*#__PURE__*/React__default["default"].createElement("figure", {
        className: "svg-icon ".concat(currentTint, " ").concat(className)
      }, this.renderIcon(type, iconSize));
    }
  }, {
    key: "tintToClass",
    value: function tintToClass(tint) {
      if (!tint) return "fill-primary";

      switch (tint) {
        case TINT_WHITE:
          return "fill-white";

        case TINT_DARK:
          return "fill-dark";

        case TINT_PRIMARY:
          return "fill-primary";

        case TINT_SUCCESS:
          return "fill-success";

        case TINT_WARNING:
          return "fill-warning";

        case TINT_DANGER:
          return "fill-danger";

        case TINT_NAVY:
          return "fill-navy";

        default:
          return "fill-primary";
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(type, iconSize) {
      if (!type) return "";

      switch (type.toUpperCase()) {
        case TOOL_EXPORT:
          return /*#__PURE__*/React__default["default"].createElement(SvgExport, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_CONFIRMED:
          return /*#__PURE__*/React__default["default"].createElement(SvgConfirmed, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_BLOCK:
          return /*#__PURE__*/React__default["default"].createElement(SvgHand, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_PAUSE:
          return /*#__PURE__*/React__default["default"].createElement(SvgPause, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_PING:
          return /*#__PURE__*/React__default["default"].createElement(SvgPing, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_TRACEROUTE:
          return /*#__PURE__*/React__default["default"].createElement(SvgTraceroute, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_WIFI_SCANNER:
          return /*#__PURE__*/React__default["default"].createElement(SvgWifiScan, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_DNS_LOOKUP:
          return /*#__PURE__*/React__default["default"].createElement(SvgGlobe, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_MAC_LOOKUP:
          return /*#__PURE__*/React__default["default"].createElement(SvgSearch, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_DHCP_DISCOVERY:
          return /*#__PURE__*/React__default["default"].createElement(SvgDhcpDiscovery, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_DNS_BENCHMARK:
          return /*#__PURE__*/React__default["default"].createElement(SvgDnsBenchmark, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_FIND_OPEN_PORTS:
          return /*#__PURE__*/React__default["default"].createElement(SvgLock, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_ROUTER_VULNERABILITY_CHECK:
          return /*#__PURE__*/React__default["default"].createElement(SvgSecurity, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_FIND_HIDDEN_CAMERAS:
          return /*#__PURE__*/React__default["default"].createElement(SvgHiddenCamera, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_ISP_COMPARISON:
          return /*#__PURE__*/React__default["default"].createElement(SvgStar, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_OUTAGE_DETECTOR:
          return /*#__PURE__*/React__default["default"].createElement(SvgBolt, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_SPEED_TEST:
          return /*#__PURE__*/React__default["default"].createElement(SvgSpeed, {
            width: iconSize,
            height: iconSize
          });

        case TOOL_WAKE_ON_LAN:
          return /*#__PURE__*/React__default["default"].createElement(SvgWakeOnLan, {
            width: iconSize,
            height: iconSize
          });

        default:
          return "";
      }
    }
  }]);

  return ToolIcon;
}(React.Component);
ToolIcon.propTypes = {
  size: PropTypes__default["default"].any,
  type: PropTypes__default["default"].oneOf([TOOL_EXPORT, TOOL_CONFIRMED, TOOL_BLOCK, TOOL_PAUSE, TOOL_PING, TOOL_WAKE_ON_LAN, TOOL_TRACEROUTE, TOOL_WIFI_SCANNER, TOOL_DNS_LOOKUP, TOOL_MAC_LOOKUP, TOOL_DHCP_DISCOVERY, TOOL_DNS_BENCHMARK, TOOL_FIND_OPEN_PORTS, TOOL_ROUTER_VULNERABILITY_CHECK, TOOL_FIND_HIDDEN_CAMERAS, TOOL_SPEED_TEST, TOOL_OUTAGE_DETECTOR, TOOL_ISP_COMPARISON]),
  color: PropTypes__default["default"].oneOf([TINT_DARK, TINT_WHITE, TINT_DANGER, TINT_NAVY, TINT_PRIMARY, TINT_SUCCESS, TINT_WARNING])
};

var ToolCard = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCard, _PureComponent);

  var _super = _createSuper(ToolCard);

  function ToolCard() {
    _classCallCheck(this, ToolCard);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          disabled = _this$props.disabled,
          backgroundClass = _this$props.backgroundClass,
          iconBackgroundClass = _this$props.iconBackgroundClass;
      var shadowClass = "shadow card-hover-shadow";
      var iconStyle = {
        borderRadius: "12px"
      };

      if (disabled) {
        shadowClass = "shadow-none";
        iconBackgroundClass = "bg-secondary";
        backgroundClass = "bg-soft-secondary";
        iconStyle["opacity"] = "0.5";
      }

      var chevron = /*#__PURE__*/React__default["default"].createElement(CardChevron, null); // const chevron = "";

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card card-frame h-100 px-4 py-3 ".concat(backgroundClass || '', " ").concat(shadowClass || '')
      }, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start justify-content-between h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-start align-items-center mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: iconStyle,
        className: "p-2 ".concat(iconBackgroundClass)
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: TINT_WHITE,
        size: '32px',
        className: 'd-flex',
        type: iconType
      })), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "ml-3 mb-0"
      }, title)), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark mb-2"
      }, description)), chevron));
    }
  }]);

  return ToolCard;
}(React.PureComponent);
ToolCard.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string,
  iconBackgroundClass: PropTypes__default["default"].string
};

var ToolCardAlternative = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCardAlternative, _PureComponent);

  var _super = _createSuper(ToolCardAlternative);

  function ToolCardAlternative() {
    _classCallCheck(this, ToolCardAlternative);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCardAlternative, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          backgroundClass = _this$props.backgroundClass;
          _this$props.iconBackgroundClass;
      var shadowStyle = 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px';

      if (premium) {
        shadowStyle = 'none';
        backgroundClass = 'bg-soft-secondary';
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          boxShadow: shadowStyle
        },
        className: "card h-100 my-auto px-3 py-4 ".concat(backgroundClass)
      }, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start justify-content-between h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "m-2"
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: TINT_DARK,
        size: '32px',
        type: iconType
      })), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mx-2 mb-0"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "my-2 ml-2 mr-4"
      }, description))));
    }
  }]);

  return ToolCardAlternative;
}(React.PureComponent);
ToolCardAlternative.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string
};

var ToolCardColored = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCardColored, _PureComponent);

  var _super = _createSuper(ToolCardColored);

  function ToolCardColored() {
    _classCallCheck(this, ToolCardColored);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCardColored, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          backgroundClass = _this$props.backgroundClass;
      var shadowClass = 'card-frame shadow card-hover-shadow';
      var textColor = 'text-white';
      var iconColor = TINT_WHITE;

      if (premium) {
        shadowClass = 'shadow-none';
        backgroundClass = 'bg-light';
        textColor = 'text-secondary';
        iconColor = TINT_DARK;
      } // const chevron = <i className="align-self-center fa fa-chevron-right text-dark ml-2"/>;


      var chevron = "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card h-100 p-4 ".concat(backgroundClass, " ").concat(shadowClass)
      }, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start justify-content-between h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-start align-items-center mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          borderRadius: '12px'
        },
        className: "p-2 fill-white"
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: iconColor,
        size: '32px',
        className: 'd-flex',
        type: iconType
      })), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "ml-3 mb-0 ".concat(textColor)
      }, title)), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "".concat(textColor)
      }, description)), chevron));
    }
  }]);

  return ToolCardColored;
}(React.PureComponent);
ToolCardColored.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string,
  iconBackgroundClass: PropTypes__default["default"].string
};

var ToolCardHorizontal = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCardHorizontal, _PureComponent);

  var _super = _createSuper(ToolCardHorizontal);

  function ToolCardHorizontal() {
    _classCallCheck(this, ToolCardHorizontal);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCardHorizontal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          backgroundClass = _this$props.backgroundClass,
          iconBackgroundClass = _this$props.iconBackgroundClass;
      var shadowClass = 'card-frame shadow card-hover-shadow';

      if (premium) {
        shadowClass = 'shadow-none';
        iconBackgroundClass = 'bg-secondary';
        backgroundClass = 'bg-soft-secondary';
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card h-100 overflow-hidden ".concat(backgroundClass || '', " ").concat(shadowClass)
      }, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row h-100 no-gutters"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-md-3 ".concat(iconBackgroundClass)
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex mt-4 justify-content-center"
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: TINT_WHITE,
        size: '32px',
        type: iconType
      }))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-md-9"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "card-title"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "card-text"
      }, description), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "card-text"
      }, /*#__PURE__*/React__default["default"].createElement("small", {
        className: "text-muted"
      }, "Last updated 3 mins ago"))))));
    }
  }]);

  return ToolCardHorizontal;
}(React.PureComponent);
ToolCardHorizontal.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string,
  iconBackgroundClass: PropTypes__default["default"].string
};

var ToolCardLargeIcon = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCardLargeIcon, _PureComponent);

  var _super = _createSuper(ToolCardLargeIcon);

  function ToolCardLargeIcon() {
    _classCallCheck(this, ToolCardLargeIcon);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCardLargeIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          iconBackgroundClass = _this$props.iconBackgroundClass;

      if (premium) {
        iconBackgroundClass = 'bg-secondary';
      }

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "h-100",
        style: {
          width: 200
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start justify-content-between h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          borderRadius: '20px'
        },
        className: "d-inline-block p-3 mb-3 ".concat(iconBackgroundClass)
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: TINT_WHITE,
        size: '64px',
        type: iconType
      })), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-dark"
      }, description))));
    }
  }]);

  return ToolCardLargeIcon;
}(React.PureComponent);
ToolCardLargeIcon.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string,
  iconBackgroundClass: PropTypes__default["default"].string
};

var ToolCardSmall = /*#__PURE__*/function (_PureComponent) {
  _inherits(ToolCardSmall, _PureComponent);

  var _super = _createSuper(ToolCardSmall);

  function ToolCardSmall() {
    _classCallCheck(this, ToolCardSmall);

    return _super.apply(this, arguments);
  }

  _createClass(ToolCardSmall, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          description = _this$props.description,
          iconType = _this$props.iconType,
          premium = _this$props.premium,
          disabled = _this$props.disabled,
          backgroundClass = _this$props.backgroundClass,
          iconBackgroundClass = _this$props.iconBackgroundClass,
          className = _this$props.className;
          _this$props.icon;
      var shadowClass = "card-hover-shadow";
      var iconStyle = {
        borderRadius: "12px"
      };
      var iconColor = TINT_WHITE;

      if (disabled) {
        backgroundClass = "bg-soft-secondary";
        iconBackgroundClass = "bg-secondary";
        shadowClass = "shadow-none";
        iconStyle["opacity"] = "0.5";
      }

      var chevron = /*#__PURE__*/React__default["default"].createElement(CardChevron, null); //const chevron = "";

      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card h-100 px-4 py-3  ".concat(className, " ").concat(backgroundClass, " ").concat(shadowClass)
      }, premium && /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-start justify-content-between h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex justify-content-start align-items-center h-100"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: iconStyle,
        className: "p-2 ".concat(iconBackgroundClass)
      }, /*#__PURE__*/React__default["default"].createElement(ToolIcon, {
        color: iconColor,
        className: 'd-flex ',
        size: '32px',
        type: iconType
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-block ml-3"
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-1 text-dark"
      }, title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 text-dark small"
      }, description))), chevron));
    }
  }]);

  return ToolCardSmall;
}(React.PureComponent);
ToolCardSmall.propTypes = {
  title: PropTypes__default["default"].string,
  description: PropTypes__default["default"].string,
  iconType: PropTypes__default["default"].string,
  premium: PropTypes__default["default"].bool,
  disabled: PropTypes__default["default"].bool,
  backgroundClass: PropTypes__default["default"].string,
  iconBackgroundClass: PropTypes__default["default"].string
};

var ClearDeviceDialog = /*#__PURE__*/function (_Component) {
  _inherits(ClearDeviceDialog, _Component);

  var _super = _createSuper(ClearDeviceDialog);

  function ClearDeviceDialog(props, context) {
    var _this;

    _classCallCheck(this, ClearDeviceDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onDelete = _this.onDelete.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ClearDeviceDialog, [{
    key: "onDelete",
    value: function onDelete() {
      if (this.props.onDelete) {
        this.props.onDelete();
      }
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          title = _this$props.title;
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title || '',
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, intl__default["default"].getHTML('device_detail_delete_modal_body'), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "small text-muted my-2"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "fas fa-info-circle fa-fw mr-2"
      }), intl__default["default"].get('device_detail_delete_modal_body_small'))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_LINK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onDelete,
        tint: BTN_TINT_DANGER,
        title: intl__default["default"].get('generic_clear')
      })));
    }
  }]);

  return ClearDeviceDialog;
}(React.Component);

var SORT_GROUPS = ["Automatic", "Mobile", "Audio & Video", "Home & Office", "Smart Home", "Network", "Server", "Engineering", "Industrial"];

var DeviceDetailIconPickerDialog = /*#__PURE__*/function (_Component) {
  _inherits(DeviceDetailIconPickerDialog, _Component);

  var _super = _createSuper(DeviceDetailIconPickerDialog);

  function DeviceDetailIconPickerDialog(props, context) {
    var _this;

    _classCallCheck(this, DeviceDetailIconPickerDialog);

    _this = _super.call(this, props, context);
    _this.onChangeDeviceType = _this.onChangeDeviceType.bind(_assertThisInitialized(_this));
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.state = {
      searchText: '',
      groupSelected: []
    };
    return _this;
  }

  _createClass(DeviceDetailIconPickerDialog, [{
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "onChangeDeviceType",
    value: function onChangeDeviceType(type) {
      if (this.props.onChangeDeviceType) {
        this.props.onChangeDeviceType(type);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var id = this.props.id;

      var onChangeDeviceName = function onChangeDeviceName() {
        var text = _this2.deviceInput.value;

        _this2.setState({
          searchText: text
        });
      };

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: intl__default["default"].get('device_detail_icon_picker_title'),
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("input", {
        id: "deviceInput",
        ref: function ref(input) {
          return _this2.deviceInput = input;
        },
        onChange: onChangeDeviceName,
        type: "text",
        className: "form-control form-control-sm",
        placeholder: intl__default["default"].get('device_detail_icon_picker_hint')
      })), this.renderBadges(), this.renderSections()));
    }
  }, {
    key: "renderSections",
    value: function renderSections() {
      var _this3 = this;

      var groups = [];

      if (this.state.groupSelected.length > 0) {
        this.state.groupSelected.forEach(function (val) {
          return groups.push(val);
        });
      } else {
        Object.keys(DeviceTypes).forEach(function (key) {
          if (_this3.state.searchText !== '') {
            if (DeviceTypes[key]['caption'].toUpperCase().includes(_this3.state.searchText.toUpperCase()) && DeviceTypes[key]['group'] !== '' && !groups.includes(DeviceTypes[key]['group'])) {
              groups.push(DeviceTypes[key]['group']);
            }
          } else {
            groups = SORT_GROUPS;
          }
        });
      }

      if (groups.length === 0) {
        return this.props.emptyState;
      }

      return groups.map(function (val) {
        return /*#__PURE__*/React__default["default"].createElement("section", {
          className: "my-2"
        }, /*#__PURE__*/React__default["default"].createElement("h5", {
          className: "mb-0"
        }, val), React__default["default"].Children.toArray(_this3.renderTableDevices(val)), /*#__PURE__*/React__default["default"].createElement("hr", null));
      });
    }
  }, {
    key: "renderTableDevices",
    value: function renderTableDevices(group) {
      var _this4 = this;

      var deviceType = this.props.deviceType;
      var devices = [];
      Object.keys(DeviceTypes).forEach(function (key) {
        if (_this4.state.searchText !== '') {
          if (DeviceTypes[key]['caption'].toUpperCase().includes(_this4.state.searchText.toUpperCase()) && DeviceTypes[key]['group'] !== '' && DeviceTypes[key]['group'] === group) {
            devices.push(DeviceTypes[key]);
          }
        } else {
          if (DeviceTypes[key]['group'] !== '' && DeviceTypes[key]['group'] === group) {
            devices.push(DeviceTypes[key]);
          }
        }
      });
      devices = devices.filter(function (v, i, a) {
        return a.findIndex(function (v2) {
          return v2.caption === v.caption;
        }) === i;
      });
      var tableDevices = [];

      for (var i = 0; i < devices.length; i += 4) {
        tableDevices.push( /*#__PURE__*/React__default["default"].createElement("div", {
          className: "row"
        }, React__default["default"].Children.toArray(devices.slice(i, i + 4).map(function (val) {
          var type = val['name'].toUpperCase();
          var bgColor = deviceType !== type || val['caption'] === 'Automatic' ? "" : "bg-primary";
          var tint = deviceType !== type || val['caption'] === 'Automatic' ? TINT_DARK : TINT_WHITE;
          var textColor = deviceType !== type || val['caption'] === 'Automatic' ? "text-dark" : "text-white";

          var onChangeDeviceType = function onChangeDeviceType() {
            return _this4.onChangeDeviceType(val);
          };

          return /*#__PURE__*/React__default["default"].createElement("div", {
            className: "col-3"
          }, /*#__PURE__*/React__default["default"].createElement(LinkCard, {
            action: onChangeDeviceType
          }, /*#__PURE__*/React__default["default"].createElement("div", {
            style: {
              borderRadius: "12px"
            },
            className: "d-block px-auto p-2 m-2 " + bgColor
          }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
            className: "text-center",
            size: 36,
            type: val['name'].toUpperCase(),
            tint: tint
          }), /*#__PURE__*/React__default["default"].createElement("p", {
            className: "mb-0 small text-center " + textColor
          }, val['caption']))));
        }))));
      }

      if (tableDevices.length === 0) {
        return this.props.emptyState;
      }

      return tableDevices;
    }
  }, {
    key: "renderBadges",
    value: function renderBadges() {
      var _this5 = this;

      var groups = [];

      if (this.state.groupSelected.length > 0) {
        this.state.groupSelected.forEach(function (val) {
          return groups.push(val);
        });
      }

      Object.keys(DeviceTypes).forEach(function (key) {
        if (_this5.state.searchText !== '') {
          if (DeviceTypes[key]['caption'].toUpperCase().includes(_this5.state.searchText.toUpperCase()) && DeviceTypes[key]['group'] !== '' && !groups.includes(DeviceTypes[key]['group'])) {
            groups.push(DeviceTypes[key]['group']);
          }
        } else {
          if (DeviceTypes[key]['group'] !== '' && !groups.includes(DeviceTypes[key]['group'])) {
            groups.push(DeviceTypes[key]['group']);
          }
        }
      });
      groups.sort(function (a, b) {
        return a.localeCompare(b);
      });
      return groups.map(function (val) {
        var onClickBadge = function onClickBadge() {
          var groupSelected = _this5.state.groupSelected;
          var newGroupSelected = [];

          if (groupSelected.includes(val)) {
            groupSelected.forEach(function (group) {
              if (val !== group) {
                newGroupSelected.push(group);
              }
            });
          } else {
            newGroupSelected = groupSelected;
            newGroupSelected.push(val);
          }

          _this5.setState({
            groupSelected: newGroupSelected
          });
        };

        return /*#__PURE__*/React__default["default"].createElement("a", {
          role: "button",
          onClick: onClickBadge
        }, /*#__PURE__*/React__default["default"].createElement(Badge, {
          className: "m-2",
          pill: true,
          text: val,
          tint: BADGE_TINT_PRIMARY,
          soft: !_this5.state.groupSelected.includes(val)
        }));
      });
    }
  }]);

  return DeviceDetailIconPickerDialog;
}(React.Component);

var EditDeviceDialog = /*#__PURE__*/function (_Component) {
  _inherits(EditDeviceDialog, _Component);

  var _super = _createSuper(EditDeviceDialog);

  function EditDeviceDialog(props, context) {
    var _this;

    _classCallCheck(this, EditDeviceDialog);

    _this = _super.call(this, props, context);
    _this.state = {
      customLocation: '',
      setOfLocations: [{
        value: "DEFAULT",
        label: intl__default["default"].get('device_place_Default')
      }, {
        value: "LIVING_ROOM",
        label: intl__default["default"].get('device_place_Living_Room')
      }, {
        value: "DINING_ROOM",
        label: intl__default["default"].get('device_place_Dining_Room')
      }, {
        value: "BEDROOM",
        label: intl__default["default"].get('device_place_Bedroom')
      }, {
        value: "BATHROOM",
        label: intl__default["default"].get('device_place_Bathroom')
      }, {
        value: "KITCHEN",
        label: intl__default["default"].get('device_place_Kitchen')
      }, {
        value: "STUDY",
        label: intl__default["default"].get('device_place_Study')
      }, {
        value: "BASEMENT",
        label: intl__default["default"].get('device_place_Basement')
      }, {
        value: "CELLAR",
        label: intl__default["default"].get('device_place_Cellar')
      }, {
        value: "HALLWAY",
        label: intl__default["default"].get('device_place_Hallway')
      }, {
        value: "LAUNDRY_ROOM",
        label: intl__default["default"].get('device_place_Laundry Room')
      }, {
        value: "RECREATION_ROOM",
        label: intl__default["default"].get('device_place_Recreation Room')
      }, {
        value: "POOL",
        label: intl__default["default"].get('device_place_Pool')
      }, {
        value: "GYM",
        label: intl__default["default"].get('device_place_Gym')
      }, {
        value: "GARAGE",
        label: intl__default["default"].get('device_place_Garage')
      }, {
        value: "GARDEN",
        label: intl__default["default"].get('device_place_Garden')
      }, {
        value: "CLOSET",
        label: intl__default["default"].get('device_place_Closet')
      }, {
        value: "OFFICE",
        label: intl__default["default"].get('device_place_Office')
      }, {
        value: "UTILITY_ROOM",
        label: intl__default["default"].get('device_place_Utility Room')
      }, {
        value: "LOBBY",
        label: intl__default["default"].get('device_place_Lobby')
      }, {
        value: "SAFE_ROOM",
        label: intl__default["default"].get('device_place_Safe Room')
      }, {
        value: "GENERIC_INDOORS",
        label: intl__default["default"].get('device_place_Indoors')
      }, {
        value: "GENERIC_OUTDOORS",
        label: intl__default["default"].get('device_place_Outdoors')
      }]
    };
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    _this.onSave = _this.onSave.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(EditDeviceDialog, [{
    key: "onSave",
    value: function onSave() {
      var newDevice = this.props.device instanceof NetNode ? new NetNode() : {};
      newDevice = Object.assign(newDevice, this.props.device);
      newDevice.customName = this.netNameInput.value;
      newDevice.customNote = this.netNotesInput.value;
      newDevice.customLocation = this.state.customLocation;

      if (this.props.onSave) {
        this.props.onSave(newDevice);
      }
    }
  }, {
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          id = _this$props.id,
          title = _this$props.title,
          device = _this$props.device;
      var setOfLocations = this.state.setOfLocations;

      var handleChange = function handleChange(selectedLocation) {
        var setOfLocations = _this2.state.setOfLocations;
        var location = setOfLocations.find(function (loc) {
          return loc.value === selectedLocation.value;
        });

        _this2.setState({
          customLocation: location.value
        });
      };

      var reactSelectStyles = {
        indicatorsContainer: function indicatorsContainer(base, state) {
          return _objectSpread2(_objectSpread2({}, base), {}, {
            marginBottom: "8px"
          });
        },
        indicatorSeparator: function indicatorSeparator(base, state) {
          return _objectSpread2(_objectSpread2({}, base), {}, {
            backgroundColor: "transparent"
          });
        },
        container: function container(base, state) {
          return _objectSpread2(_objectSpread2({}, base), {}, {
            backgroundColor: "transparent",
            zIndex: "999"
          });
        }
      };
      var name = device && device.customName ? device.customName : '';
      var notes = device && device.customNote ? device.customNote : '';
      var customLocation = device && device.customLocation ? setOfLocations.filter(function (location) {
        return location.value === device.customLocation;
      })[0] : setOfLocations[0];

      if (this.state.customLocation) {
        customLocation = setOfLocations.filter(function (location) {
          return location.value === _this2.state.customLocation;
        })[0];
      }

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: title || '',
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement("form", null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "netLocationInput"
      }, intl__default["default"].get('device_detail_edit_modal_placementinput_label')), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        styles: reactSelectStyles,
        value: customLocation,
        onChange: function onChange(selectedLocation) {
          return handleChange(selectedLocation);
        },
        options: setOfLocations
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "netNameInput"
      }, intl__default["default"].get('generic_name')), /*#__PURE__*/React__default["default"].createElement("input", {
        id: "netNameInput",
        ref: function ref(input) {
          return _this2.netNameInput = input;
        },
        type: "text",
        className: "form-control form-control-sm",
        "aria-describedby": "netNameHelp",
        placeholder: intl__default["default"].get('device_detail_edit_modal_nameinput_placeholder'),
        defaultValue: name
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "form-group"
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: "netNotesInput"
      }, intl__default["default"].get('device_detail_edit_modal_notesinput_label')), /*#__PURE__*/React__default["default"].createElement("textarea", {
        id: "netNotesInput",
        ref: function ref(input) {
          return _this2.netNotesInput = input;
        },
        type: "text",
        rows: "3",
        className: "form-control form-control-sm",
        "aria-describedby": "netNotesHelp",
        placeholder: intl__default["default"].get('device_detail_edit_modal_notesinput_placeholder'),
        defaultValue: notes
      })))), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onCloseDialog,
        title: intl__default["default"].get('generic_close'),
        type: BTN_TYPE_LINK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onSave,
        title: intl__default["default"].get('generic_save')
      })));
    }
  }]);

  return EditDeviceDialog;
}(React.Component);

var WakeOnLanDialog = /*#__PURE__*/function (_Component) {
  _inherits(WakeOnLanDialog, _Component);

  var _super = _createSuper(WakeOnLanDialog);

  function WakeOnLanDialog(props, context) {
    var _this;

    _classCallCheck(this, WakeOnLanDialog);

    _this = _super.call(this, props, context);
    _this.onCloseDialog = _this.onCloseDialog.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(WakeOnLanDialog, [{
    key: "onCloseDialog",
    value: function onCloseDialog() {
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          responseWOL = _this$props.responseWOL,
          id = _this$props.id,
          PacketSent = _this$props.PacketSent;
      if (!responseWOL) return '';

      if (responseWOL.woken) {
        return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
          id: id,
          title: intl__default["default"].get('generic_completed'),
          onClose: this.onCloseDialog
        }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement(EmptyState, {
          title: /*#__PURE__*/React__default["default"].createElement("div", {
            className: "d-flex align-items-center justify-content-center my-3"
          }, /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
            shape: SI_SHAPE_CIRCLE,
            status: SI_STATUS_SUCCESS,
            pulse: true
          }), /*#__PURE__*/React__default["default"].createElement("h3", {
            className: "ml-2 mb-0"
          }, intl__default["default"].get('device_detail_wol_modal_title_success'))),
          image: PacketSent,
          caption: intl__default["default"].get('device_detail_wol_success'),
          subtitle: intl__default["default"].get('device_detail_wol_success')
        })), /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
          action: this.onCloseDialog,
          title: 'OK'
        })));
      }

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: id,
        title: intl__default["default"].get('generic_failed'),
        onClose: this.onCloseDialog
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, null, /*#__PURE__*/React__default["default"].createElement(EmptyState, {
        title: /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex align-items-center justify-content-center my-3"
        }, /*#__PURE__*/React__default["default"].createElement(StatusIcon, {
          shape: SI_SHAPE_CIRCLE,
          status: SI_STATUS_ERROR,
          pulse: true
        }), /*#__PURE__*/React__default["default"].createElement("h3", {
          className: "ml-2 mb-0"
        }, intl__default["default"].get('device_detail_wol_modal_title_fail'))),
        image: PacketSent,
        subtitle: intl__default["default"].get('device_detail_wol_failed')
      })));
    }
  }]);

  return WakeOnLanDialog;
}(React.Component);

var FeedbackBanner = /*#__PURE__*/function (_Component) {
  _inherits(FeedbackBanner, _Component);

  var _super = _createSuper(FeedbackBanner);

  function FeedbackBanner(props, context) {
    var _this;

    _classCallCheck(this, FeedbackBanner);

    _this = _super.call(this, props, context);
    _this.onClickYes = _this.onClickYes.bind(_assertThisInitialized(_this));
    _this.onClickNo = _this.onClickNo.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FeedbackBanner, [{
    key: "onClickNo",
    value: function onClickNo() {
      if (this.props.onClickNo) {
        this.props.onClickNo();
      }
    }
  }, {
    key: "onClickYes",
    value: function onClickYes() {
      if (this.props.onClickYes) {
        this.props.onClickYes();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(DeviceDetailBanner, {
        bgColor: "alert-soft-primary",
        className: "mb-4",
        title: intl__default["default"].get('device_detail_banner_feedback_title'),
        subtitle: intl__default["default"].get('device_detail_banner_feedback_subtitle')
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        title: intl__default["default"].get('generic_yes'),
        action: this.onClickYes,
        tint: BTN_TINT_SUCCESS,
        icon: "fa-thumbs-up"
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        title: intl__default["default"].get('generic_no'),
        action: this.onClickNo,
        tint: BTN_TINT_DANGER,
        icon: "fa-thumbs-down",
        className: "ml-2"
      }));
    }
  }]);

  return FeedbackBanner;
}(React.Component);

var ChooseModelBanner = /*#__PURE__*/function (_Component) {
  _inherits(ChooseModelBanner, _Component);

  var _super = _createSuper(ChooseModelBanner);

  function ChooseModelBanner(props, context) {
    var _this;

    _classCallCheck(this, ChooseModelBanner);

    _this = _super.call(this, props, context);
    _this.onClickChoose = _this.onClickChoose.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ChooseModelBanner, [{
    key: "onClickChoose",
    value: function onClickChoose() {
      if (this.props.onClickChoose) {
        this.props.onClickChoose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(DeviceDetailBanner, {
        bgColor: "alert-soft-primary",
        className: "mb-4",
        subtitle: intl__default["default"].get('device_detail_banner_choose_subtitle')
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        title: intl__default["default"].get('device_detail_banner_choose_action'),
        action: this.onClickChoose,
        icon: "fa-search"
      }));
    }
  }]);

  return ChooseModelBanner;
}(React.Component);

var RevertBanner = /*#__PURE__*/function (_Component) {
  _inherits(RevertBanner, _Component);

  var _super = _createSuper(RevertBanner);

  function RevertBanner(props, context) {
    var _this;

    _classCallCheck(this, RevertBanner);

    _this = _super.call(this, props, context);
    _this.onClickRevert = _this.onClickRevert.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(RevertBanner, [{
    key: "onClickRevert",
    value: function onClickRevert() {
      if (this.props.onClickRevert) {
        this.props.onClickRevert();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(DeviceDetailBanner, {
        bgColor: "alert-soft-primary",
        className: "mb-4",
        subtitle: intl__default["default"].get('device_detail_banner_revert_subtitle')
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onClickRevert,
        title: intl__default["default"].get('device_detail_banner_revert_action')
      }));
    }
  }]);

  return RevertBanner;
}(React.Component);

var ClickToScrollBar = /*#__PURE__*/function (_Component) {
  _inherits(ClickToScrollBar, _Component);

  var _super = _createSuper(ClickToScrollBar);

  function ClickToScrollBar(props, context) {
    var _this;

    _classCallCheck(this, ClickToScrollBar);

    _this = _super.call(this, props, context);
    _this.onChangeTab = _this.onChangeTab.bind(_assertThisInitialized(_this));
    _this.state = {
      value: 0
    };
    return _this;
  }

  _createClass(ClickToScrollBar, [{
    key: "onChangeTab",
    value: function onChangeTab(index) {
      this.setState({
        value: index
      });

      if (this.props.onChangeTab) {
        this.props.onChangeTab(index);
      }
    }
  }, {
    key: "getActiveTabClass",
    value: function getActiveTabClass(index) {
      return this.state.value === index ? "text-primary" : "text-secondary";
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          idx_array = _this$props.idx_array,
          getTabText = _this$props.getTabText,
          classItem = _this$props.classItem,
          className = _this$props.className;
      var itemClass = "list-inline-item " + classItem + " ";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: className
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline"
      }, idx_array.map(function (index) {
        return /*#__PURE__*/React__default["default"].createElement("a", {
          key: index,
          onClick: function onClick() {
            return _this2.onChangeTab(index);
          },
          role: "button",
          className: itemClass + _this2.getActiveTabClass(index)
        }, getTabText(index));
      })), /*#__PURE__*/React__default["default"].createElement("hr", {
        className: "my-0 mx-2"
      }));
    }
  }]);

  return ClickToScrollBar;
}(React.Component);

var DeviceDetailHeader = /*#__PURE__*/function (_PureComponent) {
  _inherits(DeviceDetailHeader, _PureComponent);

  var _super = _createSuper(DeviceDetailHeader);

  function DeviceDetailHeader(props, context) {
    var _this;

    _classCallCheck(this, DeviceDetailHeader);

    _this = _super.call(this, props, context);
    _this.onClearDevice = _this.onClearDevice.bind(_assertThisInitialized(_this));
    _this.onEditDevice = _this.onEditDevice.bind(_assertThisInitialized(_this));
    _this.onChangeImportant = _this.onChangeImportant.bind(_assertThisInitialized(_this));
    _this.onClickTimeline = _this.onClickTimeline.bind(_assertThisInitialized(_this));
    _this.onChangeDeviceType = _this.onChangeDeviceType.bind(_assertThisInitialized(_this));
    _this.onClickManage = _this.onClickManage.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(DeviceDetailHeader, [{
    key: "onClickTimeline",
    value: function onClickTimeline() {
      if (this.props.onClickTimeline) {
        this.props.onClickTimeline();
      }
    }
  }, {
    key: "onChangeImportant",
    value: function onChangeImportant() {
      if (this.props.onChangeImportant) {
        this.props.onChangeImportant();
      }
    }
  }, {
    key: "onClearDevice",
    value: function onClearDevice() {
      if (this.props.onClearDevice) {
        this.props.onClearDevice();
      }
    }
  }, {
    key: "onEditDevice",
    value: function onEditDevice() {
      if (this.props.onEditDevice) {
        this.props.onEditDevice();
      }
    }
  }, {
    key: "onChangeDeviceType",
    value: function onChangeDeviceType() {
      if (this.props.onChangeDeviceType) {
        this.props.onChangeDeviceType();
      }
    }
  }, {
    key: "onClickManage",
    value: function onClickManage() {
      if (this.props.onClickManage) {
        this.props.onClickManage();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          netNode = _this$props.netNode,
          activeInternetDowntimeSchedule = _this$props.activeInternetDowntimeSchedule;
      var name = netNode && netNode.bestName ? netNode.bestName : "";
      var vendor = netNode && netNode.macVendor ? netNode.macVendor : "";
      var brand = netNode && netNode.bestMake ? netNode.bestMake : "";
      var model = netNode && netNode.bestModel ? netNode.bestModel : "";
      var osVer = netNode && netNode.osVersionName ? netNode.osVersionName : "";
      var type = netNode && netNode.bestType ? netNode.bestType : DT_GENERIC;
      var importantIcon = netNode && netNode.important ? /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_FLAG,
        color: TINT_PRIMARY,
        size: 12
      }) : /*#__PURE__*/React__default["default"].createElement(GenericIcon, {
        type: GEN_FLAG_OUT,
        color: TINT_PRIMARY,
        size: 12
      });
      var statusChangeTime = null;

      if (netNode && netNode.stateChangeTime > 0) {
        statusChangeTime = formatRelativeDate(netNode.stateChangeTime);
      } else if (netNode && netNode.firstSeenTime > 0) {
        statusChangeTime = formatRelativeDate(netNode.firstSeenTime);
      }

      var iconOnline = "text-success";
      var iconType = "fa fa-circle fa-xs";
      var textOnline = intl__default["default"].get('generic_online');
      var colorText = "";
      var manageText = intl__default["default"].get('generic_manage');
      var duration = netNode.getKickOutModeDuration();

      if (netNode.isBlocked()) {
        statusChangeTime = netNode.kickOutFormattedDate();
        iconOnline = "text-danger";
        iconType = "fas fa-hand-paper";
        colorText = "text-danger";
        manageText = intl__default["default"].get('generic_resume');
        textOnline = intl__default["default"].get('device_detail_kick_out_mode_blocked');
      } else if (netNode.isPaused()) {
        if (duration) {
          statusChangeTime = intl__default["default"].get('device_detail_kick_out_mode_paused_ago_for', {
            time: netNode.kickOutFormattedDate(),
            duration: formatDuration(duration, DATE_FORMAT_SHORT)
          });
        } else {
          statusChangeTime = intl__default["default"].get('device_detail_kick_out_mode_paused') + ' ' + netNode.kickOutFormattedDate();
        }

        iconOnline = "text-orange";
        iconType = "fa fa-pause";
        textOnline = intl__default["default"].get('device_detail_kick_out_mode_paused_on');
      } else if (activeInternetDowntimeSchedule) {
        var startDate = new Date(0, 0, 0, activeInternetDowntimeSchedule.startHour, activeInternetDowntimeSchedule.startMin);
        var endDate = new Date(0, 0, 0, activeInternetDowntimeSchedule.endHour, activeInternetDowntimeSchedule.endMin);
        var start = startDate.toLocaleTimeString(undefined, {
          hour: "numeric",
          minute: "numeric"
        });
        var end = endDate.toLocaleTimeString(undefined, {
          hour: "numeric",
          minute: "numeric"
        });
        statusChangeTime = intl__default["default"].getHTML("device_detail_internet_downtime_schedule", {
          name: activeInternetDowntimeSchedule.name,
          startTime: start,
          endTime: end
        });
        iconOnline = "text-orange";
        iconType = "fa fa-pause";
        textOnline = intl__default["default"].get("device_detail_kick_out_mode_paused_on");
        manageText = intl__default["default"].get("device_detail_internet_downtime_schedule_manage");
      } else if (netNode && netNode.state === 'DOWN') {
        iconOnline = "text-secondary";
        textOnline = intl__default["default"].get('generic_offline');
      }

      return /*#__PURE__*/React__default["default"].createElement(Header, {
        className: "bg-soft-primary",
        classContainer: "px-4"
      }, /*#__PURE__*/React__default["default"].createElement(HeaderLeftSide, {
        className: "mr-3"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-center mr-3"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "text-center"
      }, /*#__PURE__*/React__default["default"].createElement(LinkCard, {
        action: this.onChangeDeviceType
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        style: {
          borderRadius: "12px",
          backgroundColor: '#000'
        },
        className: "text-center p-3"
      }, /*#__PURE__*/React__default["default"].createElement(DeviceTypeIcon, {
        size: 36,
        type: type,
        tint: TINT_WHITE
      }))), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        title: intl__default["default"].get("generic_change"),
        action: this.onChangeDeviceType,
        type: BTN_TYPE_LINK
      })))), /*#__PURE__*/React__default["default"].createElement(HeaderRightSide, {
        dividerColor: "border-secondary-dark",
        className: "py-2"
      }, /*#__PURE__*/React__default["default"].createElement(HeaderSubSideDetail, null, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-3"
      }, /*#__PURE__*/React__default["default"].createElement("h2", {
        className: "mb-0 " + (name ? "text-dark" : "text-secondary")
      }, name || intl__default["default"].get('generic_no_name')), !brand && !model && !osVer && !vendor ? /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 text-dark"
      }, intl__default["default"].get('model_not_recognized')) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline list-separator mb-2 text-dark"
      }, brand && model ? /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0"
      }, brand, " ", model) : brand ? /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0"
      }, brand) : vendor ? /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0"
      }, vendor) : "", osVer && /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0"
      }, osVer))), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ml-3 text-lg-right"
      }, /*#__PURE__*/React__default["default"].createElement("span", null, /*#__PURE__*/React__default["default"].createElement("i", {
        className: "d-sm-none d-md-none d-lg-inline-block " + iconType + " mr-2 " + iconOnline
      }), /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "mb-0 d-inline-block " + colorText
      }, textOnline), /*#__PURE__*/React__default["default"].createElement("i", {
        className: "d-lg-none " + iconType + " ml-2 " + iconOnline
      })), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "list-inline list-separator mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "list-inline-item mb-0 text-dark"
      }, statusChangeTime), (netNode.isPaused() || netNode.isBlocked() || activeInternetDowntimeSchedule) && /*#__PURE__*/React__default["default"].createElement("a", {
        onClick: this.onClickManage,
        className: "text-primary list-inline-item mb-0 h4 pointer"
      }, manageText)))), /*#__PURE__*/React__default["default"].createElement(HeaderSubSideAction, {
        className: "pb-2"
      }, /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "mr-2 mt-2",
        action: this.onChangeImportant,
        title: /*#__PURE__*/React__default["default"].createElement("div", {
          className: "d-flex align-items-center justify-content-start ml-1"
        }, /*#__PURE__*/React__default["default"].createElement("span", {
          className: "mr-2"
        }, importantIcon), intl__default["default"].get('generic_important')),
        type: BTN_TYPE_LINK
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        icon: "fa-edit",
        className: "mr-2 mt-2",
        action: this.onEditDevice,
        title: intl__default["default"].get('device_detail_edit_action'),
        type: BTN_TYPE_LINK
      })), /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        icon: "fa-trash",
        className: "ml-2 mt-2",
        action: this.onClearDevice,
        title: intl__default["default"].get('device_detail_clear_action'),
        type: BTN_TYPE_SOFT
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        action: this.onClickTimeline,
        icon: "fa-history",
        className: "ml-2 mt-2",
        title: intl__default["default"].get('view_timeline_button')
      })))));
    }
  }]);

  return DeviceDetailHeader;
}(React.PureComponent);

var EmptyStateSection = /*#__PURE__*/function (_Component) {
  _inherits(EmptyStateSection, _Component);

  var _super = _createSuper(EmptyStateSection);

  function EmptyStateSection() {
    _classCallCheck(this, EmptyStateSection);

    return _super.apply(this, arguments);
  }

  _createClass(EmptyStateSection, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle,
          className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: className
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "d-flex align-items-center justify-content-start w-100 mb-2"
      }, /*#__PURE__*/React__default["default"].createElement("span", {
        className: "legend-indicator bg-warning d-flex align-items-center justify-content-center",
        style: {
          width: 30,
          height: 30
        }
      }, /*#__PURE__*/React__default["default"].createElement("i", {
        className: "fa fa-exclamation text-white"
      })), /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, title)), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "mb-0 text-dark"
      }, subtitle));
    }
  }]);

  return EmptyStateSection;
}(React.Component);

var MIN_IN_MILLIS = 60000;
var SELECT_STYLES = {
  indicatorsContainer: function indicatorsContainer(base, state) {
    return _objectSpread2(_objectSpread2({}, base), {}, {
      marginBottom: "8px"
    });
  },
  indicatorSeparator: function indicatorSeparator(base, state) {
    return _objectSpread2(_objectSpread2({}, base), {}, {
      backgroundColor: "transparent"
    });
  },
  container: function container(base, state) {
    return _objectSpread2(_objectSpread2({}, base), {}, {
      opacity: state.isDisabled ? ".5" : "1",
      backgroundColor: "transparent",
      zIndex: "999",
      marginBottom: '15px'
    });
  }
};

var NotificationCard = /*#__PURE__*/function (_Component) {
  _inherits(NotificationCard, _Component);

  var _super = _createSuper(NotificationCard);

  function NotificationCard(props) {
    var _this;

    _classCallCheck(this, NotificationCard);

    _this = _super.call(this, props);
    _this.onChangeTimeout = _this.onChangeTimeout.bind(_assertThisInitialized(_this));
    _this.state = {
      presetTimeoutValues: [{
        value: 0,
        label: intl__default["default"].get('generic_automatic')
      }, {
        value: 1 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_min_long', {
          amount: 1
        })
      }, {
        value: 2 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 2
        })
      }, {
        value: 5 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 5
        })
      }, {
        value: 10 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 10
        })
      }, {
        value: 15 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 15
        })
      }, {
        value: 20 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 20
        })
      }, {
        value: 30 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 30
        })
      }, {
        value: 40 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_mins_long', {
          amount: 45
        })
      }, {
        value: 60 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_hour_long', {
          amount: 1
        })
      }, {
        value: 90 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_hours_long', {
          amount: 1.5
        })
      }, {
        value: 120 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_hours_long', {
          amount: 2
        })
      }, {
        value: 240 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_hours_long', {
          amount: 4
        })
      }, {
        value: 480 * MIN_IN_MILLIS,
        label: intl__default["default"].get('dateformat_hours_long', {
          amount: 8
        })
      }]
    };
    return _this;
  }

  _createClass(NotificationCard, [{
    key: "onChangeTimeout",
    value: function onChangeTimeout(selectedValue) {
      if (this.props.onChangeTimeout) {
        this.props.onChangeTimeout(selectedValue);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          subtitle = _this$props.subtitle;
          _this$props.description;
          var netNode = _this$props.netNode,
          disabled = _this$props.disabled;
      var timeoutInMillis = netNode && netNode.stateChangeTimeout ? netNode.stateChangeTimeout : 0;
      var timeoutInMinutes = timeoutInMillis / 60 / 1000;
      var options;
      var currentTimeoutValue;

      if (timeoutInMillis) {
        var preset = this.state.presetTimeoutValues.filter(function (timeout) {
          return timeout.value === timeoutInMillis;
        })[0];

        if (preset) {
          // Found a preset value, pick it.
          currentTimeoutValue = preset;
          options = this.state.presetTimeoutValues;
        } else if (timeoutInMillis > 0) {
          // Found a fixed value not in the preset list. Add it on top.
          currentTimeoutValue = {
            value: timeoutInMillis,
            label: intl__default["default"].get('device_detail_notification_set_millis', {
              time: timeoutInMinutes
            })
          };
          options = _toConsumableArray(this.state.presetTimeoutValues);
          options.unshift(currentTimeoutValue);
        } else if (timeoutInMillis === 0) {
          // Found default "Automatic" value. Add it on top.
          currentTimeoutValue = this.state.presetTimeoutValues[0];
          options = _toConsumableArray(this.state.presetTimeoutValues);
        } else if (timeoutInMillis < 0) {
          // Found an "Automatic" value elaborated by the backend. Add it on top.
          currentTimeoutValue = {
            value: timeoutInMillis,
            label: intl__default["default"].get('device_detail_notification_set_automatic', {
              time: -timeoutInMinutes
            })
          };
          options = _toConsumableArray(this.state.presetTimeoutValues);
          options.unshift(currentTimeoutValue);
        }
      } else {
        currentTimeoutValue = this.state.presetTimeoutValues[0];
        options = _toConsumableArray(this.state.presetTimeoutValues);
      }

      var bgClass = disabled ? "bg-soft-secondary" : "";
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card border " + bgClass
      }, /*#__PURE__*/React__default["default"].createElement(PremiumBadge, null), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, /*#__PURE__*/React__default["default"].createElement("h4", {
        className: "mb-0"
      }, title), this.props.children, /*#__PURE__*/React__default["default"].createElement("p", {
        className: "small"
      }, subtitle), /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
        styles: SELECT_STYLES,
        value: currentTimeoutValue,
        isDisabled: disabled,
        onChange: this.onChangeTimeout,
        options: this.state.presetTimeoutValues
      })));
    }
  }]);

  return NotificationCard;
}(React.Component);

/**
 * Converts the network contacts and network discovery into a list of <code>Contact</code> objects
 * that retain the current status.
 *
 * @param netContacts Array of Network Contacts
 * @param netDiscovery Network Discovery object
 * @return {[Contact]}
 */

function convertToContactList(snapshot) {
  var _snapshot$contacts;

  var netContacts = (snapshot === null || snapshot === void 0 ? void 0 : (_snapshot$contacts = snapshot.contacts) === null || _snapshot$contacts === void 0 ? void 0 : _snapshot$contacts.contacts) || [];
  var contactStates = calculateContactStates(snapshot);
  return netContacts.map(function (netContact) {
    return mergeContactWithState(netContact, contactStates[netContact.identifier]);
  });
}
/**
 * Holds the current state for a contact. Not exported, internal only.
 */

var ContactState = /*#__PURE__*/_createClass(function ContactState() {
  _classCallCheck(this, ContactState);

  _defineProperty(this, "contactId", void 0);

  _defineProperty(this, "presenceNode", void 0);

  _defineProperty(this, "online", void 0);

  _defineProperty(this, "lastChange", void 0);

  _defineProperty(this, "otherNodes", void 0);

  _defineProperty(this, "activeScheduleItemIds", void 0);
});
/**
 * Calculates the status (online/offline and when) of a person, based on all the presence
 * devices the user might have in the network.
 *
 * @param contacts The list of contact objects
 * @param discovery The network discovery object
 * @return Map contactId->ContactState
 */


function calculateContactStates(snapshot) {
  var _snapshot$discovery;

  var discovery = snapshot === null || snapshot === void 0 ? void 0 : (_snapshot$discovery = snapshot.discovery) === null || _snapshot$discovery === void 0 ? void 0 : _snapshot$discovery.discovery;
  var stateById = {};
  var netNodes = discovery.nodes.filter(function (node) {
    return node.contactId !== null && node.contactId !== undefined;
  }).map(function (node) {
    return new NetNode().applyFromAgentData(node).applyFromDiscovery(snapshot);
  });
  var presenceNetNodes = netNodes.filter(function (node) {
    return node.digitalPresence === true;
  });
  var otherNetNodes = netNodes.filter(function (node) {
    return node.digitalPresence === false;
  });

  var _iterator = _createForOfIteratorHelper(presenceNetNodes),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var netNode = _step.value;
      var prevState = stateById[netNode.contactId];
      var newState = new ContactState();
      newState.contactId = netNode.contactId;
      newState.presenceNode = netNode;
      newState.online = netNode.isUp();
      newState.lastChange = Math.max(netNode.firstSeenTime || 0, netNode.isDown() ? netNode.getLastOnlineToDownTime() : netNode.getLastDownToOnlineTime());

      if (prevState === null || prevState === undefined) {
        // First device > Just use it
        stateById[newState.contactId] = newState;
      } else if (newState.online === prevState.online) {
        // DOWN+DOWN or UP+UP -> Use the latest time
        newState.lastStateChange = Math.max(newState.lastChange, prevState.lastChange);
        stateById[newState.contactId] = newState;
      } else if (newState.isOnline()) {
        // DOWN+UP -> Use UP (new one)
        stateById[newState.contactId] = newState;
      } // UP+DOWN -> Leave UP (previous one)

    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper(otherNetNodes),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _netNode = _step2.value;
      var _prevState = stateById[_netNode.contactId];

      if (_prevState === null || _prevState === undefined) {
        var _newState = new ContactState();

        _newState.contactId = _netNode.contactId;
        _newState.otherNodes = [_netNode];
        stateById[_newState.contactId] = _newState;
      } else {
        var otherNodes = _prevState.otherNodes ? _prevState.otherNodes : [];
        _prevState.otherNodes = otherNodes.concat([_netNode]);
        stateById[_prevState.contactId] = _prevState;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  appendInternetDowntime(stateById, snapshot);
  return stateById;
}

function mergeContactWithState(netContact, contactState) {
  var result = new Contact();
  result.contactId = netContact.identifier;
  result.contactName = netContact.displayName;
  if (netContact.pictureUrl) result.imageURL = netContact.pictureUrl;else if (netContact.pictureImageData) result.imageURL = "data:image/jpeg;base64," + netContact.pictureImageData;
  result.contactType = netContact.contactType;
  result.gender = netContact.gender;

  if (contactState) {
    result.online = contactState.online === true;
    result.lastChange = contactState.lastChange;
    result.presenceDevices = contactState.presenceNode ? [contactState.presenceNode] : [];
    result.otherDevices = contactState.otherNodes ? contactState.otherNodes : [];
    result.activeScheduleItemIds = contactState.activeScheduleItemIds;
  } else {
    result.online = false;
    result.lastChange = 0;
    result.presenceDevices = [];
    result.otherDevices = [];
  }

  return result;
}

function appendInternetDowntime(stateById, snapshot) {
  var _snapshot$discovery2;

  var discovery = snapshot === null || snapshot === void 0 ? void 0 : (_snapshot$discovery2 = snapshot.discovery) === null || _snapshot$discovery2 === void 0 ? void 0 : _snapshot$discovery2.discovery;

  if (!discovery || !discovery.scheduleConfig || discovery.scheduleConfig.length === 0 || !snapshot.scheduleResult || !snapshot.scheduleResult.activeSchedules) {
    Object.values(function (state) {
      return state.isDowntimeActive = false;
    });
    return;
  }

  var activeSchedules = snapshot.scheduleResult.activeSchedules.reduce(function (map, id) {
    map[id] = true;
    return map;
  }, {});
  Object.entries(stateById).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        contactId = _ref2[0],
        state = _ref2[1];

    var scheduleItems = discovery.scheduleConfig.filter(function (sched) {
      return sched.action && sched.action.targets && sched.action.targets.includes(contactId);
    }).map(function (sched) {
      return sched.id;
    });
    state.activeScheduleItemIds = scheduleItems.filter(function (id) {
      return activeSchedules[id];
    });
  });
}

var ENGINE_STATE_INIT = "ENGINE_STATE_INIT";
var ENGINE_STATE_DOWN = "ENGINE_STATE_DOWN";
var ENGINE_STATE_UP = "ENGINE_STATE_UP";
var ENGINE_STATE_COMPLETED = "ENGINE_STATE_COMPLETED";
var ENGINE_STATE_FAILED = "ENGINE_STATE_FAILED";
var SpeedTestResult = /*#__PURE__*/function () {
  function SpeedTestResult() {
    _classCallCheck(this, SpeedTestResult);

    _defineProperty(this, "downloadChartValue", void 0);

    _defineProperty(this, "uploadChartValue", void 0);

    _defineProperty(this, "engineState", void 0);

    _defineProperty(this, "ispScore", void 0);

    _defineProperty(this, "scoreInCountry", void 0);

    _defineProperty(this, "scoreInCity", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "country", void 0);

    _defineProperty(this, "city", void 0);

    _defineProperty(this, "locationServer", void 0);

    _defineProperty(this, "logoImage", void 0);

    _defineProperty(this, "bannerImage", void 0);

    _defineProperty(this, "typeConnection", void 0);

    _defineProperty(this, "netName", void 0);

    _defineProperty(this, "ping", void 0);

    _defineProperty(this, "loss", void 0);

    _defineProperty(this, "jitter", void 0);

    _defineProperty(this, "downloadIspCity", void 0);

    _defineProperty(this, "downloadIspCountry", void 0);

    _defineProperty(this, "uploadIspCity", void 0);

    _defineProperty(this, "uploadIspCountry", void 0);

    _defineProperty(this, "scoreIspCountry", void 0);

    _defineProperty(this, "scoreIspCity", void 0);

    _defineProperty(this, "samplesCountry", void 0);

    _defineProperty(this, "samplesCity", void 0);

    _defineProperty(this, "website", void 0);

    _defineProperty(this, "supportWebsite", void 0);

    _defineProperty(this, "supportPhone", void 0);

    _defineProperty(this, "supportFacebook", void 0);

    _defineProperty(this, "supportTwitter", void 0);

    _defineProperty(this, "sentimentScoreCountry", void 0);

    _defineProperty(this, "sentimentScoreCity", void 0);

    _defineProperty(this, "totalRatingsCountry", void 0);

    _defineProperty(this, "totalRatingsCity", void 0);

    _defineProperty(this, "sentimentDistribCountry", void 0);

    _defineProperty(this, "sentimentDistribCity", void 0);

    _defineProperty(this, "topScore", void 0);

    _defineProperty(this, "statsCityEmpty", void 0);

    _defineProperty(this, "statsCountryEmpty", void 0);
  }

  _createClass(SpeedTestResult, [{
    key: "getDownloadChartValue",
    value: function getDownloadChartValue() {
      if (!this.downloadChartValue) return 0;
      var download = this.downloadChartValue;
      var max = this.getDownloadValueMax();
      return download > 100 ? Math.min(download / max * 100, 100) : download > 25 ? Math.min(download, 100) : Math.min(download * 4, 100);
    }
  }, {
    key: "getDownloadValue",
    value: function getDownloadValue() {
      return this.downloadChartValue || '0';
    }
  }, {
    key: "getDownloadValueMax",
    value: function getDownloadValueMax() {
      return this.downloadChartValue >= 1000 ? 1000 : this.downloadChartValue > 500 ? 1000 : this.downloadChartValue > 250 ? 500 : this.downloadChartValue > 100 ? 250 : 100;
    }
  }, {
    key: "getUploadChartValue",
    value: function getUploadChartValue() {
      if (!this.uploadChartValue) return 0;
      var upload = this.uploadChartValue;
      var max = this.getUploadValueMax();
      return upload > 100 ? Math.min(upload / max * 100, 100) : upload > 25 ? Math.min(upload, 100) : Math.min(upload * 4, 100);
    }
  }, {
    key: "getUploadValue",
    value: function getUploadValue() {
      return this.uploadChartValue || '0';
    }
  }, {
    key: "getUploadValueMax",
    value: function getUploadValueMax() {
      return this.uploadChartValue >= 1000 ? 1000 : this.uploadChartValue > 500 ? 1000 : this.uploadChartValue > 250 ? 500 : this.uploadChartValue > 100 ? 250 : 100;
    }
  }, {
    key: "isCompletedState",
    value: function isCompletedState() {
      return this.engineState && this.engineState === ENGINE_STATE_COMPLETED;
    }
  }, {
    key: "isFailedState",
    value: function isFailedState() {
      return this.engineState && this.engineState === ENGINE_STATE_FAILED;
    }
  }, {
    key: "isInitState",
    value: function isInitState() {
      return this.engineState && this.engineState === ENGINE_STATE_INIT || this.downloadChartValue === undefined;
    }
  }, {
    key: "getIspScore",
    value: function getIspScore() {
      return this.ispScore || 0;
    }
  }, {
    key: "getScoreCountry",
    value: function getScoreCountry() {
      return this.scoreInCountry || 0;
    }
  }, {
    key: "getScoreCity",
    value: function getScoreCity() {
      return this.scoreInCity || 0;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.name || '';
    }
  }, {
    key: "getCountry",
    value: function getCountry() {
      return this.country || '';
    }
  }, {
    key: "getCity",
    value: function getCity() {
      return this.city || '';
    }
  }, {
    key: "getLocationServer",
    value: function getLocationServer() {
      return this.locationServer || '';
    }
  }, {
    key: "getLogoImage",
    value: function getLogoImage() {
      return this.logoImage || '';
    }
  }, {
    key: "getBannerImage",
    value: function getBannerImage() {
      return this.bannerImage || '';
    }
  }, {
    key: "getTypeConnection",
    value: function getTypeConnection() {
      return this.typeConnection || GEN_QUESTION;
    }
  }, {
    key: "getNetName",
    value: function getNetName() {
      return this.netName || '';
    }
  }, {
    key: "getPing",
    value: function getPing() {
      return this.ping || 0;
    }
  }, {
    key: "getLoss",
    value: function getLoss() {
      return this.loss || 0;
    }
  }, {
    key: "getJitter",
    value: function getJitter() {
      return this.jitter || 0;
    }
  }, {
    key: "getDownloadCity",
    value: function getDownloadCity() {
      return this.downloadIspCity || '0';
    }
  }, {
    key: "getDownloadCountry",
    value: function getDownloadCountry() {
      return this.downloadIspCountry || '0';
    }
  }, {
    key: "getUploadCity",
    value: function getUploadCity() {
      return this.uploadIspCity || '0';
    }
  }, {
    key: "getUploadCountry",
    value: function getUploadCountry() {
      return this.uploadIspCountry || '0';
    }
  }, {
    key: "getScoreIspCountry",
    value: function getScoreIspCountry() {
      return this.scoreIspCountry || '0';
    }
  }, {
    key: "getScoreIspCity",
    value: function getScoreIspCity() {
      return this.scoreIspCity || '0';
    }
  }, {
    key: "getSamplesCountry",
    value: function getSamplesCountry() {
      return this.samplesCountry || '0';
    }
  }, {
    key: "getSamplesCity",
    value: function getSamplesCity() {
      return this.samplesCity || '0';
    }
  }, {
    key: "getWebsite",
    value: function getWebsite() {
      return this.website || '';
    }
  }, {
    key: "getSupportWebsite",
    value: function getSupportWebsite() {
      return this.supportWebsite || '';
    }
  }, {
    key: "getSupportPhone",
    value: function getSupportPhone() {
      return this.supportPhone || '';
    }
  }, {
    key: "getSupportFacebook",
    value: function getSupportFacebook() {
      return this.supportFacebook || '';
    }
  }, {
    key: "getSupportTwitter",
    value: function getSupportTwitter() {
      return this.supportTwitter || '';
    }
  }, {
    key: "getSentimentScoreCountry",
    value: function getSentimentScoreCountry() {
      return this.sentimentScoreCountry || 0;
    }
  }, {
    key: "getSentimentScoreCity",
    value: function getSentimentScoreCity() {
      return this.sentimentScoreCity || 0;
    }
  }, {
    key: "getTotalRatingsCountry",
    value: function getTotalRatingsCountry() {
      return this.totalRatingsCountry || 0;
    }
  }, {
    key: "getTotalRatingsCity",
    value: function getTotalRatingsCity() {
      return this.totalRatingsCity || 0;
    }
  }, {
    key: "getSentimentDistributionCountry",
    value: function getSentimentDistributionCountry() {
      return this.sentimentDistribCountry || [];
    }
  }, {
    key: "getSentimentDistributionCity",
    value: function getSentimentDistributionCity() {
      return this.sentimentDistribCity || [];
    }
  }, {
    key: "getScoreStatsIsp",
    value: function getScoreStatsIsp() {
      return this.scoreStatsIsp || 0;
    }
  }, {
    key: "areStatsCountryEmpty",
    value: function areStatsCountryEmpty() {
      return this.statsCountryEmpty || false;
    }
  }, {
    key: "areStatsCityEmpty",
    value: function areStatsCityEmpty() {
      return this.statsCityEmpty || false;
    }
  }, {
    key: "isSentimentDistributionCountryAvailable",
    value: function isSentimentDistributionCountryAvailable() {
      return this.sentimentDistribCountry && this.sentimentDistribCountry.length > 0 && this.sentimentScoreCountry && this.sentimentScoreCountry !== 0 && this.totalRatingsCountry && this.totalRatingsCountry !== 0;
    }
  }, {
    key: "isSentimentDistributionCityAvailable",
    value: function isSentimentDistributionCityAvailable() {
      return this.sentimentDistribCity && this.sentimentDistribCity.length > 0 && this.sentimentScoreCity && this.sentimentScoreCity !== 0 && this.totalRatingsCity && this.totalRatingsCity !== 0;
    } // See if we need only this.samplesCountry

  }, {
    key: "isCompareCountryAvailable",
    value: function isCompareCountryAvailable() {
      return this.downloadIspCountry && Number(this.downloadIspCountry) > 0 && this.uploadIspCountry && Number(this.uploadIspCountry) > 0 && this.samplesCountry && this.samplesCountry > 0 && this.scoreStatsIsp && this.scoreStatsIsp > 0 && this.scoreIspCountry && this.scoreIspCountry > 0;
    } // See if we need only this.samplesCity

  }, {
    key: "isCompareCityAvailable",
    value: function isCompareCityAvailable() {
      return this.downloadIspCity && Number(this.downloadIspCity) > 0 && this.uploadIspCity && Number(this.uploadIspCity) > 0 && this.samplesCity && this.samplesCity > 0 && this.scoreStatsIsp && this.scoreStatsIsp > 0 && this.scoreIspCity && this.scoreIspCity > 0;
    }
  }]);

  return SpeedTestResult;
}();
/**
 * Converts the given speedTest object into a list of items to display.

 * @param speedTest The object from a Desktop agent
 * @returns {SpeedTestResult} A speed test state result object
 */

function convertToSpeedTestResult(speedTest) {
  var result = new SpeedTestResult();
  var finalResult = speedTest.finalresult;
  var progress = speedTest.progress;
  var score = speedTest.score;
  var info = speedTest.internetinfo;
  var state = speedTest.speedtest_state;
  setState(result, state);
  setDownloadValue(result, finalResult, progress);
  setUploadValue(result, finalResult, progress);
  setInfoFromServer(result, finalResult);
  setStats(result, finalResult);
  setInfoFromIsp(result, info);
  setInfoFromScore(result, score);
  return result;
}

function setInfoFromScore(result, score) {
  if (score) {
    if (score.statsisp) {
      result.ispId = score.statsisp.ispId;
      result.scoreStatsIsp = Number(score.statsisp.score) * 100;
    }

    if (score.statscountry && score.statscountry.length > 0) {
      var object = score.statscountry.filter(function (val) {
        return val.ispId === result.ispId;
      })[0];

      if (object) {
        result.downloadIspCountry = Number(object.downloadSpeedMbpsAvg).toFixed(1);
        result.uploadIspCountry = Number(object.uploadSpeedMbpsAvg).toFixed(1);
        result.scoreIspCountry = Number(object.score) * 100;
        result.samplesCountry = Number(object.samples);
        result.totalRatingsCountry = Number(object.totalRatings);
        result.sentimentScoreCountry = Number(object.sentiment) / 100 * 5;
        result.sentimentDistribCountry = object.sentimentDistrib;
        result.statsCountryEmpty = false;
      } else {
        result.statsCountryEmpty = true;
      }
    } else {
      result.statsCountryEmpty = true;
    }

    if (score.statscity && score.statscity.length > 0) {
      var _object = score.statscity.filter(function (val) {
        return val.ispId === result.ispId;
      })[0];

      if (_object) {
        result.downloadIspCity = Number(_object.downloadSpeedMbpsAvg).toFixed(1);
        result.uploadIspCity = Number(_object.uploadSpeedMbpsAvg).toFixed(1);
        result.scoreIspCity = Number(_object.score) * 100;
        result.samplesCity = Number(_object.samples);
        result.totalRatingsCity = Number(_object.totalRatings);
        result.sentimentScoreCity = Number(_object.sentiment) / 100 * 5;
        result.sentimentDistribCity = _object.sentimentDistrib;
        result.statsCityEmpty = false;
      } else {
        result.statsCityEmpty = true;
      }
    } else {
      result.statsCityEmpty = true;
    }

    if (score.scoreInCity) {
      result.scoreInCity = Number(score.scoreInCity) * 100;
    }

    if (score.scoreInCountry) {
      result.scoreInCountry = Number(score.scoreInCountry) * 100;
    }
  }
}

function setInfoFromIsp(result, internetInfo) {
  if (internetInfo && internetInfo.isp) {
    var isp = internetInfo.isp;
    var info = internetInfo.ispinfo;
    var ispName = "-";
    if (info && info.name) ispName = info.name;else if (isp.isp) ispName = isp.isp;else if (isp.organization) ispName = isp.organization;
    result.name = ispName;

    if (isp) {
      result.city = isp.country_city || '';
      result.country = isp.country_name || '';
    }

    if (info) {
      var cdn = "https://cdn.fing.io/images";

      if (info.bannerimageurl) {
        result.bannerImage = cdn + info.bannerimageurl;
      }

      if (info.logoimageurl) {
        result.logoImage = cdn + info.logoimageurl;
      }

      result.website = info.websiteurl || '';
      result.supportWebsite = info.supporturl || '';
      result.supportPhone = info.supportphone || '';
      result.supportFacebook = info.supportfacebookaccount || '';
      result.supportTwitter = info.supporttwitteraccount || '';
    }
  }
}

function setInfoFromServer(result, finalResult) {
  var downInfo;
  var testServerLocation = '';
  if (finalResult) downInfo = finalResult.serverdowninfo;

  if (downInfo && downInfo.servercity && downInfo.servercountry) {
    testServerLocation += "".concat(downInfo.servercity, ", ").concat(downInfo.servercountry);
  }

  result.locationServer = testServerLocation;
  var connectionIcon;
  var netName;

  if (finalResult && finalResult.nicinfo) {
    var info = finalResult.nicinfo;

    if (info && info.type) {
      switch (info.type.toUpperCase()) {
        case "WIFI":
          connectionIcon = NT_WIFI;
          netName = info.apssid ? info.apssid : info.apbssid;
          break;

        case "ETHERNET":
          connectionIcon = NT_ETHERNET;
          netName = +intl__default["default"].get('home_network_subtitle_eth', {
            rate: parseEthernetAnswer(info.downlinkeffectiverate)
          });
          break;

        case "USB_ETHERNET":
          connectionIcon = NT_ETH_USB;
          netName = +intl__default["default"].get('home_network_subtitle_eth_usb', {
            rate: parseEthernetAnswer(info.downlinkeffectiverate)
          });
          break;

        default:
          connectionIcon = GEN_QUESTION;
          break;
      }
    } else {
      connectionIcon = GEN_QUESTION;
    }
  }

  result.typeConnection = connectionIcon;
  result.netName = netName;
}

function setState(result, state) {
  if (state && state.includes("Completed")) {
    result.engineState = ENGINE_STATE_COMPLETED;
  } else if (state && state.includes("Upload")) {
    result.engineState = ENGINE_STATE_UP;
  } else if (state && state.includes("Download")) {
    result.engineState = ENGINE_STATE_DOWN;
  } else if (state && state.includes('Failed')) {
    result.engineState = ENGINE_STATE_FAILED;
  } else {
    result.engineState = ENGINE_STATE_INIT;
  }
}

function setDownloadValue(result, finalresult, progress) {
  var download;
  var bps;
  var samples;
  if (finalresult) bps = finalresult.downloadbps;
  if (progress) samples = progress.samplesdownbps;

  if (finalresult && bps && bps > 0) {
    download = (parseFloat(bps) / 1000000).toFixed(1);
  } else if (progress && samples && samples.length > 0) {
    download = parseFloat(samples[samples.length - 1]) / 1000000;
    download = (download + download * 0.005 * Math.random() * (Math.random() > 0.5 ? 1 : -1)).toFixed(1);
  }

  result.downloadChartValue = download;
}

function setUploadValue(result, finalresult, progress) {
  var upload;
  var bps;
  var samples;
  if (finalresult) bps = finalresult.uploadbps;
  if (progress) samples = progress.samplesupbps;

  if (finalresult && bps && bps > 0) {
    upload = (parseFloat(bps) / 1000000).toFixed(1);
  } else if (progress && samples && samples.length > 0) {
    upload = parseFloat(samples[samples.length - 1]) / 1000000;
    upload = (upload + upload * 0.005 * Math.random() * (Math.random() > 0.5 ? 1 : -1)).toFixed(1);
  }

  result.uploadChartValue = upload;
}

function setStats(result, finalresult) {
  if (finalresult) {
    result.ping = parseFloat(finalresult.rtd || 0).toFixed(0);
    result.jitter = parseFloat(finalresult.rtd_jitter || 0).toFixed(1);
    result.loss = (parseFloat(finalresult.rtd_loss_perc || 0) * 100.0).toFixed(0);
  }
}

var IAMLocalizedText = /*#__PURE__*/function () {
  function IAMLocalizedText(json) {
    _classCallCheck(this, IAMLocalizedText);

    this.textByLocale = {};

    for (var key in json) {
      if (isString(key) && isString(json[key]) && !isEmptyString(json[key])) {
        this.textByLocale[key.toLowerCase()] = json[key];
      }
    }
  }

  _createClass(IAMLocalizedText, [{
    key: "isLocalizedIn",
    value: function isLocalizedIn(language) {
      return isString(language) && this.textByLocale.hasOwnProperty(language.toLowerCase());
    }
  }, {
    key: "getText",
    value: function getText(language) {
      var lowerCaseLanguage = language.toLowerCase();
      return this.textByLocale[lowerCaseLanguage] || this.textByLocale[getIETFPrimaryLanguageSubtag(lowerCaseLanguage, "-")] || this.textByLocale[IAMLocalizedText.DEFAULT_LANGUAGE_CODE.toLowerCase()] || "";
    }
  }]);

  return IAMLocalizedText;
}();

_defineProperty(IAMLocalizedText, "DEFAULT_LANGUAGE_CODE", "en");

function getIETFPrimaryLanguageSubtag(lang, delimiter) {
  return lang.split(delimiter)[0];
}

function isLocalTime(localTime) {
  if (!isString(localTime)) {
    return false;
  }

  if (localTime.indexOf(":") < 0) {
    return false;
  }

  var lts = localTime.split(":");

  if (lts.length === 2 && isFinite(Number(lts[0])) && isFinite(Number(lts[1]))) {
    return true;
  }

  if (lts.length === 3 && isFinite(Number(lts[0])) && isFinite(Number(lts[1])) && isFinite(Number(lts[2]))) {
    return true;
  }

  return false;
}
function isDefaultLanguageInMap(map) {
  return map[IAMLocalizedText.DEFAULT_LANGUAGE_CODE.toLowerCase()] || map[IAMLocalizedText.DEFAULT_LANGUAGE_CODE.toUpperCase()];
}
var IAMParserBase = /*#__PURE__*/function () {
  function IAMParserBase() {
    _classCallCheck(this, IAMParserBase);
  }

  _createClass(IAMParserBase, [{
    key: "checkAndParseJson",
    value: function checkAndParseJson(json) {
      if (this.checkJson(json)) {
        this.parseJson(json);
      } else {
        this.throwParseError();
      }

      return this;
    }
  }, {
    key: "throwParseError",
    value: function throwParseError() {
      throw new Error("[".concat(this.constructor.name, "] JSON check failed"));
    }
  }]);

  return IAMParserBase;
}();

var K_DEFINITION_BUTTON_TEXTS = "texts";
var K_DEFINITION_BUTTON_ACTION = "action";

var IAMButton = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMButton, _IAMParserBase);

  var _super = _createSuper(IAMButton);

  function IAMButton(json) {
    var _this;

    _classCallCheck(this, IAMButton);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "texts", void 0);

    _defineProperty(_assertThisInitialized(_this), "action", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMButton, [{
    key: "parseJson",
    value: function parseJson(button) {
      this.texts = new IAMLocalizedText(button[K_DEFINITION_BUTTON_TEXTS]);
      this.action = button[K_DEFINITION_BUTTON_ACTION];
    }
  }, {
    key: "checkJson",
    value: function checkJson(button) {
      var texts = button[K_DEFINITION_BUTTON_TEXTS];
      var action = button[K_DEFINITION_BUTTON_ACTION];
      return (isUndefined(texts) || isObject(texts) && isDefaultLanguageInMap(texts)) && isURL(action);
    }
  }, {
    key: "getTextByLanguage",
    value: function getTextByLanguage(language) {
      return this.texts.getText(language);
    }
  }]);

  return IAMButton;
}(IAMParserBase);

var K_DEFINITION_DEFAULT_IMAGE = "default";
var K_DEFINITION_LANDSCAPE_IMAGE = "landscape";
var K_DEFINITION_ANIMATED = "animated";

var IAMImage = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMImage, _IAMParserBase);

  var _super = _createSuper(IAMImage);

  function IAMImage(json) {
    var _this;

    _classCallCheck(this, IAMImage);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "landscapeImage", void 0);

    _defineProperty(_assertThisInitialized(_this), "defaultImage", void 0);

    _defineProperty(_assertThisInitialized(_this), "animated", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMImage, [{
    key: "parseJson",
    value: function parseJson(image) {
      this.landscapeImage = image[K_DEFINITION_LANDSCAPE_IMAGE];
      this.defaultImage = image[K_DEFINITION_DEFAULT_IMAGE];
      this.animated = image[K_DEFINITION_ANIMATED];
    }
  }, {
    key: "checkJson",
    value: function checkJson(image) {
      var defaultImage = image[K_DEFINITION_DEFAULT_IMAGE];
      var landscapeImage = image[K_DEFINITION_LANDSCAPE_IMAGE];
      var animated = image[K_DEFINITION_ANIMATED];
      return isURL(defaultImage) && (isUndefined(landscapeImage) || isURL(landscapeImage)) && (isUndefined(animated) || isURL(animated));
    }
  }, {
    key: "hasDefault",
    value: function hasDefault() {
      return this.defaultImage;
    }
  }, {
    key: "hasLandscape",
    value: function hasLandscape() {
      return this.landscapeImage;
    }
  }, {
    key: "getCorrectImageURL",
    value: function getCorrectImageURL() {
      if (this.animated) {
        return this.animated;
      }

      if (this.landscapeImage && this.landscapeImage.length > 0) {
        return this.landscapeImage;
      }

      return this.defaultImage;
    }
  }]);

  return IAMImage;
}(IAMParserBase);

var K_DEFINITION_COLORS_BORDER = "border";
var K_DEFINITION_COLORS_EXTRA = "extra";

var IAMColorSpecialization = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMColorSpecialization, _IAMParserBase);

  var _super = _createSuper(IAMColorSpecialization);

  function IAMColorSpecialization(json) {
    var _this;

    _classCallCheck(this, IAMColorSpecialization);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "border", void 0);

    _defineProperty(_assertThisInitialized(_this), "extra", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMColorSpecialization, [{
    key: "checkJson",
    value: function checkJson(spec) {
      var border = spec[K_DEFINITION_COLORS_BORDER];
      var extra = spec[K_DEFINITION_COLORS_EXTRA];
      return (isUndefined(border) || isColor(border)) && (isUndefined(extra) || isColor(extra));
    }
  }, {
    key: "parseJson",
    value: function parseJson(spec) {
      this.border = spec[K_DEFINITION_COLORS_BORDER];
      this.extra = spec[K_DEFINITION_COLORS_EXTRA];
    }
  }]);

  return IAMColorSpecialization;
}(IAMParserBase);

function isColor(color) {
  return isString(color) && color[0] === "#";
}

var K_DEFINITION_COLORS_DARK = "dark";
var K_DEFINITION_COLORS_LIGHT = "light";

var IAMColors = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMColors, _IAMParserBase);

  var _super = _createSuper(IAMColors);

  function IAMColors(json) {
    var _this;

    _classCallCheck(this, IAMColors);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "dark", void 0);

    _defineProperty(_assertThisInitialized(_this), "light", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMColors, [{
    key: "checkJson",
    value: function checkJson(colors) {
      var dark = colors[K_DEFINITION_COLORS_DARK];
      var light = colors[K_DEFINITION_COLORS_LIGHT];

      if (!dark && !light) {
        return isObject(colors);
      } else {
        return (isUndefined(dark) || isObject(dark)) && (isUndefined(light) || isObject(light));
      }
    }
  }, {
    key: "parseJson",
    value: function parseJson(colors) {
      var dark = colors[K_DEFINITION_COLORS_DARK];
      var light = colors[K_DEFINITION_COLORS_LIGHT];

      if (!dark && !light) {
        this.light = new IAMColorSpecialization(colors);
      } else {
        this.dark = new IAMColorSpecialization(dark);
        this.light = new IAMColorSpecialization(light);
      }
    }
  }]);

  return IAMColors;
}(IAMParserBase);

var K_DEFINITION_STYLE_LAYOUT = "layout";
var K_DEFINITION_STYLE_LAYOUT_CARD = "CARD";
var K_DEFINITION_STYLE_LAYOUT_MODAL = "MODAL";
var K_DEFINITION_STYLE_LAYOUT_IMAGE = "IMAGE";
var K_DEFINITION_STYLE_LAYOUT_TOP_BANNER = "TOP_BANNER";
var K_DEFINITION_STYLE_LAYOUT_SIDE_BANNER = "SIDE_BANNER";
var K_DEFINITION_STYLE_TITLES = "titles";
var K_DEFINITION_STYLE_BODIES = "bodies";
var K_DEFINITION_STYLE_IMAGES = "images";
var K_DEFINITION_STYLE_EXTRAS = "extras";
var K_DEFINITION_STYLE_COLORS = "colors";
var K_DEFINITION_STYLE_PRIMARY_BUTTON = "primary_button";

var IAMLayout = /*#__PURE__*/function () {
  function IAMLayout() {
    _classCallCheck(this, IAMLayout);
  }

  _createClass(IAMLayout, null, [{
    key: "CARD",
    get: function get() {
      return K_DEFINITION_STYLE_LAYOUT_CARD;
    }
  }, {
    key: "MODAL",
    get: function get() {
      return K_DEFINITION_STYLE_LAYOUT_MODAL;
    }
  }, {
    key: "IMAGE",
    get: function get() {
      return K_DEFINITION_STYLE_LAYOUT_IMAGE;
    }
  }, {
    key: "TOP_BANNER",
    get: function get() {
      return K_DEFINITION_STYLE_LAYOUT_TOP_BANNER;
    }
  }, {
    key: "SIDE_BANNER",
    get: function get() {
      return K_DEFINITION_STYLE_LAYOUT_SIDE_BANNER;
    }
  }, {
    key: "styles",
    get: function get() {
      return [IAMLayout.CARD, IAMLayout.MODAL, IAMLayout.IMAGE, IAMLayout.TOP_BANNER, IAMLayout.SIDE_BANNER];
    }
  }]);

  return IAMLayout;
}();

var IAMStyle = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMStyle, _IAMParserBase);

  var _super = _createSuper(IAMStyle);

  function IAMStyle(json) {
    var _this;

    _classCallCheck(this, IAMStyle);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "layout", void 0);

    _defineProperty(_assertThisInitialized(_this), "titles", void 0);

    _defineProperty(_assertThisInitialized(_this), "bodies", void 0);

    _defineProperty(_assertThisInitialized(_this), "images", void 0);

    _defineProperty(_assertThisInitialized(_this), "extras", void 0);

    _defineProperty(_assertThisInitialized(_this), "colors", void 0);

    _defineProperty(_assertThisInitialized(_this), "primaryButton", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMStyle, [{
    key: "parseJson",
    value: function parseJson(style) {
      this.parseLayout(style);
      this.parseTitles(style);
      this.parseBodies(style);
      this.parseImages(style);
      this.parseExtras(style);
      this.parseColors(style);
      this.parsePrimaryButton(style);

      if (!this.isValid()) {
        this.throwParseError();
      }
    }
  }, {
    key: "checkJson",
    value: function checkJson(style) {
      var layout = style[K_DEFINITION_STYLE_LAYOUT];
      var titles = style[K_DEFINITION_STYLE_TITLES];
      var bodies = style[K_DEFINITION_STYLE_BODIES];
      var images = style[K_DEFINITION_STYLE_IMAGES];
      var extras = style[K_DEFINITION_STYLE_EXTRAS];
      var colors = style[K_DEFINITION_STYLE_COLORS];
      var primaryButton = style[K_DEFINITION_STYLE_PRIMARY_BUTTON];
      return (isUndefined(layout) || isString(layout) && IAMLayout.styles.includes(layout)) && (isUndefined(titles) || isObject(titles) && isDefaultLanguageInMap(titles)) && (isUndefined(bodies) || isObject(bodies) && isDefaultLanguageInMap(bodies)) && (isUndefined(images) || isObject(images)) && (isUndefined(extras) || isObject(extras) && isDefaultLanguageInMap(extras)) && (isUndefined(colors) || isObject(colors)) && (isUndefined(primaryButton) || isObject(primaryButton));
    }
  }, {
    key: "parseLayout",
    value: function parseLayout(style) {
      this.layout = style[K_DEFINITION_STYLE_LAYOUT];
    }
  }, {
    key: "parseImages",
    value: function parseImages(style) {
      this.images = style[K_DEFINITION_STYLE_IMAGES] ? new IAMImage(style[K_DEFINITION_STYLE_IMAGES]) : undefined;
    }
  }, {
    key: "parsePrimaryButton",
    value: function parsePrimaryButton(style) {
      var primaryButton = style[K_DEFINITION_STYLE_PRIMARY_BUTTON];

      if (primaryButton) {
        this.primaryButton = new IAMButton(primaryButton);
      }
    }
  }, {
    key: "parseTitles",
    value: function parseTitles(style) {
      var jsonTitles = style[K_DEFINITION_STYLE_TITLES];
      this.titles = this.getTexts(jsonTitles);
    }
  }, {
    key: "parseBodies",
    value: function parseBodies(style) {
      var jsonBodies = style[K_DEFINITION_STYLE_BODIES];
      this.bodies = this.getTexts(jsonBodies);
    }
  }, {
    key: "parseExtras",
    value: function parseExtras(style) {
      var jsonExtras = style[K_DEFINITION_STYLE_EXTRAS];
      this.extras = this.getTexts(jsonExtras);
    }
  }, {
    key: "parseColors",
    value: function parseColors(style) {
      var colors = style[K_DEFINITION_STYLE_COLORS];

      if (colors) {
        this.colors = new IAMColors(colors);
      }
    }
  }, {
    key: "getTexts",
    value: function getTexts(json) {
      if (!json) {
        return undefined;
      }

      return new IAMLocalizedText(json);
    }
  }, {
    key: "getTitleByLanguage",
    value: function getTitleByLanguage(countryCode) {
      return this.getTextByAttrAndLanguage("titles", countryCode);
    }
  }, {
    key: "getBodyByLanguage",
    value: function getBodyByLanguage(countryCode) {
      return this.getTextByAttrAndLanguage("bodies", countryCode);
    }
  }, {
    key: "getExtrasByLanguage",
    value: function getExtrasByLanguage(countryCode) {
      return this.getTextByAttrAndLanguage("extras", countryCode);
    }
  }, {
    key: "getTextByAttrAndLanguage",
    value: function getTextByAttrAndLanguage(attr, countryCode) {
      if (!this[attr]) {
        return "";
      }

      return this[attr].getText(countryCode);
    }
  }, {
    key: "hasTitle",
    value: function hasTitle() {
      return this.getTitleByLanguage(IAMLocalizedText.DEFAULT_LANGUAGE_CODE).length > 0;
    }
  }, {
    key: "isValid",
    value: function isValid() {
      var hasNotImages = !this.images || !this.images.hasDefault();

      if (this.layout === IAMStyle.IAMLayout.CARD && hasNotImages) {
        return false;
      }

      if (this.layout === IAMStyle.IAMLayout.MODAL && !this.hasTitle() && hasNotImages) {
        return false;
      }

      if (this.layout === IAMStyle.IAMLayout.IMAGE && hasNotImages) {
        return false;
      }

      return true;
    }
  }]);

  return IAMStyle;
}(IAMParserBase);

_defineProperty(IAMStyle, "IAMLayout", IAMLayout);

var K_DEFINITION_MAX_VERSION = "max";
var K_DEFINITION_MIN_VERSION = "min";

var IAMAppVersion = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMAppVersion, _IAMParserBase);

  var _super = _createSuper(IAMAppVersion);

  function IAMAppVersion(json) {
    var _this;

    _classCallCheck(this, IAMAppVersion);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "maxVersion", void 0);

    _defineProperty(_assertThisInitialized(_this), "minVersion", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMAppVersion, [{
    key: "parseJson",
    value: function parseJson(version) {
      this.maxVersion = version[K_DEFINITION_MAX_VERSION];
      this.minVersion = version[K_DEFINITION_MIN_VERSION];
    }
  }, {
    key: "checkJson",
    value: function checkJson(version) {
      var checkVersionField = function checkVersionField(ver) {
        return isUndefined(ver) || isString(ver) && ver.split(".").reduce(function (prev, curr) {
          return prev && !isNaN(Number(curr));
        }, true);
      };

      var maxVer = version[K_DEFINITION_MAX_VERSION];
      var minVer = version[K_DEFINITION_MIN_VERSION];
      return (!isUndefined(maxVer) || !isUndefined(minVer)) && checkVersionField(maxVer) && checkVersionField(minVer);
    }
  }, {
    key: "isVersionInRange",
    value: function isVersionInRange(otherVersion) {
      if (this.maxVersion && IAMAppVersion.compareVersions(this.maxVersion, otherVersion) < 0) {
        return false;
      }

      if (this.minVersion && IAMAppVersion.compareVersions(this.minVersion, otherVersion) > 0) {
        return false;
      }

      return true;
    }
  }], [{
    key: "compareVersions",
    value: function compareVersions(version1, version2) {
      if (!version1 && !version2) {
        return 0;
      }

      if (!version1) {
        return -1;
      }

      if (!version2) {
        return 1;
      }

      var baseVersion1 = version1.split("-");
      var baseVersion2 = version2.split("-");
      var version1Splits = baseVersion1[0].split(".");
      var version2Splits = baseVersion2[0].split(".");
      var maxLengthOfVersionSplits = Math.max(version1Splits.length, version2Splits.length);

      for (var i = 0; i < maxLengthOfVersionSplits; ++i) {
        var v1 = i < version1Splits.length ? Number(version1Splits[i]) : 0;
        var v2 = i < version2Splits.length ? Number(version2Splits[i]) : 0;
        var res = compare(v1, v2);

        if (res !== false && res !== 0) {
          return res;
        }
      }

      return 0;
    }
  }]);

  return IAMAppVersion;
}(IAMParserBase);

function compare(lhs, rhs) {
  if (!isNumber(lhs) || !isNumber(rhs)) {
    return false;
  }

  if (lhs === rhs) {
    return 0;
  } else if (lhs < rhs) {
    return -1;
  }

  return 1;
}

var K_DEFINITION_TARGET_COUNTRIES = "countries";
var K_DEFINITION_TARGET_COUNTRIES_EXCLUDE = "countries-exclude";
var K_DEFINITION_TARGET_PLATFORMS = "platforms";
var K_DEFINITION_TARGET_APP_VERSION = "app-version";
var K_DEFINITION_TARGET_APP_VERSION_V2 = "app-version-v2";
var K_DEFINITION_TARGET_ACCOUNT_TYPES = "account-types";
var K_DEFINITION_TARGET_TECH_ATTITUDE = "tech-attitude";
var K_DEFINITION_TARGET_PURCHASE_STATES = "purchase-states";
var K_DEFINITION_TARGET_USER_PROPERTIES = "user-properties";
var K_DEFINITION_TARGET_REMOTE_PROPERTIES = "remote-properties";
var K_DEFINITION_TARGET_ACCOUNT_HAS_DESKTOP = "account-has-desktop";
var K_DEFINITION_TARGET_ACCOUNT_HAS_FINGBOX = "account-has-fingbox";
var K_DEFINITION_TARGET_ACCOUNT_HAS_MOBILE = "account-has-mobile";
/**
 * @callback getProperty
 * @param {string} key - The name of the property
 * @returns {string} - Returns the associated value
 */

/**
 * @typedef {Profile}
 * @property {string|undefined} countryCode 
 * @property {string|undefined} appVersion 
 * @property {string|undefined} platform
 * @property {getProperty|undefined} getUserProperty 
 * @property {getProperty|undefined} getRemoteProperty 
 * @property {string|undefined} accountType
 * @property {string|undefined} techAttitude
 * @property {string|undefined} purchaseState
 * @property {boolean|undefined} hasDesktop
 */

var Profile = /*#__PURE__*/_createClass(function Profile() {
  _classCallCheck(this, Profile);

  _defineProperty(this, "countryCode", void 0);

  _defineProperty(this, "appVersion", void 0);

  _defineProperty(this, "platform", void 0);

  _defineProperty(this, "getUserProperty", void 0);

  _defineProperty(this, "getRemoteProperty", void 0);

  _defineProperty(this, "accountType", void 0);

  _defineProperty(this, "techAttitude", void 0);

  _defineProperty(this, "purchaseState", void 0);

  _defineProperty(this, "hasDesktop", void 0);
});

var IAMTarget = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMTarget, _IAMParserBase);

  var _super = _createSuper(IAMTarget);

  function IAMTarget(json) {
    var _this;

    _classCallCheck(this, IAMTarget);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "countries", void 0);

    _defineProperty(_assertThisInitialized(_this), "countriesExclude", void 0);

    _defineProperty(_assertThisInitialized(_this), "platforms", void 0);

    _defineProperty(_assertThisInitialized(_this), "appVersion", void 0);

    _defineProperty(_assertThisInitialized(_this), "accountTypes", void 0);

    _defineProperty(_assertThisInitialized(_this), "techAttitudes", void 0);

    _defineProperty(_assertThisInitialized(_this), "purchaseStates", void 0);

    _defineProperty(_assertThisInitialized(_this), "userProperties", void 0);

    _defineProperty(_assertThisInitialized(_this), "remoteProperties", void 0);

    _defineProperty(_assertThisInitialized(_this), "hasDesktop", void 0);

    _defineProperty(_assertThisInitialized(_this), "hasFingbox", void 0);

    _defineProperty(_assertThisInitialized(_this), "hasMobile", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMTarget, [{
    key: "parseJson",
    value: function parseJson(target) {
      this.countries = target[K_DEFINITION_TARGET_COUNTRIES];
      this.countriesExclude = target[K_DEFINITION_TARGET_COUNTRIES_EXCLUDE];
      this.platforms = target[K_DEFINITION_TARGET_PLATFORMS];
      this.appVersion = target[K_DEFINITION_TARGET_APP_VERSION] || target[K_DEFINITION_TARGET_APP_VERSION_V2] ? new IAMAppVersion(target[K_DEFINITION_TARGET_APP_VERSION] || target[K_DEFINITION_TARGET_APP_VERSION_V2]) : undefined;
      this.accountTypes = target[K_DEFINITION_TARGET_ACCOUNT_TYPES];
      this.techAttitudes = target[K_DEFINITION_TARGET_TECH_ATTITUDE];
      this.purchaseStates = target[K_DEFINITION_TARGET_PURCHASE_STATES];
      this.userProperties = target[K_DEFINITION_TARGET_USER_PROPERTIES];
      this.remoteProperties = target[K_DEFINITION_TARGET_REMOTE_PROPERTIES];
      this.hasDesktop = target[K_DEFINITION_TARGET_ACCOUNT_HAS_DESKTOP];
      this.hasFingbox = target[K_DEFINITION_TARGET_ACCOUNT_HAS_FINGBOX];
      this.hasMobile = target[K_DEFINITION_TARGET_ACCOUNT_HAS_MOBILE];
    }
  }, {
    key: "checkJson",
    value: function checkJson(target) {
      var countries = target[K_DEFINITION_TARGET_COUNTRIES];
      var countriesExclude = target[K_DEFINITION_TARGET_COUNTRIES_EXCLUDE];
      var platforms = target[K_DEFINITION_TARGET_PLATFORMS];
      var appVersion = target[K_DEFINITION_TARGET_APP_VERSION] || target[K_DEFINITION_TARGET_APP_VERSION_V2];
      var accountTypes = target[K_DEFINITION_TARGET_ACCOUNT_TYPES];
      var techAttitudes = target[K_DEFINITION_TARGET_TECH_ATTITUDE];
      var purchaseStates = target[K_DEFINITION_TARGET_PURCHASE_STATES];
      var userProperties = target[K_DEFINITION_TARGET_USER_PROPERTIES];
      var remoteProperties = target[K_DEFINITION_TARGET_REMOTE_PROPERTIES];
      var hasDesktop = target[K_DEFINITION_TARGET_ACCOUNT_HAS_DESKTOP];
      var hasFingbox = target[K_DEFINITION_TARGET_ACCOUNT_HAS_FINGBOX];
      var hasMobile = target[K_DEFINITION_TARGET_ACCOUNT_HAS_MOBILE];
      return (isUndefined(countries) || Array.isArray(countries) && countries.length > 0 && isArrayOfStrings(countries)) && (isUndefined(countriesExclude) || Array.isArray(countriesExclude) && countriesExclude.length > 0 && isArrayOfStrings(countriesExclude)) && (isUndefined(platforms) || Array.isArray(platforms) && platforms.length > 0 && isArrayOfStrings(platforms)) && (isUndefined(appVersion) || isObject(appVersion)) && (isUndefined(accountTypes) || Array.isArray(accountTypes) && accountTypes.length > 0 && isArrayOfStrings(accountTypes)) && (isUndefined(techAttitudes) || Array.isArray(techAttitudes) && techAttitudes.length > 0 && isArrayOfStrings(techAttitudes)) && (isUndefined(purchaseStates) || Array.isArray(purchaseStates) && purchaseStates.length > 0 && isArrayOfStrings(purchaseStates)) && (isUndefined(userProperties) || isObject(userProperties) && isMapOfStrings(userProperties)) && (isUndefined(remoteProperties) || isObject(remoteProperties) && isMapOfStrings(remoteProperties)) && (isUndefined(hasDesktop) || isBoolean(hasDesktop)) && (isUndefined(hasFingbox) || isBoolean(hasFingbox)) && (isUndefined(hasMobile) || isBoolean(hasMobile));
    }
    /**
     * @param {Profile} args  
     */

  }, {
    key: "matches",
    value: function matches(args) {
      return this.matchCountries(args.countryCode) && this.matchPlatform(args.platform) && this.matchAppVersion(args.appVersion) && this.matchAccountType(args.accountType) && this.matchTechAttitude(args.techAttitude) && this.matchPurchaseState(args.purchaseState) && this.matchUserProperties(args.getUserProperty) && this.matchRemoteProperties(args.getRemoteProperty) && this.matchAccountHasDesktop(args.hasDesktop) && this.matchAccountHasFingbox(args.hasFingbox) && this.matchAccountHasMobile(args.hasMobile);
    }
  }, {
    key: "matchCountries",
    value: function matchCountries(countryCode) {
      if (!countryCode && !this.countries && !this.countriesExclude) {
        return true;
      }

      return (!this.countries || isCountryInSet(this.countries, countryCode)) && !isCountryInSet(this.countriesExclude || [], countryCode);
    }
  }, {
    key: "matchPlatform",
    value: function matchPlatform(currentPlatform) {
      return matchValueInList(currentPlatform, this.platforms);
    }
  }, {
    key: "matchAppVersion",
    value: function matchAppVersion(currentAppVersion) {
      if (!currentAppVersion && !this.appVersion) {
        return true;
      }

      return !this.appVersion || this.appVersion.isVersionInRange(currentAppVersion);
    }
  }, {
    key: "matchAccountType",
    value: function matchAccountType(accountType) {
      return matchValueInList(accountType || "NONE", this.accountTypes);
    }
  }, {
    key: "matchTechAttitude",
    value: function matchTechAttitude(techAttitude) {
      return matchValueInList(techAttitude, this.techAttitudes);
    }
  }, {
    key: "matchPurchaseState",
    value: function matchPurchaseState(purchaseState) {
      return matchValueInList(purchaseState, this.purchaseStates);
    }
  }, {
    key: "matchUserProperties",
    value: function matchUserProperties(getUserProperty) {
      return matchProperties(getUserProperty, this.userProperties);
    }
  }, {
    key: "matchRemoteProperties",
    value: function matchRemoteProperties(getRemoteProperty) {
      return matchProperties(getRemoteProperty, this.remoteProperties);
    }
  }, {
    key: "matchAccountHasDesktop",
    value: function matchAccountHasDesktop(hasDesktop) {
      return isUndefined(this.hasDesktop) || this.hasDesktop === hasDesktop;
    }
  }, {
    key: "matchAccountHasFingbox",
    value: function matchAccountHasFingbox(hasFingbox) {
      return isUndefined(this.hasFingbox) || this.hasFingbox === hasFingbox;
    }
  }, {
    key: "matchAccountHasMobile",
    value: function matchAccountHasMobile(hasMobile) {
      return isUndefined(this.hasMobile) || this.hasMobile === hasMobile;
    }
  }]);

  return IAMTarget;
}(IAMParserBase);

_defineProperty(IAMTarget, "Profile", Profile);

function matchValueInList(value, list) {
  // If there's no list, there is no constraint
  if (!list) {
    return true;
  } // Here we have a list, so it's constrained. Without a value, we can be sure that it can't pass the constraints


  if (!value) {
    return false;
  } // Both value and list are defined, so we check whether the first matches in the latter or not


  return isStringInArrayIgnoringCase(list, value);
}

function isCountryInSet(countries, countryCode) {
  return isStringInArrayIgnoringCase(countries, countryCode);
}

function isStringInArrayIgnoringCase(array, str) {
  if (!str || !array) {
    return false;
  }

  str = str.toUpperCase();
  return array.reduce(function (prev, curr) {
    return prev || curr.toUpperCase() === str;
  }, false);
}

function matchProperties(getLocalValue, target) {
  if (!target) {
    return true;
  }

  if (!getLocalValue) {
    return false;
  }

  for (var propKey in target) {
    var propValue = target[propKey].toUpperCase();
    var localValue = getLocalValue(propKey);

    if (!(localValue && localValue.toUpperCase() === propValue)) {
      return false;
    }
  }

  return true;
}

var K_DEFINITION_SCHEDULING_FREQUENCY_PER_DEVICE = "frequency-per-device";
var K_DEFINITION_SCHEDULING_DAYS_BETWEEN_DISPLAY = "days-between-display";
var K_DEFINITION_SCHEDULING_DAYS_ACROSS_ANY_MESSAGE = "days-across-any-message";
var K_DEFINITION_SCHEDULING_DAYS_SINCE_FIRST_OPEN = "days-since-first-open";
var K_DEFINITION_SCHEDULING_START = "start_ms";
var K_DEFINITION_SCHEDULING_END = "end_ms";

var IAMScheduling = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMScheduling, _IAMParserBase);

  var _super = _createSuper(IAMScheduling);

  function IAMScheduling(json) {
    var _this;

    _classCallCheck(this, IAMScheduling);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "frequencyPerDevice", void 0);

    _defineProperty(_assertThisInitialized(_this), "daysBetweenDisplay", void 0);

    _defineProperty(_assertThisInitialized(_this), "daysAcrossAnyMessage", void 0);

    _defineProperty(_assertThisInitialized(_this), "daysSinceFirstOpen", void 0);

    _defineProperty(_assertThisInitialized(_this), "startMs", void 0);

    _defineProperty(_assertThisInitialized(_this), "endMs", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMScheduling, [{
    key: "parseJson",
    value: function parseJson(scheduling) {
      this.frequencyPerDevice = scheduling[K_DEFINITION_SCHEDULING_FREQUENCY_PER_DEVICE] || 1;
      this.daysBetweenDisplay = scheduling[K_DEFINITION_SCHEDULING_DAYS_BETWEEN_DISPLAY];
      this.daysAcrossAnyMessage = scheduling[K_DEFINITION_SCHEDULING_DAYS_ACROSS_ANY_MESSAGE];
      this.daysSinceFirstOpen = scheduling[K_DEFINITION_SCHEDULING_DAYS_SINCE_FIRST_OPEN];
      this.startMs = timestampToDate(scheduling[K_DEFINITION_SCHEDULING_START]);
      this.endMs = timestampToDate(scheduling[K_DEFINITION_SCHEDULING_END]);
    }
  }, {
    key: "checkJson",
    value: function checkJson(scheduling) {
      var frequencyPerDevice = scheduling[K_DEFINITION_SCHEDULING_FREQUENCY_PER_DEVICE];
      var daysBetweenDisplay = scheduling[K_DEFINITION_SCHEDULING_DAYS_BETWEEN_DISPLAY];
      var daysAcrossAnyMessage = scheduling[K_DEFINITION_SCHEDULING_DAYS_ACROSS_ANY_MESSAGE];
      var daysSinceFirstOpen = scheduling[K_DEFINITION_SCHEDULING_DAYS_SINCE_FIRST_OPEN];
      var startMs = scheduling[K_DEFINITION_SCHEDULING_START];
      var endMs = scheduling[K_DEFINITION_SCHEDULING_END];
      return (isUndefined(frequencyPerDevice) || Number.isInteger(frequencyPerDevice)) && (isUndefined(daysBetweenDisplay) || Number.isInteger(daysBetweenDisplay)) && (isUndefined(daysAcrossAnyMessage) || Number.isInteger(daysAcrossAnyMessage)) && (isUndefined(daysSinceFirstOpen) || Number.isInteger(daysSinceFirstOpen)) && (isUndefined(startMs) || Number.isInteger(startMs)) && (isUndefined(endMs) || Number.isInteger(endMs));
    }
    /**
     * @typedef {SchedulingArgs}
     * @property {number|undefined} showCount 
     * @property {timestamp|undefined} lastShowDate 
     * @property {timestamp|undefined} lastShowDateForAnyMessage
     * @property {timestamp|undefined} appFirstOpen
     */

  }, {
    key: "matches",
    value: function matches(args) {
      if (this.startMs && isDateAfterNow(this.startMs)) {
        return false;
      }

      if (this.endMs && isDateBeforeNow(this.endMs)) {
        return false;
      }

      var daysSinceLastShow = args.lastShowDate ? getNumberOfDaysUntilNow(args.lastShowDate) : -1;
      var daysSinceLastShowOfAnyMessage = args.lastShowDateForAnyMessage ? getNumberOfDaysUntilNow(args.lastShowDateForAnyMessage) : -1;
      var checksFrequencyPerDeviceRule = args.showCount < this.frequencyPerDevice;
      var checksDaysBetweenDisplayRule = !this.daysBetweenDisplay || daysSinceLastShow === -1 || daysSinceLastShow >= this.daysBetweenDisplay;
      var checksDaysAcrossAnyMessageRule = !this.daysAcrossAnyMessage || daysSinceLastShowOfAnyMessage === -1 || daysSinceLastShowOfAnyMessage >= this.daysAcrossAnyMessage;
      var checksDaysSinceFirstOpenRule = !this.daysSinceFirstOpen || args.appFirstOpen && getNumberOfDaysUntilNow(args.appFirstOpen) >= this.daysSinceFirstOpen;
      return checksFrequencyPerDeviceRule && checksDaysBetweenDisplayRule && checksDaysAcrossAnyMessageRule && checksDaysSinceFirstOpenRule;
    }
  }]);

  return IAMScheduling;
}(IAMParserBase);

function timestampToDate(time) {
  if (time && Number.isInteger(time)) {
    return new Date(time);
  }

  return undefined;
}

function isDateAfterNow(date) {
  return date.getTime() > Date.now();
}

function isDateBeforeNow(date) {
  return date.getTime() < Date.now();
}

function getNumberOfDaysUntilNow(date) {
  var dateTime = date.getTime ? date.getTime() : Number(date);
  return daysSinceEpoch(Date.now() - dateTime);
}

function daysSinceEpoch(time) {
  return Math.floor(time / (1000 * 60 * 60 * 24));
}

var K_DEFINITION_CONVERSION_DISPLAY = "display";
var K_DEFINITION_CONVERSION_CLICK = "click";

var IAMConversion = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMConversion, _IAMParserBase);

  var _super = _createSuper(IAMConversion);

  function IAMConversion(json) {
    var _this;

    _classCallCheck(this, IAMConversion);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "display", void 0);

    _defineProperty(_assertThisInitialized(_this), "click", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMConversion, [{
    key: "isDefined",
    value: function isDefined() {
      return this.display || this.click;
    }
  }, {
    key: "parseJson",
    value: function parseJson(conversion) {
      if (isString(conversion)) {
        this.click = conversion;
      } else {
        this.display = conversion[K_DEFINITION_CONVERSION_DISPLAY];
        this.click = conversion[K_DEFINITION_CONVERSION_CLICK];
      }
    }
  }, {
    key: "checkJson",
    value: function checkJson(conversion) {
      var display = conversion[K_DEFINITION_CONVERSION_DISPLAY];
      var click = conversion[K_DEFINITION_CONVERSION_CLICK];
      return (isUndefined(display) || isString(display)) && (isUndefined(click) || isString(click)) || isString(conversion);
    }
  }]);

  return IAMConversion;
}(IAMParserBase);

var K_DEFINITION_LOCAL_TIME = "local-time";
var K_DEFINITION_ENABLED$1 = "enabled";

var IAMNotification = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMNotification, _IAMParserBase);

  var _super = _createSuper(IAMNotification);

  function IAMNotification(json) {
    var _this;

    _classCallCheck(this, IAMNotification);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "localTime", void 0);

    _defineProperty(_assertThisInitialized(_this), "enabled", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMNotification, [{
    key: "parseJson",
    value: function parseJson(notification) {
      this.localTime = notification[K_DEFINITION_LOCAL_TIME];
      this.enabled = notification[K_DEFINITION_ENABLED$1] || false;
    }
  }, {
    key: "checkJson",
    value: function checkJson(notification) {
      var localTime = notification[K_DEFINITION_LOCAL_TIME];
      var enabled = notification[K_DEFINITION_ENABLED$1];
      return (isUndefined(enabled) || isBoolean(enabled)) && !isEmptyString(localTime) && isLocalTime(localTime);
    }
  }]);

  return IAMNotification;
}(IAMParserBase);

var K_DEFINITION_ID = "id";
var K_DEFINITION_LOCATION_ID = "locationId";
var K_DEFINITION_STYLE = "style";
var K_DEFINITION_ENABLED = "enabled";
var K_DEFINITION_TARGET = "target";
var K_DEFINITION_SCHEDULING = "scheduling";
var K_DEFINITION_CONVERSION = "conversion";
var K_DEFINITION_NOTIFICATION = "notification";
var K_DEFINITION_ACTION = "action";

var IAMDefinition = /*#__PURE__*/function (_IAMParserBase) {
  _inherits(IAMDefinition, _IAMParserBase);

  var _super = _createSuper(IAMDefinition);

  function IAMDefinition(json) {
    var _this;

    _classCallCheck(this, IAMDefinition);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "id", void 0);

    _defineProperty(_assertThisInitialized(_this), "locationId", void 0);

    _defineProperty(_assertThisInitialized(_this), "style", void 0);

    _defineProperty(_assertThisInitialized(_this), "enabled", void 0);

    _defineProperty(_assertThisInitialized(_this), "target", void 0);

    _defineProperty(_assertThisInitialized(_this), "scheduling", void 0);

    _defineProperty(_assertThisInitialized(_this), "conversion", void 0);

    _defineProperty(_assertThisInitialized(_this), "notification", void 0);

    _defineProperty(_assertThisInitialized(_this), "action", void 0);

    _this.checkAndParseJson(json);

    return _this;
  }

  _createClass(IAMDefinition, [{
    key: "parseJson",
    value: function parseJson(message) {
      this.id = message[K_DEFINITION_ID];
      this.locationId = message[K_DEFINITION_LOCATION_ID];
      this.enabled = isBoolean(message[K_DEFINITION_ENABLED]) ? message[K_DEFINITION_ENABLED] : true;
      this.style = new IAMStyle(message[K_DEFINITION_STYLE]);
      this.target = message[K_DEFINITION_TARGET] ? new IAMTarget(message[K_DEFINITION_TARGET]) : undefined;
      this.scheduling = message[K_DEFINITION_SCHEDULING] ? new IAMScheduling(message[K_DEFINITION_SCHEDULING]) : undefined;
      this.conversion = message[K_DEFINITION_CONVERSION] ? new IAMConversion(message[K_DEFINITION_CONVERSION]) : undefined;
      this.notification = message[K_DEFINITION_NOTIFICATION] ? new IAMNotification(message[K_DEFINITION_NOTIFICATION]) : undefined;
      this.action = message[K_DEFINITION_ACTION];
    }
  }, {
    key: "checkJson",
    value: function checkJson(message) {
      var id = message[K_DEFINITION_ID];
      var locationId = message[K_DEFINITION_LOCATION_ID];
      var enabled = message[K_DEFINITION_ENABLED];
      var style = message[K_DEFINITION_STYLE];
      var action = message[K_DEFINITION_ACTION];
      var target = message[K_DEFINITION_TARGET];
      var scheduling = message[K_DEFINITION_SCHEDULING];
      var conversion = message[K_DEFINITION_CONVERSION];
      var notification = message[K_DEFINITION_NOTIFICATION];
      return isString(id) && (isUndefined(locationId) || isString(locationId)) && (isUndefined(enabled) || isBoolean(enabled)) && isObject(style) && (isUndefined(action) || isURL(action)) && (isUndefined(target) || isObject(target)) && (isUndefined(scheduling) || isObject(scheduling)) && (isUndefined(conversion) || isObject(conversion) || isString(conversion)) && (isUndefined(notification) || isObject(notification));
    }
  }, {
    key: "matches",
    value: function matches(targetArgs, schedulingArgs) {
      return this.enabled && (!this.target || this.target.matches(targetArgs)) && (!this.scheduling || this.scheduling.matches(schedulingArgs));
    }
  }]);

  return IAMDefinition;
}(IAMParserBase);

var IAMMessageView = /*#__PURE__*/function () {
  function IAMMessageView(language, definition) {
    _classCallCheck(this, IAMMessageView);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "locationId", void 0);

    _defineProperty(this, "style", void 0);

    _defineProperty(this, "conversion", void 0);

    _defineProperty(this, "notification", void 0);

    this.fromDefinition(language, definition);
  }

  _createClass(IAMMessageView, [{
    key: "fromDefinition",
    value: function fromDefinition(language, definition) {
      this.createIds(definition);
      this.createStyle(language, definition);
      this.createConversion(definition);
      this.createNotification(definition);
    }
  }, {
    key: "createIds",
    value: function createIds(definition) {
      this.id = definition.id;
      this.locationId = definition.locationId;
    }
  }, {
    key: "createStyle",
    value: function createStyle(language, definition) {
      var style = definition.style;
      this.style = {};

      if (style) {
        if (style.layout) {
          this.style.layout = style.layout;
        }

        if (style.titles) {
          this.style.title = style.titles.getText(language);
        }

        if (style.bodies) {
          this.style.body = style.bodies.getText(language);
        }

        if (style.extras) {
          this.style.extra = style.extras.getText(language);
        }

        if (style.colors) {
          this.style.colors = _objectSpread2({}, style.colors);
        }

        if (style.images) {
          this.style.image = style.images.getCorrectImageURL();
        }

        if (style.primaryButton) {
          this.style.primaryButton = {
            text: style.primaryButton.getTextByLanguage(language),
            action: style.primaryButton.action
          };
        }

        if (definition.action && (!style.primaryButton || !style.primaryButton.action)) {
          this.style.primaryButton = {
            action: definition.action
          };
        }
      }
    }
  }, {
    key: "createConversion",
    value: function createConversion(definition) {
      if (definition.conversion.isDefined()) {
        this.conversion = _objectSpread2({}, definition.conversion);
      }
    }
  }, {
    key: "createNotification",
    value: function createNotification(definition) {
      if (definition.notification) {
        this.notification = _objectSpread2({}, definition.notification);
      }
    }
  }]);

  return IAMMessageView;
}();

var IAM_MESSAGES = "messages";
var MIN_HOURS_TO_PASS_FOR_DEFINITIONS_REFRESH = 6;
/**
 * @callback stringToVoidCallback
 * @param {string} str
 */

/**
 * @callback requestFunction
 * @param {string} URL
 * @returns {Promise}
 */

/**
 * @typedef {IAMManager.Environment}
 * @property {string} URL
 * @property {stringToVoidCallback|undefined} onMessage
 * @property {requestFunction} request
 * @property {stringToVoidCallback|undefined} logger
 * @property {boolean|undefined} isDev
 * @property {Prefs} prefs
 * @property {IAMTarget.Profile} profile
 */

var IAMManagerEnvironment = /*#__PURE__*/function () {
  function IAMManagerEnvironment() {
    _classCallCheck(this, IAMManagerEnvironment);

    _defineProperty(this, "URL", void 0);

    _defineProperty(this, "onMessage", void 0);

    _defineProperty(this, "request", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "isDev", void 0);

    _defineProperty(this, "prefs", void 0);

    _defineProperty(this, "profile", void 0);

    _defineProperty(this, "language", void 0);

    _defineProperty(this, "appFirstOpen", void 0);
  }

  _createClass(IAMManagerEnvironment, [{
    key: "log",
    value: // current installation first open time
    function log(what) {
      this.logger && this.logger(what);
    }
  }, {
    key: "validate",
    value: function validate() {
      if (!(this.URL && this.prefs)) {
        throw new Error("Incomplete arguments for IAM Manager");
      }
    }
  }]);

  return IAMManagerEnvironment;
}();

_defineProperty(IAMManagerEnvironment, "TargetProfile", IAMTarget.Profile);

var IAMManager = /*#__PURE__*/function () {
  function IAMManager(env) {
    _classCallCheck(this, IAMManager);

    _defineProperty(this, "messages", void 0);

    _defineProperty(this, "lastUpdateTime", void 0);

    this.env = env || {};
    this.env.validate();
  }

  _createClass(IAMManager, [{
    key: "syncDefinitions",
    value: function syncDefinitions() {
      if (this.hasntUpdatedYet()) {
        var backup = this.env.prefs.getLocalBackup();
        var isBackupThere = backup && backup.length > 0;

        if (isBackupThere) {
          this.loadMessagesFrom(backup);
        }

        this.refreshDefinitions();
      } else if (this.hoursPassedFromLastUpdate() > MIN_HOURS_TO_PASS_FOR_DEFINITIONS_REFRESH) {
        this.refreshDefinitions();
      } else if (this.hasPendingMessages()) {
        this.sendMessage();
      }
    }
  }, {
    key: "hasntUpdatedYet",
    value: function hasntUpdatedYet() {
      return !this.lastUpdateTime;
    }
  }, {
    key: "hoursPassedFromLastUpdate",
    value: function hoursPassedFromLastUpdate() {
      return new Date(Date.now() - this.lastUpdateTime).getHours();
    }
  }, {
    key: "getMessageForLocation",
    value: function getMessageForLocation(locationId) {
      return this.getMessage(locationId);
    }
  }, {
    key: "getMessage",
    value: function getMessage(locationFilter) {
      var msg = this.findFirstValidDefinition(locationFilter);

      if (msg) {
        return new IAMMessageView(this.env.language, msg);
      }

      return null;
    }
  }, {
    key: "hasPendingMessages",
    value: function hasPendingMessages() {
      return this.findFirstValidDefinition() !== null;
    }
  }, {
    key: "findFirstValidDefinition",
    value: function findFirstValidDefinition(locationFilter) {
      if (!this.messages) {
        return null;
      }

      var lastShowDateForAnyMessage = this.env.prefs.getLastShowDateForAnyMessage();

      var _iterator = _createForOfIteratorHelper(this.messages),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var msg = _step.value;

          if (locationFilter && locationFilter !== msg.locationId) {
            continue;
          }

          var showCount = this.env.prefs.getShowCount(msg.id);
          var showDate = this.env.prefs.getLastShowDate(msg.id);
          var schedulingArgs = {
            showCount: showCount,
            showDate: showDate,
            lastShowDateForAnyMessage: lastShowDateForAnyMessage,
            appFirstOpen: this.env.appFirstOpen
          };

          if (msg.matches(this.env.profile, schedulingArgs)) {
            return msg;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }
  }, {
    key: "refreshDefinitions",
    value: function refreshDefinitions() {
      var _this = this;

      if (!this.env.request || !this.env.URL) {
        if (this.hasPendingMessages()) {
          this.sendMessage();
        }

        return;
      }

      this.env.request(this.env.URL).then(function (response) {
        _this.env.log("Remote definitions downloaded");

        var messagesJson = response[IAM_MESSAGES];

        if (messagesJson) {
          _this.loadMessagesFrom(messagesJson);

          if (_this.messages) {
            _this.env.prefs.setLocalBackup(_this.messages.length > 0 ? messagesJson : "");
          }
        }

        if (_this.hasPendingMessages()) {
          _this.sendMessage();
        }
      }).catch(function (error) {
        _this.env.log(error);

        if (_this.hasPendingMessages()) {
          _this.sendMessage();
        }
      });
    }
  }, {
    key: "sendMessage",
    value: function sendMessage() {
      if (!this.env.onMessage) {
        return;
      }

      var msg = this.getMessage();

      if (msg) {
        this.env.onMessage(msg);
      }
    }
  }, {
    key: "loadMessagesFrom",
    value: function loadMessagesFrom(json) {
      try {
        this.messages = this.parseJson(json);
        this.lastUpdateTime = Date.now();
      } catch (error) {
        this.messages = [];
        this.lastUpdateTime = false;
        this.env.log(error);
      }
    }
  }, {
    key: "parseJson",
    value: function parseJson(messages) {
      if (!messages) {
        return [];
      }

      return messages.map(function (message) {
        return new IAMDefinition(message);
      });
    }
  }, {
    key: "setLanguage",
    value: function setLanguage(lang) {
      this.env.language = lang;
    }
  }]);

  return IAMManager;
}();

_defineProperty(IAMManager, "Environment", IAMManagerEnvironment);

var IAMDialog = /*#__PURE__*/function (_React$Component) {
  _inherits(IAMDialog, _React$Component);

  var _super = _createSuper(IAMDialog);

  function IAMDialog() {
    _classCallCheck(this, IAMDialog);

    return _super.apply(this, arguments);
  }

  _createClass(IAMDialog, [{
    key: "render",
    value: function render() {
      var _this = this;

      var onAction = function onAction(action) {
        _this.props.onAction && _this.props.onAction(action);
        _this.props.onClose && _this.props.onClose();
      };

      var messageStyle = this.props.message;
      var layout = messageStyle.layout;

      if (layout === IAMStyle.IAMLayout.SIDE_BANNER) {
        return null;
      }

      var DialogComponent = this.getDialogComponentForLayout(layout);
      var dialogProps = {
        id: this.props.id,
        onClose: this.props.onClose,
        onHide: this.props.onHide,
        onAction: onAction,
        image: messageStyle.image,
        buttonAction: messageStyle.primaryButton && messageStyle.primaryButton.action
      };

      if (layout !== IAMStyle.IAMLayout.IMAGE) {
        dialogProps.title = messageStyle.title;
        dialogProps.text = messageStyle.body;
      }

      if (layout !== IAMStyle.IAMLayout.TOP_BANNER) {
        dialogProps.buttonTitle = messageStyle.primaryButton.text;
      }

      return /*#__PURE__*/React__default["default"].createElement(DialogComponent, dialogProps);
    }
  }, {
    key: "getDialogComponentForLayout",
    value: function getDialogComponentForLayout(layout) {
      if (layout === IAMStyle.IAMLayout.MODAL) {
        return Modal;
      } else if (layout === IAMStyle.IAMLayout.IMAGE) {
        return Image$1;
      } else if (layout === IAMStyle.IAMLayout.CARD) {
        return Card;
      } else if (layout === IAMStyle.IAMLayout.TOP_BANNER) {
        return TopBanner;
      }

      return null;
    }
  }]);

  return IAMDialog;
}(React__default["default"].Component);

var Modal = /*#__PURE__*/function (_React$Component2) {
  _inherits(Modal, _React$Component2);

  var _super2 = _createSuper(Modal);

  function Modal() {
    _classCallCheck(this, Modal);

    return _super2.apply(this, arguments);
  }

  _createClass(Modal, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: this.props.id,
        title: this.props.title,
        onHide: this.props.onHide,
        centerVertically: true,
        centerTitle: true
      }, /*#__PURE__*/React__default["default"].createElement("hr", {
        className: "w-100 b-0 mb-0"
      }), /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, {
        noPadding: true,
        className: "text-center overflow-hidden p-3"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "bg-img-start w-100 mb-3",
        src: this.props.image
      }), this.props.text), /*#__PURE__*/React__default["default"].createElement(DialogButtons, {
        onClose: this.props.onClose,
        onAction: this.props.onAction,
        actionTitle: this.props.buttonTitle,
        action: this.props.buttonAction
      }));
    }
  }]);

  return Modal;
}(React__default["default"].Component);

var Image$1 = /*#__PURE__*/function (_React$Component3) {
  _inherits(Image, _React$Component3);

  var _super3 = _createSuper(Image);

  function Image() {
    _classCallCheck(this, Image);

    return _super3.apply(this, arguments);
  }

  _createClass(Image, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: this.props.id,
        onHide: this.props.onHide,
        centerVertically: true,
        centerTitle: true
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, {
        noPadding: true,
        className: "text-center overflow-hidden p-0"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "bg-img-start w-100",
        src: this.props.image
      })), /*#__PURE__*/React__default["default"].createElement(DialogButtons, {
        onClose: this.props.onClose,
        onAction: this.props.onAction,
        actionTitle: this.props.buttonTitle,
        action: this.props.buttonAction
      }));
    }
  }]);

  return Image;
}(React__default["default"].Component);

var Card = /*#__PURE__*/function (_React$Component4) {
  _inherits(Card, _React$Component4);

  var _super4 = _createSuper(Card);

  function Card() {
    _classCallCheck(this, Card);

    return _super4.apply(this, arguments);
  }

  _createClass(Card, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: this.props.id,
        onHide: this.props.onHide,
        centerVertically: true,
        centerTitle: true
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card bg-light"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "card-img-top",
        src: this.props.image
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "card-body"
      }, /*#__PURE__*/React__default["default"].createElement("h3", {
        className: "card-title mb-2"
      }, this.props.title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "card-text"
      }, this.props.text))), /*#__PURE__*/React__default["default"].createElement(DialogButtons, {
        onClose: this.props.onClose,
        onAction: this.props.onAction,
        actionTitle: this.props.buttonTitle,
        action: this.props.buttonAction
      }));
    }
  }]);

  return Card;
}(React__default["default"].Component);

var TopBanner = /*#__PURE__*/function (_React$Component5) {
  _inherits(TopBanner, _React$Component5);

  var _super5 = _createSuper(TopBanner);

  function TopBanner() {
    _classCallCheck(this, TopBanner);

    return _super5.apply(this, arguments);
  }

  _createClass(TopBanner, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React__default["default"].createElement(ModalDialog, {
        id: this.props.id,
        onHide: this.props.onHide,
        onClick: this.props.onAction ? function () {
          return _this2.props.onAction(_this2.props.buttonAction);
        } : undefined
      }, /*#__PURE__*/React__default["default"].createElement(ModalDialogBody, {
        noPadding: true,
        className: "container bg-dark p-3"
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "row overflow-hidden"
      }, /*#__PURE__*/React__default["default"].createElement("img", {
        className: "col-2 pr-0",
        src: this.props.image
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "col-10"
      }, /*#__PURE__*/React__default["default"].createElement("h5", {
        className: "modal-title text-light mb-1"
      }, this.props.title), /*#__PURE__*/React__default["default"].createElement("p", {
        className: "text-white h6"
      }, this.props.text)))));
    }
  }]);

  return TopBanner;
}(React__default["default"].Component);

var DialogButtons = /*#__PURE__*/function (_React$Component6) {
  _inherits(DialogButtons, _React$Component6);

  var _super6 = _createSuper(DialogButtons);

  function DialogButtons() {
    _classCallCheck(this, DialogButtons);

    return _super6.apply(this, arguments);
  }

  _createClass(DialogButtons, [{
    key: "render",
    value: function render() {
      var _this3 = this;

      var onAction = null;

      if (this.props.onAction) {
        onAction = function onAction() {
          _this3.props.onAction(_this3.props.action);
        };
      }

      return /*#__PURE__*/React__default["default"].createElement(ModalDialogFooter, {
        noPadding: true,
        className: "btn-group"
      }, /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "border-right m-0 rounded-0 p-3",
        action: this.props.onClose,
        title: "Close",
        type: BTN_TYPE_GHOST,
        tint: BTN_TINT_DARK,
        size: BTN_SIZE_JUMBO
      }), /*#__PURE__*/React__default["default"].createElement(ActionButton, {
        className: "m-0 rounded-0 p-3",
        action: onAction,
        title: this.props.actionTitle,
        type: BTN_TYPE_GHOST,
        size: BTN_SIZE_JUMBO
      }));
    }
  }]);

  return DialogButtons;
}(React__default["default"].Component);

IAMDialog.propTypes = {
  id: PropTypes__default["default"].string,
  message: PropTypes__default["default"].object,
  onAction: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  onHide: PropTypes__default["default"].func
};

var AnchorResponder = /*#__PURE__*/function (_React$Component) {
  _inherits(AnchorResponder, _React$Component);

  var _super = _createSuper(AnchorResponder);

  function AnchorResponder() {
    _classCallCheck(this, AnchorResponder);

    return _super.apply(this, arguments);
  }

  _createClass(AnchorResponder, [{
    key: "render",
    value: function render() {
      var _this = this;

      var onClickInternal = function onClickInternal(event) {
        event.preventDefault();
        event.stopPropagation();

        _this.processClick(event);
      };

      return /*#__PURE__*/React__default["default"].createElement("span", {
        onClick: onClickInternal
      }, this.props.children);
    }
  }, {
    key: "processClick",
    value: function processClick(event) {
      var onClick = this.props.onClick;
      var tag = this.props.customTag || "a";

      if (onClick) {
        if (Array.isArray(tag)) {
          var shouldTrigger = typeof tag.find(function (tag) {
            return event.target.localName === tag;
          }) !== "undefined";

          if (shouldTrigger) {
            onClick(event);
          }
        } else if (event.target.localName === tag) {
          onClick(event);
        }
      }
    }
  }]);

  return AnchorResponder;
}(React__default["default"].Component);
AnchorResponder.propTypes = {
  customTag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].arrayOf(PropTypes__default["default"].string)]),
  onClick: PropTypes__default["default"].func
};

var ActiveIntl = /*#__PURE__*/function (_React$Component) {
  _inherits(ActiveIntl, _React$Component);

  var _super = _createSuper(ActiveIntl);

  function ActiveIntl() {
    _classCallCheck(this, ActiveIntl);

    return _super.apply(this, arguments);
  }

  _createClass(ActiveIntl, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          params = _this$props.params,
          onClick = _this$props.onClick,
          customTag = _this$props.customTag;

      if (!label) {
        return null;
      }

      return /*#__PURE__*/React__default["default"].createElement(AnchorResponder, {
        onClick: onClick,
        customTag: customTag
      }, intl__default["default"].getHTML(label, params));
    }
  }]);

  return ActiveIntl;
}(React__default["default"].Component);
ActiveIntl.propTypes = {
  label: PropTypes__default["default"].string.isRequired,
  params: PropTypes__default["default"].object,
  customTag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].arrayOf(PropTypes__default["default"].string)]),
  onClick: PropTypes__default["default"].func
};

exports.AI_ALL_TYPES = AI_ALL_TYPES;
exports.AI_CALL = AI_CALL;
exports.AI_GAME = AI_GAME;
exports.AI_SOCIAL = AI_SOCIAL;
exports.AI_VIDEO = AI_VIDEO;
exports.AI_WORK = AI_WORK;
exports.AVT_SIZE_BIG = AVT_SIZE_BIG;
exports.AVT_SIZE_DEFAULT = AVT_SIZE_DEFAULT;
exports.AVT_SIZE_JUMBO = AVT_SIZE_JUMBO;
exports.AVT_SIZE_MINI = AVT_SIZE_MINI;
exports.AVT_SIZE_SMALL = AVT_SIZE_SMALL;
exports.AccessPointCard = AccessPointCard;
exports.AccessPointDialog = AccessPointDialog;
exports.ActionButton = ActionButton;
exports.ActiveIntl = ActiveIntl;
exports.AnchorResponder = AnchorResponder;
exports.AutomatedVulnerabilityCard = AutomatedVulnerabilityCard;
exports.BADGE_TINT_DANGER = BADGE_TINT_DANGER;
exports.BADGE_TINT_DARK = BADGE_TINT_DARK;
exports.BADGE_TINT_DISABLED = BADGE_TINT_DISABLED;
exports.BADGE_TINT_INDIGO = BADGE_TINT_INDIGO;
exports.BADGE_TINT_ORANGE = BADGE_TINT_ORANGE;
exports.BADGE_TINT_PINK = BADGE_TINT_PINK;
exports.BADGE_TINT_PRIMARY = BADGE_TINT_PRIMARY;
exports.BADGE_TINT_PRIMARY_BORDERED = BADGE_TINT_PRIMARY_BORDERED;
exports.BADGE_TINT_SECONDARY = BADGE_TINT_SECONDARY;
exports.BADGE_TINT_SUCCESS = BADGE_TINT_SUCCESS;
exports.BADGE_TINT_WARNING = BADGE_TINT_WARNING;
exports.BTN_SIZE_BIG = BTN_SIZE_BIG;
exports.BTN_SIZE_DEFAULT = BTN_SIZE_DEFAULT;
exports.BTN_SIZE_JUMBO = BTN_SIZE_JUMBO;
exports.BTN_TINT_DANGER = BTN_TINT_DANGER;
exports.BTN_TINT_DARK = BTN_TINT_DARK;
exports.BTN_TINT_INDIGO = BTN_TINT_INDIGO;
exports.BTN_TINT_INFO = BTN_TINT_INFO;
exports.BTN_TINT_LIGHT = BTN_TINT_LIGHT;
exports.BTN_TINT_NAVY = BTN_TINT_NAVY;
exports.BTN_TINT_PRIMARY = BTN_TINT_PRIMARY;
exports.BTN_TINT_SECONDARY = BTN_TINT_SECONDARY;
exports.BTN_TINT_SUCCESS = BTN_TINT_SUCCESS;
exports.BTN_TINT_WARNING = BTN_TINT_WARNING;
exports.BTN_TYPE_DEFAULT = BTN_TYPE_DEFAULT;
exports.BTN_TYPE_GHOST = BTN_TYPE_GHOST;
exports.BTN_TYPE_LINK = BTN_TYPE_LINK;
exports.BTN_TYPE_OUTLINE = BTN_TYPE_OUTLINE;
exports.BTN_TYPE_SOFT = BTN_TYPE_SOFT;
exports.B_MD = B_MD;
exports.B_SM = B_SM;
exports.B_XS = B_XS;
exports.Badge = Badge;
exports.BadgeCell = BadgeCell;
exports.CC_ANIM_FAST = CC_ANIM_FAST;
exports.CC_ANIM_SLOW = CC_ANIM_SLOW;
exports.CC_DIM_DEFAULT = CC_DIM_DEFAULT;
exports.CC_DIM_LARGE = CC_DIM_LARGE;
exports.CC_DIM_SMALL = CC_DIM_SMALL;
exports.CC_RADIUS_DEFAULT = CC_RADIUS_DEFAULT;
exports.CC_RADIUS_LARGE = CC_RADIUS_LARGE;
exports.CC_RADIUS_SMALL = CC_RADIUS_SMALL;
exports.CT_ALL_TYPES = CT_ALL_TYPES;
exports.CT_COLLEAGUE = CT_COLLEAGUE;
exports.CT_COLLEAGUE_CONTRACTOR = CT_COLLEAGUE_CONTRACTOR;
exports.CT_COLLEAGUE_STAFF = CT_COLLEAGUE_STAFF;
exports.CT_COLLEAGUE_VISITOR = CT_COLLEAGUE_VISITOR;
exports.CT_FAMILY = CT_FAMILY;
exports.CT_FAMILY_HER = CT_FAMILY_HER;
exports.CT_FAMILY_HIM = CT_FAMILY_HIM;
exports.CT_FAMILY_KID = CT_FAMILY_KID;
exports.CT_FAMILY_PET = CT_FAMILY_PET;
exports.CT_FAMILY_PET_CAT = CT_FAMILY_PET_CAT;
exports.CT_FAMILY_PET_DOG = CT_FAMILY_PET_DOG;
exports.CT_FAMILY_RELATIVE = CT_FAMILY_RELATIVE;
exports.CT_FRIEND = CT_FRIEND;
exports.CT_GUEST = CT_GUEST;
exports.CT_HELP = CT_HELP;
exports.CT_HELP_CLEANING = CT_HELP_CLEANING;
exports.CT_HELP_DELIVERY = CT_HELP_DELIVERY;
exports.CT_HELP_MAINTENANCE = CT_HELP_MAINTENANCE;
exports.CT_HELP_MEDICAL = CT_HELP_MEDICAL;
exports.CT_OTHERS = CT_OTHERS;
exports.CameraTypesSummaryPanel = CameraTypesSummaryPanel;
exports.CardPanel = CardPanel;
exports.ChooseModelBanner = ChooseModelBanner;
exports.CircularChart = CircularChart;
exports.ClearDeviceDialog = ClearDeviceDialog;
exports.ClickToScrollBar = ClickToScrollBar;
exports.ComparisonChart = ComparisonChart;
exports.ComplexCell = ComplexCell;
exports.Contact = Contact;
exports.ContactAvatar = ContactAvatar;
exports.ContactCard = ContactCard;
exports.ContactTypeIcon = ContactTypeIcon;
exports.ContactTypePicker = ContactTypePicker;
exports.CopyTextCell = CopyTextCell;
exports.CopyToClipboard = CopyToClipboard;
exports.CurrentNetworkScoreSection = CurrentNetworkScoreSection;
exports.DATE_FORMAT_LONG = DATE_FORMAT_LONG;
exports.DATE_FORMAT_RECENT = DATE_FORMAT_RECENT;
exports.DATE_FORMAT_SHORT = DATE_FORMAT_SHORT;
exports.DATE_FORMAT_SMART = DATE_FORMAT_SMART;
exports.DEFAULT_CDN = DEFAULT_CDN;
exports.DT_ALARM = DT_ALARM;
exports.DT_ALL_TYPES = DT_ALL_TYPES;
exports.DT_APPLIANCE = DT_APPLIANCE;
exports.DT_ARDUINO = DT_ARDUINO;
exports.DT_AUTOMATIC = DT_AUTOMATIC;
exports.DT_AUTOMOTIVE = DT_AUTOMOTIVE;
exports.DT_BABY_MONITOR = DT_BABY_MONITOR;
exports.DT_BARCODE = DT_BARCODE;
exports.DT_BATTERY = DT_BATTERY;
exports.DT_BELL = DT_BELL;
exports.DT_CAR = DT_CAR;
exports.DT_CIRCUIT_CARD = DT_CIRCUIT_CARD;
exports.DT_CLEANER = DT_CLEANER;
exports.DT_CLOCK = DT_CLOCK;
exports.DT_CLOUD = DT_CLOUD;
exports.DT_COMMUNICATION = DT_COMMUNICATION;
exports.DT_COMPUTER = DT_COMPUTER;
exports.DT_CONFERENCING = DT_CONFERENCING;
exports.DT_CONTROL_PANEL = DT_CONTROL_PANEL;
exports.DT_DATABASE = DT_DATABASE;
exports.DT_DESKTOP = DT_DESKTOP;
exports.DT_DISC_PLAYER = DT_DISC_PLAYER;
exports.DT_DOMAIN_SERVER = DT_DOMAIN_SERVER;
exports.DT_DOMOTZ_BOX = DT_DOMOTZ_BOX;
exports.DT_ENERGY = DT_ENERGY;
exports.DT_EREADER = DT_EREADER;
exports.DT_FILE_SERVER = DT_FILE_SERVER;
exports.DT_FINGBOX = DT_FINGBOX;
exports.DT_FIREWALL = DT_FIREWALL;
exports.DT_FITNESS = DT_FITNESS;
exports.DT_FRIDGE = DT_FRIDGE;
exports.DT_GAME_CONSOLE = DT_GAME_CONSOLE;
exports.DT_GARAGE = DT_GARAGE;
exports.DT_GATEWAY = DT_GATEWAY;
exports.DT_GENERIC = DT_GENERIC;
exports.DT_HEALTH_MONITOR = DT_HEALTH_MONITOR;
exports.DT_HEATING = DT_HEATING;
exports.DT_HUMIDITY = DT_HUMIDITY;
exports.DT_INDUSTRIAL = DT_INDUSTRIAL;
exports.DT_IPOD = DT_IPOD;
exports.DT_KEY_LOCK = DT_KEY_LOCK;
exports.DT_KICK_OUT_PROTECTED_TYPES = DT_KICK_OUT_PROTECTED_TYPES;
exports.DT_LAPTOP = DT_LAPTOP;
exports.DT_LIGHT = DT_LIGHT;
exports.DT_LOUDSPEAKER = DT_LOUDSPEAKER;
exports.DT_MAIL_SERVER = DT_MAIL_SERVER;
exports.DT_MEDIA_PLAYER = DT_MEDIA_PLAYER;
exports.DT_MEDICAL = DT_MEDICAL;
exports.DT_MICROPHONE = DT_MICROPHONE;
exports.DT_MOBILE = DT_MOBILE;
exports.DT_MODEM = DT_MODEM;
exports.DT_MOTION_DETECTOR = DT_MOTION_DETECTOR;
exports.DT_MUSIC = DT_MUSIC;
exports.DT_NAS_STORAGE = DT_NAS_STORAGE;
exports.DT_NETWORK_APPLIANCE = DT_NETWORK_APPLIANCE;
exports.DT_PET_MONITOR = DT_PET_MONITOR;
exports.DT_PHONE = DT_PHONE;
exports.DT_PHOTOS = DT_PHOTOS;
exports.DT_PHOTO_CAMERA = DT_PHOTO_CAMERA;
exports.DT_POE_PLUG = DT_POE_PLUG;
exports.DT_POOL = DT_POOL;
exports.DT_POS = DT_POS;
exports.DT_POWER_SYSTEM = DT_POWER_SYSTEM;
exports.DT_PRESENCE_DISCARD_TYPES = DT_PRESENCE_DISCARD_TYPES;
exports.DT_PRESENCE_TYPES = DT_PRESENCE_TYPES;
exports.DT_PRINTER = DT_PRINTER;
exports.DT_PROCESSOR = DT_PROCESSOR;
exports.DT_PROJECTOR = DT_PROJECTOR;
exports.DT_PROXY_SERVER = DT_PROXY_SERVER;
exports.DT_RADIO = DT_RADIO;
exports.DT_RASPBERRY = DT_RASPBERRY;
exports.DT_REMOTE_CONTROL = DT_REMOTE_CONTROL;
exports.DT_RFID = DT_RFID;
exports.DT_ROBOT = DT_ROBOT;
exports.DT_ROUTER = DT_ROUTER;
exports.DT_SATELLITE = DT_SATELLITE;
exports.DT_SCALE = DT_SCALE;
exports.DT_SCANNER = DT_SCANNER;
exports.DT_SECURITY_SYSTEM = DT_SECURITY_SYSTEM;
exports.DT_SENSOR = DT_SENSOR;
exports.DT_SERVER = DT_SERVER;
exports.DT_SLEEP = DT_SLEEP;
exports.DT_SMALL_CELL = DT_SMALL_CELL;
exports.DT_SMART_CONTROLLER = DT_SMART_CONTROLLER;
exports.DT_SMART_HOME = DT_SMART_HOME;
exports.DT_SMART_METER = DT_SMART_METER;
exports.DT_SMART_PLUG = DT_SMART_PLUG;
exports.DT_SMOKE = DT_SMOKE;
exports.DT_SOLAR_PANEL = DT_SOLAR_PANEL;
exports.DT_SOUND_SYSTEM = DT_SOUND_SYSTEM;
exports.DT_SPRINKLER = DT_SPRINKLER;
exports.DT_STB = DT_STB;
exports.DT_STREAMING_DONGLE = DT_STREAMING_DONGLE;
exports.DT_SURVEILLANCE_CAMERA = DT_SURVEILLANCE_CAMERA;
exports.DT_SWITCH = DT_SWITCH;
exports.DT_TABLET = DT_TABLET;
exports.DT_TELEVISION = DT_TELEVISION;
exports.DT_TERMINAL = DT_TERMINAL;
exports.DT_THERMOSTAT = DT_THERMOSTAT;
exports.DT_TOY = DT_TOY;
exports.DT_USB = DT_USB;
exports.DT_USER_OS_RECOG_ENABLED_TYPES = DT_USER_OS_RECOG_ENABLED_TYPES;
exports.DT_VIRTUAL_MACHINE = DT_VIRTUAL_MACHINE;
exports.DT_VOICE_CONTROL = DT_VOICE_CONTROL;
exports.DT_VOIP = DT_VOIP;
exports.DT_VPN = DT_VPN;
exports.DT_WASHER = DT_WASHER;
exports.DT_WATCH = DT_WATCH;
exports.DT_WEARABLE = DT_WEARABLE;
exports.DT_WEATHER = DT_WEATHER;
exports.DT_WEB_SERVER = DT_WEB_SERVER;
exports.DT_WIFI = DT_WIFI;
exports.DT_WIFI_EXTENDER = DT_WIFI_EXTENDER;
exports.DailySpeedHistoryChart = DailySpeedHistoryChart;
exports.DashboardCard = DashboardCard;
exports.DashboardCardBody = DashboardCardBody;
exports.DashboardCardFooter = DashboardCardFooter;
exports.DashboardCol = DashboardCol;
exports.DashboardRow = DashboardRow;
exports.DashboardSection = DashboardSection;
exports.DescriptionCell = DescriptionCell;
exports.DetailHeader = DetailHeader;
exports.DetailImage = DetailImage;
exports.DetailSectionHeader = DetailSectionHeader;
exports.DetailSolution = DetailSolution;
exports.DeviceDetailBanner = DeviceDetailBanner;
exports.DeviceDetailHeader = DeviceDetailHeader;
exports.DeviceDetailIconPickerDialog = DeviceDetailIconPickerDialog;
exports.DeviceDetailTable = DeviceDetailTable;
exports.DeviceDetailTableRow = DeviceDetailTableRow;
exports.DeviceRecognition = DeviceRecognition;
exports.DeviceTypeIcon = DeviceTypeIcon;
exports.DiagnosticEditDialog = DiagnosticEditDialog;
exports.DiagnosticHelpDialog = DiagnosticHelpDialog;
exports.DiagnosticMuteDialog = DiagnosticMuteDialog;
exports.DiagnosticReportView = DiagnosticReportView;
exports.DiagnosticShareDialog = DiagnosticShareDialog;
exports.DiscountRightArrow = DiscountRightArrow;
exports.DropdownButton = DropdownButton;
exports.ENGINE_STATE_COMPLETED = ENGINE_STATE_COMPLETED;
exports.ENGINE_STATE_DOWN = ENGINE_STATE_DOWN;
exports.ENGINE_STATE_FAILED = ENGINE_STATE_FAILED;
exports.ENGINE_STATE_INIT = ENGINE_STATE_INIT;
exports.ENGINE_STATE_UP = ENGINE_STATE_UP;
exports.ES_COMPLETED = ES_COMPLETED;
exports.ES_DISCOVERY = ES_DISCOVERY;
exports.ES_FAILED = ES_FAILED;
exports.ES_IDLE = ES_IDLE;
exports.ES_INIT = ES_INIT;
exports.ES_STARTING = ES_STARTING;
exports.ES_STOPPING = ES_STOPPING;
exports.ES_UNAUTHORIZED = ES_UNAUTHORIZED;
exports.EVT_AGENT_CHANGED = EVT_AGENT_CHANGED;
exports.EVT_BANDWIDTH_HOG = EVT_BANDWIDTH_HOG;
exports.EVT_DEVICE_BLOCK = EVT_DEVICE_BLOCK;
exports.EVT_DEVICE_CHANGE = EVT_DEVICE_CHANGE;
exports.EVT_DHCP_OUTAGE = EVT_DHCP_OUTAGE;
exports.EVT_GATEWAY_CHANGED = EVT_GATEWAY_CHANGED;
exports.EVT_HACKER_THREAT_CHECK = EVT_HACKER_THREAT_CHECK;
exports.EVT_HEARTBEAT = EVT_HEARTBEAT;
exports.EVT_IF_CONFIG_CHANGED = EVT_IF_CONFIG_CHANGED;
exports.EVT_INTERNET_CHANGED = EVT_INTERNET_CHANGED;
exports.EVT_INTERNET_OUTAGE = EVT_INTERNET_OUTAGE;
exports.EVT_INTERNET_SPEED_TEST = EVT_INTERNET_SPEED_TEST;
exports.EVT_INTERNET_TROUBLESHOOTING = EVT_INTERNET_TROUBLESHOOTING;
exports.EVT_WIFI_DEAUTH_ATTACK = EVT_WIFI_DEAUTH_ATTACK;
exports.EVT_WIFI_EVIL_TWIN = EVT_WIFI_EVIL_TWIN;
exports.EVT_WIFI_NEW_BSSID = EVT_WIFI_NEW_BSSID;
exports.EVT_WIFI_RADIO_MONITOR = EVT_WIFI_RADIO_MONITOR;
exports.EVT_WIFI_SWEET_SPOT = EVT_WIFI_SWEET_SPOT;
exports.EditDeviceDialog = EditDeviceDialog;
exports.EmptyState = EmptyState;
exports.EmptyStateSection = EmptyStateSection;
exports.ExpandableCell = ExpandableCell;
exports.FACEBOOK = FACEBOOK;
exports.FeedbackBanner = FeedbackBanner;
exports.FindHiddenCameraCard = FindHiddenCameraCard;
exports.GEN_ALL_TYPES = GEN_ALL_TYPES;
exports.GEN_BADGE = GEN_BADGE;
exports.GEN_DOWN = GEN_DOWN;
exports.GEN_FLAG = GEN_FLAG;
exports.GEN_FLAG_OUT = GEN_FLAG_OUT;
exports.GEN_INFO = GEN_INFO;
exports.GEN_LOCATION = GEN_LOCATION;
exports.GEN_QUESTION = GEN_QUESTION;
exports.GEN_QUESTION_CIRCLE = GEN_QUESTION_CIRCLE;
exports.GEN_TREND_DOWN = GEN_TREND_DOWN;
exports.GEN_TREND_FLAT = GEN_TREND_FLAT;
exports.GEN_TREND_UP = GEN_TREND_UP;
exports.GEN_UP = GEN_UP;
exports.GND_FEMALE = GND_FEMALE;
exports.GND_MALE = GND_MALE;
exports.GenericIcon = GenericIcon;
exports.HC_IMAGE_TYPE_CDN = HC_IMAGE_TYPE_CDN;
exports.HC_IMAGE_TYPE_CONTEXT_ICON = HC_IMAGE_TYPE_CONTEXT_ICON;
exports.HC_IMAGE_TYPE_DEVICE_ICON = HC_IMAGE_TYPE_DEVICE_ICON;
exports.HC_IMAGE_TYPE_FONTAWESOME = HC_IMAGE_TYPE_FONTAWESOME;
exports.HC_IMAGE_TYPE_NETWORK_ICON = HC_IMAGE_TYPE_NETWORK_ICON;
exports.HC_SEGMENT_INTERNET = HC_SEGMENT_INTERNET;
exports.HC_SEGMENT_LOCAL = HC_SEGMENT_LOCAL;
exports.HC_SEGMENT_NETWORK = HC_SEGMENT_NETWORK;
exports.HC_SEGMENT_VIRTUAL = HC_SEGMENT_VIRTUAL;
exports.HC_STATES_GOOD = HC_STATES_GOOD;
exports.HC_STATE_FAIL = HC_STATE_FAIL;
exports.HC_STATE_INFO = HC_STATE_INFO;
exports.HC_STATE_OK = HC_STATE_OK;
exports.HC_STATE_SKIP = HC_STATE_SKIP;
exports.HC_STATE_WARN = HC_STATE_WARN;
exports.HC_VIRTUAL_GATEWAY = HC_VIRTUAL_GATEWAY;
exports.HC_VIRTUAL_GEO_LOCATION = HC_VIRTUAL_GEO_LOCATION;
exports.HC_VIRTUAL_ISP = HC_VIRTUAL_ISP;
exports.HC_VIRTUAL_NETWORK = HC_VIRTUAL_NETWORK;
exports.HC_VIRTUAL_NIC_INFO = HC_VIRTUAL_NIC_INFO;
exports.HC_VIRTUAL_SELF = HC_VIRTUAL_SELF;
exports.Header = Header;
exports.HeaderLeftSide = HeaderLeftSide;
exports.HeaderRightSide = HeaderRightSide;
exports.HeaderSubSideAction = HeaderSubSideAction;
exports.HeaderSubSideDetail = HeaderSubSideDetail;
exports.HeaderTrailingSide = HeaderTrailingSide;
exports.HiddenCameraDeviceTable = HiddenCameraDeviceTable;
exports.HiddenCameraDeviceTableRow = HiddenCameraDeviceTableRow;
exports.HiddenCameraResult = HiddenCameraResult;
exports.I6S_ALL_IPV6_SETUPS = I6S_ALL_IPV6_SETUPS;
exports.I6S_INTERNET = I6S_INTERNET;
exports.I6S_LOCAL = I6S_LOCAL;
exports.I6S_NONE = I6S_NONE;
exports.IAMDialog = IAMDialog;
exports.IAMManager = IAMManager;
exports.INSTAGRAM = INSTAGRAM;
exports.InfoPanel = InfoPanel;
exports.InternetAveragePerformanceSection = InternetAveragePerformanceSection;
exports.InternetLastSpeedTestSection = InternetLastSpeedTestSection;
exports.InternetScoreBoard = InternetScoreBoard;
exports.InternetScoreSection = InternetScoreSection;
exports.InternetTimeline = InternetTimeline;
exports.InternetTimelineTable = InternetTimelineTable;
exports.InternetTimelineTableRow = InternetTimelineTableRow;
exports.InternetTrendSection = InternetTrendSection;
exports.LINKEDIN = LINKEDIN;
exports.LastSpeedTestSection = LastSpeedTestSection;
exports.LinkCard = LinkCard;
exports.LinkCell = LinkCell;
exports.MS_FIVE_WEEK = MS_FIVE_WEEK;
exports.MS_ONE_DAY = MS_ONE_DAY;
exports.MS_ONE_HOUR = MS_ONE_HOUR;
exports.MS_ONE_MINUTE = MS_ONE_MINUTE;
exports.MS_ONE_MONTH = MS_ONE_MONTH;
exports.MS_ONE_WEEK = MS_ONE_WEEK;
exports.MS_ONE_YEAR = MS_ONE_YEAR;
exports.ManageNotificationCard = ManageNotificationCard;
exports.MetricCard = MetricCard;
exports.ModalDialog = ModalDialog;
exports.ModalDialogBody = ModalDialogBody;
exports.ModalDialogFooter = ModalDialogFooter;
exports.ModalDialogInfoNote = ModalDialogInfoNote;
exports.ModalSidebar = ModalSidebar;
exports.ModalSidebarBody = ModalSidebarBody;
exports.ModalSidebarFooter = ModalSidebarFooter;
exports.NC_ALL_TYPES = NC_ALL_TYPES;
exports.NC_HOME = NC_HOME;
exports.NC_OFFICE = NC_OFFICE;
exports.NC_PUBLIC = NC_PUBLIC;
exports.NC_RENTAL = NC_RENTAL;
exports.NKT_ALL_TYPES = NKT_ALL_TYPES;
exports.NKT_HWADDRESS = NKT_HWADDRESS;
exports.NKT_IPADDRESS = NKT_IPADDRESS;
exports.NS_ALL_TYPES = NS_ALL_TYPES;
exports.NS_DOWN = NS_DOWN;
exports.NS_IN_RANGE = NS_IN_RANGE;
exports.NS_NEW = NS_NEW;
exports.NS_NEW_BLOCKED = NS_NEW_BLOCKED;
exports.NS_UP = NS_UP;
exports.NT_ALL_TYPES = NT_ALL_TYPES;
exports.NT_ETHERNET = NT_ETHERNET;
exports.NT_ETH_USB = NT_ETH_USB;
exports.NT_ETH_WIFI = NT_ETH_WIFI;
exports.NT_FINGBOX_V1 = NT_FINGBOX_V1;
exports.NT_FINGBOX_V2 = NT_FINGBOX_V2;
exports.NT_IP = NT_IP;
exports.NT_WIFI = NT_WIFI;
exports.NavigationBar = NavigationBar;
exports.NetEvent = NetEvent;
exports.NetEventChangeState = NetEventChangeState;
exports.NetEventDeviceBlock = NetEventDeviceBlock;
exports.NetEventsHeatmap = NetEventsHeatmap;
exports.NetNode = NetNode;
exports.NetworkContextIcon = NetworkContextIcon;
exports.NetworkContextPicker = NetworkContextPicker;
exports.NetworkTimeline = NetworkTimeline;
exports.NetworkTimelineTable = NetworkTimelineTable;
exports.NetworkTimelineTableRow = NetworkTimelineTableRow;
exports.NetworkTypeIcon = NetworkTypeIcon;
exports.NotificationAutoBlockCard = NotificationAutoBlockCard;
exports.NotificationCard = NotificationCard;
exports.NotificationDeviceCard = NotificationDeviceCard;
exports.NotificationTimeline = NotificationTimeline;
exports.NotificationTimelineTable = NotificationTimelineTable;
exports.NotificationTimelineTableRow = NotificationTimelineTableRow;
exports.OptionBar = OptionBar;
exports.PB_LG = PB_LG;
exports.PB_MD = PB_MD;
exports.PB_SM = PB_SM;
exports.PB_VISIBLE_ALWAYS = PB_VISIBLE_ALWAYS;
exports.PB_VISIBLE_WHEN_EMPTY = PB_VISIBLE_WHEN_EMPTY;
exports.PB_VISIBLE_WHEN_FULL = PB_VISIBLE_WHEN_FULL;
exports.PB_XS = PB_XS;
exports.PINTEREST = PINTEREST;
exports.POPULAR_TARGET_WEBSITES = POPULAR_TARGET_WEBSITES;
exports.PremiumBadge = PremiumBadge;
exports.PresenceAutoFillDialog = PresenceAutoFillDialog;
exports.PresenceAutoFillTable = PresenceAutoFillTable;
exports.PresenceAvatarStrip = PresenceAvatarStrip;
exports.PresenceConfirmDeleteDialog = PresenceConfirmDeleteDialog;
exports.PresenceProfileEditDialog = PresenceProfileEditDialog;
exports.PresenceTimeline = PresenceTimeline;
exports.PresenceTimelineTable = PresenceTimelineTable;
exports.PresenceTimelineTableRow = PresenceTimelineTableRow;
exports.ProgressBar = ProgressBar;
exports.PromoState = PromoState;
exports.RB_DEFAULT = RB_DEFAULT;
exports.RB_LARGE = RB_LARGE;
exports.RB_SMALL = RB_SMALL;
exports.RB_TINY = RB_TINY;
exports.RTI_BOLT = RTI_BOLT;
exports.RTI_DOT = RTI_DOT;
exports.RTI_EMPTY = RTI_EMPTY;
exports.RTI_FULL = RTI_FULL;
exports.RTI_HALF = RTI_HALF;
exports.RTI_HEART = RTI_HEART;
exports.RTI_STAR = RTI_STAR;
exports.RatingBar = RatingBar;
exports.RatingComment = RatingComment;
exports.RatingEditDialog = RatingEditDialog;
exports.RatingTypeIcon = RatingTypeIcon;
exports.RefreshButton = RefreshButton;
exports.RevertBanner = RevertBanner;
exports.RouterDeviceInfoPanel = RouterDeviceInfoPanel;
exports.RouterPortMappingTable = RouterPortMappingTable;
exports.RouterSetupInfoPanel = RouterSetupInfoPanel;
exports.RouterVulnerabilityCard = RouterVulnerabilityCard;
exports.SCB_TYPE_PRIMARY = SCB_TYPE_PRIMARY;
exports.SCB_TYPE_SECONDARY = SCB_TYPE_SECONDARY;
exports.SCB_TYPE_WARNING = SCB_TYPE_WARNING;
exports.SCRD_STATUS_FAIL = SCRD_STATUS_FAIL;
exports.SCRD_STATUS_INACTIVE = SCRD_STATUS_INACTIVE;
exports.SCRD_STATUS_OK = SCRD_STATUS_OK;
exports.SCRD_STATUS_WARN = SCRD_STATUS_WARN;
exports.SC_DIM_DEFAULT = SC_DIM_DEFAULT;
exports.SC_DIM_LARGE = SC_DIM_LARGE;
exports.SC_DIM_SMALL = SC_DIM_SMALL;
exports.SI_ALL_TYPES = SI_ALL_TYPES;
exports.SI_FACEBOOK = SI_FACEBOOK;
exports.SI_PHONE = SI_PHONE;
exports.SI_SHAPE_CIRCLE = SI_SHAPE_CIRCLE;
exports.SI_SHAPE_INFO = SI_SHAPE_INFO;
exports.SI_SHAPE_SHIELD = SI_SHAPE_SHIELD;
exports.SI_STATUS_ERROR = SI_STATUS_ERROR;
exports.SI_STATUS_SUCCESS = SI_STATUS_SUCCESS;
exports.SI_STATUS_SYNC = SI_STATUS_SYNC;
exports.SI_STATUS_WARNING = SI_STATUS_WARNING;
exports.SI_TWITTER = SI_TWITTER;
exports.SI_WEBSITE = SI_WEBSITE;
exports.ScheduleHoursDialog = ScheduleHoursDialog;
exports.ScheduleVulnerabilityTestDialog = ScheduleVulnerabilityTestDialog;
exports.SecurityCardButton = SecurityCardButton;
exports.SecurityCardButtonGroup = SecurityCardButtonGroup;
exports.SecurityDeviceToggleDialog = SecurityDeviceToggleDialog;
exports.SegmentedBar = SegmentedBar;
exports.SegmentedChart = SegmentedChart;
exports.SegmentedChartCell = SegmentedChartCell;
exports.SendReportDialog = SendReportDialog;
exports.SideBanner = SideBanner;
exports.SolutionBadge = SolutionBadge;
exports.SpeedTestAchievementTable = SpeedTestAchievementTable;
exports.SpeedTestContactSupport = SpeedTestContactSupport;
exports.SpeedTestDonuts = SpeedTestDonuts;
exports.SpeedTestIspCard = SpeedTestIspCard;
exports.SpeedTestPerformance = SpeedTestPerformance;
exports.SpeedTestResult = SpeedTestResult;
exports.SpeedTestSentimentDistribution = SpeedTestSentimentDistribution;
exports.SpeedTestStats = SpeedTestStats;
exports.StatusBadge = StatusBadge;
exports.StatusIcon = StatusIcon;
exports.SummaryCard = SummaryCard;
exports.SummaryCardBody = SummaryCardBody;
exports.SummaryCardFooter = SummaryCardFooter;
exports.SummaryColLeft = SummaryColLeft;
exports.SummaryColRight = SummaryColRight;
exports.SummaryInternetScore = SummaryInternetScore;
exports.SummaryRow = SummaryRow;
exports.SummaryRowWithCards = SummaryRowWithCards;
exports.SummarySection = SummarySection;
exports.SummarySecurityScore = SummarySecurityScore;
exports.SummaryTitle = SummaryTitle;
exports.TIKTOK = TIKTOK;
exports.TIME_DISTANCE_14D = TIME_DISTANCE_14D;
exports.TIME_DISTANCE_21D = TIME_DISTANCE_21D;
exports.TIME_DISTANCE_7D = TIME_DISTANCE_7D;
exports.TIME_DISTANCE_OLDER = TIME_DISTANCE_OLDER;
exports.TIME_DISTANCE_TODAY = TIME_DISTANCE_TODAY;
exports.TIME_DISTANCE_YESTERDAY = TIME_DISTANCE_YESTERDAY;
exports.TINT_DANGER = TINT_DANGER;
exports.TINT_DARK = TINT_DARK;
exports.TINT_INDIGO = TINT_INDIGO;
exports.TINT_LIGHT = TINT_LIGHT;
exports.TINT_NAVY = TINT_NAVY;
exports.TINT_PINK = TINT_PINK;
exports.TINT_PRIMARY = TINT_PRIMARY;
exports.TINT_PURPLE = TINT_PURPLE;
exports.TINT_SECONDARY = TINT_SECONDARY;
exports.TINT_SUCCESS = TINT_SUCCESS;
exports.TINT_WARNING = TINT_WARNING;
exports.TINT_WHITE = TINT_WHITE;
exports.TI_ALL_TYPES = TI_ALL_TYPES;
exports.TI_DOWN = TI_DOWN;
exports.TI_DOWN_FAST = TI_DOWN_FAST;
exports.TI_UP = TI_UP;
exports.TI_UP_FAST = TI_UP_FAST;
exports.TOOL_ALL_TYPES = TOOL_ALL_TYPES;
exports.TOOL_BLOCK = TOOL_BLOCK;
exports.TOOL_CONFIRMED = TOOL_CONFIRMED;
exports.TOOL_DHCP_DISCOVERY = TOOL_DHCP_DISCOVERY;
exports.TOOL_DNS_BENCHMARK = TOOL_DNS_BENCHMARK;
exports.TOOL_DNS_LOOKUP = TOOL_DNS_LOOKUP;
exports.TOOL_EXPORT = TOOL_EXPORT;
exports.TOOL_FIND_HIDDEN_CAMERAS = TOOL_FIND_HIDDEN_CAMERAS;
exports.TOOL_FIND_OPEN_PORTS = TOOL_FIND_OPEN_PORTS;
exports.TOOL_ISP_COMPARISON = TOOL_ISP_COMPARISON;
exports.TOOL_MAC_LOOKUP = TOOL_MAC_LOOKUP;
exports.TOOL_OUTAGE_DETECTOR = TOOL_OUTAGE_DETECTOR;
exports.TOOL_PAUSE = TOOL_PAUSE;
exports.TOOL_PING = TOOL_PING;
exports.TOOL_ROUTER_VULNERABILITY_CHECK = TOOL_ROUTER_VULNERABILITY_CHECK;
exports.TOOL_SPEED_TEST = TOOL_SPEED_TEST;
exports.TOOL_TRACEROUTE = TOOL_TRACEROUTE;
exports.TOOL_WAKE_ON_LAN = TOOL_WAKE_ON_LAN;
exports.TOOL_WIFI_SCANNER = TOOL_WIFI_SCANNER;
exports.TOPOLOGY_PUBLICINTERNET = TOPOLOGY_PUBLICINTERNET;
exports.TOPOLOGY_UNKNOWN = TOPOLOGY_UNKNOWN;
exports.TOPOLOGY_WAN = TOPOLOGY_WAN;
exports.TWITTER = TWITTER;
exports.TitleBar = TitleBar;
exports.TitleCell = TitleCell;
exports.ToolCard = ToolCard;
exports.ToolCardAlternative = ToolCardAlternative;
exports.ToolCardColored = ToolCardColored;
exports.ToolCardHorizontal = ToolCardHorizontal;
exports.ToolCardLargeIcon = ToolCardLargeIcon;
exports.ToolCardSmall = ToolCardSmall;
exports.ToolHeader = ToolHeader;
exports.ToolIcon = ToolIcon;
exports.ToolSection = ToolSection;
exports.TrendIcon = TrendIcon;
exports.UnconfirmedDeviceCard = UnconfirmedDeviceCard;
exports.VulnerabilityTestResult = VulnerabilityTestResult;
exports.VulnerabilityTestTimeline = VulnerabilityTestTimeline;
exports.VulnerabilityTestTimelineTable = VulnerabilityTestTimelineTable;
exports.VulnerabilityTestTimelineTableRow = VulnerabilityTestTimelineTableRow;
exports.WakeOnLanDialog = WakeOnLanDialog;
exports.YOUTUBE = YOUTUBE;
exports.aggregateAvailability = aggregateAvailability;
exports.aggregateNetworkAvailability = aggregateNetworkAvailability;
exports.bestIspLocation = bestIspLocation;
exports.bestMakeAndModelAsArray = bestMakeAndModelAsArray;
exports.bestMakeAndModelAsArrayForRouter = bestMakeAndModelAsArrayForRouter;
exports.contactTypeParent = contactTypeParent;
exports.contactTypesMatching = contactTypesMatching;
exports.convertDailySamplesToChartData = convertDailySamplesToChartData;
exports.convertSamplesToDailySamples = convertSamplesToDailySamples;
exports.convertToContactList = convertToContactList;
exports.convertToHiddenCameraResult = convertToHiddenCameraResult;
exports.convertToItemList = convertToItemList;
exports.convertToSpeedTestResult = convertToSpeedTestResult;
exports.convertToVulnerabilityTestResult = convertToVulnerabilityTestResult;
exports.countOnline = countOnline;
exports.currentLocaleUsers24Hours = currentLocaleUsers24Hours;
exports.daysDifferenceBetween = daysDifferenceBetween;
exports.daysDifferenceBetweenUsingTime = daysDifferenceBetweenUsingTime;
exports.daysDifferenceFromNow = daysDifferenceFromNow;
exports.formatAbsoluteDate = formatAbsoluteDate;
exports.formatDuration = formatDuration;
exports.formatHourShort = formatHourShort;
exports.formatRelativeDate = formatRelativeDate;
exports.formatShortAbsoluteDate = formatShortAbsoluteDate;
exports.formatSmartAbsoluteDate = formatSmartAbsoluteDate;
exports.formatSpeed = formatSpeed;
exports.formatTrend = formatTrend;
exports.getAvailableLocales = getAvailableLocales;
exports.getContactHierarchy = getContactHierarchy;
exports.getContactTypeDepth = getContactTypeDepth;
exports.getContactTypeName = getContactTypeName;
exports.getContactTypeParent = getContactTypeParent;
exports.getCountryCode = getCountryCode;
exports.getCountryCode3 = getCountryCode3;
exports.getCountryName = getCountryName;
exports.getCountryObject = getCountryObject;
exports.getCurrentLocale = getCurrentLocale;
exports.getDayName = getDayName;
exports.getDeviceAvailability = getDeviceAvailability;
exports.getIPLocalAddress = getIPLocalAddress;
exports.getJsonCountries = getJsonCountries;
exports.getLocationFromDiscovery = getLocationFromDiscovery;
exports.getNetworkAvailability = getNetworkAvailability;
exports.getOsPrintableVersion = getOsPrintableVersion;
exports.getStatusContact = getStatusContact;
exports.groupEventsByTimeDistance = groupEventsByTimeDistance;
exports.groupOldNotificationsByTimeDistance = groupOldNotificationsByTimeDistance;
exports.hideDialogById = hideDialogById;
exports.isArrayOfStrings = isArrayOfStrings;
exports.isBoolean = isBoolean;
exports.isEmptyArray = isEmptyArray;
exports.isEmptyObject = isEmptyObject;
exports.isEmptyString = isEmptyString;
exports.isInTodayOrYesterday = isInTodayOrYesterday;
exports.isMapOfStrings = isMapOfStrings;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.isTracking = isTracking;
exports.isURL = isURL;
exports.isUndefined = isUndefined;
exports.isWithinDays = isWithinDays;
exports.isWithinDaysString = isWithinDaysString;
exports.markOnline = markOnline;
exports.newContactWithId = newContactWithId;
exports.parseEthernetAnswer = parseEthernetAnswer;
exports.powerToSignalPercentage = powerToSignalPercentage;
exports.rankString = rankString;
exports.rankStringWithLocation = rankStringWithLocation;
exports.renderHiddenCameraDeviceTableHeader = renderHiddenCameraDeviceTableHeader;
exports.renderInternetTimelineTableHeader = renderInternetTimelineTableHeader;
exports.renderNetworkTimelineTableHeader = renderNetworkTimelineTableHeader;
exports.renderNotificationTimelineTableHeader = renderNotificationTimelineTableHeader;
exports.renderPresenceTimelineTableHeader = renderPresenceTimelineTableHeader;
exports.renderRouterPortMappingTableHeader = renderRouterPortMappingTableHeader;
exports.renderVulnerabilityTestTimelineTableHeader = renderVulnerabilityTestTimelineTableHeader;
exports.roundPercentile = roundPercentile;
exports.safeParseBool = safeParseBool;
exports.safeParseEnum = safeParseEnum;
exports.safeParseFloat = safeParseFloat;
exports.safeParseInt = safeParseInt;
exports.showDialogById = showDialogById;
exports.sidebarOptions = sidebarOptions;
exports.standardTimeDistance = standardTimeDistance;
exports.standardTimeDistanceForNotification = standardTimeDistanceForNotification;
