import React, {Component} from "react";
import intl from 'react-intl-universal';

import NavigationBar from "../component/NavigationBar";
import ActionButton, {
    BTN_TINT_DARK,
    BTN_TYPE_GHOST,
    BTN_TYPE_DEFAULT,
    BTN_TINT_PRIMARY
} from '../component/ActionButton';
import DataDeviceDetail from './data/DataDeviceDetail.json';
import DataVulnerabilityTest from "./data/DataVulnerabilityTest.json";
import MockSidebar from "./MockSidebar";
import { convertToVulnerabilityTestResult } from "../view/vulnerabilitytest/VulnerabilityTestLogic";
import RouterDeviceInfoPanel from "../view/vulnerabilitytest/RouterDeviceInfoPanel";
import RouterPortMappingTable from "../view/vulnerabilitytest/RouterPortMappingTable";
import EmptyState from "../component/EmptyState";
import ToolHeader from "../component/ToolHeader";
import StatusIcon, { SI_SHAPE_SHIELD } from "../component/icons/StatusIcon";
import SafePort from "../assets/svg/storyset/safe-port.svg";
import AnalysingRouterImage from "../assets/svg/storyset/analyzing.svg";
import RouterSetupInfoPanel from "../view/vulnerabilitytest/RouterSetupInfoPanel";

export default class MockVulnerabilityTestPage extends Component {

    constructor(props, context) {
        super(props, context);
        this.state = {
            selectionPorts: [],
            hasWebInterface: true,
            item: convertToVulnerabilityTestResult(
                DataVulnerabilityTest.routerVulnerability,
                DataDeviceDetail
            )
        }
    }
    componentDidMount(){
        this.setState({
            selectionPorts: Array(this.state.item.portMappings.length).fill(true)
        })
    }

    render() {
        return (
            <>
                <MockSidebar active="HOME" />
                {this.renderHeader()}
                {this.renderMain()}
            </>
        );
    }

    renderHeader() {
        return <header id="header" className="header header-sticky-top bg-white container-fluid p-2 app-header">
            <NavigationBar
                left={<ActionButton 
                    route="/" 
                    title="Home" 
                    icon='fa-arrow-left'
                    type={BTN_TYPE_GHOST} 
                    tint={BTN_TINT_DARK} 
                    rounded={true}/>}
                right={<ActionButton
                    title={intl.get("generic_refresh")}
                    type={BTN_TYPE_DEFAULT}
                    tint={BTN_TINT_PRIMARY}
                    rounded={true}/>}
                title={"A mock for vulnerability test"}
            />
        </header>
    }

    renderMain() {
        const { item } = this.state;
        let resultState, titleState, subTitleState;
        if (item.isToolRunning()) {
            resultState = "sync";
        } else if ((item.portMappings && item.portMappings.length > 0)) {
            resultState = "danger";
        } else if (item.routerHasUpnpNAT || item.routerHasNatPMP) {
            resultState = "warning";
        } else {
            resultState = "success";
        }
        titleState = intl.get('routercheck_toolresult_'+resultState+'_title');
        subTitleState = intl.get('routercheck_toolresult_'+resultState+'_subtitle');
        return (
            <main className="app-main">
                <div className="container-fluid space-2 px-6">
                    <ToolHeader 
                        title={titleState} 
                        subtitle={subTitleState}
                        action={item.lastUpdate}
                        statusIcon={<StatusIcon shape={SI_SHAPE_SHIELD} status={resultState} />}/>
                    {this.renderTool(item)}
                </div>
            </main>
        )
    }
    renderTool(item){
        if(!item.isToolStopped()){
            return this.renderRunningTool(item)
        }

        return (
            <div className="row my-3">
                <div className="col-lg-5">
                    {this.renderCheckResults(item)}
                </div>
                <div className="col-lg-7">
                    {this.renderPorts(item)}
                </div>
            </div>
        )
    }

    renderRunningTool(item){
        if(item.isToolRunning()) return ''
        
        return (
            <div className="row mt-3 align-items-top">
                <div className="col-lg-8 offset-lg-2">
                    <EmptyState
                        image={AnalysingRouterImage}
                        title={intl.get('routercheck_progress_title')}
                        caption={intl.get('routercheck_progress_caption')}
                        subtitle={intl.get('routercheck_progress_subtitle')}/>
                </div>
            </div>
        );
    }
    renderCheckResults(item) {
        return (
            <>
                <div className="card shadow-none bg-soft-primary mb-3">
                    <div className="card-body">
                        <RouterDeviceInfoPanel router={item} onRouterSelected={(router) => console.log(router.deviceMacAddress)}/>
                    </div>
                    <div className="card-footer bg-transparent">
                        <ActionButton action={() => console.log(item.manualUrl)} title={intl.get('generic_manual')} disabled={!item.manualUrl} className="mr-2"/>
                        <ActionButton action={() => console.log("Web Interface: http://192.168.1.1")} title={intl.get('routercheck_webinterface_link')} disabled={!this.state.hasWebInterface}/>
                    </div>
                </div>
                <div className="card shadow-none bg-soft-primary mb-3">
                    <div className="card-body">
                        <RouterSetupInfoPanel router={item}/>
                    </div>
                </div>
            </>
        );
    }

    renderPorts(item) {
        const onClosePorts = (ports) => {
            let indexes = [];
            ports.forEach((val,idx) => {
                if(val){
                    indexes.push(idx);
                }
            })
            const {selectionPorts} = this.state;
            const data = DataVulnerabilityTest.routerVulnerability;
            data.result.routerInfoAudit.RouterUpnpInfo.portMappings = data.result.routerInfoAudit.RouterUpnpInfo.portMappings.filter((_,idx) => !indexes.includes(idx));
            this.setState({
                selectionPorts: selectionPorts.filter((_, idx) => !indexes.includes(idx)),
                item: convertToVulnerabilityTestResult(data, DataDeviceDetail)
            });
        }
        const onChangePortSelection = (rowId) => {
            const { selectionPorts } = this.state;
            const newSelection = selectionPorts.slice();
            newSelection[rowId] = !newSelection[rowId];
            this.setState({ selectionPorts: newSelection });
        }
        
        return (
            item.portMappings.length > 0 ? 
            <RouterPortMappingTable
                selectionPorts={this.state.selectionPorts}
                onChangePortSelection={rowId => onChangePortSelection(rowId)}
                onClosePorts={ports=>onClosePorts(ports)}
                portMappings={item.portMappings}/> :
            <EmptyState
                title={intl.get('routercheck_emptystate_title')}
                image={SafePort}
                caption={intl.get('routercheck_emptystate_subtitle')}
                subtitle={intl.get('routercheck_emptystate_subtitle')}/>
        );
    }

}


