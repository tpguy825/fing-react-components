import React, {Component} from "react";
import intl from "react-intl-universal";
import PropTypes from 'prop-types';
import {DATE_FORMAT_LONG, DATE_FORMAT_SMART, formatAbsoluteDate, formatRelativeDate} from '../../helpers/DateHelper';
import StatusIcon, {SI_SHAPE_SHIELD} from "../../component/icons/StatusIcon";
import Badge, { BADGE_TINT_PRIMARY } from '../../component/Badge';


export default class VulnerabilityTestTimelineTableRow extends Component {

    extractUpnpInfo(netEvent) {
        return netEvent &&
            netEvent.content &&
            netEvent.content.routerInfoAudit &&
            netEvent.content.routerInfoAudit.RouterUpnpInfo;
    }

    extractNatInfo(netEvent) {
        return netEvent &&
            netEvent.content &&
            netEvent.content.routerInfoAudit &&
            netEvent.content.routerInfoAudit.RouterNatInfo;
    }

    // ----------------------------------------------------------------------------------------------------------

    render() {
        const {netEvent} = this.props;
        return (
            <tr>
                {this.renderState(netEvent)}
                {this.renderTimeCell(netEvent)}
                {this.renderDetails(netEvent)}
                {this.renderOpenPorts(netEvent)}
                {this.renderPortForwarding(netEvent)}
                {this.renderType(netEvent)}
            </tr>
        );
    }

    renderState(netEvent) {
        const natInfo = this.extractNatInfo(netEvent);
        const upnpInfo = this.extractUpnpInfo(netEvent);

        const hasOpenPorts = upnpInfo && upnpInfo.portMappings && upnpInfo.portMappings.length > 0;
        const routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
        const routerHasNatPMP = natInfo && natInfo.extip;

        let state;
        if (hasOpenPorts) {
            state = "danger";
        } else if (routerHasUpnpNAT || routerHasNatPMP) {
            state = "warning";
        } else {
            state = "success";
        }
        return (
            <td data-title={this.headerForColumn(0)}>
                <StatusIcon shape={SI_SHAPE_SHIELD} status={state}/>
            </td>
        )
    }

    renderTimeCell(netEvent) {
        const timestamp = netEvent && netEvent.timestamp;
        const longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
        const smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
        return (
            <td data-title={this.headerForColumn(1)}>
                {timestamp &&
                <>
                    <h5 className="mb-0">{longDate}</h5>
                    <p className="mb-0 small text-secondary">{smartDate}</p>
                </>}
            </td>
        )
    }

    renderDetails(netEvent) {
        const natInfo = this.extractNatInfo(netEvent);
        const upnpInfo = this.extractUpnpInfo(netEvent);

        const hasOpenPorts = upnpInfo && upnpInfo.portMappings && upnpInfo.portMappings.length > 0;
        const routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
        const routerHasNatPMP = natInfo && natInfo.extip;

        let state;
        if (hasOpenPorts) {
            state = "danger";
        } else if (routerHasUpnpNAT || routerHasNatPMP) {
            state = "warning";
        } else {
            state = "success";
        }
        const title = intl.get('routercheck_toolresult_' + state + '_title');
        return (
            <td data-title={this.headerForColumn(2)}>
                <h5 className="mb-0">{title}</h5>
            </td>
        )
    }

    renderOpenPorts(netEvent) {
        const upnpInfo = this.extractUpnpInfo(netEvent);
        const ports =
            upnpInfo &&
            upnpInfo.portMappings &&
            upnpInfo.portMappings.length > 0 ? upnpInfo.portMappings : [];

        return (
            <td data-title={this.headerForColumn(3)}>
                <div>
                    {ports.length > 0 ? React.Children.toArray(
                        ports.map(val => <div className="mr-2">{val.protocol}
                            <small className="ml-1">({val.internalPort} ‚ü∑ {val.externalPort}) </small></div>)
                    ) : intl.get('tooltargetbar_no_open_ports')}
                </div>
            </td>
        )
    }

    renderPortForwarding(netEvent) {
        const natInfo = this.extractNatInfo(netEvent);
        const upnpInfo = this.extractUpnpInfo(netEvent);

        const routerHasUpnpNAT = upnpInfo && upnpInfo.extip;
        const routerHasNatPMP = natInfo && natInfo.extip;

        const portForwardingEnabled = (routerHasUpnpNAT || routerHasNatPMP) ?
                intl.get('generic_enabled') : intl.get('generic_disabled');
        return (
            <td data-title={this.headerForColumn(4)}>
                <h5 className="mb-0">{portForwardingEnabled}</h5>
            </td>
        )
    }

    renderType(netEvent){
        const forced = netEvent && netEvent.content && netEvent.content.forced
        const text = forced === 'true' ? intl.get('generic_manual') : intl.get('generic_auto');
        return (
            <td data-title={intl.get("timeline_table_header_type")}>
                <Badge pill soft tint={BADGE_TINT_PRIMARY} text={text}/>
            </td>
        )
    }

    headerForColumn(idx) {
        if (idx === 0) return intl.get("timeline_table_header_state");
        if (idx === 1) return intl.get("timeline_table_header_when");
        if (idx === 2) return intl.get("timeline_table_header_subject");
        if (idx === 3) return intl.get('tooltargetbar_open_ports');
        if (idx === 4) return intl.get('timeline_table_header_port');
        if (idx === 5) return intl.get('timeline_table_header_type');
        return '';
    }

}

VulnerabilityTestTimelineTableRow.propTypes = {
    netEvent: PropTypes.object,
    onInspect: PropTypes.func,
    onDrillDown: PropTypes.func,
};