import React, { Component } from 'react';
import intl from 'react-intl-universal';
import PropTypes from 'prop-types';
import { TOPOLOGY_PUBLICINTERNET, TOPOLOGY_UNKNOWN, TOPOLOGY_WAN } from './VulnerabilityTestLogic';


export default class RouterSetupInfoPanel extends Component {

    render() {
        const { router } = this.props;

        let portForwardTitle, portForwardDesc;
        let portForwardIconColor = "bg-warning";
        let portForwardIcon = "fa-unlock";

        if (router.routerHasUpnpNAT && router.routerHasNatPMP) {
            portForwardIconColor = "bg-warning";
            portForwardTitle = intl.get('routercheck_unprotectedboth');
            portForwardDesc = intl.get('routercheck_unprotectedboth_description');
        } else if (router.routerHasUpnpNAT) {
            portForwardIconColor = "bg-warning";
            portForwardTitle = intl.get('routercheck_unprotectedupnp');
            portForwardDesc = intl.get('routercheck_unprotectedupnp_description');
        } else if (router.routerHasNatPMP) {
            portForwardIconColor = "bg-warning";
            portForwardTitle = intl.get('routercheck_unprotectednatpmp');
            portForwardDesc = intl.get('routercheck_unprotectednatpmp_description');
        } else {
            portForwardIconColor = "bg-success";
            portForwardIcon = "fa-lock";
            portForwardTitle = intl.get('routercheck_protected');
            portForwardDesc = intl.get('routercheck_protected_description');
        }
        let topologyIcon, topologyTitle, topologyDesc;
        if (router.topology === TOPOLOGY_PUBLICINTERNET) {
            topologyIcon = "fa-globe";
            topologyTitle = intl.get('routercheck_publicip');
            topologyDesc = intl.get('routercheck_publicip_description');
        } else if (router.topology === TOPOLOGY_WAN) {
            topologyIcon = "fa-link";
            topologyTitle = intl.get('routercheck_wan');
            topologyDesc = intl.get('routercheck_wan_description');
        } else if (router.topology === TOPOLOGY_UNKNOWN || !router.topology){
            topologyIcon = "fa-question";
            topologyTitle = intl.get('routercheck_unknown');
            topologyDesc = intl.get('routercheck_unknown_description');
        }
        
        return (
            <div>
                <h4 className="card-title mb-2">
                    {intl.get('routercheck_your_setup_title')}
                </h4>
                <div className="row">
                    <div className="col-lg-2 mt-1">
                        <span className={"avatar avatar-circle " + portForwardIconColor + " text-center"}>
                            <span className={"text-white py-3 fa fa-fw " + portForwardIcon} />
                        </span>
                    </div>
                    <div className="col-lg-10">
                        <h6 className="d-block text-charcoal mt-2">{portForwardTitle}</h6>
                        <span className="d-block text-secondary small">{portForwardDesc}</span>
                    </div>
                </div>
                <div className="row">
                    <div className="col-lg-2 mt-1">
                        <span className={"avatar avatar-circle bg-soft-secondary text-center"}>
                            <span className={"text-white py-3 fa fa-fw " + topologyIcon} />
                        </span>
                    </div>
                    <div className="col-lg-10">
                        <h6 className="d-block text-charcoal mt-2">{topologyTitle}</h6>
                        <span className="d-block text-secondary small">{topologyDesc}</span>
                        <span className="d-block text-secondary small mt-2">{router.topologyAddress}</span>
                    </div>
                </div>
            </div>
        );
    }
}

RouterSetupInfoPanel.propTypes = {
    router: PropTypes.object
};
