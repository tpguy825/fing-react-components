/**
 * Created by marco on 17/11/2019.
 *
 * (C) Copyright Fing
 */

import React, {PureComponent} from 'react';
import {bestMakeAndModelAsArray, bestMakeAndModelAsArrayForRouter} from '../../helpers/RecogHelper';
import PropTypes from 'prop-types';
import intl from 'react-intl-universal';
import DeviceTypeIcon from '../../component/icons/DeviceTypeIcon';
import ActionButton, {BTN_TINT_PRIMARY, BTN_TYPE_OUTLINE} from '../../component/ActionButton';
import { DATE_FORMAT_LONG, DATE_FORMAT_SMART, formatAbsoluteDate, formatRelativeDate } from '../../helpers/DateHelper';
import {DT_GENERIC} from "../../model/Constants";
import {getDeviceTypeCaption} from "../../helpers/DeviceHelper";
import Badge, { BADGE_TINT_PRIMARY } from '../../component/Badge';

export default class RouterPortMappingTableRow extends PureComponent {

    constructor(props, context) {
        super(props, context);
        this.onChangePortSelection = this.onChangePortSelection.bind(this);
    }

    onChangePortSelection(rowId) {
        if (this.props.onChangePortSelection) {
            this.props.onChangePortSelection(rowId);
        }
    }

    render() {
        const {selectionPorts, service, index} = this.props;
        const isSelected = selectionPorts && index < selectionPorts.length ? selectionPorts[index] : false;

        return (
            <tr key={"port_row_" + index}>
                <td style={{width: "2rem"}}>
                    <input
                        key={"port_checkbox_" + index}
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => this.onChangePortSelection(index)}/>
                </td>
                
                {this.renderDevice(service)}
                {this.renderDescription(service)}
                {this.renderPorts(service)}
                {this.renderType(service)}
                {this.renderFirstSeenTime(service)}
            </tr>
        );
    }

    renderFirstSeenTime(service){
        const timestamp = service && service.firstSeenTime;
        const longDate = formatAbsoluteDate(timestamp, DATE_FORMAT_LONG);
        const smartDate = formatRelativeDate(timestamp, DATE_FORMAT_SMART);
        return (
            <td>
                {timestamp &&
                <>
                    <h5 className="mb-0">{longDate}</h5>
                    <p className="mb-0 small text-secondary">{smartDate}</p>
                </>}
            </td>
        )
    }

    renderDescription(service){
        return (
            <td>
                <span>{service.description}</span>        
            </td>
        )
    }

    renderDevice(service){
        const deviceType = service.device ? service.device.type : DT_GENERIC;
        const deviceName = service.device && service.device.name ?
            service.device.name : getDeviceTypeCaption(deviceType);
        const deviceMakeAndModel = service.device ? bestMakeAndModelAsArrayForRouter(service.device) : [];

        return (
            <td>
                <div className="d-flex align-items-start">
                    <DeviceTypeIcon className="mx-2" type={deviceType}/>
                    <div className="flex-grow-1">
                        <span className="d-block">{deviceName}</span>
                        <div>
                            {
                                deviceMakeAndModel && deviceMakeAndModel.length >= 2 &&
                                <span className="small text-secondary">
                                    {deviceMakeAndModel[0]} â€¢ {deviceMakeAndModel[1]}
                                </span>
                            }
                            {
                                deviceMakeAndModel && deviceMakeAndModel.length === 1 &&
                                <span className="small text-secondary ml-2">
                                    {deviceMakeAndModel[0]}
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </td>
        )
    }

    renderPorts(service){
        const intPort = Number(service.internalPort);
        const extPort = Number(service.externalPort);
        return (
            <td>
                <div className="row">
                    <div className="col-12">
                        {intl.get('routercheck_port_protocol')} 
                        <span className="text-dark ml-2">
                            {service.protocol}
                        </span>
                    </div>
                    <div className="col-12 small d-flex">
                        {intl.get('routercheck_port_internal')} 
                        <Badge soft tint={BADGE_TINT_PRIMARY} className="ml-2" text={intPort}/> 
                        
                    </div>
                    <div className="col-12 small d-flex">
                        {intl.get('routercheck_port_external')} 
                        <Badge soft tint={BADGE_TINT_PRIMARY} className="ml-2" text={extPort}/>
                        
                    </div>
                    
                </div>
            </td>
        )
    }

    renderType(service){
        return (
            <td style={{width: "3rem"}}>
                <span className={service.enabled === 'true' ? "fa fa-fw fa-check" : "fa fa-fw fa-times"}/>
            </td>
        )
    }

}

RouterPortMappingTableRow.propTypes = {
    service: PropTypes.object, 
    index: PropTypes.number,
    selectionPorts: PropTypes.array,
    onChangePortSelection: PropTypes.func
};