
import React from 'react';
import PropTypes from 'prop-types';
import intl from "react-intl-universal";
import { convertToVulnerabilityTestResult } from '../vulnerabilitytest/VulnerabilityTestLogic';
import { ES_COMPLETED, SCRD_STATUS_FAIL, SCRD_STATUS_INACTIVE, SCRD_STATUS_OK, SCRD_STATUS_WARN } from '../../model/Constants';
import SecurityCardButton from './SecurityCardButton';
import SecurityCard from './SecurityCard';
import SecurityCardController from './SecurityCardController';
import { SI_STATUS_SYNC } from '../../component/icons/StatusIcon';

export default class RouterVulnerabilityCard extends SecurityCardController {

    constructor(props) {
        super(props);
        this.onClickRouterVulnerability = this.onClickRouterVulnerability.bind(this);
    }

    onClickRouterVulnerability() {
        if (this.props.onClickRouterVulnerability) {
            this.props.onClickRouterVulnerability();
        }
    }

    computeCardStatus() {
        const { discovery, running, enabled } = this.props;

        let cardStatus;
        
        if (!enabled) {
            cardStatus = SCRD_STATUS_WARN;
        } else if (discovery && !discovery.lastvulnerabilitytest) {
            cardStatus = SCRD_STATUS_WARN;
        } else {
            const toolWrapper = {
                result: discovery && discovery.lastvulnerabilitytest,
                tool_state: ES_COMPLETED
            };

            const item = discovery && discovery.lastvulnerabilitytest ? convertToVulnerabilityTestResult(toolWrapper) : {};
            
            if (running || item.isToolRunning()) {
                cardStatus = SCRD_STATUS_WARN;
            } else if (item.portMappings && item.portMappings.length > 0) {
                cardStatus = SCRD_STATUS_FAIL;
            } else if (item.routerHasUpnpNAT || item.routerHasNatPMP) {
                cardStatus = SCRD_STATUS_WARN;
            } else {
                cardStatus = SCRD_STATUS_OK;
            }
        }

        return cardStatus;
    }

    renderCard() {
        const { discovery, enabled } = this.props;

        if (!discovery) {
            return null;
        }

        const cardStatus = this.getCardStatus();
        const { title, subtitle, icon } = this.getTexts(cardStatus);

        return <SecurityCard hasBadge 
            status={cardStatus} 
            title={title} 
            subtitle={subtitle} 
            icon={icon}
        >
            <SecurityCardButton 
                action={this.onClickRouterVulnerability}
                title={intl.get('generic_see_result')}
                disabled={!enabled}
            />
        </SecurityCard>;
    }

    getTexts(cardStatus) {
        const { discovery, running } = this.props;

        let title;
        let subtitle;
        let icon;

        if (cardStatus === SCRD_STATUS_INACTIVE) {
            title = intl.get('routercheck_premium_title');
            subtitle = intl.get('routercheck_premium_subtitle');
        } else if (discovery && !discovery.lastvulnerabilitytest) {
            title = intl.get('routercheck_never_title');
            subtitle = intl.get('routercheck_premium_subtitle');
        } else {
            const toolWrapper = {
                result: discovery && discovery.lastvulnerabilitytest,
                tool_state: ES_COMPLETED
            }

            const item = discovery && discovery.lastvulnerabilitytest ? convertToVulnerabilityTestResult(toolWrapper) : {};

            if (running || item.isToolRunning()) {
                icon = SI_STATUS_SYNC;
                title = intl.get("routercheck_toolresult_sync_title");
                subtitle = intl.get("routercheck_toolresult_sync_subtitle");
            } else if (item.portMappings && item.portMappings.length > 0) {
                title = intl.get("routercheck_toolresult_danger_title");
                subtitle = intl.get("routercheck_toolresult_danger_subtitle");
            } else if (item.routerHasUpnpNAT || item.routerHasNatPMP) {
                title = intl.get("routercheck_toolresult_warning_title");
                subtitle = intl.get("routercheck_toolresult_warning_subtitle");
            } else {
                title = intl.get("routercheck_toolresult_success_title");
                subtitle = intl.get("routercheck_toolresult_success_subtitle");
            }
        }

        return {
            title,
            subtitle,
            icon
        };
    }
}

RouterVulnerabilityCard.propTypes = {
    enabled: PropTypes.bool,
    discovery: PropTypes.object, 
    onClickRouterVulnerability: PropTypes.func,
    running: PropTypes.bool
};
