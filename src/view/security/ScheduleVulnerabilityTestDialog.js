/**
 * Created by marco on 5/1/21.
 *
 * (C) Copyright Fing
 */

import React, {PureComponent} from 'react';
import PropTypes from 'prop-types';
import intl from 'react-intl-universal';
import ModalDialog, { ModalDialogBody } from '../../component/ModalDialog';
import { MS_ONE_DAY, MS_ONE_HOUR } from '../../helpers/DateHelper';
import OptionBar from '../../component/OptionBar';

export default class ScheduleVulnerabilityTestDialog extends PureComponent {

    constructor(props, context) {
        super(props, context);
        this.onCloseDialog = this.onCloseDialog.bind(this);
        this.onOptionSelected = this.onOptionSelected.bind(this);
    }

    getActiveOptionIndex(timeoutValue){
        if (timeoutValue === 0) {
            return 0;
        } else if (timeoutValue === MS_ONE_DAY) {
            return 1;
        } else if (timeoutValue === 2 * MS_ONE_DAY) {
            return 2;
        } else if (timeoutValue === 7 * MS_ONE_DAY) {
            return 3;
        }
        return 4;
    }



    onCloseDialog() {
        if (this.props.onClose) {
            this.props.onClose();
        }
    }

    onOptionSelected(index){
        const {network} = this.props;
        let delay = 0;
        if (index === 1) {
            delay = MS_ONE_DAY;
        } else if (index === 2) {
            delay = 2 * MS_ONE_DAY;
        } else if (index === 3) {
            delay = 7 * MS_ONE_DAY;
        }
        let newNetwork = Object.assign({}, network);
        newNetwork.autoHtcScheduleConfig = {
            delaySinceLastExecution: String(delay)
        }
        this.props.onOptionSelected(newNetwork);
    }

    // --------------------------------------------------------------------------------
    
    render(){
        const {network, id, delay} = this.props;
        const config = network && network.autohtcconfig ? network.autohtcconfig : null;
        
        let customDurationLabel = null;
        if(config){
            const preselectedValues = [0, MS_ONE_DAY, MS_ONE_DAY * 2, MS_ONE_DAY * 7];
            const currentValue = Number(delay);
            if (!preselectedValues.includes(currentValue)) {
                if (currentValue < MS_ONE_DAY) {
                    customDurationLabel = intl.get('every_hour',{num: currentValue / MS_ONE_HOUR})
                } else {
                    customDurationLabel = intl.get('every_day',{num: currentValue / MS_ONE_DAY})
                }
            }
            
        }
        const options = [
            <small>{intl.get('generic_disabled')}</small>,
            <small>{intl.get('every_day',{num:1})}</small>,
            <small>{intl.get('every_day',{num:2})}</small>,
            <small>{intl.get('every_day',{num:7})}</small>
        ]
        if(customDurationLabel){
            options.push(
                <small>Custom ({customDurationLabel})</small>
            )
        }

        return <ModalDialog 
            id={id} 
            title={intl.get('routercheck_title_schedule_dialog')} 
            size={"modal-sm"} 
            onClose={this.onCloseDialog}>
            <ModalDialogBody>
                <OptionBar 
                    onOptionSelected={this.onOptionSelected}
                    className="w-60 mx-auto"
                    vertical={true}
                    activeIndex={this.getActiveOptionIndex(delay)}>
                    {React.Children.toArray(options)}
                </OptionBar>
            </ModalDialogBody>
        </ModalDialog>
        
    }
}

ScheduleVulnerabilityTestDialog.propTypes = {
    delay: PropTypes.any,
    onOptionSelected: PropTypes.func,
    onClose: PropTypes.func,
    network: PropTypes.object,
    id: PropTypes.string
};