
import React from 'react';
import PropTypes from 'prop-types';
import intl from "react-intl-universal";
import { MS_ONE_DAY, MS_ONE_HOUR } from '../../helpers/DateHelper';
import SecurityCardButton, { SCB_TYPE_SECONDARY } from './SecurityCardButton';
import { SCRD_STATUS_WARN, SCRD_STATUS_OK, SCRD_STATUS_INACTIVE } from '../../model/Constants';
import SecurityCard from './SecurityCard';
import SecurityCardController from './SecurityCardController';

export default class AutomatedVulnerabilityCard extends SecurityCardController {
    constructor(props) {
        super(props);
        this.onScheduleClick = this.onScheduleClick.bind(this);
    }

    onScheduleClick() {
        if (this.props.onScheduleClick) {
            this.props.onScheduleClick();
        }
    }

    getActiveOptionIndex(config) {
        const timeoutValue = config ? Number(config.delaysincelastexecution) : 0;

        if (timeoutValue === 0) {
            return 0;
        } else if (timeoutValue === MS_ONE_DAY) {
            return 1;
        } else if (timeoutValue === 2 * MS_ONE_DAY) {
            return 2;
        } else if (timeoutValue === 7 * MS_ONE_DAY) {
            return 3;
        }

        return 4;
    }

    computeCardStatus() {
        const { enabled, config } = this.props;

        const activeIndex = this.getActiveOptionIndex(config);

        if (enabled && activeIndex !== 0) {
            return SCRD_STATUS_OK;
        }

        return SCRD_STATUS_WARN;
    }

    renderCard() {
        const { enabled, onClickTimeline, config } = this.props;

        let title = intl.get("security_score_automated_disabled_title");
        const subtitle = intl.get("security_score_automated_subtitle");
        const cardStatus = this.getCardStatus();

        if (cardStatus === SCRD_STATUS_OK) {
            title = intl.get('security_score_automated_enabled_title');
        }
        
        return <SecurityCard hasBadge status={cardStatus} title={title} subtitle={subtitle}>
            <SecurityCardButton 
                type={SCB_TYPE_SECONDARY}
                disabled={!enabled}
                icon="fa-history"
                action={onClickTimeline}
                title={intl.get('view_timeline_button')}/>
            <SecurityCardButton 
                disabled={!enabled}
                icon="fa-calendar"
                title={this.getScheduleLabel(config, enabled)}
                action={this.onScheduleClick}/>
        </SecurityCard>;
    }

    getScheduleLabel(config, enabled) {
        if (config) {
            const timeoutValue = config ? Number(config.delaysincelastexecution) : 0;

            if (timeoutValue === 0 || !enabled) {
                return intl.get('generic_disabled');
            } else if (timeoutValue < MS_ONE_DAY) {
                return intl.get('every_hour', {num: timeoutValue / MS_ONE_HOUR})
            } else {
                return intl.get('every_day', {num: timeoutValue / MS_ONE_DAY})
            }
        }

        return intl.get('generic_disabled');
    }
}

AutomatedVulnerabilityCard.propTypes = {
    onClickTimeline: PropTypes.func,
    onScheduleClick: PropTypes.func,
    activeOption: PropTypes.number,
    enabled: PropTypes.bool, 
    config: PropTypes.object
};
